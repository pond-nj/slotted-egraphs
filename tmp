    Blocking waiting for file lock on build directory
   Compiling slotted-egraphs v0.0.36 (/Users/nutdranaijaruthikorn/Downloads/2025/PhD/Project/slotted-egraphs)
warning: unused variable: `v`
   --> src/parse.rs:197:39
    |
197 |                 NestedSyntaxElem::Vec(v) => todo!(),
    |                                       ^ help: if this is intentional, prefix it with an underscore: `_v`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `slotted-egraphs` (lib) generated 1 warning
warning: ambiguous glob re-exports
  --> tests/entry.rs:17:9
   |
17 | pub use fgh::*;
   |         ^^^^^^ the name `Fgh` in the type namespace is first re-exported here
...
26 | pub use chc::*;
   |         ------ but the name `Fgh` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: unused import: `fgh::*`
  --> tests/entry.rs:17:9
   |
17 | pub use fgh::*;
   |         ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `chc::*`
  --> tests/entry.rs:26:9
   |
26 | pub use chc::*;
   |         ^^^^^^

warning: `slotted-egraphs` (lib test) generated 1 warning (1 duplicate)
warning: `slotted-egraphs` (test "entry") generated 3 warnings (run `cargo fix --test "entry"` to apply 2 suggestions)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 3.14s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-a75c009adbc8746d)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-b511166c17875f13)

running 8 tests

s = "(add 2 (mul 2 3))"
tokenize: ret = [LParen, Ident("add
s = "a"
"), Ident(
s = "(add ?a ?b)"
"2"), LParen
s = "(app (lam $1 ?b) ?t)"
, Ident("mul"
s = "(app (lam $1 ?b) ?t)"
), Ident("2"), Ident("3"), RParen, RParen]

s = "(app (lam $1 ?b) ?t)"
tokenize: ret = [Ident("a
s = "(app (lam $1 ?b) ?t)"
")]
s = "(app (lam $1 ?b) ?t)"

tokenize: ret = [LParenparse_pattern input tok = [LParen, Ident("add"), Ident("2"), LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
, Ident("app"), LParen, Ident("lam")parse_pattern input tok = [Ident("a")]
, Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [Ident("a")]
tokenize: ret = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParensecond case
, PVar(parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
"parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
t"), RParen]
tokenize: ret = [LParenparse_pattern_nosubst input tok = [LParen, Ident("add"), Ident("2"), LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
, Ident("app"), LParen, Ident("lam"), parse_nested_syntax_elem input tok = [Ident("2"), LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
Slot($1), PVar("b"), RParen, PVar("t"parse_pattern input tok = [Ident("2"), LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
), RParen]
parse_pattern_nosubst input tok = [Ident("2"), LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
tokenize: ret = [LParen, Ident("app"), LParen, Ident("lam"), Slotsecond case
($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst ret3 = ENode(Symbol("a"), [])
tokenize: ret = [LParen, Ident(parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
"app"), LParen, Ident("lam"), Slot(parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
$1), PVar("bparse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
"), RParen, PVar("t"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
tokenize: ret = [LParen, Identparse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
("parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), RParen, PVar("t"), RParen]
add"), PVar("parse_nested_syntax_elem ret = Slot($1)
a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("t"), RParen]))
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("t"), RParen]
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Symbol(
        "a",
    ),
    [],
), pat_display = a
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
RecExpr::parse: ret = parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
ENode(Symbol("a"), [])
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("t"), RParen]))
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $1 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("t"), RParen]))
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $1 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $1 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), RParen, PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("t"), RParen]))
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $1 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")]), PVar("t")])
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $1 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")])), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")]), PVar("t")])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (app (lam $1 ?b) ?t)

s = "(let $1 ?b ?t)"
parse_pattern_nosubst ret3 = ENode(Number(2), [])
tokenize: ret = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern pat_struct = ENode(
    Number(
        2,
    ),
    [],
), pat_display = 2
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Number(2), [])), [LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), Ident("2"), Ident("3"), RParen, RParen]
parse_nested_syntax_elem input tok = [Ident("2"), Ident("3"), RParen, RParen]
parse_pattern input tok = [Ident("2"), Ident("3"), RParen, RParen]
parse_pattern_nosubst input tok = [Ident("2"), Ident("3"), RParen, RParen]
second case
parse_pattern_nosubst ret3 = ENode(Number(2), [])
parse_pattern pat_struct = ENode(
    Number(
        2,
    ),
    [],
), pat_display = 2
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Number(2), [])), [Ident("3"), RParen, RParen]))
parse_nested_syntax_elem input tok = [Ident("3"), RParen, RParen]
parse_pattern input tok = [Ident("3"), RParen, RParen]
parse_pattern_nosubst input tok = [Ident("3"), RParen, RParen]
second case
parse_pattern_nosubst ret3 = ENode(Number(3), [])
parse_pattern pat_struct = ENode(
    Number(
        3,
    ),
    [],
), pat_display = 3
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Number(3), [])), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Number(2), []), ENode(Number(3), [])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Number(
                2,
            ),
            [],
        ),
        ENode(
            Number(
                3,
            ),
            [],
        ),
    ],
), pat_display = (mul 2 3)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [ENode(Number(2), []), ENode(Number(3), [])])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "42"
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
tokenize: ret = [Ident("42")]
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (app (lam $1 ?b) ?t)

s = "(let $1 ?b ?t)"
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
tokenize: ret = [LParen, Ident("let"), parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
Slot($parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
1), parse_nested_syntax_elem ret = Slot($1)
PVar("b"), PVar("t")parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
, RParen]parse_pattern input tok = [PVar("b"), PVar("t"), RParen]

parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Number(2), []), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Number(2), []), ENode(Number(3), [])])])
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")]), PVar("t")])
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [Ident("42")]
parse_pattern_nosubst input tok = [Ident("42")]
second case
parse_pattern_nosubst ret3 = ENode(Number(42), [])
parse_pattern pat_struct = ENode(
    Number(
        42,
    ),
    [],
), pat_display = 42
RecExpr::parse: ret = ENode(Number(42), [])
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)

s = "(add ?b ?a)"
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
tokenize: ret = [parse_nested_syntax_elem ret = Slot($1)
LParen, Ident("add"), PVar("b"), parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
PVar("a"), parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")]), PVar("t")])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (app (lam $1 ?b) ?t)

s = "(let $1 ?b ?t)"
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
tokenize: ret = [LParen, Ident("let"), Slot($1), PVar(        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
            ),
            [
"b"), PVar                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "t",
        ),
    ],
("t"), RParen]
), pat_display = (app (lam $1 ?b) ?t)
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [PVar("b")]), PVar("t")])
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])

s = "?a"
tokenize: ret = [PVar("a")]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (let $1 ?b ?t)
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (app (lam $1 ?b) ?t)

s = "(let $1 ?b ?t)"
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
tokenize: ret = [LParen, Ident("let"), Slot($1), PVar(parse_pattern input tok = [PVar("a")]
"bparse_pattern_nosubst input tok = [PVar("a")]
"), parse_pattern_nosubst ret1 = PVar("a")
PVar("t"), RParen]
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = [parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
PVar("b        ENode(
            Number(
                2,
            ),
            [],
        ),
        ENode(
            Mul(
")]
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Number(
                        2,
                    ),
                    [],
                ),
                ENode(
                    Number(
                        3,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (add 2 (mul 2 3))
node = Add(id0, map-[], id0, map-[])
RecExpr::parse: ret = parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
ENode(parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
Add(id0, map-[], id0, map-[]), [ENode(Number(2), []), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Number(2), []), ENode(Number(3), [])])])), pat_display = (add ?b ?a)

node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(mul (var $2) (add (var $0) (var $1)))"

s = "?a"
tokenize: ret = [PVarparse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
("a")]
), pat_display = (let $1 ?b ?t)
tokenize: ret = [LParen, Ident("mul"), LParen, Ident("var"), Slot($
s = "(lam $1 (app ?b (var $1)))"
2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]

tokenize: ret = [LParen, Ident("lam"), Slot($1), LParen, Ident("apps = "(let $1 ?b ?t)"
"parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
), PVar("b"parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
), parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
LParen, Ident("var"), Slot($1)parse_nested_syntax_elem ret = Slot($1)
, parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
RParen, RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
tokenize: ret = [parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
LParen, Ident("let"), Slot($1), PVar(parse_pattern_nosubst ret1 = PVar("b")
"b"), PVar("t"), RParen]
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])

s = "?a"
tokenize: ret = parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
[PVarparse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
("a), pat_display = (let $1 ?b ?t)
")]

s = "(lam $1 (app ?b (var $1)))"

s = "(lam $1 (app ?b (var $1)))"
tokenize: ret = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
syntax_elems_mock = [String("var"), Slot($2)]
tokenize: ret = [LParen, Ident(node = Var($2)
"lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1parse_pattern_nosubst ret2 = ENode(Var($2), [])
), RParen, RParen, RParen]
parse_pattern pat_struct = ENode(
    Var(
        $2,
    ),
    [],
), pat_display = (var $2)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($2), [])), [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_pattern input tok = [PVar("a")]
parse_pattern_nosubst input tok = [PVar("a")]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = [PVar("b")]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (app ?b (var $1))
parse_pattern input tok = [PVar("a")]
parse_pattern_nosubst input tok = [PVar("a")]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = [PVar("b")]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (app ?b (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (let $1 ?b ?t)
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(lam $1 (app ?b (var $1)))"

s = "?a"
tokenize: ret = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar(parse_pattern input tok = [PVar("b")]
"bparse_pattern_nosubst input tok = [PVar("b")]
"), LParen, Ident("var"), Slot($1parse_pattern_nosubst ret1 = PVar("b")
), parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
RParen, RParen, RParen]
node = Add(id0, map-[], id0, map-[])
tokenize: ret = [PVar("a")]
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $0,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $0) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])])
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($2), []), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])])
parse_pattern input tok = [PVar("a")]
parse_pattern_nosubst input tok = [PVar("a")]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = [PVar("b")]
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (lam $1 (app ?b (var $1)))

s = "?b"
tokenize: ret = [PVar("b")]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $2,
            ),
            [],
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (mul (var $2) (add (var $0) (var $1)))
node = App(id0, map-[], id0, map-[])
RecExpr::parse: ret = parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])
ENodeparse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
(Mul(), pat_display = (app ?b (var $1))
id0, map-test arith::const_prop::const_prop_union ... [ok], id0, map-[]), [ENode(Var
($2syntax_elems_mock = [String("var"), Slot($1)]
)parse_pattern input tok = [PVar("b")]
, []), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])])parse_pattern_nosubst input tok = [PVar("b")]

parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])])

s = "(mul (var $2) (add (var $1) (var $0)))"
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
tokenize: ret = [LParen, Ident("mul"), LParen, Ident("var"), Slot($2)parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])])
, RParen, LParen, Ident("add")parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            App(
, LParen, Ident("var"), Slot($                id0, map-[],
1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (lam $1 (app ?b (var $1)))

s = "?b"
tokenize: ret = [node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
PVarparse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
("parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
b")]
), pat_display = (let $1 ?b ?t)

s = "?a"
tokenize: ret = [PVarparse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
("a")]parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]

parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(lam $1 (app ?b (var $1)))"
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
tokenize: ret = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(let $1 ?b ?t)"
syntax_elems_mock = [String("var"), Slot($2)]
tokenize: ret = [LParen, Ident("let"), Slot($1), PVar("b")node = Var($2)
, PVarparse_pattern_nosubst ret2 = ENode(Var($2), [])
("t"), RParen]
parse_pattern pat_struct = ENode(
    Var(
        $2,
    ),
    [],
), pat_display = (var $2)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($2), [])), [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (app ?b (var $1))
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (lam $1 (app ?b (var $1)))

s = "?b"
tokenize: ret = [PVar("b")]
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])])
parse_pattern input tok = [PVar("a")]
parse_pattern_nosubst input tok = [PVar("a")]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = [PVar("b")]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        ENode(
            Var(
                $0,
            ),
            [],
        ),
    ],
), pat_display = (add (var $1) (var $0))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(let $1 ?b ?t)"
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
tokenize: ret = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(let $1 ?b ?t)"
node = Mul(id0, map-[], id0, map-[])
tokenize: ret = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($2), []), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])])
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (let $1 ?b ?t)

s = "?b"
tokenize: ret = [PVar("b")]
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (lam $1 (app ?b (var $1)))

s = "?b"
tokenize: ret = [PVar("bsyntax_elems_mock = [String("var"), Slot($1)]
")node = Var($1)
]
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (app ?b (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($1), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $1, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $1, elem: id0, map-[] }), [ENode(App(id0, map-[], id0, map-[]), [PVar("b"), ENode(Var($1), [])])])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (lam $1 (app ?b (var $1)))

s = "?b"
tokenize: ret = [PVar(parse_pattern pat_struct = ENode(
    Mul(
"b")]
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $2,
            ),
            [],
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (mul (var $2) (add (var $1) (var $0)))
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
RecExpr::parse: ret = parse_pattern_nosubst ret1 = PVar("b")
ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($2), []), ENode(Add(id0, map-[], id0, map-[]), [ENode(parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
Var($1), []), ENode(Var($0), [])])])

s = "?a"
parse_pattern input tok = [PVar("b")]
tokenize: ret = [PVar("a")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(let $1 (var $1) ?e)"
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
tokenize: ret = [LParen, parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
Ident("let"), Slot($parse_pattern pat_struct = ENode(
    Let(
1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (let $1 ?b ?t)

s = "?b"
tokenize: ret = [PVar("b")]

s = "(let $1 ?b ?t)"
parse_pattern input tok = [PVar("a")]
tokenize: ret = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("tparse_pattern_nosubst input tok = [PVar("a")]
"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = [PVar("b")]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
), pat_display = (let $1 ?b ?t)

s = "?b"
tokenize: ret = [PVar(parse_pattern input tok = [PVar("b")]
"b")]
parse_pattern_nosubst input tok = [PVar("b")]
[tests/entry.rs:124:5] &report.stop_reason = Other(
    Reached,
parse_pattern_nosubst ret1 = PVar("b")
)
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(let $1 (var $1) ?e)"
tokenize: ret = [LParennode = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
, Ident("let"), parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
Slot($parse_pattern pat_struct = ENode(
    Let(
1),         Bind {
            slot: $1,
LParen, Ident("var"), Slot($1            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
), ), pat_display = (let $1 ?b ?t)
RParen, 
s = "?b"
PVarparse_nested_syntax_elem ret = Slot($1)
(parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
"e"), RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
tokenize: ret = parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
[PVar("b")]
parse_nested_syntax_elem input tok = [Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)

s = "?a"
tokenize: ret = [PVar("a")]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(let $1 ?b ?t)"
test arith::tst::t6 ... tokenize: ret = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("okt"), RParen]


s = "(let $1 (var $1) ?e)"

s = "(let $1 (var $1) ?e)"
tokenize: ret = [LParen, Ident("let"), Slot($1), LParen, Ident(syntax_elems_mock = [String("var"), Slot($1)]
"var"), Slot($1), RParen, PVar(node = Var($1)
"e"), RParen]
parse_pattern_nosubst ret2 = ENode(Var($1), [])
tokenize: ret = [LParen, Ident("let"), Slot($1parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), LParen, ), pat_display = (var $1)
Ident(parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [PVar("e"), RParen]))
"var"), Slot($1), RParen, PVar("e"), RParen]parse_nested_syntax_elem input tok = [PVar("e"), RParen]

parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Var($1), []), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (var $1) ?e)

s = "?e"
tokenize: ret = parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
[PVar("e")]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("e")]
parse_pattern_nosubst input tok = [PVar("e")]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Var($1), []), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (var $1) ?e)

s = "?e"
tokenize: ret = [PVar("e")]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")

s = "(let $1 (app ?a ?b) ?e)"
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
tokenize: ret = [LParen, Ident("let"), Slot($1), parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("t"), RParen]
LParen, Identparse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("t"), RParen]
("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("t"), RParen]))
parse_nested_syntax_elem input tok = [PVar("t"), RParen]
parse_pattern input tok = [PVar("t"), RParen]
parse_pattern_nosubst input tok = [PVar("t"), RParen]
parse_pattern_nosubst ret1 = PVar("t")
parse_pattern pat_struct = PVar(
    "t",
), pat_display = ?t
parse_nested_syntax_elem ret = Ok((Pattern(PVar("t")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("a")]
parse_pattern_nosubst input tok = [PVar("a")]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
[parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("t")])
PVar(parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "t",
        ),
    ],
"b"), pat_display = (let $1 ?b ?t)
)]
s = "?b"

parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
tokenize: ret = [PVar("b")syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
]parse_pattern input tok = [PVar("e")]

parse_pattern_nosubst input tok = [PVar("e")]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Var($1), []), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (var $1) ?e)

s = "?e"
tokenize: ret = node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
[parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Var($1), []), PVar("e")])
PVar(parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        PVar(
            "e",
        ),
    ],
"e")]
), pat_display = (let $1 (var $1) ?e)

s = "?e"
tokenize: ret = [PVar("e")]parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]

parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(let $1 (app ?a ?b) ?e)"
parse_pattern input tok = [PVar("e")]
parse_pattern_nosubst input tok = [PVar("e")]
parse_pattern_nosubst ret1 = PVar("e")
tokenize: ret = [LParen, Ident("let"), Slot($1), LParen, Ident("app"parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
), PVarnode = App(id0, map-[], id0, map-[])
("parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
a"parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), PVar("b"), RParen, PVar("e"), RParen]
), pat_display = (app ?a ?b)
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (app ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("e")]
parse_pattern_nosubst input tok = [PVar("e")]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(let $1 (app ?a ?b) ?e)"

s = "(let $1 (app ?a ?b) ?e)"
tokenize: ret = [LParen, node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("e")])
tokenize: ret = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (app ?a ?b) ?e)

s = "(app (let $1 ?a ?e) (let $1 ?b ?e))"
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            App(
tokenize: ret = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"                id0, map-[],
), PVar("e"), RParen, LParen, Ident("let"), Slot($                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
1), PVar("b"), PVar("e"), RParen), pat_display = (let $1 (app ?a ?b) ?e)
, RParen]

s = "(app (let $1 ?a ?e) (let $1 ?b ?e))"

s = "?a"
tokenize: ret = [PVar("a")]

tokenize: ret = [LParen, Ident("app"), LParen, Ident(s = "(let $1 (var $1) ?e)"
"let"), Slot($1), PVar("a"), PVar("e"), parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
RParen, parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]

parse_nested_syntax_elem ret = Slot($1)
tokenize: ret = parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
[LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("a")]
parse_pattern_nosubst input tok = [PVar("a")]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

s = "?b"
tokenize: ret = [PVar("b")]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Var($1), []), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (var $1) ?e)

s = "?e"
tokenize: ret = [PVar("e")]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (app ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [PVar("b")]
parse_pattern_nosubst input tok = [PVar("b")]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern input tok = [PVar("e")]
parse_pattern_nosubst input tok = [PVar("e")]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("e")])
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (app ?a ?b) ?e)

s = "(app (let $1 ?a ?e) (let $1 ?b ?e))"
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
tokenize: ret = [parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVarparse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?a ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])), [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (app ?a ?b)
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?a ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])), [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")]), ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]

s = "8"
tokenize: ret = parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("e"), RParen]))
[Ident("8")]
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_nested_syntax_elem input tok = [Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("e")])
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_pattern input tok = [Ident("8")]
parse_pattern_nosubst input tok = [Ident("8")]
second case
parse_pattern_nosubst ret3 = ENode(Number(8), [])
parse_pattern pat_struct = ENode(
    Number(
        8,
    ),
    [],
), pat_display = 8
RecExpr::parse: ret = ENode(
s = "(let $1 (app ?a ?b) ?e)"
Number(8node = App(id0, map-[], id0, map-[])
), [])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")]), ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
tokenize: ret = parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
[LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
), pat_display = (app (let $1 ?a ?e) (let $1 ?b ?e))
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (app ?a ?b) ?e)

s = "(app (let $1 ?a ?e) (let $1 ?b ?e))"
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
tokenize: ret = [LParen, Ident("app        id0, map-[],
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
")                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
, LParen,                 PVar(
                    "e",
                ),
Ident("let"), Slot($1), PVar            ],
        ),
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar                ),
                PVar(
                    "e",
("b"), PVar("e"), RParen, RParen]
                ),
            ],
        ),
    ],
), pat_display = (app (let $1 ?a ?e) (let $1 ?b ?e))
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?a ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])), [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
test arith::const_prop::const_prop ... node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")]), ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
), pat_display = (app (let $1 ?a ?e) (let $1 ?b ?e))

s = "(let $1 (lam $2 ?b) ?e)"
oktokenize: ret = [
LParen
s = "(let $1 (lam $2 ?b) ?e)"
, parse_nested_syntax_elem input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
Ident("let")parse_pattern input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
, Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
tokenize: ret = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(let $1 (lam $2 ?b) ?e)"
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
tokenize: ret = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParenparse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $2 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?a ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])), [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")]), ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $2 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (app ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $2 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    App(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
), pat_display = (app (let $1 ?a ?e) (let $1 ?b ?e))
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(App(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("e")])
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")]), PVar("e")])

s = "(let $1 (lam $2 ?b) ?e)"
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
tokenize: ret = [parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")]), PVar("e")])
LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")]), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            App(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (app ?a ?b) ?e)
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $2,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (lam $2 ?b) ?e)

s = "(lam $2 (let $1 ?b ?e))"
parse_pattern pat_struct = ENode(
    Let(
tokenize: ret = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $2,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (lam $2 ?b) ?e)

s = "(lam $2 (let $1 ?b ?e))"

s = "(app (let $1 ?a ?e) (let $1 ?b ?e))"
tokenize: ret = [LParenparse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
, Identparse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
tokenize: ret = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b")parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
, PVar("e"parse_pattern input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $2 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("app"), LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $2,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (lam $2 ?b) ?e)

s = "(lam $2 (let $1 ?b ?e))"
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
tokenize: ret = [LParen, Ident("lam"parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
)parse_nested_syntax_elem input tok = [Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
, Slot($2), LParen, Ident("let"), Slot($1), PVarparse_nested_syntax_elem ret = Slot($2)
("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
), pat_display = (lam $2 (let $1 ?b ?e))
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
), pat_display = (lam $2 (let $1 ?b ?e))

s = "(add ?a ?b)"
tokenize: ret = [LParen, Ident("add"), 
s = "(add ?a ?b)"
PVarnode = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
("parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
a"), parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
PVar("b"), RParen]
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
tokenize: ret = [            slot: $2,
LParen, Ident(            elem: id0, map-[],
        },
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
"add"), PVar("a"                id0, map-[],
            ),
            [
                PVar(
                    "b",
)                ),
                PVar(
                    "e",
                ),
            ],
        ),
, PVar("b"), RParen]
    ],
), pat_display = (lam $2 (let $1 ?b ?e))
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(add ?a ?b)"
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
tokenize: ret = [parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])
LParen, Ident("add"), PVar("a"), PVar("b"), RParen]parse_pattern pat_struct = ENode(

    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?a ?e)
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")]), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $2,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (lam $2 ?b) ?e)

s = "(lam $2 (let $1 ?b ?e))"
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")])), [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]))
tokenize: ret = [parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
LParen, Ident("lam"), Slot($2), LParen, Ident("let"), parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
Slot($1), PVar(parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
"b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)

s = "(add ?b ?a)"
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
tokenize: ret = [LParen, Ident(parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
"add")parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
, PVar("b"), PVar("parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
a"), RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("app"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = App(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(App(id0, map-[], id0, map-[]), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("a"), PVar("e")]), ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)

s = "(add ?b ?a)"
parse_pattern pat_struct = ENode(
    App(
tokenize: ret = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
), pat_display = (app (let $1 ?a ?e) (let $1 ?b ?e))
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)

s = "(add ?b ?a)"

s = "(let $1 (lam $2 ?b) ?e)"
tokenize: ret = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]parse_pattern input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]

parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
tokenize: ret = [LParen, Ident("let"), Slot($1)parse_nested_syntax_elem input tok = [Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
, LParen, Ident("lamparse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
"), parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
Slot($parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($1), LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
), pat_display = (lam $2 (let $1 ?b ?e))
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (add ?b ?a)
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (add ?b ?a)

s = "(add ?a ?b)"

s = "(add ?a (add ?b ?c))"
tokenize: ret = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
tokenize: ret = [LParen, parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
Identparse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
(parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
"add"), PVar("a"), LParen    "a",
), pat_display = ?a
, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (add ?b ?a)
parse_nested_syntax_elem input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem input tok = [Slot($2), PVar("b"), RParen, PVar("e"), RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("e"), RParen]))
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]

s = "(add ?a (add ?b ?c))"
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
tokenize: ret = [LParen, Ident("add"), PVarparse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
("a"), LParen, Ident("add"parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
), PVarparse_pattern input tok = [PVar("a"), PVar("b"), RParen]
("b"), PVar("parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
c"parse_pattern_nosubst ret1 = PVar("a")
), RParen, RParen]
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(add ?a (add ?b ?c))"
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident("add"), parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
PVarparse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
("a"), LParen, Ident("add"), PVar("b"), PVar("cparse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
"), parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
RParen, RParen]
node = Lam(Bind { slot: $2, elem: id0, map-[] })
parse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])
parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        PVar(
            "b",
        ),
    ],
), pat_display = (lam $2 ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")])), [PVar("e"), RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen]
parse_pattern input tok = [PVar("e"), RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [PVar("b")]), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        ENode(
            Lam(
                Bind {
                    slot: $2,
                    elem: id0, map-[],
                },
            ),
            [
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 (lam $2 ?b) ?e)

s = "(lam $2 (let $1 ?b ?e))"
node = Add(id0, map-[], id0, map-[])
tokenize: ret = [LParenparse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
,         id0, map-[],
    ),
    [
Ident        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
("lam"), Slot($2), LParen), pat_display = (add ?a ?b)
, Ident("let"), Slot($1), PVar("b"parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
), PVar(parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
"e")parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
, RParen, parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
parse_pattern input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("lam"), Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_nested_syntax_elem input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("let"), Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), PVar("b"), PVar("e"), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_nested_syntax_elem input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("e"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("e"), RParen, RParen]
parse_pattern input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("e"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("e")
parse_pattern pat_struct = PVar(
    "e",
), pat_display = ?e
parse_nested_syntax_elem ret = Ok((Pattern(PVar("e")), [RParen, RParen]))
syntax_elems_mock = [String("let"), Slot($1), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])

s = "(add ?b ?a)"
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
tokenize: ret = parse_pattern pat_struct = PVar(
[LParen    "b",
, Ident("), pat_display = ?b
addparse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
"), PVar("b    ),
"    [
), PVar("a"), RParen]
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
node = Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[])
parse_pattern_nosubst ret2 = ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])
parse_pattern pat_struct = ENode(
    Let(
        Bind {
            slot: $1,
            elem: id0, map-[],
        },
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "e",
        ),
    ],
), pat_display = (let $1 ?b ?e)
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])), [RParen]))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))

s = "(add (add ?a ?b) ?c)"
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
tokenize: ret = parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
[LParen, parse_pattern_nosubst input tok = [PVar("a"), RParen]
Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (add ?b ?a)
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])

s = "(add (add ?a ?b) ?c)"
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
tokenize: ret = [parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
LParen, parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b

s = "(add ?a (add ?b ?c))"
syntax_elems_mock = [String("lam"), Slot($2), AppliedId(id0, map-[])]
tokenize: ret = [node = Lam(Bind { slot: $2, elem: id0, map-[] })
LParenparse_pattern_nosubst ret2 = ENode(Lam(Bind { slot: $2, elem: id0, map-[] }), [ENode(Let(Bind { slot: $1, elem: id0, map-[] }, id0, map-[]), [PVar("b"), PVar("e")])])
, Ident("add"parse_pattern pat_struct = ENode(
    Lam(
        Bind {
            slot: $2,
            elem: id0, map-[],
        },
    ),
    [
        ENode(
            Let(
                Bind {
                    slot: $1,
), PVar(                    elem: id0, map-[],
                },
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "e",
                ),
            ],
        ),
    ],
"a"), pat_display = (lam $2 (let $1 ?b ?e))
), LParen, Ident(
s = "(add ?a ?b)"
"add"), PVar("b"), PVar("c")parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
, RParen, RParen]
    [
tokenize: ret = [LParen, Ident("add"),         PVar(
            "a",
        ),
        ENode(
            Add(
PVar("a"), PVar("b"), RParen]
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))

s = "(add (add ?a ?b) ?c)"
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
tokenize: ret = [LParenparse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen]
, Ident("add"), LParen, Ident("add"), PVar("a"parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
), PVar("b"), RParenparse_pattern input tok = [PVar("a"), PVar("b"), RParen]
, PVar(parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
"c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)

s = "(add ?b ?a)"
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add (add ?a ?b) ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(add (add ?a ?b) ?c)"
node = Add(id0, map-[], id0, map-[])
tokenize: ret = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVarparse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
("parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
b"), RParen, PVar("c"    [
        PVar(
            "b",
        ),
), RParen]
        PVar(
            "a",
        ),
    ],
), pat_display = (add ?b ?a)
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))

s = "(add (add ?a ?b) ?c)"
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
tokenize: ret = [LParen, Ident(parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
add"parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
), LParen, Identparse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
("parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
add"parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
), PVar("a"), PVar(parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"b"), RParen, PVar("c")parse_pattern_nosubst ret1 = PVar("a")
, RParen]
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))

s = "(add ?a (add ?b ?c))"
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
tokenize: ret = parse_pattern input tok = [PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
[parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVarparse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
("b"), PVar(parse_pattern_nosubst ret1 = PVar("b")
"c"parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
), RParen, RParen]parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))

syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add (add ?a ?b) ?c)
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add (add ?a ?b) ?c)
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])

s = "(add (add ?a ?b) ?c)"

s = "(add (add ?a ?b) ?c)"
tokenize: ret = parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
[LParenparse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("bparse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
"), RParen, PVar("c                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
")), pat_display = (add (add ?a ?b) ?c)
, RParen
s = "(add ?a (add ?b ?c))"
]
tokenize: ret = [LParen, Ident("add"), PVar("aparse_pattern_nosubst input tok = [PVar("c"), RParen]
"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
tokenize: ret = [LParen, Ident("add"parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
), parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
LParen, Ident("add"), PVar("a"), syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
PVarnode = Add(id0, map-[], id0, map-[])
("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add (add ?a ?b) ?c)
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]

s = "(add (add ?a ?b) ?c)"
tokenize: ret = [LParen, Ident("add"), LParen, Ident("addparse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"), PVar(parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"a"), PVar("b"), RParenparse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
, PVarparse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
(parse_pattern pat_struct = ENode(
    Add(
"c"), RParen]
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))

s = "(mul ?a ?b)"
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
tokenize: ret = [LParen, parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
Ident(parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"mul"parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
), PVar("aparse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
")parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
, PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add (add ?a ?b) ?c)

s = "(add ?a (add ?b ?c))"
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
tokenize: ret = [), pat_display = (add (add ?a ?b) ?c)
LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), 
s = "(add ?a (add ?b ?c))"
PVar("c"), RParen, node = Mul(id0, map-[], id0, map-[])
RParenparse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
]
            "b",
tokenize: ret = [LParen, Ident("add"),         ),
        PVar(
            "c",
        ),
    ],
PVar("a"), ), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
LParensyntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
, node = Add(id0, map-[], id0, map-[])
Ident("add"), PVarparse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
(parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
"b"), PVar("c"), RParen, RParen]
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]

s = "(add (add ?a ?b) ?c)"
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
Ident("add"), LParen, Ident("add"), PVar("a"), PVar(parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
"b"parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), ), pat_display = (mul ?a ?b)
RParen, 
s = "(mul ?b ?a)"
PVar("syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
cparse_pattern_nosubst input tok = [PVar("c"), RParen]
"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
tokenize: ret = [LParen, Ident("mul")syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
, PVar(node = Add(id0, map-[], id0, map-[])
"parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
b"), PVar("a"), RParen]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add (add ?a ?b) ?c)

s = "(add ?a (add ?b ?c))"
tokenize: ret = parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
[LParen, Ident("add"), PVar("a"), LParen, Identparse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
("parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
add"), PVar("b"), PVar("cparse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
")parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
, RParen, RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
node = Add(id0, map-[], id0, map-[])
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])

s = "(mul ?a ?b)"
parse_pattern pat_struct = ENode(
tokenize: ret = [LParen, Ident("mul")    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
, PVar("a"), PVar("b"), RParen]
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add (add ?a ?b) ?c)
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (mul ?b ?a)

s = "(mul ?a (mul ?b ?c))"

s = "(mul ?a ?b)"
tokenize: ret = [LParen, 
s = "(mul ?a ?b)"
Ident("
s = "(add (add ?a ?b) ?c)"
mul"), PVar(parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
"a"), LParen, Ident), pat_display = ?a
("mul"), parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
PVar("b"), PVar(parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
"c"), RParen, RParen]
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
tokenize: ret = parse_pattern pat_struct = ENode(
[    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
LParen), pat_display = (mul ?a ?b)
, Ident
s = "(mul ?b ?a)"
("mul"), PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
[LParen, Ident("mulparse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
")parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
, PVar("a")parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
, PVar(parse_pattern_nosubst ret1 = PVar("a")
"b"), RParen]
parse_pattern pat_struct = PVar(
tokenize: ret = [LParen, Ident("add"), LParen, Ident("add")    "a",
), pat_display = ?a
, PVar("a"), PVar("b"), RParen, parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
PVar(parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
"c"), RParen]parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))

parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
tokenize: ret = parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
[LParen, Ident(parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
"mulsyntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
"node = Mul(id0, map-[], id0, map-[])
)parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
, PVar("b"), PVar("a"), parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
RParen]
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))

s = "(mul (mul ?a ?b) ?c)"
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
tokenize: ret = [LParenparse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
, Ident("mul"), LParen, Ident("mul"), PVarparse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
("a"), PVar("b"), RParenparse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
, PVarparse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
("c"), RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (add ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)

s = "(mul ?b ?a)"
tokenize: ret = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (mul ?b ?a)
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]

s = "(mul ?a (mul ?b ?c))"
node = Mul(id0, map-[], id0, map-[])
tokenize: ret = [parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
LParen, Ident("mul"), PVar("a")parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
, parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
LParen), pat_display = ?b
, Ident("parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
mul")syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
, PVar("b"), PVar("c"), RParen, RParen]node = Mul(id0, map-[], id0, map-[])

parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)

s = "(mul ?b ?a)"
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]

parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (mul ?b ?a)
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))

s = "(mul (mul ?a ?b) ?c)"
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
tokenize: ret = [LParen, Ident("mul"),                 ),
            ],
        ),
        PVar(
            "c",
        ),
LParen, Ident("mul"), PVar("a"    ],
), ), pat_display = (mul (mul ?a ?b) ?c)
PVar
s = "(mul ?a (mul ?b ?c))"
("b"), RParen, PVar("c"), parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
RParen]
), pat_display = (add (add ?a ?b) ?c)
tokenize: ret = [parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
LParen, Ident("mul"parse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
), PVar("a"), LParen, Ident("mul"), PVar("bparse_pattern input tok = [PVar("b"), PVar("a"), RParen]
"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))

s = "(add ?a (add ?b ?c))"
tokenize: ret = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]

s = "(mul (mul ?a ?b) ?c)"
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
tokenize: ret = [LParen, Ident("mul")parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
, LParenparse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
, Identparse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
("parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
mul"), PVar("a"), PVar("b"), RParen, PVarparse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
("c"parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
), parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul (mul ?a ?b) ?c)
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]

s = "(mul (mul ?a ?b) ?c)"
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
tokenize: ret = [LParen, Ident("mul")parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
, LParen, Ident("mul"), parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
PVar("a"), PVar(parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (mul ?b ?a)
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))

s = "(mul ?a (mul ?b ?c))"
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
tokenize: ret = [LParen, parse_pattern input tok = [PVar("c"), RParen, RParen]
Ident("mul"), PVar("a"), LParen, Ident(parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
"mul"), PVar("b"), parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
PVarparse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add ?a (add ?b ?c))
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])

s = "(mul ?a ?b)"
tokenize: ret = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))

s = "(mul (mul ?a ?b) ?c)"
parse_pattern pat_struct = ENode(
tokenize: ret = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("    Mul(
b"), RParen, PVar("c"), RParen]
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul (mul ?a ?b) ?c)
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen]
parse_pattern input tok = [PVar("b"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)

s = "(mul ?b ?a)"
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
tokenize: ret = [parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
LParen, Ident("mulparse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
)parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
, PVar(parse_pattern pat_struct = ENode(
"b"), PVar("a"), RParen]
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))

s = "(mul ?a (mul ?b ?c))"
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul (mul ?a ?b) ?c)

s = "(mul ?a (mul ?b ?c))"
tokenize: ret = [LParen, Ident("mul"), PVarparse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("a"), RParen]

("s = "(mul (mul ?a ?b) ?c)"
a"), LParen, Ident("mul"), PVar("bparse_nested_syntax_elem input tok = [PVar("b"), PVar("a"), RParen]
"), parse_pattern input tok = [PVar("b"), PVar("a"), RParen]
PVar("parse_pattern_nosubst input tok = [PVar("b"), PVar("a"), RParen]
c"parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("a"), RParen]))
parse_nested_syntax_elem input tok = [PVar("a"), RParen]
parse_pattern input tok = [PVar("a"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), RParen]
)parse_pattern_nosubst ret1 = PVar("a")
, parse_pattern pat_struct = PVar(
RParen    "a",
), pat_display = ?a
, parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [RParen]))
RParensyntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
]node = Mul(id0, map-[], id0, map-[])

parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("a")])
parse_pattern_nosubst ret1 = PVar("a")
tokenize: ret = [LParenparse_pattern pat_struct = PVar(
,     "a",
Ident), pat_display = ?a
("mul"parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
), PVar("a"), LParen, Ident("parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
tokenize: ret = parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
[LParen, Ident("mulsyntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
"), LParennode = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
, Ident("mul"), PVar("a"), PVar(parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
"parse_pattern input tok = [PVar("c"), RParen]
bparse_pattern_nosubst input tok = [PVar("c"), RParen]
"parse_pattern_nosubst ret1 = PVar("c")
), RParen, PVarparse_pattern pat_struct = PVar(
("c")    "c",
, RParen]
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "a",
        ),
    ],
), pat_display = (mul ?b ?a)

s = "(mul ?a (mul ?b ?c))"
tokenize: ret = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVarparse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
("b"), PVar("c")parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
, parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul (mul ?a ?b) ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))

s = "(mul (mul ?a ?b) ?c)"
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
tokenize: ret = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(mul (mul ?a ?b) ?c)"
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
tokenize: ret = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])

s = "(mul ?a (add ?b ?c))"
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
tokenize: ret =                 id0, map-[],
            ),
            [
                PVar(
                    "a",
[LParen, Ident("mul"),                 ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
PVar), pat_display = (mul (mul ?a ?b) ?c)
("a"), LParen, Ident("
s = "(mul (mul ?a ?b) ?c)"
add"), PVar("b"), PVar("c"), RParen, RParen]
node = Mul(id0, map-[], id0, map-[])
tokenize: ret = [LParen, Ident("mulparse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul (mul ?a ?b) ?c)
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(mul ?a (add ?b ?c))"

s = "(mul (mul ?a ?b) ?c)"
tokenize: ret = [LParen, Identparse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
("mul"), PVar("a"), LParen, Ident("parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
add"parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
), PVar(parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
tokenize: ret = [LParen, Identparse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
("mul"), LParen, Ident("mul"), PVar("a"), PVar(parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
"b")parse_pattern_nosubst ret1 = PVar("a")
, RParen, PVarparse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
("node = Mul(id0, map-[], id0, map-[])
c"), RParen]
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul (mul ?a ?b) ?c)

s = "(mul ?a (mul ?b ?c))"
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
tokenize: ret = [LParennode = Mul(id0, map-[], id0, map-[])
, parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
Identparse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
(                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
"mul"), PVar("a"), LParen, Ident("mul"),         ),
    ],
PVar("b"), PVar("c"), RParen, RParen]
), pat_display = (mul (mul ?a ?b) ?c)

s = "(mul ?a (mul ?b ?c))"
tokenize: ret = [LParen, Ident("mul"), PVar("a"), LParen, Ident(node = Add(id0, map-[], id0, map-[])
"mul"), PVar("b"), parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
PVar("c"), RParenparse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
, ), pat_display = (add ?b ?c)
RParen]
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, PVar("c"), RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))

s = "(add (mul ?a ?b) (mul ?a ?c))"
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident("parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [PVar("c"), RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen]
parse_pattern input tok = [PVar("c"), RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))

s = "(add (mul ?a ?b) (mul ?a ?c))"
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
tokenize: ret = [LParen, Ident("                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
add"), pat_display = (mul ?a (mul ?b ?c))
)parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
, LParen, Ident("mul"), PVar(), pat_display = (mul ?b ?c)
"a"parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
)syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
, node = Mul(id0, map-[], id0, map-[])
PVar("b"), RParen, LParen, Ident("mul"), PVar("a"parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
)parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
, PVar(), pat_display = (mul ?a (mul ?b ?c))
"c
s = "(mul ?a (add ?b ?c))"
"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident("mulparse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"), PVar("a"), LParen, Ident("add"), PVar(parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"bparse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"), parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul (mul ?a ?b) ?c)

s = "(mul ?a (mul ?b ?c))"
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident("mul"), PVar(parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"a"), LParen, Ident("mul")parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
, PVar("b"), parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
PVar("parse_pattern_nosubst ret1 = PVar("a")
c"), RParen, RParen]parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a

parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]

s = "(mul ?a (add ?b ?c))"
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident("mul"), parse_pattern_nosubst ret1 = PVar("a")
PVar("a"), parse_pattern pat_struct = PVar(
    "a",
LParen, Ident("add")), pat_display = ?a
, PVarparse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
("b"), PVar("c"parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
)parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
, parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Mul(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (mul ?b ?c))
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])

s = "(mul ?a (add ?b ?c))"
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
Ident("mul"), PVarparse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
("a"parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
), LParen, Ident("add")parse_pattern_nosubst ret1 = PVar("b")
, PVarparse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
("b"), parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
PVar("parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))

s = "(add (mul ?a ?b) (mul ?a ?c))"
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
tokenize: ret = [LParen,         ),
    ],
Ident("add"), LParen, Ident("mul"), PVar), pat_display = (mul ?a ?c)
("aparse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
"), PVarsyntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
("b"node = Add(id0, map-[], id0, map-[])
), RParen, LParenparse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
, parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add (mul ?a ?b) (mul ?a ?c))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])

s = "(add (mul ?a ?b) (mul ?a ?c))"
node = Mul(id0, map-[], id0, map-[])
tokenize: ret = [LParen, Ident("addparse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
"), LParen, Ident("mul")parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
, PVar("a"), PVar("    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
b"), RParen, LParen, Ident), pat_display = (mul ?a (add ?b ?c))
(
s = "(add (mul ?a ?b) (mul ?a ?c))"
"mul"), PVar("a"), PVar("c"), RParen, RParenparse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
]
                PVar(
                    "b",
                ),
tokenize: ret = [LParen, Ident("add"), LParen, Ident("mul"),             ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
PVar("    ],
a")), pat_display = (add (mul ?a ?b) (mul ?a ?c))
, PVar("b"), RParen, LParen, Ident("parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
mul"parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
), parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")

s = "(add (mul ?a ?b) (mul ?a ?c))"
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
tokenize: ret = [LParen    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
, Ident(                id0, map-[],
"add")                id0, map-[],
            ),
            [
                PVar(
                    "b",
, LParen, Ident("mul")                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
, PVar), pat_display = (mul ?a (add ?b ?c))
("a"parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
), parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
PVar("b"), RParenparse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
, LParen, parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
Ident("mul"), PVar("a"parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
), PVar("c"), RParen, parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))

s = "(add (mul ?a ?b) (mul ?a ?c))"
parse_pattern pat_struct = PVar(
    "c",
tokenize: ret = [LParen, Ident), pat_display = ?c
(parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
"add"), LParen, Ident("mul"), syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
PVarnode = Mul(id0, map-[], id0, map-[])
(parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
"aparse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
"), PVar("b"), RParen,             "a",
LParen, Ident("mul"        ),
        PVar(
            "c",
        ),
    ],
)), pat_display = (mul ?a ?c)
, PVar("parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
aparse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"), PVarparse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
("c"), RParenparse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
node = Add(id0, map-[], id0, map-[])
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add (mul ?a ?b) (mul ?a ?c))
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add (mul ?a ?b) (mul ?a ?c))
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(add (mul ?a ?b) (mul ?a ?c))"
tokenize: ret = 
s = "(mul ?a (add ?b ?c))"
[LParen, Identnode = Add(id0, map-[], id0, map-[])
("add"parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
)node = Add(id0, map-[], id0, map-[])
, LParen, parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
Ident(parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
"mul"), PVar("a")                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
, PVar("b"), RParen, LParen, Ident("mul"), PVar(                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
"), pat_display = (add (mul ?a ?b) (mul ?a ?c))
a"), PVar("c"node = Mul(id0, map-[], id0, map-[])
), parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
RParen, RParen]
parse_pattern pat_struct = ENode(
    Mul(
tokenize: ret = [LParen, Ident(        id0, map-[],
"mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"),         id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
RParen, RParen]
), pat_display = (mul ?a ?b)
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add (mul ?a ?b) (mul ?a ?c))

s = "(add (mul ?a ?b) (mul ?a ?c))"
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
tokenize: ret = [LParen, Ident(parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"add"), LParen, Identparse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
("mul"), PVar("aparse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"), PVar("bparse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"), parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
RParen, LParenparse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
, Ident("mul"), PVar(parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(mul ?a (add ?b ?c))"
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
tokenize: ret = [LParen, Ident("mulparse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
"), parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
PVar("parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
a"), LParen, Ident("addparse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
"), parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add (mul ?a ?b) (mul ?a ?c))
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))

s = "(mul (add (var $0) (var $1)) (add (var $1) (var $2)))"

s = "(mul ?a (add ?b ?c))"
tokenize: ret = [parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
LParen, Identparse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
("mul"), parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
LParen, Identparse_pattern_nosubst ret1 = PVar("a")
("add"), parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
LParen, Ident("var"), parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
Slot(parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
$0), RParen, parse_pattern input tok = [PVar("c"), RParen, RParen]
LParen, Ident("var"), Slot($parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
1), RParen, RParen, LParen, Ident("add"parse_pattern_nosubst ret1 = PVar("c")
), LParen, Ident(parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
"varparse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
"), Slot(syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
$1), RParen, LParen, Ident("var"), Slotnode = Mul(id0, map-[], id0, map-[])
($2), RParen, RParen, RParen]parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])

parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
tokenize: ret = [LParen, Ident("mul"), PVarparse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
("a")node = Mul(id0, map-[], id0, map-[])
, LParen, Ident("add"parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
), PVar("b"), PVar("c"), RParen, RParenparse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
]
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $0,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $0) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])), [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [LParen, Ident("var"), Slot($2), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
syntax_elems_mock = [String("var"), Slot($2)]
node = Var($2)
parse_pattern_nosubst ret2 = ENode(Var($2), [])
parse_pattern pat_struct = ENode(
    Var(
        $2,
    ),
    [],
), pat_display = (var $2)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($2), [])), [RParen, RParen]))
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])

s = "(mul (add (var $x) (var $y)) (add (var $x) (var $y)))"
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
tokenize: ret = [LParen, Ident("mul"                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
), LParen, Ident("add"), LParen, Ident                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
("var")), pat_display = (add (mul ?a ?b) (mul ?a ?c))
, Slotparse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($2), [])])
(parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
$xparse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
), parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
Ident(parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
"addparse_pattern_nosubst ret1 = PVar("a")
"), LParen, parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
Identparse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
("var"), Slot($xparse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
), RParen, LParen, Ident("var"parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
), Slot(parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
$parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
y), RParen, RParen, RParen]

s = "(add (mul ?a ?b) (mul ?a ?c))"
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
tokenize: ret = [LParen, Ident("add"), LParen, Ident                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
("mul")                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
, PVar("a"                ),
            ],
        ),
), PVar("b"), RParen, LParen, Ident("mul    ],
"), PVar(), pat_display = (add (mul ?a ?b) (mul ?a ?c))
"parse_pattern_nosubst ret1 = PVar("b")
a")parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
, PVar("c"), parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
RParen, parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "b",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (add ?b ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($x)
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        ENode(
            Var(
                $2,
            ),
            [],
        ),
    ],
), pat_display = (add (var $1) (var $2))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($2), [])])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($2), [])])])
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [RParen, LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "b",
        ),
    ],
), pat_display = (mul ?a ?b)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")])), [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        PVar(
            "c",
        ),
    ],
), pat_display = (mul ?a ?c)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("b")]), ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "a",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (add (mul ?a ?b) (mul ?a ?c))

s = "(mul ?a (add ?b ?c))"
syntax_elems_mock = [String("var"), Slot($x)]
tokenize: ret = [node = Var($x)
LParen, Ident("mul"), PVar("parse_pattern_nosubst ret2 = ENode(Var($x), [])
a"), LParen, Identparse_pattern pat_struct = ENode(
    Var(
        $x,
    ),
("add")    [],
, PVar("b"), PVar(), pat_display = (var $x)
"c"), RParen, RParenparse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($x), [])), [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]))
]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($y)
syntax_elems_mock = [String("var"), Slot($y)]
node = Var($y)
parse_pattern_nosubst ret2 = ENode(Var($y), [])
parse_pattern pat_struct = ENode(
    Var(
        $y,
    ),
    [],
), pat_display = (var $y)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($y), [])), [RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $x,
            ),
            [],
        ),
        ENode(
            Var(
                $y,
            ),
            [],
        ),
    ],
), pat_display = (add (var $x) (var $y))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])), [LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($x)
syntax_elems_mock = [String("var"), Slot($x)]
node = Var($x)
parse_pattern_nosubst ret2 = ENode(Var($x), [])
parse_pattern pat_struct = ENode(
    Var(
        $x,
    ),
    [],
), pat_display = (var $x)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($x), [])), [LParen, Ident("var"), Slot($y), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($y), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($y)
syntax_elems_mock = [String("var"), Slot($y)]
node = Var($y)
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $2,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (mul (add (var $0) (var $1)) (add (var $1) (var $2)))
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
RecExpr::parse: ret = parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
ENode(Mul(id0, map-parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
[], id0, map-[]), [parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
ENode(Add(id0parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
, map-[]parse_pattern_nosubst ret1 = PVar("a")
, id0, map-parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
[]), [ENode(Var(parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
$0), []), ENode(Var($1), [parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
])parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
])parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
, ENode(parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
Add(idparse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
0, map-[], parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
id0, map-[])parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
, [parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
ENode(Var($1), []parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
), ENodeparse_pattern input tok = [PVar("c"), RParen, RParen]
(Var(parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
$2), [])])])parse_pattern_nosubst ret1 = PVar("c")

parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))

s = "(mul (add (var $2) (var $1)) (add (var $1) (var $0)))"

s = "(mul ?a (add ?b ?c))"
tokenize: ret = [LParen, Ident("mul")parse_pattern_nosubst ret2 = ENode(Var($y), [])
, LParen, Ident("add"), LParen, Ident("varparse_pattern pat_struct = ENode(
    Var(
        $y,
    ),
    [],
"), ), pat_display = (var $y)
Slot($parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($y), [])), [RParen, RParen]))
2), RParen, LParen, Ident("var"), Slot($1)syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
, node = Add(id0, map-[], id0, map-[])
RParenparse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
, RParen, LParen, Ident(            Var(
                $x,
            ),
            [],
        ),
        ENode(
            Var(
"add"),                 $y,
            ),
            [],
        ),
LParen, Ident("var"), Slot    ],
($1)), pat_display = (add (var $x) (var $y))
, parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])), [RParen]))
RParen, syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
LParen, node = Mul(id0, map-[], id0, map-[])
Ident(parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])])
"var"), Slot($0)node = Add(id0, map-[], id0, map-[])
, RParen, RParen, RParen]
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
tokenize: ret = [LParenparse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
, Ident("mul"), PVar            "b",
        ),
        PVar(
            "c",
        ),
    ],
("a"), LParen, ), pat_display = (add ?b ?c)
Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
syntax_elems_mock = [String("var"), Slot($2)]
node = Var($2)
parse_pattern_nosubst ret2 = ENode(Var($2), [])
parse_pattern pat_struct = ENode(
    Var(
        $2,
    ),
    [],
), pat_display = (var $2)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($2), [])), [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($2), []), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $2,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $2) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($2), []), ENode(Var($1), [])])), [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("a"), LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("a")
parse_pattern pat_struct = PVar(
    "a",
), pat_display = ?a
parse_nested_syntax_elem ret = Ok((Pattern(PVar("a")), [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), PVar("b"), PVar("c"), RParen, RParen]
parse_nested_syntax_elem input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("b"), PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("b")
parse_pattern pat_struct = PVar(
    "b",
), pat_display = ?b
parse_nested_syntax_elem ret = Ok((Pattern(PVar("b")), [PVar("c"), RParen, RParen]))
parse_nested_syntax_elem input tok = [PVar("c"), RParen, RParen]
parse_pattern input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst input tok = [PVar("c"), RParen, RParen]
parse_pattern_nosubst ret1 = PVar("c")
parse_pattern pat_struct = PVar(
    "c",
), pat_display = ?c
parse_nested_syntax_elem ret = Ok((Pattern(PVar("c")), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(mul (add (var $0) (var $1)) (add (var $0) (var $1)))"
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
tokenize: ret = [LParen, Ident("mul"), LParen, Ident("add"        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $x,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $y,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Add(
                id0, map-[],
), LParen,                 id0, map-[],
            ),
            [
                ENode(
                    Var(
Ident("var                        $x,
                    ),
                    [],
                ),
"), Slot($0), RParen, LParen, Ident("                ENode(
                    Var(
                        $y,
                    ),
                    [],
                ),
            ],
        ),
    ],
var"), Slot(), pat_display = (mul (add (var $x) (var $y)) (add (var $x) (var $y)))
$
s = "(add (var $0) (var $1))"
1), RParen, RParen, LParen, Identparse_nested_syntax_elem input tok = [Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
(parse_nested_syntax_elem ret = Slot($1)
"syntax_elems_mock = [String("var"), Slot($1)]
addnode = Var($1)
")parse_pattern_nosubst ret2 = ENode(Var($1), [])
, LParenparse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
, ), pat_display = (var $1)
Identparse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
(parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
"var"parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
), Slotparse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
($parse_nested_syntax_elem input tok = [Slot($0), RParen, RParen, RParen]
0), RParen, LParen, parse_nested_syntax_elem ret = Slot($0)
Identsyntax_elems_mock = [String("var"), Slot($0)]
("node = Var($0)
var")parse_pattern_nosubst ret2 = ENode(Var($0), [])
, Slot($1), parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
RParen), pat_display = (var $0)
, RParenparse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [RParen, RParen]))
, syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
RParennode = Add(id0, map-[], id0, map-[])
]parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])

parse_pattern pat_struct = ENode(
RecExpr::parse: ret =     Add(
ENode(Mul(id0, map-[],         id0, map-[],
        id0, map-[],
    ),
id0, map-[])    [
        ENode(
            Var(
                $1,
            ),
, [ENode(Add(id            [],
        ),
        ENode(
0, map-[], id0, map-[]), [ENode(Var(            Var(
                $0,
            ),
            [],
        ),
    ],
$x), []), ENode(Var($y), [])), pat_display = (add (var $1) (var $0))
]), ENode(Add(id0, map-[parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])), [RParen]))
], syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
id0, map-[]), node = Add(id0, map-[], id0, map-[])
[parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])
ENode(Var(parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        PVar(
$x), []),             "b",
        ),
ENode(Var($y)        PVar(
            "c",
        ),
    ],
, []), pat_display = (add ?b ?c)
)])])
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])), [RParen]))
tokenize: ret = [LParen, Ident("add"), LParen, Ident("varsyntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
"), Slot($0), node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [PVar("a"), ENode(Add(id0, map-[], id0, map-[]), [PVar("b"), PVar("c")])])
RParen, LParen, Ident(parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
"var"), Slot($1), RParen        id0, map-[],
    ),
    [
        PVar(
            "a",
        ),
        ENode(
            Add(
                id0, map-[],
, RParen]
                id0, map-[],
            ),
            [
                PVar(
                    "b",
                ),
                PVar(
                    "c",
                ),
            ],
        ),
    ],
), pat_display = (mul ?a (add ?b ?c))

s = "(add (add (add (add (var $0) (var $1)) (var $2)) (var $3)) (var $4))"

s = "(add (mul (var $x) (var $x))\n             (add (mul (var $x) (var $y))\n             (add (mul (var $x) (var $y))\n                  (mul (var $y) (var $y))\n             )))"
tokenize: ret = [LParen, Ident("add")node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($2), []), ENode(Var($1), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])])
, LParenparse_pattern pat_struct = ENode(
    Mul(
, Ident("add"), LParen, Ident("add"), LParen,         id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
Ident("add"),             [
                ENode(
                    Var(
                        $2,
                    ),
LParen, Ident(                    [],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Add(
"var"                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
), Slot(                    Var(
                        $1,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
            ],
        ),
    ],
$0), RParen, ), pat_display = (mul (add (var $2) (var $1)) (add (var $1) (var $0)))
LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Identparse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen]
("var"), Slot($2), RParen, parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParensyntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
, Ident("var")parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
, Slot($4parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
tokenize: ret = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
), parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
Slot(parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
$xparse_nested_syntax_elem ret = Slot($0)
syntax_elems_mock = [String("var"), Slot($0)]
)parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
, RParen, RParen, LParen, parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
Identparse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
(parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
"addparse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
"), LParen, Ident("mul"), LParen, Ident("var"parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
)parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
, Slot($x), RParen, LParen, Ident("var"), Slot($yparse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
)node = Var($0)
, parse_pattern_nosubst ret2 = ENode(Var($0), [])
RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($yparse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
), RParen,     [],
), pat_display = (var $0)
RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
RParen, LParen, parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
RecExpr::parse: ret = parse_nested_syntax_elem ret = Slot($1)
ENode(Mulsyntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
(parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
id0, map-[), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
], id0, map-[]), [ENode(Add(id0, map-parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
[], id0, map-[]), [ENode(Var($2parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
), []parse_nested_syntax_elem input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
), ENode(parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
Var($1parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
), []parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
)]), ENodeparse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
(Addparse_nested_syntax_elem input tok = [Slot($x), RParen, LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
(id0, map-parse_nested_syntax_elem ret = Slot($x)
syntax_elems_mock = [String("var"), Slot($x)]
[], id0, map-[]), [ENode(Var($1), []), ENodeparse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
(parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
Var($0), [])])])parse_nested_syntax_elem ret = Slot($0)
syntax_elems_mock = [String("var"), Slot($0)]

parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [LParen, Ident("var"), Slot($1), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
node = Var($x)
parse_pattern_nosubst ret2 = ENode(Var($x), [])
parse_pattern pat_struct = ENode(
    Var(
        $x,
    ),
    [],
), pat_display = (var $x)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($x), [])), [LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($x), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($x)
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $0,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $0) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])), [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
syntax_elems_mock = [String("var"), Slot($x)]
node = Var($x)
parse_pattern_nosubst ret2 = ENode(Var($x), [])
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
node = Var($0)
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_pattern pat_struct = ENode(
    Var(
        $x,
    ),
    [],
), pat_display = (var $x)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($x), [])), [RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
parse_pattern_nosubst ret2 = ENode(Var($0), [])
syntax_elems_mock = [String("var"), Slot($1)]
syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($x), [])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $x,
            ),
            [],
        ),
        ENode(
            Var(
                $x,
            ),
            [],
        ),
    ],
), pat_display = (mul (var $x) (var $x))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($x), [])])), [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($x)
syntax_elems_mock = [String("var"), Slot($x)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $0,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $0) (var $1))
RecExpr::parse: ret = ENodenode = Var($x)
parse_pattern_nosubst ret2 = ENode(Var($x), [])
(Add(id0, map-[], id0, map-[]parse_pattern pat_struct = ENode(
    Var(
        $x,
    ),
    [],
), [ENode(Var($0), []), ENode(Var($1), [])])), pat_display = (var $x)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($x), [])), [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]

parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]

s = "(add (var $1) (var $0))"
tokenize: ret = syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
[LParenparse_pattern_nosubst ret2 = ENode(Var($1), [])
, Ident("add"), LParen, Ident("parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
var"), Slot(    [],
), pat_display = (var $1)
$1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($y), RParen, RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($y)
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $0,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $0) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])), [RParen]))
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $0,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $0) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])), [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]))
syntax_elems_mock = [String("var"), Slot($y)]
node = Var($y)
parse_pattern_nosubst ret2 = ENode(Var($y), [])
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), RParen, RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)
parse_pattern pat_struct = ENode(
    Var(
        $y,
    ),
    [],
), pat_display = (var $y)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($y), [])), [RParen, LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (mul (add (var $0) (var $1)) (add (var $0) (var $1)))
RecExpr::parse: ret = syntax_elems_mock = [String("var"), Slot($2)]
ENode(Mul(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [node = Var($2)
])])])parse_pattern_nosubst ret2 = ENode(Var($2), [])

parse_pattern pat_struct = ENode(
    Var(
        $2,
    ),
    [],
), pat_display = (var $2)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($2), [])), [RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]))
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [LParen, Ident("var"), Slot($0), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, RParen]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])

s = "(mul (add (var $0) (var $1)) (add (var $1) (var $0)))"
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, RParen]
tokenize: ret = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
[tests/entry.rs:124:5] &report.stop_reason = Other(
    Reached,
)
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Var($2), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Var(
                $2,
            ),
            [],
        ),
    ],
), pat_display = (add (add (var $0) (var $1)) (var $2))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Var($2), [])])), [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($3), RParen, RParen, LParen, Ident("var"), Slot($4), RParen, RParen]
test arith::tst::t3 ... parse_nested_syntax_elem ret = Slot($3)
syntax_elems_mock = [String("var"), Slot($3)]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
node = Var($3)
parse_pattern_nosubst ret2 = ENode(Var($3), [])
parse_pattern pat_struct = ENode(
    Var(
        $3,
    ),
    [],
), pat_display = (var $3)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($3), [])), [RParen, LParen, Ident("var"), Slot($4), RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])
okparse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $x,
            ),
            [],
        ),
        ENode(
            Var(
                $y,
            ),
            [],
        ),
    ],
), pat_display = (mul (var $x) (var $y))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])), [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]

parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($x), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($x)
syntax_elems_mock = [String("var"), Slot($x)]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $0,
            ),
            [],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (var $0) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])])), [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        ENode(
            Var(
                $0,
            ),
            [],
        ),
    ],
), pat_display = (add (var $1) (var $0))
RecExpr::parse: ret = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Var($2), [])]), ENode(Var($3), [])])
node = Var($x)
parse_pattern_nosubst ret2 = ENode(Var($x), [])
parse_pattern pat_struct = ENode(
    Var(
        $x,
    ),
    [],
), pat_display = (var $x)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($x), [])), [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($y), RParen, RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($y)
syntax_elems_mock = [String("var"), Slot($y)]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Add(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Var(
                                $0,
                            ),
                            [],
                        ),
                        ENode(
                            Var(
                                $1,
                            ),
                            [],
                        ),
                    ],
                ),
                ENode(
                    Var(
                        $2,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Var(
                $3,
            ),
            [],
        ),
    ],
), pat_display = (add (add (add (var $0) (var $1)) (var $2)) (var $3))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Var($2), [])]), ENode(Var($3), [])])), [LParen, Ident("var"), Slot($4), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($4), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($4), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($4), RParen, RParen]
parse_nested_syntax_elem ret = Slot($4)
syntax_elems_mock = [String("var"), Slot($4)]
node = Var($4)
parse_pattern_nosubst ret2 = ENode(Var($4), [])
parse_pattern pat_struct = ENode(
    Var(
        $4,
    ),
    [],
), pat_display = (var $4)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($4), [])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Var($y)
parse_pattern_nosubst ret2 = ENode(Var($y), [])
parse_pattern pat_struct = ENode(
    Var(
        $y,
    ),
    [],
), pat_display = (var $y)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($y), [])), [RParen, LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $x,
            ),
            [],
        ),
        ENode(
            Var(
                $y,
            ),
            [],
        ),
    ],
), pat_display = (mul (var $x) (var $y))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])])), [LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("mul"), LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Var($2), [])]), ENode(Var($3), [])]), ENode(Var($4), [])])
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
[tests/entry.rs:124:5] &report.stop_reason = Other(
    Reached,
)
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Add(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Add(
                                id0, map-[],
                                id0, map-[],
                            ),
                            [
                                ENode(
                                    Var(
                                        $0,
                                    ),
                                    [],
                                ),
                                ENode(
                                    Var(
                                        $1,
                                    ),
                                    [],
                                ),
                            ],
                        ),
                        ENode(
                            Var(
                                $2,
                            ),
                            [],
                        ),
                    ],
                ),
                ENode(
                    Var(
                        $3,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Var(
                $4,
            ),
            [],
        ),
    ],
), pat_display = (add (add (add (add (var $0) (var $1)) (var $2)) (var $3)) (var $4))
RecExpr::parse: ret = node = Var($1)
ENode(parse_pattern_nosubst ret2 = ENode(Var($1), [])
Add(id0, map-[parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [    [],
), pat_display = (var $1)
ENode(parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]))
Add(parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Var($2), [])]), ENode(Var($3), [parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
])]), ENode(Var($4), syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
[])])
parse_nested_syntax_elem input tok = [Slot($y), RParen, LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($y)
syntax_elems_mock = [String("var"), Slot($y)]
test arith::tst::t1 ... ok
node = Var($y)
parse_pattern_nosubst ret2 = ENode(Var($y), [])
parse_pattern pat_struct = ENode(
    Var(
        $y,
    ),
    [],
), pat_display = (var $y)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($y), [])), [LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]

s = "(add (add (add (add (var $4) (var $3)) (var $2)) (var $1)) (var $0))"
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($y), RParen, RParen, RParen, RParen, RParen]
parse_nested_syntax_elem ret = Slot($y)
tokenize: ret = [syntax_elems_mock = [String("var"), Slot($y)]
node = Var($y)
parse_pattern_nosubst ret2 = ENode(Var($y), [])
parse_pattern pat_struct = ENode(
    Var(
        $y,
    ),
    [],
LParen, Ident), pat_display = (var $y)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($y), [])), [RParen, RParen, RParen, RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($node = Mul(id0, map-[], id0, map-[])
4), RParen, LParen, Ident("var"), Slot(parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), []), ENode(Var($y), [])])
parse_pattern pat_struct = ENode(
    Mul(
$3), RParen, RParen,         id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
LParen, Ident("var")                $y,
            ),
            [],
        ),
        ENode(
            Var(
                $y,
            ),
            [],
        ),
    ],
, Slot), pat_display = (mul (var $y) (var $y))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), []), ENode(Var($y), [])])), [RParen, RParen, RParen]))
($2)parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
, RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot(        $0,
    ),
    [],
$0), RParen, RParen]
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("add"), LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])
parse_nested_syntax_elem input tok = [Slot($4), RParen, LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Slot($4)
syntax_elems_mock = [String("var"), Slot($4)]
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), []), ENode(Var($y), [])])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $x,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $y,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $y,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $y,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (add (mul (var $x) (var $y)) (mul (var $y) (var $y)))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), []), ENode(Var($y), [])])])), [RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), []), ENode(Var($y), [])])])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $x,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $y,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Mul(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Var(
                                $x,
                            ),
                            [],
                        ),
                        ENode(
                            Var(
                                $y,
                            ),
                            [],
                        ),
                    ],
                ),
                ENode(
                    Mul(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Var(
                                $y,
                            ),
                            [],
                        ),
                        ENode(
                            Var(
                                $y,
                            ),
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ],
), pat_display = (add (mul (var $x) (var $y)) (add (mul (var $x) (var $y)) (mul (var $y) (var $y))))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), []), ENode(Var($y), [])])])])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($x), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), []), ENode(Var($y), [])])])])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Mul(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $x,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $x,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Mul(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Var(
                                $x,
                            ),
                            [],
                        ),
                        ENode(
                            Var(
                                $y,
                            ),
                            [],
                        ),
                    ],
                ),
                ENode(
                    Add(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Mul(
                                id0, map-[],
                                id0, map-[],
                            ),
                            [
                                ENode(
                                    Var(
                                        $x,
                                    ),
                                    [],
                                ),
                                ENode(
                                    Var(
                                        $y,
                                    ),
                                    [],
                                ),
                            ],
                        ),
                        ENode(
                            Mul(
                                id0, map-[],
                                id0, map-[],
                            ),
                            [
                                ENode(
                                    Var(
                                        $y,
                                    ),
                                    [],
                                ),
                                ENode(
                                    Var(
                                        $y,
                                    ),
                                    [],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ],
), pat_display = (add (mul (var $x) (var $x)) (add (mul (var $x) (var $y)) (add (mul (var $x) (var $y)) (mul (var $y) (var $y)))))
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $1,
            ),
            [],
        ),
        ENode(
            Var(
                $0,
            ),
            [],
        ),
    ],
RecExpr::parse: ret = ), pat_display = (add (var $1) (var $0))
ENode(Add(id0, map-[]parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])), [RParen]))
syntax_elems_mock = [String("mul"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
, id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($x), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Mulnode = Var($4)
parse_pattern_nosubst ret2 = ENode(Var($4), [])
(id0, map-[], id0, map-[]), [ENode(Var($x), []), ENode(Var($y), []parse_pattern pat_struct = ENode(
    Var(
        $4,
    ),
    [],
)]), ENode(Mul(id0, map-[], id0, map-[]), [ENode(Var($y), ), pat_display = (var $4)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($4), [])), [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]))
[]), ENode(Var($y), [])])])])])parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]

parse_pattern input tok = [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($3), RParen, RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Slot($3)
syntax_elems_mock = [String("var"), Slot($3)]
node = Mul(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Mul(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Var($1), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])])
node = Var($3)
parse_pattern_nosubst ret2 = ENode(Var($3), [])
parse_pattern pat_struct = ENode(
    Var(
        $3,
    ),
    [],
), pat_display = (var $3)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($3), [])), [RParen, LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
parse_pattern pat_struct = ENode(
    Mul(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $0,
                    ),
                    [],
                ),
            ],
        ),
    ],
), pat_display = (mul (add (var $0) (var $1)) (add (var $1) (var $0)))
RecExpr::parse: ret = node = Add(id0, map-[], id0, map-[])
ENode(parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Var(
                $4,
            ),
            [],
        ),
        ENode(
            Var(
                $3,
            ),
            [],
        ),
    ],
Mul(), pat_display = (add (var $4) (var $3))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])])), [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]))
id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($0), []), ENode(Varparse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
($1), [])]), ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($1), []), ENode(Var($0), [])])])parse_pattern input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($2), RParen, RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Slot($2)

syntax_elems_mock = [String("var"), Slot($2)]
node = Var($2)
parse_pattern_nosubst ret2 = ENode(Var($2), [])
parse_pattern pat_struct = ENode(
    Var(
        $2,
    ),
    [],
), pat_display = (var $2)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($2), [])), [RParen, LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])]), ENode(Var($2), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Var(
                        $4,
                    ),
                    [],
                ),
                ENode(
                    Var(
                        $3,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Var(
                $2,
            ),
            [],
        ),
    ],
), pat_display = (add (add (var $4) (var $3)) (var $2))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])]), ENode(Var($2), [])])), [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($1), RParen, RParen, LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Slot($1)
syntax_elems_mock = [String("var"), Slot($1)]
node = Var($1)
parse_pattern_nosubst ret2 = ENode(Var($1), [])
parse_pattern pat_struct = ENode(
    Var(
        $1,
    ),
    [],
), pat_display = (var $1)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($1), [])), [RParen, LParen, Ident("var"), Slot($0), RParen, RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])]), ENode(Var($2), [])]), ENode(Var($1), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Add(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Var(
                                $4,
                            ),
                            [],
                        ),
                        ENode(
                            Var(
                                $3,
                            ),
                            [],
                        ),
                    ],
                ),
                ENode(
                    Var(
                        $2,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Var(
                $1,
            ),
            [],
        ),
    ],
), pat_display = (add (add (add (var $4) (var $3)) (var $2)) (var $1))
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])]), ENode(Var($2), [])]), ENode(Var($1), [])])), [LParen, Ident("var"), Slot($0), RParen, RParen]))
parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, RParen]
parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, RParen]
parse_nested_syntax_elem input tok = [Slot($0), RParen, RParen]
parse_nested_syntax_elem ret = Slot($0)
syntax_elems_mock = [String("var"), Slot($0)]
node = Var($0)
parse_pattern_nosubst ret2 = ENode(Var($0), [])
parse_pattern pat_struct = ENode(
    Var(
        $0,
    ),
    [],
), pat_display = (var $0)
parse_nested_syntax_elem ret = Ok((Pattern(ENode(Var($0), [])), [RParen]))
syntax_elems_mock = [String("add"), AppliedId(id0, map-[]), AppliedId(id0, map-[])]
node = Add(id0, map-[], id0, map-[])
parse_pattern_nosubst ret2 = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])]), ENode(Var($2), [])]), ENode(Var($1), [])]), ENode(Var($0), [])])
parse_pattern pat_struct = ENode(
    Add(
        id0, map-[],
        id0, map-[],
    ),
    [
        ENode(
            Add(
                id0, map-[],
                id0, map-[],
            ),
            [
                ENode(
                    Add(
                        id0, map-[],
                        id0, map-[],
                    ),
                    [
                        ENode(
                            Add(
                                id0, map-[],
                                id0, map-[],
                            ),
                            [
                                ENode(
                                    Var(
                                        $4,
                                    ),
                                    [],
                                ),
                                ENode(
                                    Var(
                                        $3,
                                    ),
                                    [],
                                ),
                            ],
                        ),
                        ENode(
                            Var(
                                $2,
                            ),
                            [],
                        ),
                    ],
                ),
                ENode(
                    Var(
                        $1,
                    ),
                    [],
                ),
            ],
        ),
        ENode(
            Var(
                $0,
            ),
            [],
        ),
    ],
), pat_display = (add (add (add (add (var $4) (var $3)) (var $2)) (var $1)) (var $0))
RecExpr::parse: ret = ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Add(id0, map-[], id0, map-[]), [ENode(Var($4), []), ENode(Var($3), [])]), ENode(Var($2), [])]), ENode(Var($1), [])]), ENode(Var($0), [])])
[tests/entry.rs:124:5] &report.stop_reason = Other(
    Reached,
)
test arith::tst::t2 ... ok
[tests/entry.rs:124:5] &report.stop_reason = Other(
    Reached,
)
test arith::tst::t5 ... ok
[tests/entry.rs:124:5] &report.stop_reason = Other(
    Reached,
)
test arith::tst::t4 ... ok

test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured; 63 filtered out; finished in 0.10s

   Doc-tests slotted_egraphs

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


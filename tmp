warning: unused variable: `match_with_star`
   --> src/rewrite/ematch.rs:140:13
    |
140 |         let match_with_star = vec_language_children_type_eq_with_star(
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_match_with_star`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `slotted-egraphs` (lib) generated 1 warning
   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
warning: `slotted-egraphs` (lib test) generated 1 warning (1 duplicate)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.23s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
enodes_applied result = [Var($f0)]
enodes_applied result = [And([AppliedId(id0, map-[$f0 -> $f1]), AppliedId(id0, map-[$f0 -> $f2])])]
ematch_node before n_sh = And([AppliedId(id0, map-[]), Star])
ematch_node before clear_n2_sh = And([AppliedId(id0, map-[]), AppliedId(id0, map-[])])
ematch_node after n_sh = And([AppliedId(id0, map-[]), Star])
ematch_node after clear_n2_sh = And([AppliedId(id0, map-[]), AppliedId(id0, map-[])])
enodes_applied result = [And([AppliedId(id1, map-[$f1 -> $f3, $f2 -> $f4]), AppliedId(id0, map-[$f0 -> $f5])])]
ematch_node before n_sh = And([AppliedId(id0, map-[]), Star])
ematch_node before clear_n2_sh = And([AppliedId(id0, map-[]), AppliedId(id0, map-[])])
ematch_node after n_sh = And([AppliedId(id0, map-[]), Star])
ematch_node after clear_n2_sh = And([AppliedId(id0, map-[]), AppliedId(id0, map-[])])
[tests/entry.rs:124:5] &report.stop_reason = Saturated
runner.egraph = == Egraph ==
id0($f0):>> Var($f0) - Var($f0)
id1($f1, $f2):>> And([AppliedId(id0, map-[$f0 -> $f1]), AppliedId(id0, map-[$f0 -> $f2])]) - And([AppliedId(id0, map-[$f0 -> $f1]), AppliedId(id0, map-[$f0 -> $f2])])
id2($f3, $f4, $f5):>> And([AppliedId(id1, map-[$f1 -> $f3, $f2 -> $f4]), AppliedId(id0, map-[$f0 -> $f5])]) - And([AppliedId(id1, map-[$f1 -> $f3, $f2 -> $f4]), AppliedId(id0, map-[$f0 -> $f5])])

thread 'chc::and' panicked at tests/entry.rs:136:5:
failed to reach goal
stack backtrace:
   0: __rustc::rust_begin_unwind
             at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5
   1: core::panicking::panic_fmt
             at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14
   2: entry::assert_reaches
             at ./tests/entry.rs:136:5
   3: entry::chc::and
             at ./tests/chc/mod.rs:68:5
   4: entry::chc::and::{{closure}}
             at ./tests/chc/mod.rs:53:9
   5: core::ops::function::FnOnce::call_once
             at /home/pondnj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5
   6: core::ops::function::FnOnce::call_once
             at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
test chc::and ... FAILED

failures:

failures:
    chc::and

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 70 filtered out; finished in 0.02s

error: test failed, to rerun pass `--test entry`

warning: variable `getExpandChildrenArms` should have a snake case name
  --> slotted-egraphs-derive/src/lib.rs:87:9
   |
87 |     let getExpandChildrenArms: Vec<TokenStream2> = ie
   |         ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_expand_children_arms`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: variable `getShrinkChildrenArms` should have a snake case name
  --> slotted-egraphs-derive/src/lib.rs:92:9
   |
92 |     let getShrinkChildrenArms: Vec<TokenStream2> = ie
   |         ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_shrink_children_arms`

warning: variable `getExpandChildrenArms` should have a snake case name
   --> slotted-egraphs-derive/src/lib.rs:189:24
    |
189 |                     #(#getExpandChildrenArms),*
    |                        ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_expand_children_arms`

warning: variable `getShrinkChildrenArms` should have a snake case name
   --> slotted-egraphs-derive/src/lib.rs:195:24
    |
195 |                     #(#getShrinkChildrenArms),*
    |                        ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_shrink_children_arms`

warning: function `produceGetExpandChildrenArms` should have a snake case name
   --> slotted-egraphs-derive/src/lib.rs:433:4
    |
433 | fn produceGetExpandChildrenArms(name: &Ident, v: &Variant) -> TokenStream2 {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `produce_get_expand_children_arms`

warning: function `produceGetShrinkChildrenArms` should have a snake case name
   --> slotted-egraphs-derive/src/lib.rs:448:4
    |
448 | fn produceGetShrinkChildrenArms(name: &Ident, v: &Variant) -> TokenStream2 {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `produce_get_shrink_children_arms`

warning: `slotted-egraphs-derive` (lib) generated 6 warnings
   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.87s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
p_compose = (compose <(new (pred P <$0 $1>) (true) <(compose <(new (pred Q <$0 $1>) (true) <(compose <(new (pred R1 <$0>) (true) <>)>) (compose <(new (pred R2 <$1>) (true) <>)>)>)>)>)>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("P")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("P")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0), Slot($1)])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0, $1]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("Q")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("Q")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0), Slot($1)])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0, $1]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("R1")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("R1")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0)])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("R2")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("R2")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($1)])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$1]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
eg = 
 == Egraph ==
id0():>> PredName("P")
 - PredName("P")

id1($f0, $f1):>> PredSyntax(id0, map-[], [$f0, $f1])
 - PredSyntax(id0, map-[], [$f0, $f1])

id2():>> True
 - True

id3():>> PredName("Q")
 - PredName("Q")

id4($f2, $f3):>> PredSyntax(id3, map-[], [$f2, $f3])
 - PredSyntax(id3, map-[], [$f2, $f3])

id5():>> PredName("R1")
 - PredName("R1")

id6($f4):>> PredSyntax(id5, map-[], [$f4])
 - PredSyntax(id5, map-[], [$f4])

id7($f5):>> New(id6, map-[$f4 -> $f5], id2, map-[], [])
 - New(id6, map-[$f4 -> $f5], id2, map-[], [])

id8($f6):>> Compose([AppliedId(id7, map-[$f5 -> $f6])])
 - Compose([AppliedId(id7, map-[$f5 -> $f6])])

id9():>> PredName("R2")
 - PredName("R2")

id10($f7):>> PredSyntax(id9, map-[], [$f7])
 - PredSyntax(id9, map-[], [$f7])

id11($f8):>> New(id10, map-[$f7 -> $f8], id2, map-[], [])
 - New(id10, map-[$f7 -> $f8], id2, map-[], [])

id12($f9):>> Compose([AppliedId(id11, map-[$f8 -> $f9])])
 - Compose([AppliedId(id11, map-[$f8 -> $f9])])

id13($f10, $f11):>> New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
 - New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])

id14($f12, $f13):>> Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
 - Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])

id15($f14, $f15):>> New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
 - New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])

id16($f16, $f17):>> Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
 - Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])

[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(1)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(1)]
[entry::chc] from_syntax::ret = Some(Compose([Star(1)]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star(2)]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[]), Star(3)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star(3)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(3)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[]), Star(3)]))
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(1)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(1)]
[entry::chc] from_syntax::ret = Some(Compose([Star(1)]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star(2)]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[]), Star(3)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star(3)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(3)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[]), Star(3)]))
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?s true (compose *1) *2) *3)
[slotted_egraphs::egraph] enodes_applied i = id0, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0, map-[],
                [
                    $0,
                    $1,
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1, map-[$f0 -> $f0, $f1 -> $f1]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0, map-[],
                [
                    $0,
                    $1,
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f0, $1 -> $f1],
                src_id: id1,
            },
        },
        slots: {
            $f0,
            $f1,
        },
        usages: {
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0, $f1 -> $f1],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0, map-[],
            [
                $f0,
                $f1,
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id2,
            },
        },
        slots: {},
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ),
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id3, map-[],
                [
                    $0,
                    $1,
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4, map-[$f2 -> $f2, $f3 -> $f3]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id3, map-[],
                [
                    $0,
                    $1,
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f2, $1 -> $f3],
                src_id: id4,
            },
        },
        slots: {
            $f2,
            $f3,
        },
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f2 -> $f2, $f3 -> $f3],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id3, map-[],
            [
                $f2,
                $f3,
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id5,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id5, map-[],
                [
                    $0,
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6, map-[$f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id5, map-[],
                [
                    $0,
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f4],
                src_id: id6,
            },
        },
        slots: {
            $f4,
        },
        usages: {
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id5, map-[],
            [
                $f4,
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7, map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id7, map-[$f5 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: New(
            id6, map-[$f4 -> $f5],
            id2, map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8, map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id7, map-[$f5 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id7, map-[$f5 -> $f6],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id7, map-[$f5 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id7, map-[$f5 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: New(
            id6, map-[$f4 -> $f5],
            id2, map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star(2)]) != New(id0, map-[], id0, map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id9, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id9,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id9, map-[],
                [
                    $0,
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id10, map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id9, map-[],
                [
                    $0,
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id10,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id9, map-[],
            [
                $f7,
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11, map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id11, map-[$f8 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: New(
            id10, map-[$f7 -> $f8],
            id2, map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12, map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id11, map-[$f8 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id11, map-[$f8 -> $f9],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id11, map-[$f8 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id11, map-[$f8 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: New(
            id10, map-[$f7 -> $f8],
            id2, map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star(2)]) != New(id0, map-[], id0, map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id13, map-[$f10 -> $f10, $f11 -> $f11]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10, $1 -> $f11],
                src_id: id13,
            },
        },
        slots: {
            $f10,
            $f11,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id13, map-[$f10 -> $0, $f11 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10, $f11 -> $f11],
            },
            next: None,
        },
        syn_enode: New(
            id4, map-[$f2 -> $f10, $f3 -> $f11],
            id2, map-[],
            [
                AppliedId(
                    id8, map-[$f6 -> $f10],
                ),
                AppliedId(
                    id12, map-[$f9 -> $f11],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id14, map-[$f12 -> $f12, $f13 -> $f13]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id13, map-[$f10 -> $0, $f11 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f12, $1 -> $f13],
                src_id: id14,
            },
        },
        slots: {
            $f12,
            $f13,
        },
        usages: {
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f12 -> $f12, $f13 -> $f13],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id13, map-[$f10 -> $f12, $f11 -> $f13],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id13, map-[$f10 -> $f12, $f11 -> $f13]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10, $1 -> $f11],
                src_id: id13,
            },
        },
        slots: {
            $f10,
            $f11,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id13, map-[$f10 -> $0, $f11 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10, $f11 -> $f11],
            },
            next: None,
        },
        syn_enode: New(
            id4, map-[$f2 -> $f10, $f3 -> $f11],
            id2, map-[],
            [
                AppliedId(
                    id8, map-[$f6 -> $f10],
                ),
                AppliedId(
                    id12, map-[$f9 -> $f11],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "s",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "s",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id2, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id2,
            },
        },
        slots: {},
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ),
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "s",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id8, map-[$f6 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id7, map-[$f5 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id7, map-[$f5 -> $f6],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "star_2_0": id12, map-[$f9 -> $f13],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "star_2_0": id12, map-[$f9 -> $f13],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0, map-[],
                id0, map-[],
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "s",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "star_2_0": id12, map-[$f9 -> $f13],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0, map-[],
                id0, map-[],
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "s",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "s",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id7, map-[$f5 -> $f12],
                "star_2_0": id12, map-[$f9 -> $f13],
                "s": id4, map-[$f2 -> $f12, $f3 -> $f13],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0, map-[],
                        id0, map-[],
                        [
                            AppliedId(
                                id0, map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "s",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id15, map-[$f14 -> $f14, $f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f14, $1 -> $f15],
                src_id: id15,
            },
        },
        slots: {
            $f14,
            $f15,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id15, map-[$f14 -> $0, $f15 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f14 -> $f14, $f15 -> $f15],
            },
            next: None,
        },
        syn_enode: New(
            id1, map-[$f0 -> $f14, $f1 -> $f15],
            id2, map-[],
            [
                AppliedId(
                    id14, map-[$f12 -> $f14, $f13 -> $f15],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id16, map-[$f16 -> $f16, $f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id15, map-[$f14 -> $0, $f15 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f16, $1 -> $f17],
                src_id: id16,
            },
        },
        slots: {
            $f16,
            $f17,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16, $f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id15, map-[$f14 -> $f16, $f15 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id15, map-[$f14 -> $f16, $f15 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f14, $1 -> $f15],
                src_id: id15,
            },
        },
        slots: {
            $f14,
            $f15,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id15, map-[$f14 -> $0, $f15 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f14 -> $f14, $f15 -> $f15],
            },
            next: None,
        },
        syn_enode: New(
            id1, map-[$f0 -> $f14, $f1 -> $f15],
            id2, map-[],
            [
                AppliedId(
                    id14, map-[$f12 -> $f14, $f13 -> $f15],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "s",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "s",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id2, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id2,
            },
        },
        slots: {},
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ),
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "s",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id14, map-[$f12 -> $f16, $f13 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id13, map-[$f10 -> $0, $f11 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f12, $1 -> $f13],
                src_id: id14,
            },
        },
        slots: {
            $f12,
            $f13,
        },
        usages: {
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f12 -> $f12, $f13 -> $f13],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id13, map-[$f10 -> $f12, $f11 -> $f13],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id13, map-[$f10 -> $f16, $f11 -> $f17],
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id13, map-[$f10 -> $f16, $f11 -> $f17],
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id13, map-[$f10 -> $f16, $f11 -> $f17],
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id13, map-[$f10 -> $f16, $f11 -> $f17],
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0, map-[],
                id0, map-[],
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "s",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id13, map-[$f10 -> $f16, $f11 -> $f17],
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0, map-[],
                id0, map-[],
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "s",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "s",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id13, map-[$f10 -> $f16, $f11 -> $f17],
                "s": id1, map-[$f0 -> $f16, $f1 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0, map-[],
                        id0, map-[],
                        [
                            AppliedId(
                                id0, map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "s",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "star_1_0": id7, map-[$f5 -> $f18],
            "star_2_0": id12, map-[$f9 -> $f19],
            "s": id4, map-[$f2 -> $f18, $f3 -> $f19],
        },
        {
            "star_1_0": id13, map-[$f10 -> $f20, $f11 -> $f21],
            "s": id1, map-[$f0 -> $f20, $f1 -> $f21],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0, map-[],
                        id0, map-[],
                        [
                            AppliedId(
                                id0, map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "s",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0, map-[],
                        id0, map-[],
                        [
                            AppliedId(
                                id0, map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "s",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph::union] from_pat = (compose (new ?s true (compose *1) *2) *3)
[slotted_egraphs::egraph::union] subst = {
        "star_1_0": id7, map-[$f5 -> $f18],
        "star_2_0": id12, map-[$f9 -> $f19],
        "s": id4, map-[$f2 -> $f18, $f3 -> $f19],
    }
[slotted_egraphs::egraph::union] newFromPat = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                        AppliedId(
                            id0, map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "s",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0, map-[],
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    )
[slotted_egraphs::egraph::union] from_pat = (compose (new ?s true (compose *1) *2) *3)
[slotted_egraphs::egraph::union] subst = {
        "star_1_0": id13, map-[$f10 -> $f20, $f11 -> $f21],
        "s": id1, map-[$f0 -> $f20, $f1 -> $f21],
    }
[slotted_egraphs::egraph::union] newFromPat = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "s",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0, map-[],
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )
report = Report { iterations: 1, stop_reason: Saturated, egraph_nodes: 17, egraph_classes: 17, total_time: 0.010913971 }
test chc::tst1 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 70 filtered out; finished in 0.02s


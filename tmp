   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
warning: unused variable: `pending_ty`
   --> src/egraph/rebuild.rs:168:41
    |
168 |     fn handle_pending(&mut self, sh: L, pending_ty: PendingType) {
    |                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pending_ty`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `slotted-egraphs` (lib) generated 1 warning
warning: `slotted-egraphs` (lib test) generated 1 warning (1 duplicate)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.79s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
[entry::chc::tst] p_compose = (compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)>) (compose <(new (pred <(var $0)>) (true) <>)>)>) (new (pred <(var $0) (var $1)>) (true) <>)>)
[slotted_egraphs::parse] from (compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)>) (compose <(new (pred <(var $0)>) (true) <>)>)>) (new (pred <(var $0) (var $1)>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0)) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $0)) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $1)) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $1)) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true))))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0)) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $0)) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1)) true (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true)))) (compose (new (pred (var $0)) true)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1)) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true)))) (compose (new (pred (var $0)) true))) (new (pred (var $0) (var $1)) true))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[entry::chc] calling make on Var($f0)
[entry::chc] result {$f0: Unknown}
[slotted_egraphs::egraph::add] classes insert id0
[slotted_egraphs::egraph::add] add to id0 Var($0)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id0
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[slotted_egraphs::egraph::add] remove from id0 Var($0)
[slotted_egraphs::egraph::add] add to id0 Var($0)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id0 Var($0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] calling make on Var($0)
[entry::chc] exists in egraph
[entry::chc] result {$f0: Unknown}
[entry::chc] calling merge to id0
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f0: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f0: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] eclassSlots {$f0}
[entry::chc] result varTypes {$f0: Unknown}
[slotted_egraphs::egraph] updating data for id0
[slotted_egraphs::egraph::rebuild] end of handle_pending id0: ($f0 -> $f0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f1: Unknown, $f2: Unknown}
[slotted_egraphs::egraph::add] classes insert id1
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id1
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::add] remove from id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f1: Unknown, $f2: Unknown}
[entry::chc] calling merge to id1
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] eclassSlots {$f2, $f1}
[entry::chc] result varTypes {$f1: Unknown, $f2: Unknown}
[slotted_egraphs::egraph] updating data for id1
[slotted_egraphs::egraph::rebuild] end of handle_pending id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (var $0) (var $1))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id2
[slotted_egraphs::egraph::add] add to id2 True
[slotted_egraphs::egraph::rebuild] begin of handle_pending id2
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[slotted_egraphs::egraph::add] remove from id2 True
[slotted_egraphs::egraph::add] add to id2 True
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[slotted_egraphs::egraph::rebuild] from update_analysis id2 True
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[entry::chc] calling merge to id2
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id2
[slotted_egraphs::egraph::rebuild] end of handle_pending id2: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> true
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (var $0) (var $1))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> true
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0)]), ($0 -> $0))
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f3)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f3)])
[entry::chc] get {$f3: Unknown}
[slotted_egraphs::egraph::add] classes insert id3
[slotted_egraphs::egraph::add] add to id3 PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id3
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[slotted_egraphs::egraph::add] remove from id3 PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::add] add to id3 PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id3 PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Unknown} }
    ($f0):>> Var($f0)
     - Var($f0)
    
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f3)])
[entry::chc] get {$f3: Unknown}
[entry::chc] calling merge to id3
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f3: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f3: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[entry::chc] eclassSlots {$f3}
[entry::chc] result varTypes {$f3: Unknown}
[slotted_egraphs::egraph] updating data for id3
[slotted_egraphs::egraph::rebuild] end of handle_pending id3: ($f3 -> $f3)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred (var $0))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> true
[slotted_egraphs::egraph::add] shape_called_from_add input New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::add] ret (New(id3: ($f3 -> $0), id2: (), []), ($0 -> $0))
[entry::chc] calling make on New(id3: ($f3 -> $f4), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f4}
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for New(id3: ($f3 -> $f4), id2: (), [])
[entry::chc] get {$f4: Unknown}
[slotted_egraphs::egraph::add] classes insert id4
[slotted_egraphs::egraph::add] add to id4 New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id4
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[slotted_egraphs::egraph::add] remove from id4 New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::add] add to id4 New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id4 New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc] calling make on New(id3: ($f3 -> $0), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f4}
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f3: Unknown} }
    ($f3):>> PredSyntax([id0: ($f0 -> $f3)])
     - PredSyntax([id0: ($f0 -> $f3)])
    
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for New(id3: ($f3 -> $f4), id2: (), [])
[entry::chc] get {$f4: Unknown}
[entry::chc] calling merge to id4
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f4: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f4: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc] eclassSlots {$f4}
[entry::chc] result varTypes {$f4: Unknown}
[slotted_egraphs::egraph] updating data for id4
[slotted_egraphs::egraph::rebuild] end of handle_pending id4: ($f4 -> $f4)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (new (pred (var $0)) true)
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $0))
[entry::chc] calling make on Compose([AppliedId(id4: ($f4 -> $f5))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f5}
[entry::chc] childId : id4, mapToS : $f4
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc] adding $f5 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id4: ($f4 -> $f5))])
[entry::chc] get {$f5: Unknown}
[slotted_egraphs::egraph::add] classes insert id5
[slotted_egraphs::egraph::add] add to id5 Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id5
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::add] remove from id5 Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::add] add to id5 Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id5 Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] calling make on Compose([AppliedId(id4: ($f4 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f5}
[entry::chc] childId : id4, mapToS : $f4
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc] adding $f5 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id4: ($f4 -> $f5))])
[entry::chc] get {$f5: Unknown}
[entry::chc] calling merge to id5
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f5: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f5: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] eclassSlots {$f5}
[entry::chc] result varTypes {$f5: Unknown}
[slotted_egraphs::egraph] updating data for id5
[slotted_egraphs::egraph::rebuild] end of handle_pending id5: ($f5 -> $f5)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (compose (new (pred (var $0)) true))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0)]), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred (var $1))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> true
[slotted_egraphs::egraph::add] shape_called_from_add input New(id3: ($f3 -> $1), id2: (), [])
[slotted_egraphs::egraph::add] ret (New(id3: ($f3 -> $0), id2: (), []), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (new (pred (var $1)) true)
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $1))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (compose (new (pred (var $1)) true))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f6, $f7}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[entry::chc] get {$f6: Unknown, $f7: Unknown}
[slotted_egraphs::egraph::add] classes insert id6
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id6
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[slotted_egraphs::egraph::add] remove from id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f6, $f7}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[entry::chc] get {$f6: Unknown, $f7: Unknown}
[entry::chc] calling merge to id6
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] eclassSlots {$f7, $f6}
[entry::chc] result varTypes {$f6: Unknown, $f7: Unknown}
[slotted_egraphs::egraph] updating data for id6
[slotted_egraphs::egraph::rebuild] end of handle_pending id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true)))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f8, $f9}
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[entry::chc] get {$f8: Unknown, $f9: Unknown}
[slotted_egraphs::egraph::add] classes insert id7
[slotted_egraphs::egraph::add] add to id7 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id7
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::add] remove from id7 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] add to id7 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id7 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] calling make on Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f8, $f9}
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[entry::chc] get {$f8: Unknown, $f9: Unknown}
[entry::chc] calling merge to id7
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] eclassSlots {$f8, $f9}
[entry::chc] result varTypes {$f8: Unknown, $f9: Unknown}
[slotted_egraphs::egraph] updating data for id7
[slotted_egraphs::egraph::rebuild] end of handle_pending id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true))))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0)]), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred (var $0))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> true
[slotted_egraphs::egraph::add] shape_called_from_add input New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::add] ret (New(id3: ($f3 -> $0), id2: (), []), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (new (pred (var $0)) true)
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (compose (new (pred (var $0)) true))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f10, $f11}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f11 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[entry::chc] get {$f10: Unknown, $f11: Unknown}
[slotted_egraphs::egraph::add] classes insert id8
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id8
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[slotted_egraphs::egraph::add] remove from id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f10, $f11}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f11 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[entry::chc] get {$f10: Unknown, $f11: Unknown}
[entry::chc] calling merge to id8
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] eclassSlots {$f11, $f10}
[entry::chc] result varTypes {$f10: Unknown, $f11: Unknown}
[slotted_egraphs::egraph] updating data for id8
[slotted_egraphs::egraph::rebuild] end of handle_pending id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (new (pred (var $0) (var $1)) true (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true)))) (compose (new (pred (var $0)) true)))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (var $0) (var $1))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> true
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), []), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f12, $f13}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f13 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[entry::chc] get {$f12: Unknown, $f13: Unknown}
[slotted_egraphs::egraph::add] classes insert id9
[slotted_egraphs::egraph::add] add to id9 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id9
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[slotted_egraphs::egraph::add] remove from id9 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[slotted_egraphs::egraph::add] add to id9 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id9 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f12, $f13}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f13 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[entry::chc] get {$f12: Unknown, $f13: Unknown}
[entry::chc] calling merge to id9
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] eclassSlots {$f13, $f12}
[entry::chc] result varTypes {$f13: Unknown, $f12: Unknown}
[slotted_egraphs::egraph] updating data for id9
[slotted_egraphs::egraph::rebuild] end of handle_pending id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (new (pred (var $0) (var $1)) true)
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f14, $f15}
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f15 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[entry::chc] get {$f15: Unknown, $f14: Unknown}
[slotted_egraphs::egraph::add] classes insert id10
[slotted_egraphs::egraph::add] add to id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id10
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[slotted_egraphs::egraph::add] remove from id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[entry::chc] calling make on Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f14, $f15}
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f15 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[entry::chc] get {$f14: Unknown, $f15: Unknown}
[entry::chc] calling merge to id10
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f14: Unknown, $f15: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[entry::chc] eclassSlots {$f14, $f15}
[entry::chc] result varTypes {$f15: Unknown, $f14: Unknown}
[slotted_egraphs::egraph] updating data for id10
[slotted_egraphs::egraph::rebuild] end of handle_pending id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0) (var $1)) true (compose (new (pred (var $0)) true)) (compose (new (pred (var $1)) true)))) (compose (new (pred (var $0)) true))) (new (pred (var $0) (var $1)) true))
[slotted_egraphs::parse] from (compose <(new ?syntax1 (true) <(compose <*1>) *2>) *3>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *1)
[slotted_egraphs::parse] left tokens [Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::parse] left tokens [Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(3)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(1)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (compose <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f14, $f11 -> $f15), id9: ($f12 -> $f14, $f13 -> $f15)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f14, $f11 -> $f15)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f14, $f11 -> $f15)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f14, $f2 -> $f15), id2: (), [AppliedId(id7: ($f8 -> $f14, $f9 -> $f15)), AppliedId(id5: ($f5 -> $f14))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id8: ($f10 -> $f14, $f11 -> $f15)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f14, $f2 -> $f15), id2: (), [AppliedId(id7: ($f8 -> $f14, $f9 -> $f15)), AppliedId(id5: ($f5 -> $f14))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f14, $f2 -> $f15), id2: (), id7: ($f8 -> $f14, $f9 -> $f15), id5: ($f5 -> $f14)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f14, $f2 -> $f15)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f14, $f2 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f14, $f2 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f14, $f2 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f14, $f9 -> $f15)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f14, $f9 -> $f15)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f14, $f7 -> $f15))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id7: ($f8 -> $f14, $f9 -> $f15)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f14, $f7 -> $f15))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f14, $f7 -> $f15)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id6: ($f6 -> $f14, $f7 -> $f15)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f14, $f7 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id6
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f14, $f2 -> $f15), "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id6
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
                "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id7: ($f8 -> $f14, $f9 -> $f15)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f14, $f2 -> $f15), "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
                "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f14)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f14) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f14), "syntax1": id1: ($f1 -> $f14, $f2 -> $f15), "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id7
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f14),
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
                "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax1 true (compose *1) *2) in id8: ($f10 -> $f14, $f11 -> $f15)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f14), "syntax1": id1: ($f1 -> $f14, $f2 -> $f15), "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f14),
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
                "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f14, $f13 -> $f15)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f14, $f13 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f14), "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15), "star_3_0": id9: ($f12 -> $f14, $f13 -> $f15), "syntax1": id1: ($f1 -> $f14, $f2 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f14),
                "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15),
                "star_3_0": id9: ($f12 -> $f14, $f13 -> $f15),
                "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new ?syntax1 true (compose *1) *2) *3) in id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f14), "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15), "star_3_0": id9: ($f12 -> $f14, $f13 -> $f15), "syntax1": id1: ($f1 -> $f14, $f2 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id5: ($f5 -> $f14),
            "star_1_0": id6: ($f6 -> $f14, $f7 -> $f15),
            "star_3_0": id9: ($f12 -> $f14, $f13 -> $f15),
            "syntax1": id1: ($f1 -> $f14, $f2 -> $f15),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f7),
                "star_1_0": id5: ($f5 -> $f6),
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f7),
            "star_1_0": id5: ($f5 -> $f6),
            "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f10, $f2 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f10, $f9 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id7
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
                "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f10)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id7
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f10),
                "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f10),
            "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
            "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::egraph] input enodes_applied id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f5)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_0": id4: ($f4 -> $f5),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_0": id4: ($f4 -> $f5),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id6: ($f6 -> $f8, $f7 -> $f9)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id6
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id6
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_0": id6: ($f6 -> $f8, $f7 -> $f9),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_0": id6: ($f6 -> $f8, $f7 -> $f9),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f14, $f11 -> $f15), id9: ($f12 -> $f14, $f13 -> $f15)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f14, $f11 -> $f15)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f14, $f11 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id8
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id8: ($f10 -> $f14, $f11 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id8: ($f10 -> $f14, $f11 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f14, $f13 -> $f15)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f14, $f13 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id9: ($f12 -> $f14, $f13 -> $f15), "star_1_0": id8: ($f10 -> $f14, $f11 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id9: ($f12 -> $f14, $f13 -> $f15),
                "star_1_0": id8: ($f10 -> $f14, $f11 -> $f15),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id10: ($f14 -> $f14, $f15 -> $f15)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id9: ($f12 -> $f14, $f13 -> $f15), "star_1_0": id8: ($f10 -> $f14, $f11 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id9: ($f12 -> $f14, $f13 -> $f15),
            "star_1_0": id8: ($f10 -> $f14, $f11 -> $f15),
        },
        partial_slotmap: (),
    }
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f16),
            "star_1_0": id6: ($f6 -> $f16, $f7 -> $f17),
            "star_3_0": id9: ($f12 -> $f16, $f13 -> $f17),
            "syntax1": id1: ($f1 -> $f16, $f2 -> $f17),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(True, []), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax2 or PVar("syntax2")
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax2 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_0 or PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_1 or PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax2
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) *4
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_4_1": id5: ($f5 -> $f7),
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax2 true *4) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_4_1": id5: ($f5 -> $f7),
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            "star_4_0": id5: ($f5 -> $f6),
        },
        partial_slotmap: ($f6 -> $f16, $f7 -> $f17),
    }
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f16, $f2 -> $f17), id2: (), [AppliedId(id5: ($f5 -> $f16)), AppliedId(id5: ($f5 -> $f16)), AppliedId(id5: ($f5 -> $f17))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f16, $1 -> $f17))
[entry::chc] calling make on New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f27, $f28}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f28 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f28 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
[entry::chc] get {$f27: Unknown, $f28: Unknown}
[slotted_egraphs::egraph::add] classes insert id11
[slotted_egraphs::egraph::add] add to id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id11
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f27: Unknown, $f28: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::add] remove from id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f27: Unknown, $f28: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f27: Unknown, $f28: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f27, $f28}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f28 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f28 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
[entry::chc] get {$f27: Unknown, $f28: Unknown}
[entry::chc] calling merge to id11
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f27: Unknown, $f28: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f27: Unknown, $f28: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f27: Unknown, $f28: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f27: Unknown, $f28: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[entry::chc] eclassSlots {$f28, $f27}
[entry::chc] result varTypes {$f28: Unknown, $f27: Unknown}
[slotted_egraphs::egraph] updating data for id11
[slotted_egraphs::egraph::rebuild] end of handle_pending id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f16, $f7 -> $f17))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f16, $1 -> $f17))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f16, $f2 -> $f17), id2: (), [AppliedId(id7: ($f8 -> $f16, $f9 -> $f17)), AppliedId(id5: ($f5 -> $f16))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f16, $1 -> $f17))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f16, $f11 -> $f17)), AppliedId(id9: ($f12 -> $f16, $f13 -> $f17))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f16, $1 -> $f17))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f16, $f13 -> $f17)), AppliedId(id11: ($f27 -> $f16, $f28 -> $f17))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))]), ($0 -> $f16, $1 -> $f17))
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id11, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id11, mapToS : $f28
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
[entry::chc] get {$f30: Unknown, $f29: Unknown}
[slotted_egraphs::egraph::add] classes insert id12
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id11, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id11, mapToS : $f28
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
[entry::chc] get {$f29: Unknown, $f30: Unknown}
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Unknown, $f30: Unknown}
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::rebuild] end of handle_pending id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id10: ($f14 -> $f16, $f15 -> $f17)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f16, $f30 -> $f17)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[slotted_egraphs::egraph::union] Call move_to id10: ($f14 -> $f16, $f15 -> $f17), id12: ($f29 -> $f16, $f30 -> $f17)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Unknown, $f30: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f15: Unknown, $f14: Unknown} }
    ($f14, $f15):>> Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
     - Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id12 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id12 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] calling make on Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
[entry::chc] get {$f30: Unknown, $f29: Unknown}
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Unknown, $f30: Unknown}
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::rebuild] end of handle_pending id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f19, $f2 -> $f18), id2: (), [AppliedId(id5: ($f5 -> $f19)), AppliedId(id5: ($f5 -> $f18))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f19, $1 -> $f18))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f19, $f2 -> $f18), id2: (), [AppliedId(id5: ($f5 -> $f19)), AppliedId(id5: ($f5 -> $f18))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f19, $1 -> $f18))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f19, $f7 -> $f18)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f19, $f7 -> $f18)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f19, $f2 -> $f18), id2: (), [AppliedId(id5: ($f5 -> $f19)), AppliedId(id5: ($f5 -> $f18))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f19, $1 -> $f18))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f19, $f2 -> $f18), id2: (), [AppliedId(id5: ($f5 -> $f18)), AppliedId(id5: ($f5 -> $f19))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f19, $1 -> $f18))
[entry::chc] calling make on New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f31, $f32}
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f32 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
[entry::chc] get {$f31: Unknown, $f32: Unknown}
[slotted_egraphs::egraph::add] classes insert id13
[slotted_egraphs::egraph::add] add to id13 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id13
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f31: Unknown, $f32: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[slotted_egraphs::egraph::add] remove from id13 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id13 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f31: Unknown, $f32: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id13 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f31: Unknown, $f32: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32}
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f32 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
[entry::chc] get {$f32: Unknown, $f31: Unknown}
[entry::chc] calling merge to id13
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f31: Unknown, $f32: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f31: Unknown, $f32: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f32: Unknown, $f31: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f31: Unknown, $f32: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[entry::chc] eclassSlots {$f32, $f31}
[entry::chc] result varTypes {$f32: Unknown, $f31: Unknown}
[slotted_egraphs::egraph] updating data for id13
[slotted_egraphs::egraph::rebuild] end of handle_pending id13: ($f31 -> $f31, $f32 -> $f32)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f32: Unknown, $f31: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f19, $f7 -> $f18)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[slotted_egraphs::egraph::union] r: id13: ($f31 -> $f18, $f32 -> $f19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f32: Unknown, $f31: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[slotted_egraphs::egraph::union] Call move_to id13: ($f31 -> $f18, $f32 -> $f19), id6: ($f6 -> $f19, $f7 -> $f18)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f32: Unknown, $f31: Unknown} }
[entry::chc] calling merge to id6
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f32: Unknown, $f31: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[entry::chc] eclassSlots {$f7, $f6}
[entry::chc] result varTypes {$f7: Unknown, $f6: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f6: Unknown, $f7: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
[slotted_egraphs::egraph] updating data for id6
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f32: Unknown, $f31: Unknown} }
    ($f31, $f32):>> New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
     - New(id1: ($f1 -> $f32, $f2 -> $f31), id2: (), [AppliedId(id5: ($f5 -> $f31)), AppliedId(id5: ($f5 -> $f32))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
    
[slotted_egraphs::egraph::add] remove from id13 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id6
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] remove from id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f6, $f7}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[entry::chc] get {$f7: Unknown, $f6: Unknown}
[entry::chc] calling merge to id6
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc] eclassSlots {$f7, $f6}
[entry::chc] result varTypes {$f7: Unknown, $f6: Unknown}
[slotted_egraphs::egraph] updating data for id6
[slotted_egraphs::egraph::rebuild] end of handle_pending id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f20, $f2 -> $f21), id2: (), [AppliedId(id7: ($f8 -> $f20, $f9 -> $f21)), AppliedId(id5: ($f5 -> $f20))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f20, $1 -> $f21))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f20, $f2 -> $f21), id2: (), [AppliedId(id7: ($f8 -> $f20, $f9 -> $f21)), AppliedId(id5: ($f5 -> $f20))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f20, $1 -> $f21))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f20, $f11 -> $f21)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f20, $f11 -> $f21)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f20, $f2 -> $f21), id2: (), [AppliedId(id7: ($f8 -> $f20, $f9 -> $f21)), AppliedId(id5: ($f5 -> $f20))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f20, $1 -> $f21))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f20, $f2 -> $f21), id2: (), [AppliedId(id5: ($f5 -> $f20)), AppliedId(id7: ($f8 -> $f20, $f9 -> $f21))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f20, $1 -> $f21))
[entry::chc] calling make on New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f33, $f34}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f34 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
[entry::chc] get {$f33: Unknown, $f34: Unknown}
[slotted_egraphs::egraph::add] classes insert id14
[slotted_egraphs::egraph::add] add to id14 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id14
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f33: Unknown, $f34: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[slotted_egraphs::egraph::add] remove from id14 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] add to id14 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f33: Unknown, $f34: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id14 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f33: Unknown, $f34: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f33, $f34}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f34 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
[entry::chc] get {$f34: Unknown, $f33: Unknown}
[entry::chc] calling merge to id14
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f33: Unknown, $f34: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f33: Unknown, $f34: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f34: Unknown, $f33: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f33: Unknown, $f34: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[entry::chc] eclassSlots {$f34, $f33}
[entry::chc] result varTypes {$f34: Unknown, $f33: Unknown}
[slotted_egraphs::egraph] updating data for id14
[slotted_egraphs::egraph::rebuild] end of handle_pending id14: ($f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f34: Unknown, $f33: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f20, $f11 -> $f21)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[slotted_egraphs::egraph::union] r: id14: ($f33 -> $f20, $f34 -> $f21)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f34: Unknown, $f33: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[slotted_egraphs::egraph::union] Call move_to id14: ($f33 -> $f20, $f34 -> $f21), id8: ($f10 -> $f20, $f11 -> $f21)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f34: Unknown, $f33: Unknown} }
[entry::chc] calling merge to id8
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f34: Unknown, $f33: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[entry::chc] eclassSlots {$f11, $f10}
[entry::chc] result varTypes {$f11: Unknown, $f10: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
[slotted_egraphs::egraph] updating data for id8
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f34: Unknown, $f33: Unknown} }
    ($f33, $f34):>> New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
     - New(id1: ($f1 -> $f33, $f2 -> $f34), id2: (), [AppliedId(id5: ($f5 -> $f33)), AppliedId(id7: ($f8 -> $f33, $f9 -> $f34))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
    
[slotted_egraphs::egraph::add] remove from id14 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id8
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] remove from id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f10, $f11}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f11 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[entry::chc] get {$f11: Unknown, $f10: Unknown}
[entry::chc] calling merge to id8
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] eclassSlots {$f11, $f10}
[entry::chc] result varTypes {$f11: Unknown, $f10: Unknown}
[slotted_egraphs::egraph] updating data for id8
[slotted_egraphs::egraph::rebuild] end of handle_pending id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $f22))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $f22))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $f22))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $f22))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id5: ($f5 -> $f22)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::union] r: id5: ($f5 -> $f22)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f23, $f7 -> $f24))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f23, $1 -> $f24))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f23, $f7 -> $f24))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f23, $1 -> $f24))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id7: ($f8 -> $f23, $f9 -> $f24)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::union] r: id7: ($f8 -> $f23, $f9 -> $f24)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f25, $f11 -> $f26)), AppliedId(id9: ($f12 -> $f25, $f13 -> $f26))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f25, $1 -> $f26))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f25, $f11 -> $f26)), AppliedId(id9: ($f12 -> $f25, $f13 -> $f26))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f25, $1 -> $f26))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f25, $f30 -> $f26)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f25, $f30 -> $f26)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f25, $f11 -> $f26)), AppliedId(id9: ($f12 -> $f25, $f13 -> $f26))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f25, $1 -> $f26))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f25, $f13 -> $f26)), AppliedId(id8: ($f10 -> $f25, $f11 -> $f26))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f25, $1 -> $f26))
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f35, $f36}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
[entry::chc] get {$f35: Unknown, $f36: Unknown}
[slotted_egraphs::egraph::add] classes insert id15
[slotted_egraphs::egraph::add] add to id15 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id15
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f35: Unknown, $f36: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[slotted_egraphs::egraph::add] remove from id15 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::add] add to id15 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f35: Unknown, $f36: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id15 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f35: Unknown, $f36: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f35, $f36}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
[entry::chc] get {$f35: Unknown, $f36: Unknown}
[entry::chc] calling merge to id15
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f35: Unknown, $f36: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f35: Unknown, $f36: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f35: Unknown, $f36: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f35: Unknown, $f36: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[entry::chc] eclassSlots {$f36, $f35}
[entry::chc] result varTypes {$f36: Unknown, $f35: Unknown}
[slotted_egraphs::egraph] updating data for id15
[slotted_egraphs::egraph::rebuild] end of handle_pending id15: ($f35 -> $f35, $f36 -> $f36)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f36: Unknown, $f35: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f25, $f30 -> $f26)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id15: ($f35 -> $f25, $f36 -> $f26)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f36: Unknown, $f35: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[slotted_egraphs::egraph::union] Call move_to id15: ($f35 -> $f25, $f36 -> $f26), id12: ($f29 -> $f25, $f30 -> $f26)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f36: Unknown, $f35: Unknown} }
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f36: Unknown, $f35: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Unknown, $f30: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f36: Unknown, $f35: Unknown} }
    ($f35, $f36):>> Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
     - Compose([AppliedId(id9: ($f12 -> $f35, $f13 -> $f36)), AppliedId(id8: ($f10 -> $f35, $f11 -> $f36))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id15 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
[entry::chc] get {$f29: Unknown, $f30: Unknown}
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Unknown, $f29: Unknown}
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::rebuild] end of handle_pending id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))]), Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))]), Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id11: ($f27 -> $f29, $f28 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id11: ($f27 -> $f29, $f28 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id11
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id7: ($f8 -> $f29, $f9 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f29, $f2 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f29, $f7 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f29, $f7 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f29, $f7 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id6: ($f6 -> $f29, $f7 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f29, $f7 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id6
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id6
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id7
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id7: ($f8 -> $f29, $f9 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f29, $f2 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f29, $f9 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id7
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id7
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax1 true (compose *1) *2) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
                "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
                "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new ?syntax1 true (compose *1) *2) *3) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id5: ($f5 -> $f29),
            "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
            "star_1_0": id4: ($f4 -> $f29),
            "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f7),
                "star_1_0": id5: ($f5 -> $f6),
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f6),
                "star_1_0": id5: ($f5 -> $f7),
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }, State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f7),
            "star_1_0": id5: ($f5 -> $f6),
            "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f6),
            "star_1_0": id5: ($f5 -> $f7),
            "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f10, $f2 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f10, $f9 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id7
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
                "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f10)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id7
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f10),
                "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f10, $f2 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f10)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f10),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f10, $f9 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id7
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id7
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11),
                "star_1_0": id5: ($f5 -> $f10),
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }, State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f10),
            "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
            "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11),
            "star_1_0": id5: ($f5 -> $f10),
            "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::egraph] input enodes_applied id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f27, $f2 -> $f28), id2: (), id5: ($f5 -> $f27), id5: ($f5 -> $f27), id5: ($f5 -> $f28)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f27, $f2 -> $f28)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f27, $f2 -> $f28) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f27, $f2 -> $f28)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f27, $f2 -> $f28),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f27, $f2 -> $f28), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f27, $f2 -> $f28),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f27)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f27) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f27, $f2 -> $f28), "cond": id2: (), "star_1_0": id5: ($f5 -> $f27)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f27, $f2 -> $f28),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f27),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f27)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f27) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f27), "star_1_0": id5: ($f5 -> $f27), "syntax": id1: ($f1 -> $f27, $f2 -> $f28)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f27),
                "star_1_0": id5: ($f5 -> $f27),
                "syntax": id1: ($f1 -> $f27, $f2 -> $f28),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f28)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f28) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f27), "star_1_0": id5: ($f5 -> $f27), "syntax": id1: ($f1 -> $f27, $f2 -> $f28), "star_1_2": id5: ($f5 -> $f28)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f27),
                "star_1_0": id5: ($f5 -> $f27),
                "syntax": id1: ($f1 -> $f27, $f2 -> $f28),
                "star_1_2": id5: ($f5 -> $f28),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f27), "star_1_0": id5: ($f5 -> $f27), "syntax": id1: ($f1 -> $f27, $f2 -> $f28), "star_1_2": id5: ($f5 -> $f28)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f27),
            "star_1_0": id5: ($f5 -> $f27),
            "syntax": id1: ($f1 -> $f27, $f2 -> $f28),
            "star_1_2": id5: ($f5 -> $f28),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))]), Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))]), Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f5)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_0": id4: ($f4 -> $f5),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_0": id4: ($f4 -> $f5),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id6: ($f6 -> $f8, $f7 -> $f9)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id6
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id6
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_0": id6: ($f6 -> $f8, $f7 -> $f9),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_0": id6: ($f6 -> $f8, $f7 -> $f9),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id11: ($f27 -> $f27, $f28 -> $f28)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))]), Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))]), Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f29, $f11 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id8
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id8: ($f10 -> $f29, $f11 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id8: ($f10 -> $f29, $f11 -> $f30),
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id11: ($f27 -> $f29, $f28 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id11: ($f27 -> $f29, $f28 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id11: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id11
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id11: ($f27 -> $f29, $f28 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id11
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id11: ($f27 -> $f29, $f28 -> $f30),
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f29, $f11 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id8
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id8: ($f10 -> $f29, $f11 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id9: ($f12 -> $f29, $f13 -> $f30), "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id9: ($f12 -> $f29, $f13 -> $f30),
                "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id8: ($f10 -> $f29, $f11 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_1_1": id11: ($f27 -> $f29, $f28 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_1_1": id9: ($f12 -> $f29, $f13 -> $f30), "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id8: ($f10 -> $f29, $f11 -> $f30),
            "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id11: ($f27 -> $f29, $f28 -> $f30),
            "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id9: ($f12 -> $f29, $f13 -> $f30),
            "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30),
        },
        partial_slotmap: (),
    }
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f37),
            "star_1_0": id6: ($f6 -> $f37, $f7 -> $f38),
            "star_3_0": id9: ($f12 -> $f37, $f13 -> $f38),
            "syntax1": id1: ($f1 -> $f37, $f2 -> $f38),
        },
        {
            "star_2_0": id7: ($f8 -> $f39, $f9 -> $f40),
            "star_1_0": id4: ($f4 -> $f39),
            "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40),
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(True, []), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax2 or PVar("syntax2")
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax2 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_0 or PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_1 or PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax2
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) *4
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_4_1": id5: ($f5 -> $f7),
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(True, []), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax2 or PVar("syntax2")
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax2 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_0 or PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_1 or PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax2
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) *4
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_4_1": id5: ($f5 -> $f6),
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax2 true *4) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }, State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_4_1": id5: ($f5 -> $f7),
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            "star_4_0": id5: ($f5 -> $f6),
        },
        partial_slotmap: ($f6 -> $f37, $f7 -> $f38),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_4_1": id5: ($f5 -> $f6),
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            "star_4_0": id5: ($f5 -> $f7),
        },
        partial_slotmap: ($f6 -> $f37, $f7 -> $f38),
    }
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f37, $f2 -> $f38), id2: (), [AppliedId(id5: ($f5 -> $f37)), AppliedId(id5: ($f5 -> $f37)), AppliedId(id5: ($f5 -> $f38))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f37, $f2 -> $f38), id2: (), [AppliedId(id5: ($f5 -> $f37)), AppliedId(id5: ($f5 -> $f38)), AppliedId(id5: ($f5 -> $f37))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f37, $1 -> $f38))
[entry::chc] calling make on New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
[entry::chc] get {$f60: Unknown, $f61: Unknown}
[slotted_egraphs::egraph::add] classes insert id16
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id16
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[slotted_egraphs::egraph::add] remove from id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
[entry::chc] get {$f61: Unknown, $f60: Unknown}
[entry::chc] calling merge to id16
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Unknown, $f60: Unknown}
[slotted_egraphs::egraph] updating data for id16
[slotted_egraphs::egraph::rebuild] end of handle_pending id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f37, $f7 -> $f38))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f37, $f2 -> $f38), id2: (), [AppliedId(id7: ($f8 -> $f37, $f9 -> $f38)), AppliedId(id5: ($f5 -> $f37))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f37, $f11 -> $f38)), AppliedId(id9: ($f12 -> $f37, $f13 -> $f38))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f37, $f13 -> $f38)), AppliedId(id11: ($f27 -> $f37, $f28 -> $f38))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f37, $f30 -> $f38)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f37, $f30 -> $f38)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f37, $f7 -> $f38))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f37, $f2 -> $f38), id2: (), [AppliedId(id7: ($f8 -> $f37, $f9 -> $f38)), AppliedId(id5: ($f5 -> $f37))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f37, $f11 -> $f38)), AppliedId(id9: ($f12 -> $f37, $f13 -> $f38))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f37, $1 -> $f38))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f37, $f13 -> $f38)), AppliedId(id16: ($f60 -> $f37, $f61 -> $f38))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f37, $1 -> $f38))
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f62, $f63}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id16, mapToS : $f60
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id16, mapToS : $f61
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] adding $f63 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
[entry::chc] get {$f62: Unknown, $f63: Unknown}
[slotted_egraphs::egraph::add] classes insert id17
[slotted_egraphs::egraph::add] add to id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id17
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f62: Unknown, $f63: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[slotted_egraphs::egraph::add] remove from id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::add] add to id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f62: Unknown, $f63: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f62: Unknown, $f63: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f62, $f63}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id16, mapToS : $f60
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id16, mapToS : $f61
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] adding $f63 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
[entry::chc] get {$f62: Unknown, $f63: Unknown}
[entry::chc] calling merge to id17
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f62: Unknown, $f63: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f62: Unknown, $f63: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f62: Unknown, $f63: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f62: Unknown, $f63: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[entry::chc] eclassSlots {$f63, $f62}
[entry::chc] result varTypes {$f63: Unknown, $f62: Unknown}
[slotted_egraphs::egraph] updating data for id17
[slotted_egraphs::egraph::rebuild] end of handle_pending id17: ($f62 -> $f62, $f63 -> $f63)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f63: Unknown, $f62: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f37, $f30 -> $f38)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id17: ($f62 -> $f37, $f63 -> $f38)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f63: Unknown, $f62: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[slotted_egraphs::egraph::union] Call move_to id17: ($f62 -> $f37, $f63 -> $f38), id12: ($f29 -> $f37, $f30 -> $f38)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f63: Unknown, $f62: Unknown} }
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f63: Unknown, $f62: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Unknown, $f30: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f63: Unknown, $f62: Unknown} }
    ($f62, $f63):>> Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
     - Compose([AppliedId(id9: ($f12 -> $f62, $f13 -> $f63)), AppliedId(id16: ($f60 -> $f62, $f61 -> $f63))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id16, mapToS : $f60
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id16, mapToS : $f61
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
[entry::chc] get {$f29: Unknown, $f30: Unknown}
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Unknown, $f30: Unknown}
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::rebuild] end of handle_pending id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(4)]) != New(id0: (), id0: (), [])
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f42, $f2 -> $f41), id2: (), [AppliedId(id5: ($f5 -> $f42)), AppliedId(id5: ($f5 -> $f41))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f42, $1 -> $f41))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f42, $f2 -> $f41), id2: (), [AppliedId(id5: ($f5 -> $f42)), AppliedId(id5: ($f5 -> $f41))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f42, $1 -> $f41))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f42, $f7 -> $f41)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f42, $f7 -> $f41)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f42, $f2 -> $f41), id2: (), [AppliedId(id5: ($f5 -> $f42)), AppliedId(id5: ($f5 -> $f41))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f42, $1 -> $f41))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f42, $f2 -> $f41), id2: (), [AppliedId(id5: ($f5 -> $f41)), AppliedId(id5: ($f5 -> $f42))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f42, $1 -> $f41))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f42, $f7 -> $f41)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f42, $f7 -> $f41)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f43, $f2 -> $f44), id2: (), [AppliedId(id5: ($f5 -> $f44)), AppliedId(id5: ($f5 -> $f43))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f43, $1 -> $f44))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f43, $f2 -> $f44), id2: (), [AppliedId(id5: ($f5 -> $f44)), AppliedId(id5: ($f5 -> $f43))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f43, $1 -> $f44))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f43, $f7 -> $f44)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f43, $f7 -> $f44)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f43, $f2 -> $f44), id2: (), [AppliedId(id5: ($f5 -> $f44)), AppliedId(id5: ($f5 -> $f43))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f43, $1 -> $f44))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f43, $f2 -> $f44), id2: (), [AppliedId(id5: ($f5 -> $f43)), AppliedId(id5: ($f5 -> $f44))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f43, $1 -> $f44))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f43, $f7 -> $f44)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f43, $f7 -> $f44)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f45, $f2 -> $f46), id2: (), [AppliedId(id7: ($f8 -> $f45, $f9 -> $f46)), AppliedId(id5: ($f5 -> $f45))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f45, $1 -> $f46))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f45, $f2 -> $f46), id2: (), [AppliedId(id7: ($f8 -> $f45, $f9 -> $f46)), AppliedId(id5: ($f5 -> $f45))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f45, $1 -> $f46))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f45, $f11 -> $f46)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f45, $f11 -> $f46)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f45, $f2 -> $f46), id2: (), [AppliedId(id7: ($f8 -> $f45, $f9 -> $f46)), AppliedId(id5: ($f5 -> $f45))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f45, $1 -> $f46))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f45, $f2 -> $f46), id2: (), [AppliedId(id5: ($f5 -> $f45)), AppliedId(id7: ($f8 -> $f45, $f9 -> $f46))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f45, $1 -> $f46))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f45, $f11 -> $f46)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f45, $f11 -> $f46)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f47, $f2 -> $f48), id2: (), [AppliedId(id5: ($f5 -> $f47)), AppliedId(id7: ($f8 -> $f47, $f9 -> $f48))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f47, $1 -> $f48))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f47, $f2 -> $f48), id2: (), [AppliedId(id5: ($f5 -> $f47)), AppliedId(id7: ($f8 -> $f47, $f9 -> $f48))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f47, $1 -> $f48))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f47, $f11 -> $f48)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f47, $f11 -> $f48)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f47, $f2 -> $f48), id2: (), [AppliedId(id5: ($f5 -> $f47)), AppliedId(id7: ($f8 -> $f47, $f9 -> $f48))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f47, $1 -> $f48))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f47, $f2 -> $f48), id2: (), [AppliedId(id7: ($f8 -> $f47, $f9 -> $f48)), AppliedId(id5: ($f5 -> $f47))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f47, $1 -> $f48))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f47, $f11 -> $f48)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f47, $f11 -> $f48)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id11: ($f27 -> $f49, $f28 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::union] r: id11: ($f27 -> $f49, $f28 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id11: ($f27 -> $f49, $f28 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::union] r: id11: ($f27 -> $f49, $f28 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50)), AppliedId(id5: ($f5 -> $f49))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id11: ($f27 -> $f49, $f28 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[slotted_egraphs::egraph::union] Call move_to id11: ($f27 -> $f49, $f28 -> $f50), id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
[entry::chc] calling merge to id16
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f60: Unknown, $f61: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
[slotted_egraphs::egraph] updating data for id16
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f28: Unknown, $f27: Unknown} }
    ($f27, $f28):>> New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
     - New(id1: ($f1 -> $f27, $f2 -> $f28), id2: (), [AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f27)), AppliedId(id5: ($f5 -> $f28))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
    
[slotted_egraphs::egraph::add] remove from id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id12 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id11: ($f27 -> $0, $f28 -> $1))])
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] end handling pending at 1
[slotted_egraphs::egraph::rebuild] begin of handle_pending id16
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
[entry::chc] get {$f61: Unknown, $f60: Unknown}
[entry::chc] calling merge to id16
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f60: Unknown, $f61: Unknown}
[slotted_egraphs::egraph] updating data for id16
[slotted_egraphs::egraph::rebuild] end of handle_pending id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50)), AppliedId(id5: ($f5 -> $f49))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f50)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f49, $1 -> $f50))
[entry::chc] calling make on New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f64, $f65}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f64 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f64 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f64 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f65 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
[entry::chc] get {$f64: Unknown, $f65: Unknown}
[slotted_egraphs::egraph::add] classes insert id18
[slotted_egraphs::egraph::add] add to id18 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id18
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f64: Unknown, $f65: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[slotted_egraphs::egraph::add] remove from id18 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id18 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f64: Unknown, $f65: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id18 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f64: Unknown, $f65: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f64, $f65}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f64 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f64 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f64 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f65 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
[entry::chc] get {$f65: Unknown, $f64: Unknown}
[entry::chc] calling merge to id18
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f64: Unknown, $f65: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f64: Unknown, $f65: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f65: Unknown, $f64: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f64: Unknown, $f65: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[entry::chc] eclassSlots {$f64, $f65}
[entry::chc] result varTypes {$f65: Unknown, $f64: Unknown}
[slotted_egraphs::egraph] updating data for id18
[slotted_egraphs::egraph::rebuild] end of handle_pending id18: ($f64 -> $f64, $f65 -> $f65)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f65: Unknown, $f64: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id18: ($f64 -> $f49, $f65 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f65: Unknown, $f64: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[slotted_egraphs::egraph::union] Call move_to id18: ($f64 -> $f49, $f65 -> $f50), id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f65: Unknown, $f64: Unknown} }
[entry::chc] calling merge to id16
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f65: Unknown, $f64: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Unknown, $f60: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
[slotted_egraphs::egraph] updating data for id16
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f65: Unknown, $f64: Unknown} }
    ($f64, $f65):>> New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
     - New(id1: ($f1 -> $f64, $f2 -> $f65), id2: (), [AppliedId(id5: ($f5 -> $f65)), AppliedId(id5: ($f5 -> $f64)), AppliedId(id5: ($f5 -> $f64))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id18 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id16
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
[entry::chc] get {$f60: Unknown, $f61: Unknown}
[entry::chc] calling merge to id16
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f60: Unknown, $f61: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Unknown, $f60: Unknown}
[slotted_egraphs::egraph] updating data for id16
[slotted_egraphs::egraph::rebuild] end of handle_pending id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f50))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f49, $f2 -> $f50), id2: (), [AppliedId(id5: ($f5 -> $f50)), AppliedId(id5: ($f5 -> $f49)), AppliedId(id5: ($f5 -> $f49))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f49, $1 -> $f50))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f49, $f61 -> $f50)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $f51))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $f51))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $f51))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $f51))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id5: ($f5 -> $f51)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::union] r: id5: ($f5 -> $f51)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f52, $f7 -> $f53))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f52, $1 -> $f53))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f52, $f7 -> $f53))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f52, $1 -> $f53))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id7: ($f8 -> $f52, $f9 -> $f53)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::union] r: id7: ($f8 -> $f52, $f9 -> $f53)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f54, $f13 -> $f55)), AppliedId(id8: ($f10 -> $f54, $f11 -> $f55))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f54, $1 -> $f55))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f54, $f13 -> $f55)), AppliedId(id8: ($f10 -> $f54, $f11 -> $f55))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f54, $1 -> $f55))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f54, $f30 -> $f55)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f54, $f30 -> $f55)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f54, $f13 -> $f55)), AppliedId(id8: ($f10 -> $f54, $f11 -> $f55))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f54, $1 -> $f55))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f54, $f11 -> $f55)), AppliedId(id9: ($f12 -> $f54, $f13 -> $f55))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f54, $1 -> $f55))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f54, $f30 -> $f55)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f54, $f30 -> $f55)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f56, $f13 -> $f57)), AppliedId(id11: ($f27 -> $f56, $f28 -> $f57))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f56, $1 -> $f57))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f56, $f13 -> $f57)), AppliedId(id11: ($f27 -> $f56, $f28 -> $f57))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f56, $1 -> $f57))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f56, $f30 -> $f57)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f56, $f30 -> $f57)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f56, $f13 -> $f57)), AppliedId(id11: ($f27 -> $f56, $f28 -> $f57))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f56, $1 -> $f57))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id11: ($f27 -> $f56, $f28 -> $f57)), AppliedId(id9: ($f12 -> $f56, $f13 -> $f57))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f56, $1 -> $f57))
[entry::chc] calling make on Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f66, $f67}
[entry::chc] childId : id16, mapToS : $f60
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id16, mapToS : $f61
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] adding $f67 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f67 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
[entry::chc] get {$f66: Unknown, $f67: Unknown}
[slotted_egraphs::egraph::add] classes insert id19
[slotted_egraphs::egraph::add] add to id19 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id19
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f66: Unknown, $f67: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[slotted_egraphs::egraph::add] remove from id19 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id19 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f66: Unknown, $f67: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id19 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f66: Unknown, $f67: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[entry::chc] calling make on Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f66, $f67}
[entry::chc] childId : id16, mapToS : $f60
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id16, mapToS : $f61
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] adding $f67 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f67 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
[entry::chc] get {$f66: Unknown, $f67: Unknown}
[entry::chc] calling merge to id19
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f66: Unknown, $f67: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f66: Unknown, $f67: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f66: Unknown, $f67: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f66: Unknown, $f67: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[entry::chc] eclassSlots {$f67, $f66}
[entry::chc] result varTypes {$f67: Unknown, $f66: Unknown}
[slotted_egraphs::egraph] updating data for id19
[slotted_egraphs::egraph::rebuild] end of handle_pending id19: ($f66 -> $f66, $f67 -> $f67)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f67: Unknown, $f66: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f56, $f30 -> $f57)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id19: ($f66 -> $f56, $f67 -> $f57)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f67: Unknown, $f66: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[slotted_egraphs::egraph::union] Call move_to id19: ($f66 -> $f56, $f67 -> $f57), id12: ($f29 -> $f56, $f30 -> $f57)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f67: Unknown, $f66: Unknown} }
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f67: Unknown, $f66: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Unknown, $f30: Unknown}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f67: Unknown, $f66: Unknown} }
    ($f66, $f67):>> Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
     - Compose([AppliedId(id16: ($f60 -> $f66, $f61 -> $f67)), AppliedId(id9: ($f12 -> $f66, $f13 -> $f67))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id19 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] remove from id12 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id12 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id12 Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] calling make on Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id16, mapToS : $f60
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id16, mapToS : $f61
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
[entry::chc] get {$f30: Unknown, $f29: Unknown}
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f29: Unknown, $f30: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Unknown, $f29: Unknown}
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::rebuild] end of handle_pending id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f58, $f11 -> $f59)), AppliedId(id9: ($f12 -> $f58, $f13 -> $f59))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f58, $1 -> $f59))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f58, $f11 -> $f59)), AppliedId(id9: ($f12 -> $f58, $f13 -> $f59))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f58, $1 -> $f59))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f58, $f30 -> $f59)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f58, $f30 -> $f59)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f58, $f11 -> $f59)), AppliedId(id9: ($f12 -> $f58, $f13 -> $f59))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f58, $1 -> $f59))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f58, $f13 -> $f59)), AppliedId(id8: ($f10 -> $f58, $f11 -> $f59))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f58, $1 -> $f59))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f58, $f30 -> $f59)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f58, $f30 -> $f59)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id7: ($f8 -> $f29, $f9 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f29, $f2 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f29, $f7 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f29, $f7 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f29, $f7 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id6: ($f6 -> $f29, $f7 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f29, $f7 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id6
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id6
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id7
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id7: ($f8 -> $f29, $f9 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f29, $f2 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f29, $f9 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f29, $f9 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id7
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id7
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax1 true (compose *1) *2) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
                "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
                "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f29, $f2 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f30), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f30),
                "star_2_1": id5: ($f5 -> $f29),
                "star_1_0": id4: ($f4 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f30), id5: ($f5 -> $f29), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f29, $f2 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_2_1": id5: ($f5 -> $f29),
                "star_1_0": id4: ($f4 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f29), id5: ($f5 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f29, $f2 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30), "star_1_0": id4: ($f4 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_2_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f30), "star_1_0": id4: ($f4 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_2_1": id5: ($f5 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax1 true (compose *1) *2) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f30), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f30), "star_1_0": id4: ($f4 -> $f29), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f30),
                "star_2_1": id5: ($f5 -> $f29),
                "star_1_0": id4: ($f4 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_2_1": id5: ($f5 -> $f29),
                "star_1_0": id4: ($f4 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_2_1": id5: ($f5 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f30), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f30), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_3_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f30), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f30),
                "star_2_1": id5: ($f5 -> $f29),
                "star_1_0": id4: ($f4 -> $f29),
                "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_2_1": id5: ($f5 -> $f29),
                "star_1_0": id4: ($f4 -> $f30),
                "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
        State {
            partial_subst: {
                "star_2_0": id5: ($f5 -> $f29),
                "star_2_1": id5: ($f5 -> $f30),
                "star_1_0": id4: ($f4 -> $f29),
                "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
                "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new ?syntax1 true (compose *1) *2) *3) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f29, $f9 -> $f30), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f30), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f29), "star_1_0": id4: ($f4 -> $f30), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f29), "star_2_1": id5: ($f5 -> $f30), "star_1_0": id4: ($f4 -> $f29), "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30), "syntax1": id1: ($f1 -> $f29, $f2 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id5: ($f5 -> $f29),
            "star_1_0": id6: ($f6 -> $f29, $f7 -> $f30),
            "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id7: ($f8 -> $f29, $f9 -> $f30),
            "star_1_0": id4: ($f4 -> $f29),
            "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id5: ($f5 -> $f30),
            "star_2_1": id5: ($f5 -> $f29),
            "star_1_0": id4: ($f4 -> $f29),
            "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id5: ($f5 -> $f29),
            "star_2_1": id5: ($f5 -> $f29),
            "star_1_0": id4: ($f4 -> $f30),
            "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_2_0": id5: ($f5 -> $f29),
            "star_2_1": id5: ($f5 -> $f30),
            "star_1_0": id4: ($f4 -> $f29),
            "star_3_0": id9: ($f12 -> $f29, $f13 -> $f30),
            "syntax1": id1: ($f1 -> $f29, $f2 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f7),
                "star_1_0": id5: ($f5 -> $f6),
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f6),
                "star_1_0": id5: ($f5 -> $f7),
                "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }, State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f7),
            "star_1_0": id5: ($f5 -> $f6),
            "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f6),
            "star_1_0": id5: ($f5 -> $f7),
            "syntax": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f10, $f2 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f10, $f9 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id7
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
                "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f10)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id7
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f10),
                "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f10, $f2 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f10)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f10),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id7: ($f8 -> $f10, $f9 -> $f11)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id7
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id7
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11),
                "star_1_0": id5: ($f5 -> $f10),
                "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }, State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f10),
            "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11),
            "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11),
            "star_1_0": id5: ($f5 -> $f10),
            "syntax": id1: ($f1 -> $f10, $f2 -> $f11),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f60, $f2 -> $f61), id2: (), id5: ($f5 -> $f60), id5: ($f5 -> $f61), id5: ($f5 -> $f60)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f60, $f2 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f60, $f2 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f60)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f60) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61), "cond": id2: (), "star_1_0": id5: ($f5 -> $f60)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f60),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f61), "star_1_0": id5: ($f5 -> $f60), "syntax": id1: ($f1 -> $f60, $f2 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f61),
                "star_1_0": id5: ($f5 -> $f60),
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f60)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f60) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f61), "star_1_0": id5: ($f5 -> $f60), "syntax": id1: ($f1 -> $f60, $f2 -> $f61), "star_1_2": id5: ($f5 -> $f60)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f61),
                "star_1_0": id5: ($f5 -> $f60),
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "star_1_2": id5: ($f5 -> $f60),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f60, $f2 -> $f61), id2: (), id5: ($f5 -> $f61), id5: ($f5 -> $f60), id5: ($f5 -> $f60)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f60, $f2 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f60, $f2 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61), "cond": id2: (), "star_1_0": id5: ($f5 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f60)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f60) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f60), "star_1_0": id5: ($f5 -> $f61), "syntax": id1: ($f1 -> $f60, $f2 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f60),
                "star_1_0": id5: ($f5 -> $f61),
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f60)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f60) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f60), "star_1_0": id5: ($f5 -> $f61), "syntax": id1: ($f1 -> $f60, $f2 -> $f61), "star_1_2": id5: ($f5 -> $f60)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f60),
                "star_1_0": id5: ($f5 -> $f61),
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "star_1_2": id5: ($f5 -> $f60),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f60, $f2 -> $f61), id2: (), id5: ($f5 -> $f60), id5: ($f5 -> $f60), id5: ($f5 -> $f61)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f60, $f2 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f60, $f2 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id2
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "cond": id2: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f60)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f60) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f60, $f2 -> $f61), "cond": id2: (), "star_1_0": id5: ($f5 -> $f60)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "cond": id2: (),
                "star_1_0": id5: ($f5 -> $f60),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f60)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f60) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f60), "star_1_0": id5: ($f5 -> $f60), "syntax": id1: ($f1 -> $f60, $f2 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f60),
                "star_1_0": id5: ($f5 -> $f60),
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f60), "star_1_0": id5: ($f5 -> $f60), "syntax": id1: ($f1 -> $f60, $f2 -> $f61), "star_1_2": id5: ($f5 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id2: (),
                "star_1_1": id5: ($f5 -> $f60),
                "star_1_0": id5: ($f5 -> $f60),
                "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
                "star_1_2": id5: ($f5 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f61), "star_1_0": id5: ($f5 -> $f60), "syntax": id1: ($f1 -> $f60, $f2 -> $f61), "star_1_2": id5: ($f5 -> $f60)}, partial_slotmap: () }, State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f60), "star_1_0": id5: ($f5 -> $f61), "syntax": id1: ($f1 -> $f60, $f2 -> $f61), "star_1_2": id5: ($f5 -> $f60)}, partial_slotmap: () }, State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f60), "star_1_0": id5: ($f5 -> $f60), "syntax": id1: ($f1 -> $f60, $f2 -> $f61), "star_1_2": id5: ($f5 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f61),
            "star_1_0": id5: ($f5 -> $f60),
            "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            "star_1_2": id5: ($f5 -> $f60),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f60),
            "star_1_0": id5: ($f5 -> $f61),
            "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            "star_1_2": id5: ($f5 -> $f60),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id2: (),
            "star_1_1": id5: ($f5 -> $f60),
            "star_1_0": id5: ($f5 -> $f60),
            "syntax": id1: ($f1 -> $f60, $f2 -> $f61),
            "star_1_2": id5: ($f5 -> $f61),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f5)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id4
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_0": id4: ($f4 -> $f5),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_0": id4: ($f4 -> $f5),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id6: ($f6 -> $f8, $f7 -> $f9)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id6
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id6
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_0": id6: ($f6 -> $f8, $f7 -> $f9),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_0": id6: ($f6 -> $f8, $f7 -> $f9),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f29, $f11 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id8
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id8: ($f10 -> $f29, $f11 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id9: ($f12 -> $f29, $f13 -> $f30), "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id9: ($f12 -> $f29, $f13 -> $f30),
                "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f29, $f11 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id8
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id8: ($f10 -> $f29, $f11 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id8: ($f10 -> $f29, $f11 -> $f30),
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f60 -> $f29, $f61 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id16: ($f60 -> $f29, $f61 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id16: ($f60 -> $f29, $f61 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id9: ($f12 -> $f29, $f13 -> $f30), "star_1_0": id16: ($f60 -> $f29, $f61 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id9: ($f12 -> $f29, $f13 -> $f30),
                "star_1_0": id16: ($f60 -> $f29, $f61 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f29, $f13 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id9
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f60 -> $f29, $f61 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id16: ($f60 -> $f29, $f61 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id16: ($f60 -> $f29, $f61 -> $f30),
                "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id9: ($f12 -> $f29, $f13 -> $f30), "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_1_1": id8: ($f10 -> $f29, $f11 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_1_1": id9: ($f12 -> $f29, $f13 -> $f30), "star_1_0": id16: ($f60 -> $f29, $f61 -> $f30)}, partial_slotmap: () }, State { partial_subst: {"star_1_1": id16: ($f60 -> $f29, $f61 -> $f30), "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id9: ($f12 -> $f29, $f13 -> $f30),
            "star_1_0": id8: ($f10 -> $f29, $f11 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id8: ($f10 -> $f29, $f11 -> $f30),
            "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id9: ($f12 -> $f29, $f13 -> $f30),
            "star_1_0": id16: ($f60 -> $f29, $f61 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id16: ($f60 -> $f29, $f61 -> $f30),
            "star_1_0": id9: ($f12 -> $f29, $f13 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f68),
            "star_1_0": id6: ($f6 -> $f68, $f7 -> $f69),
            "star_3_0": id9: ($f12 -> $f68, $f13 -> $f69),
            "syntax1": id1: ($f1 -> $f68, $f2 -> $f69),
        },
        {
            "star_2_0": id7: ($f8 -> $f70, $f9 -> $f71),
            "star_1_0": id4: ($f4 -> $f70),
            "star_3_0": id9: ($f12 -> $f70, $f13 -> $f71),
            "syntax1": id1: ($f1 -> $f70, $f2 -> $f71),
        },
        {
            "star_2_0": id5: ($f5 -> $f72),
            "star_2_1": id5: ($f5 -> $f73),
            "star_1_0": id4: ($f4 -> $f73),
            "star_3_0": id9: ($f12 -> $f73, $f13 -> $f72),
            "syntax1": id1: ($f1 -> $f73, $f2 -> $f72),
        },
        {
            "star_2_0": id5: ($f5 -> $f74),
            "star_2_1": id5: ($f5 -> $f74),
            "star_1_0": id4: ($f4 -> $f75),
            "star_3_0": id9: ($f12 -> $f74, $f13 -> $f75),
            "syntax1": id1: ($f1 -> $f74, $f2 -> $f75),
        },
        {
            "star_2_0": id5: ($f5 -> $f76),
            "star_2_1": id5: ($f5 -> $f77),
            "star_1_0": id4: ($f4 -> $f76),
            "star_3_0": id9: ($f12 -> $f76, $f13 -> $f77),
            "syntax1": id1: ($f1 -> $f76, $f2 -> $f77),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(True, []), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax2 or PVar("syntax2")
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax2 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_0 or PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_1 or PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax2
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) *4
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_4_1": id5: ($f5 -> $f7),
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f6),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(True, []), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f6, $f2 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax2 or PVar("syntax2")
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax2 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f7)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_0 or PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_0 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f6)
[slotted_egraphs::rewrite::ematch] childPattern ?star_4_1 or PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_4_1 in id5
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_4_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax2
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) *4
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_4_1": id5: ($f5 -> $f6),
                "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
                "star_4_0": id5: ($f5 -> $f7),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax2 true *4) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }, State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_4_1": id5: ($f5 -> $f7),
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            "star_4_0": id5: ($f5 -> $f6),
        },
        partial_slotmap: ($f6 -> $f68, $f7 -> $f69),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_4_1": id5: ($f5 -> $f6),
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
            "star_4_0": id5: ($f5 -> $f7),
        },
        partial_slotmap: ($f6 -> $f68, $f7 -> $f69),
    }
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f68, $f2 -> $f69), id2: (), [AppliedId(id5: ($f5 -> $f68)), AppliedId(id5: ($f5 -> $f68)), AppliedId(id5: ($f5 -> $f69))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f68, $f2 -> $f69), id2: (), [AppliedId(id5: ($f5 -> $f68)), AppliedId(id5: ($f5 -> $f69)), AppliedId(id5: ($f5 -> $f68))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f68, $f7 -> $f69))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f68, $f2 -> $f69), id2: (), [AppliedId(id7: ($f8 -> $f68, $f9 -> $f69)), AppliedId(id5: ($f5 -> $f68))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f68, $f11 -> $f69)), AppliedId(id9: ($f12 -> $f68, $f13 -> $f69))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f68, $f13 -> $f69)), AppliedId(id16: ($f60 -> $f68, $f61 -> $f69))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f68, $f30 -> $f69)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f68, $f30 -> $f69)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f68, $f7 -> $f69))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f68, $f2 -> $f69), id2: (), [AppliedId(id7: ($f8 -> $f68, $f9 -> $f69)), AppliedId(id5: ($f5 -> $f68))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f68, $f11 -> $f69)), AppliedId(id9: ($f12 -> $f68, $f13 -> $f69))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f68, $f13 -> $f69)), AppliedId(id16: ($f60 -> $f68, $f61 -> $f69))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f68, $1 -> $f69))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f68, $f30 -> $f69)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f68, $f30 -> $f69)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(4)]) != New(id0: (), id0: (), [])
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(4)]) != New(id0: (), id0: (), [])
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 ?star_2_1 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(4)]) != New(id0: (), id0: (), [])
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 ?star_2_1 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax2 true *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax2 true *4) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(4)]), [PVar("syntax2"), ENode(True, []), Star(4)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(4)]) != New(id0: (), id0: (), [])
[slotted_egraphs::parse] from (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true ?star_2_0 ?star_2_1 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (compose <?star_3_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(4)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose ?star_3_0 *4)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f79, $f2 -> $f78), id2: (), [AppliedId(id5: ($f5 -> $f79)), AppliedId(id5: ($f5 -> $f78))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f79, $1 -> $f78))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f79, $f2 -> $f78), id2: (), [AppliedId(id5: ($f5 -> $f79)), AppliedId(id5: ($f5 -> $f78))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f79, $1 -> $f78))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f79, $f7 -> $f78)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f79, $f7 -> $f78)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f79, $f2 -> $f78), id2: (), [AppliedId(id5: ($f5 -> $f79)), AppliedId(id5: ($f5 -> $f78))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f79, $1 -> $f78))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f79, $f2 -> $f78), id2: (), [AppliedId(id5: ($f5 -> $f78)), AppliedId(id5: ($f5 -> $f79))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f79, $1 -> $f78))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f79, $f7 -> $f78)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f79, $f7 -> $f78)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f80, $f2 -> $f81), id2: (), [AppliedId(id5: ($f5 -> $f81)), AppliedId(id5: ($f5 -> $f80))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f80, $1 -> $f81))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f80, $f2 -> $f81), id2: (), [AppliedId(id5: ($f5 -> $f81)), AppliedId(id5: ($f5 -> $f80))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f80, $1 -> $f81))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f80, $f7 -> $f81)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f80, $f7 -> $f81)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f80, $f2 -> $f81), id2: (), [AppliedId(id5: ($f5 -> $f81)), AppliedId(id5: ($f5 -> $f80))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f80, $1 -> $f81))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f80, $f2 -> $f81), id2: (), [AppliedId(id5: ($f5 -> $f80)), AppliedId(id5: ($f5 -> $f81))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f80, $1 -> $f81))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id6: ($f6 -> $f80, $f7 -> $f81)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::union] r: id6: ($f6 -> $f80, $f7 -> $f81)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83)), AppliedId(id5: ($f5 -> $f82))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f82, $1 -> $f83))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83)), AppliedId(id5: ($f5 -> $f82))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f82, $1 -> $f83))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f82, $f11 -> $f83)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f82, $f11 -> $f83)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83)), AppliedId(id5: ($f5 -> $f82))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f82, $1 -> $f83))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id5: ($f5 -> $f82)), AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f82, $1 -> $f83))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f82, $f11 -> $f83)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f82, $f11 -> $f83)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f84, $f2 -> $f85), id2: (), [AppliedId(id5: ($f5 -> $f84)), AppliedId(id7: ($f8 -> $f84, $f9 -> $f85))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f84, $1 -> $f85))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f84, $f2 -> $f85), id2: (), [AppliedId(id5: ($f5 -> $f84)), AppliedId(id7: ($f8 -> $f84, $f9 -> $f85))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f84, $1 -> $f85))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f84, $f11 -> $f85)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f84, $f11 -> $f85)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f84, $f2 -> $f85), id2: (), [AppliedId(id5: ($f5 -> $f84)), AppliedId(id7: ($f8 -> $f84, $f9 -> $f85))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]), ($0 -> $f84, $1 -> $f85))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f84, $f2 -> $f85), id2: (), [AppliedId(id7: ($f8 -> $f84, $f9 -> $f85)), AppliedId(id5: ($f5 -> $f84))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f84, $1 -> $f85))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id8: ($f10 -> $f84, $f11 -> $f85)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::union] r: id8: ($f10 -> $f84, $f11 -> $f85)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f87, $f2 -> $f86), id2: (), [AppliedId(id5: ($f5 -> $f87)), AppliedId(id5: ($f5 -> $f86)), AppliedId(id5: ($f5 -> $f87))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f87, $1 -> $f86))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f87, $f61 -> $f86)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f89))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f89)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f88, $f2 -> $f89), id2: (), [AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f88)), AppliedId(id5: ($f5 -> $f89))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f88, $1 -> $f89))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f88, $f61 -> $f89)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91)), AppliedId(id5: ($f5 -> $f90))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91)), AppliedId(id5: ($f5 -> $f90))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f91)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f90, $f2 -> $f91), id2: (), [AppliedId(id5: ($f5 -> $f91)), AppliedId(id5: ($f5 -> $f90)), AppliedId(id5: ($f5 -> $f90))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]), ($0 -> $f90, $1 -> $f91))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id16: ($f60 -> $f90, $f61 -> $f91)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
    ($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
     - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
    
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $f92))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $f92))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id4: ($f4 -> $f92))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id4: ($f4 -> $0))]), ($0 -> $f92))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id5: ($f5 -> $f92)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::union] r: id5: ($f5 -> $f92)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f5: Unknown} }
    ($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
     - Compose([AppliedId(id4: ($f4 -> $f5))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f93, $f7 -> $f94))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f93, $1 -> $f94))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id6: ($f6 -> $f93, $f7 -> $f94))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))]), ($0 -> $f93, $1 -> $f94))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id7: ($f8 -> $f93, $f9 -> $f94)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::union] r: id7: ($f8 -> $f93, $f9 -> $f94)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
    ($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
     - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f95, $f11 -> $f96)), AppliedId(id9: ($f12 -> $f95, $f13 -> $f96))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f95, $1 -> $f96))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f95, $f11 -> $f96)), AppliedId(id9: ($f12 -> $f95, $f13 -> $f96))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f95, $1 -> $f96))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f95, $f30 -> $f96)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f95, $f30 -> $f96)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f95, $f11 -> $f96)), AppliedId(id9: ($f12 -> $f95, $f13 -> $f96))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f95, $1 -> $f96))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f95, $f13 -> $f96)), AppliedId(id8: ($f10 -> $f95, $f11 -> $f96))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f95, $1 -> $f96))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f95, $f30 -> $f96)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f95, $f30 -> $f96)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f97, $f13 -> $f98)), AppliedId(id8: ($f10 -> $f97, $f11 -> $f98))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f97, $1 -> $f98))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f97, $f13 -> $f98)), AppliedId(id8: ($f10 -> $f97, $f11 -> $f98))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f97, $1 -> $f98))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f97, $f30 -> $f98)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f97, $f30 -> $f98)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f97, $f13 -> $f98)), AppliedId(id8: ($f10 -> $f97, $f11 -> $f98))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))]), ($0 -> $f97, $1 -> $f98))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id8: ($f10 -> $f97, $f11 -> $f98)), AppliedId(id9: ($f12 -> $f97, $f13 -> $f98))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f97, $1 -> $f98))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f97, $f30 -> $f98)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f97, $f30 -> $f98)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id16: ($f60 -> $f99, $f61 -> $f100)), AppliedId(id9: ($f12 -> $f99, $f13 -> $f100))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f99, $1 -> $f100))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id16: ($f60 -> $f99, $f61 -> $f100)), AppliedId(id9: ($f12 -> $f99, $f13 -> $f100))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f99, $1 -> $f100))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f99, $f30 -> $f100)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f99, $f30 -> $f100)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id16: ($f60 -> $f99, $f61 -> $f100)), AppliedId(id9: ($f12 -> $f99, $f13 -> $f100))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f99, $1 -> $f100))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f99, $f13 -> $f100)), AppliedId(id16: ($f60 -> $f99, $f61 -> $f100))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f99, $1 -> $f100))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f99, $f30 -> $f100)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f99, $f30 -> $f100)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f101, $f13 -> $f102)), AppliedId(id16: ($f60 -> $f101, $f61 -> $f102))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f101, $1 -> $f102))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f101, $f13 -> $f102)), AppliedId(id16: ($f60 -> $f101, $f61 -> $f102))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f101, $1 -> $f102))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f101, $f30 -> $f102)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f101, $f30 -> $f102)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id9: ($f12 -> $f101, $f13 -> $f102)), AppliedId(id16: ($f60 -> $f101, $f61 -> $f102))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f60 -> $0, $f61 -> $1))]), ($0 -> $f101, $1 -> $f102))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id16: ($f60 -> $f101, $f61 -> $f102)), AppliedId(id9: ($f12 -> $f101, $f13 -> $f102))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id16: ($f60 -> $0, $f61 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]), ($0 -> $f101, $1 -> $f102))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id12: ($f29 -> $f101, $f30 -> $f102)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[slotted_egraphs::egraph::union] r: id12: ($f29 -> $f101, $f30 -> $f102)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
    ($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
     - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
     - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
     - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])
    
[entry::chc::tst] egraph after

 == Egraph ==
CHCData { predNames: {}, varTypes: {$f0: Unknown} }
id0($f0):>> Var($f0)
 - Var($f0)

CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
id1($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
 - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])

CHCData { predNames: {}, varTypes: {} }
id2():>> True
 - True

CHCData { predNames: {}, varTypes: {$f3: Unknown} }
id3($f3):>> PredSyntax([id0: ($f0 -> $f3)])
 - PredSyntax([id0: ($f0 -> $f3)])

CHCData { predNames: {}, varTypes: {$f4: Unknown} }
id4($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
 - New(id3: ($f3 -> $f4), id2: (), [])

CHCData { predNames: {}, varTypes: {$f5: Unknown} }
id5($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
 - Compose([AppliedId(id4: ($f4 -> $f5))])

CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
id6($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
 - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
 - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])

CHCData { predNames: {}, varTypes: {$f8: Unknown, $f9: Unknown} }
id7($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
 - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])

CHCData { predNames: {}, varTypes: {$f11: Unknown, $f10: Unknown} }
id8($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
 - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
 - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])

CHCData { predNames: {}, varTypes: {$f13: Unknown, $f12: Unknown} }
id9($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
 - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])

CHCData { predNames: {}, varTypes: {$f30: Unknown, $f29: Unknown} }
id12($f29, $f30):>> Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id11: ($f27 -> $f29, $f28 -> $f30))])
 - Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
 - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))])
 - Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))])
 - Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])

CHCData { predNames: {}, varTypes: {$f61: Unknown, $f60: Unknown} }
id16($f60, $f61):>> New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
 - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))])
 - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])
 - New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))])
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?b) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f30), id5: ($f5 -> $f29), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f30) != id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f29), id5: ($f5 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f29) != id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?b) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f29) != id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f30), id5: ($f5 -> $f29), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f29), id5: ($f5 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f29) != id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?b) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f29) != id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f30), id5: ($f5 -> $f29), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f29), id5: ($f5 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f29) != id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?b) true)) (compose (new (pred ?a) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?b) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true))
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f30) != id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f30), id5: ($f5 -> $f29), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f30) != id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f29), id5: ($f5 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?b) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true))
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f30) != id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f30), id5: ($f5 -> $f29), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f30) != id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f29), id5: ($f5 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?a) true)) (compose (new (pred ?b) true))) (new (pred ?a ?b) true)) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?b) true))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a) true))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred ?a ?b)
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred ?a ?b) true)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true))
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Var($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Var($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f3)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id4: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f4), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f5)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id5: ($f5 -> $f5)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f5))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id6: ($f6 -> $f6, $f7 -> $f7)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))]), New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id7: ($f8 -> $f8, $f9 -> $f9)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id7, [Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id8: ($f10 -> $f10, $f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))]), New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id9: ($f12 -> $f12, $f13 -> $f13)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [Compose([AppliedId(id8: ($f10 -> $f29, $f11 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id8: ($f10 -> $f29, $f11 -> $f30))]), Compose([AppliedId(id16: ($f60 -> $f29, $f61 -> $f30)), AppliedId(id9: ($f12 -> $f29, $f13 -> $f30))]), Compose([AppliedId(id9: ($f12 -> $f29, $f13 -> $f30)), AppliedId(id16: ($f60 -> $f29, $f61 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f29, $f11 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id7: ($f8 -> $f29, $f9 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id7: ($f8 -> $f29, $f9 -> $f30))])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id8
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id8: ($f10 -> $f29, $f11 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id8: ($f10 -> $f29, $f11 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id8
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f60 -> $f29, $f61 -> $f30), id9: ($f12 -> $f29, $f13 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f30)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29))]), New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f29)), AppliedId(id5: ($f5 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f30), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?b) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?b) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f30), id5: ($f5 -> $f29), id5: ($f5 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f30))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f30) != id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: (), id5: ($f5 -> $f29), id5: ($f5 -> $f29), id5: ($f5 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f29) to subst
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a) or ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("a")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?b) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::egraph] input enodes_applied id5: ($f5 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?b) true)) in id5: ($f5 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Compose([AppliedId(id4: ($f4 -> $f29))])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id4: ($f4 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?b) true) in id4: ($f4 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [New(id3: ($f3 -> $f29), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f29), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?b) or ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?b) in id3: ($f3 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: ()]), [PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [PredSyntax([id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] continue because mismatch mapped var id0: ($f0 -> $f29) != id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] dropping State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id3
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id4
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id5: ($f5 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (compose (new (pred ?a) true)) or ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] 	 3) (compose (new (pred ?b) true))
[slotted_egraphs::rewrite::ematch] 	 4) (compose (new (pred ?a) true))
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] 	 2) id5
[slotted_egraphs::rewrite::ematch] 	 3) id5
[slotted_egraphs::rewrite::ematch] 	 4) id5
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f29, $f2 -> $f30), id2: ()]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (pred ?a ?b) or ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f29), id0: ($f0 -> $f30)])]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f29), id0: ($f0 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f29)
[slotted_egraphs::rewrite::ematch] childPattern ?a or PVar("a")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f29), pass
[slotted_egraphs::rewrite::ematch] Search ?a in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("a")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id0: ($f0 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern ?b or PVar("b")
[slotted_egraphs::rewrite::ematch] check existing var id0: ($f0 -> $f30), pass
[slotted_egraphs::rewrite::ematch] Search ?b in id0
[slotted_egraphs::rewrite::ematch] Search pattern PVar("b")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?a
[slotted_egraphs::rewrite::ematch] 	 1) ?b
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id0
[slotted_egraphs::rewrite::ematch] 	 1) id0
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (pred ?a ?b) in id1: ($f1 -> $f29, $f2 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id2: ()
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search true in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [True]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search true in id2: ()
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (pred ?a ?b)
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id2
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new (pred ?a ?b) true) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id16
[slotted_egraphs::rewrite::ematch] 	 1) id9
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "a": id0: ($f0 -> $f29),
                "b": id0: ($f0 -> $f30),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f29, $f13 -> $f30), id16: ($f60 -> $f29, $f61 -> $f30)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::egraph] input enodes_applied id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] Search (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) in id9: ($f12 -> $f29, $f13 -> $f30)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [New(id1: ($f1 -> $f29, $f2 -> $f30), id2: (), [])]
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f60 -> $f29, $f61 -> $f30)
[slotted_egraphs::rewrite::ematch] childPattern (new (pred ?a ?b) true) or ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true)))
[slotted_egraphs::rewrite::ematch] 	 1) (new (pred ?a ?b) true)
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id9
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] At return, Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id12: ($f29 -> $f29, $f30 -> $f30)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"a": id0: ($f0 -> $f29), "b": id0: ($f0 -> $f30)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "a": id0: ($f0 -> $f29),
            "b": id0: ($f0 -> $f30),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new (pred ?a ?b) true (compose (new (pred ?a) true)) (compose (new (pred ?b) true)) (compose (new (pred ?a) true))) (new (pred ?a ?b) true)) in id16: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f61)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60))]), New(id1: ($f1 -> $f60, $f2 -> $f61), id2: (), [AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f60)), AppliedId(id5: ($f5 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
test chc::tst::tst1 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 73 filtered out; finished in 0.26s


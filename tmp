   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.23s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
[slotted_egraphs::parse] from (init root (pred <(int $i0) (node $i1) (node $i2) (int $i3) (int $i4)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("root"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 root
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i0)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i1)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i2)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i3)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i4)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i0) (node $i1) (node $i2) (int $i3) (int $i4))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init root (pred (int $i0) (node $i1) (node $i2) (int $i3) (int $i4)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("root")
[slotted_egraphs::egraph::add] ret (PredName("root"), ())
[entry::chc] calling make on PredName("root")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("root")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id0
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredName("root")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("root")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> root
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i0))
[entry::chc] calling make on Int($f0)
[slotted_egraphs::egraph::add] classes insert id1
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Int($0)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i1)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i1))
[entry::chc] calling make on Node($f1)
[slotted_egraphs::egraph::add] classes insert id2
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Node($0)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i1)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i2)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i2)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i3)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i3)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i4)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i4)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i0), id2: ($f1 -> $i1), id2: ($f1 -> $i2), id1: ($f0 -> $i3), id1: ($f0 -> $i4)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)]), ($0 -> $i0, $1 -> $i1, $2 -> $i2, $3 -> $i3, $4 -> $i4))
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] slots: {$f2, $f3, $f4, $f5, $f6}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] get {$f4: Node, $f6: Int, $f2: Int, $f3: Node, $f5: Int}
[slotted_egraphs::egraph::add] classes insert id3
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[entry::chc] slots: {$0, $1, $2, $3, $4}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[entry::chc] get {$4: Int, $0: Int, $2: Node, $1: Node, $3: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred (int $i0) (node $i1) (node $i2) (int $i3) (int $i4))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id0: (), id3: ($f2 -> $i0, $f3 -> $i1, $f4 -> $i2, $f5 -> $i3, $f6 -> $i4))
[slotted_egraphs::egraph::add] ret (Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4)), ($0 -> $i0, $1 -> $i1, $2 -> $i2, $3 -> $i3, $4 -> $i4))
[entry::chc] calling make on Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] slots: {$f7, $f8, $f9, $f10, $f11}
[entry::chc] childId : id3, mapToS : $f2
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childId : id3, mapToS : $f4
[entry::chc] childId : id3, mapToS : $f5
[entry::chc] childId : id3, mapToS : $f6
[entry::chc] aggregateVarType for Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] get {$f9: Node, $f10: Int, $f11: Int, $f7: Int, $f8: Node}
[slotted_egraphs::egraph::add] classes insert id4
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[entry::chc] slots: {$0, $1, $2, $3, $4}
[entry::chc] childId : id3, mapToS : $f2
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childId : id3, mapToS : $f4
[entry::chc] childId : id3, mapToS : $f5
[entry::chc] childId : id3, mapToS : $f6
[entry::chc] aggregateVarType for Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[entry::chc] get {$0: Int, $3: Int, $2: Node, $4: Int, $1: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (init root (pred (int $i0) (node $i1) (node $i2) (int $i3) (int $i4)))
[slotted_egraphs::parse] from (compose <(new (pred <>) (and <(geq (int $i0) 0) (lt (+ (int $i3) (int $i0)) (int $i4))>) <(init leafDrop (pred <(int $i0) (node $i1) (node $i2)>)) (init minLeaf (pred <(node $i2) (int $i3)>)) (init minLeaf (pred <(node $i1) (int $i4)>))>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i0), RParen, Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i0), RParen, RParen, LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 pred
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i0), RParen, Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i0), RParen, RParen, LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i0)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i0), RParen, RParen, LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i0), RParen, RParen, LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $i0) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($i3), RParen, LParen, Ident("int"), Slot($i0), RParen, RParen, LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i3)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i0), RParen, RParen, LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i0)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (int $i3) (int $i0))
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i4)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (+ (int $i3) (int $i0)) (int $i4))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (geq (int $i0) 0) (lt (+ (int $i3) (int $i0)) (int $i4)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i0), RParen, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i0)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i1)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i0) (node $i1) (node $i2))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (int $i0) (node $i1) (node $i2)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i2), RParen, LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i2)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i3)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $i2) (int $i3))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $i2) (int $i3)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i1), RParen, LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i1)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i4)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $i1) (int $i4))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $i1) (int $i4)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new pred (and (geq (int $i0) 0) (lt (+ (int $i3) (int $i0)) (int $i4))) (init leafDrop (pred (int $i0) (node $i1) (node $i2))) (init minLeaf (pred (node $i2) (int $i3))) (init minLeaf (pred (node $i1) (int $i4))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new pred (and (geq (int $i0) 0) (lt (+ (int $i3) (int $i0)) (int $i4))) (init leafDrop (pred (int $i0) (node $i1) (node $i2))) (init minLeaf (pred (node $i2) (int $i3))) (init minLeaf (pred (node $i1) (int $i4)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([])
[slotted_egraphs::egraph::add] ret (PredSyntax([]), ())
[entry::chc] calling make on PredSyntax([])
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredSyntax([])
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id5
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredSyntax([])
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredSyntax([])
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i0)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[entry::chc] calling make on Number(0)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id6
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Number(0)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $i0), id6: ())
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id6: ()), ($0 -> $i0))
[entry::chc] calling make on Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] slots: {$f12}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] get {$f12: Int}
[slotted_egraphs::egraph::add] classes insert id7
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id6: ())
[entry::chc] slots: {$0}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $0), id6: ())
[entry::chc] get {$0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> (geq (int $i0) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i3)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i3)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i0)
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id1: ($f0 -> $i3), id1: ($f0 -> $i0))
[slotted_egraphs::egraph::add] ret (Add(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i3, $1 -> $i0))
[entry::chc] calling make on Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] slots: {$f13, $f14}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] get {$f14: Int, $f13: Int}
[slotted_egraphs::egraph::add] classes insert id8
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] get {$1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (+ (int $i3) (int $i0))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i4)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i4)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id8: ($f13 -> $i0, $f14 -> $i3), id1: ($f0 -> $i4))
[slotted_egraphs::egraph::add] ret (Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2)), ($0 -> $i0, $1 -> $i3, $2 -> $i4))
[entry::chc] calling make on Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] slots: {$f15, $f16, $f17}
[entry::chc] childId : id8, mapToS : $f13
[entry::chc] childId : id8, mapToS : $f14
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] get {$f17: Int, $f15: Int, $f16: Int}
[slotted_egraphs::egraph::add] classes insert id9
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id8, mapToS : $f13
[entry::chc] childId : id8, mapToS : $f14
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[entry::chc] get {$0: Int, $1: Int, $2: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (lt (+ (int $i3) (int $i0)) (int $i4))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id7: ($f12 -> $i0), id9: ($f15 -> $i0, $f16 -> $i3, $f17 -> $i4)])
[slotted_egraphs::egraph::add] ret (And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)]), ($0 -> $i0, $1 -> $i3, $2 -> $i4))
[entry::chc] calling make on And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] slots: {$f18, $f19, $f20}
[entry::chc] childId : id7, mapToS : $f12
[entry::chc] childId : id9, mapToS : $f15
[entry::chc] childId : id9, mapToS : $f16
[entry::chc] childId : id9, mapToS : $f17
[entry::chc] aggregateVarType for And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] get {$f19: Int, $f18: Int, $f20: Int}
[slotted_egraphs::egraph::add] classes insert id10
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id7, mapToS : $f12
[entry::chc] childId : id9, mapToS : $f15
[entry::chc] childId : id9, mapToS : $f16
[entry::chc] childId : id9, mapToS : $f17
[entry::chc] aggregateVarType for And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[entry::chc] get {$0: Int, $1: Int, $2: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (and (geq (int $i0) 0) (lt (+ (int $i3) (int $i0)) (int $i4)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[entry::chc] calling make on PredName("leafDrop")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("leafDrop")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id11
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredName("leafDrop")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("leafDrop")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i1)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i1))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i1)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i2)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i0), id2: ($f1 -> $i1), id2: ($f1 -> $i2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $i0, $1 -> $i1, $2 -> $i2))
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] slots: {$f21, $f22, $f23}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] get {$f21: Int, $f22: Node, $f23: Node}
[slotted_egraphs::egraph::add] classes insert id12
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[entry::chc] get {$0: Int, $2: Node, $1: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $i0) (node $i1) (node $i2))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id11: (), id12: ($f21 -> $i0, $f22 -> $i1, $f23 -> $i2))
[slotted_egraphs::egraph::add] ret (Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2)), ($0 -> $i0, $1 -> $i1, $2 -> $i2))
[entry::chc] calling make on Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] aggregateVarType for Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] get {$f24: Int, $f25: Node, $f26: Node}
[slotted_egraphs::egraph::add] classes insert id13
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] aggregateVarType for Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[entry::chc] get {$1: Node, $2: Node, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $i0) (node $i1) (node $i2)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id14
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i2)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i2)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i3)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i3)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $i2), id1: ($f0 -> $i3)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $i2, $1 -> $i3))
[entry::chc] calling make on PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] slots: {$f27, $f28}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] get {$f27: Node, $f28: Int}
[slotted_egraphs::egraph::add] classes insert id15
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[entry::chc] get {$0: Node, $1: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $i2) (int $i3))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $i2, $f28 -> $i3))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $i2, $1 -> $i3))
[entry::chc] calling make on Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] aggregateVarType for Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] get {$f29: Node, $f30: Int}
[slotted_egraphs::egraph::add] classes insert id16
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] aggregateVarType for Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[entry::chc] get {$0: Node, $1: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $i2) (int $i3)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i1)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i1))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i1)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i4)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i4)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $i1), id1: ($f0 -> $i4)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $i1, $1 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $i1) (int $i4))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $i1, $f28 -> $i4))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $i1, $1 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $i1) (int $i4)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id5: (), id10: ($f18 -> $i0, $f19 -> $i3, $f20 -> $i4), [AppliedId(id13: ($f24 -> $i0, $f25 -> $i1, $f26 -> $i2)), AppliedId(id16: ($f29 -> $i2, $f30 -> $i3)), AppliedId(id16: ($f29 -> $i1, $f30 -> $i4))])
[slotted_egraphs::egraph::add] ret (New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))]), ($0 -> $i0, $1 -> $i3, $2 -> $i4, $3 -> $i1, $4 -> $i2))
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f34: Int, $f31: Int, $f32: Node, $f33: Node, $f35: Int}
[slotted_egraphs::egraph::add] classes insert id17
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] slots: {$0, $1, $2, $3, $4}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] get {$0: Int, $3: Node, $4: Node, $1: Int, $2: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (new pred (and (geq (int $i0) 0) (lt (+ (int $i3) (int $i0)) (int $i4))) (init leafDrop (pred (int $i0) (node $i1) (node $i2))) (init minLeaf (pred (node $i2) (int $i3))) (init minLeaf (pred (node $i1) (int $i4))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id17: ($f31 -> $i0, $f32 -> $i1, $f33 -> $i2, $f34 -> $i3, $f35 -> $i4))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))]), ($0 -> $i0, $1 -> $i1, $2 -> $i2, $3 -> $i3, $4 -> $i4))
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] slots: {$f36, $f37, $f38, $f39, $f40}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] get {$f36: Int, $f40: Int, $f38: Node, $f37: Node, $f39: Int}
[slotted_egraphs::egraph::add] classes insert id18
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] slots: {$0, $1, $2, $3, $4}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] get {$4: Int, $3: Int, $0: Int, $1: Node, $2: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (compose (new pred (and (geq (int $i0) 0) (lt (+ (int $i3) (int $i0)) (int $i4))) (init leafDrop (pred (int $i0) (node $i1) (node $i2))) (init minLeaf (pred (node $i2) (int $i3))) (init minLeaf (pred (node $i1) (int $i4)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id18: ($f36 -> $i0, $f37 -> $i1, $f38 -> $i2, $f39 -> $i3, $f40 -> $i4), id4: ($f7 -> $i0, $f8 -> $i1, $f9 -> $i2, $f10 -> $i3, $f11 -> $i4)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f36: Int, $4: Int, $2: Node, $1: Node, $f37: Node, $3: Int, $f40: Int, $f38: Node, $f39: Int, $0: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"root"}, varTypes: {$1: Node, $f7: Int, $3: Int, $f9: Node, $f10: Int, $2: Node, $f11: Int, $f8: Node, $0: Int, $4: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"root"}, varTypes: {$4: Int, $f11: Int, $f10: Int, $f7: Int, $0: Int, $f36: Int, $f8: Node, $1: Node, $f37: Node, $f9: Node, $3: Int, $f40: Int, $2: Node, $f38: Node, $f39: Int} }
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] slots: {$0, $1, $2, $3, $4}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] get {$1: Node, $3: Int, $4: Int, $0: Int, $2: Node}
[slotted_egraphs::parse] from (init min (pred <(int $i5) (int $i6)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 min
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i6), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i6)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i5) (int $i6))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init min (pred (int $i5) (int $i6)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("min")
[slotted_egraphs::egraph::add] ret (PredName("min"), ())
[entry::chc] calling make on PredName("min")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id19
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredName("min")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i5), id1: ($f0 -> $i6)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $i5, $1 -> $i6))
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42)])
[entry::chc] slots: {$f41, $f42}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42)])
[entry::chc] get {$f42: Int, $f41: Int}
[slotted_egraphs::egraph::add] classes insert id20
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)])
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)])
[entry::chc] get {$1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $i5) (int $i6))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id19: (), id20: ($f41 -> $i5, $f42 -> $i6))
[slotted_egraphs::egraph::add] ret (Init(id19: (), id20: ($f41 -> $0, $f42 -> $1)), ($0 -> $i5, $1 -> $i6))
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $f43, $f42 -> $f44))
[entry::chc] slots: {$f43, $f44}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $f43, $f42 -> $f44))
[entry::chc] get {$f43: Int, $f44: Int}
[slotted_egraphs::egraph::add] classes insert id21
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $0, $f42 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $0, $f42 -> $1))
[entry::chc] get {$1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id21 <-> (init min (pred (int $i5) (int $i6)))
[slotted_egraphs::parse] from (compose <(new (pred <(int $i5) (int $i6) (int $i7)>) (and <(lt (int $i5) (int $i6)) (eq (int $i7) (int $i5))>) <>) (new (pred <(int $i5) (int $i6) (int $i7)>) (and <(geq (int $i5) (int $i6)) (eq (int $i7) (int $i6))>) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i5) (int $i6) (int $i7))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i6)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (int $i5) (int $i6))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i7)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i5)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $i7) (int $i5))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (lt (int $i5) (int $i6)) (eq (int $i7) (int $i5)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $i5) (int $i6) (int $i7)) (and (lt (int $i5) (int $i6)) (eq (int $i7) (int $i5))))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i6), RParen, LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i5) (int $i6) (int $i7))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i5), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i6)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $i5) (int $i6))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($i7), RParen, LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i7)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i6)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $i7) (int $i6))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (geq (int $i5) (int $i6)) (eq (int $i7) (int $i6)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $i5) (int $i6) (int $i7)) (and (geq (int $i5) (int $i6)) (eq (int $i7) (int $i6))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (int $i5) (int $i6) (int $i7)) (and (lt (int $i5) (int $i6)) (eq (int $i7) (int $i5)))) (new (pred (int $i5) (int $i6) (int $i7)) (and (geq (int $i5) (int $i6)) (eq (int $i7) (int $i6)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i5), id1: ($f0 -> $i6), id1: ($f0 -> $i7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $i5, $1 -> $i6, $2 -> $i7))
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f45), id1: ($f0 -> $f46), id1: ($f0 -> $f47)])
[entry::chc] slots: {$f45, $f46, $f47}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f45), id1: ($f0 -> $f46), id1: ($f0 -> $f47)])
[entry::chc] get {$f46: Int, $f47: Int, $f45: Int}
[slotted_egraphs::egraph::add] classes insert id22
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[entry::chc] get {$2: Int, $1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (pred (int $i5) (int $i6) (int $i7))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id1: ($f0 -> $i5), id1: ($f0 -> $i6))
[slotted_egraphs::egraph::add] ret (Less(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i5, $1 -> $i6))
[entry::chc] calling make on Less(id1: ($f0 -> $f48), id1: ($f0 -> $f49))
[entry::chc] slots: {$f48, $f49}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Less(id1: ($f0 -> $f48), id1: ($f0 -> $f49))
[entry::chc] get {$f49: Int, $f48: Int}
[slotted_egraphs::egraph::add] classes insert id23
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] get {$1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (lt (int $i5) (int $i6))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i7)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i7), id1: ($f0 -> $i5))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i7, $1 -> $i5))
[entry::chc] calling make on Eq(id1: ($f0 -> $f51), id1: ($f0 -> $f50))
[entry::chc] slots: {$f50, $f51}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f51), id1: ($f0 -> $f50))
[entry::chc] get {$f51: Int, $f50: Int}
[slotted_egraphs::egraph::add] classes insert id24
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] get {$1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (eq (int $i7) (int $i5))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id23: ($f48 -> $i5, $f49 -> $i6), id24: ($f50 -> $i5, $f51 -> $i7)])
[slotted_egraphs::egraph::add] ret (And([id23: ($f48 -> $0, $f49 -> $1), id24: ($f50 -> $0, $f51 -> $2)]), ($0 -> $i5, $1 -> $i6, $2 -> $i7))
[entry::chc] calling make on And([id23: ($f48 -> $f52, $f49 -> $f53), id24: ($f50 -> $f52, $f51 -> $f54)])
[entry::chc] slots: {$f52, $f53, $f54}
[entry::chc] childId : id23, mapToS : $f48
[entry::chc] childId : id24, mapToS : $f50
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] aggregateVarType for And([id23: ($f48 -> $f52, $f49 -> $f53), id24: ($f50 -> $f52, $f51 -> $f54)])
[entry::chc] get {$f54: Int, $f52: Int, $f53: Int}
[slotted_egraphs::egraph::add] classes insert id25
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id23: ($f48 -> $0, $f49 -> $1), id24: ($f50 -> $0, $f51 -> $2)])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id23, mapToS : $f48
[entry::chc] childId : id24, mapToS : $f50
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] aggregateVarType for And([id23: ($f48 -> $0, $f49 -> $1), id24: ($f50 -> $0, $f51 -> $2)])
[entry::chc] get {$2: Int, $1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id25 <-> (and (lt (int $i5) (int $i6)) (eq (int $i7) (int $i5)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id22: ($f45 -> $i5, $f46 -> $i6, $f47 -> $i7), id25: ($f52 -> $i5, $f53 -> $i6, $f54 -> $i7), [])
[slotted_egraphs::egraph::add] ret (New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id25: ($f52 -> $0, $f53 -> $1, $f54 -> $2), []), ($0 -> $i5, $1 -> $i6, $2 -> $i7))
[entry::chc] calling make on New(id22: ($f45 -> $f55, $f46 -> $f56, $f47 -> $f57), id25: ($f52 -> $f55, $f53 -> $f56, $f54 -> $f57), [])
[entry::chc] slots: {$f55, $f56, $f57}
[entry::chc] childId : id22, mapToS : $f45
[entry::chc] childId : id25, mapToS : $f52
[entry::chc] childId : id22, mapToS : $f46
[entry::chc] childId : id25, mapToS : $f53
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] childId : id25, mapToS : $f54
[entry::chc] aggregateVarType for New(id22: ($f45 -> $f55, $f46 -> $f56, $f47 -> $f57), id25: ($f52 -> $f55, $f53 -> $f56, $f54 -> $f57), [])
[entry::chc] get {$f56: Int, $f57: Int, $f55: Int}
[slotted_egraphs::egraph::add] classes insert id26
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id25: ($f52 -> $0, $f53 -> $1, $f54 -> $2), [])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id22, mapToS : $f45
[entry::chc] childId : id25, mapToS : $f52
[entry::chc] childId : id22, mapToS : $f46
[entry::chc] childId : id25, mapToS : $f53
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] childId : id25, mapToS : $f54
[entry::chc] aggregateVarType for New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id25: ($f52 -> $0, $f53 -> $1, $f54 -> $2), [])
[entry::chc] get {$2: Int, $0: Int, $1: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> (new (pred (int $i5) (int $i6) (int $i7)) (and (lt (int $i5) (int $i6)) (eq (int $i7) (int $i5))))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i5), id1: ($f0 -> $i6), id1: ($f0 -> $i7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $i5, $1 -> $i6, $2 -> $i7))
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (pred (int $i5) (int $i6) (int $i7))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $i5), id1: ($f0 -> $i6))
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i5, $1 -> $i6))
[entry::chc] calling make on Geq(id1: ($f0 -> $f58), id1: ($f0 -> $f59))
[entry::chc] slots: {$f58, $f59}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f58), id1: ($f0 -> $f59))
[entry::chc] get {$f59: Int, $f58: Int}
[slotted_egraphs::egraph::add] classes insert id27
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] get {$1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (geq (int $i5) (int $i6))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i7)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i7), id1: ($f0 -> $i6))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i7, $1 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (eq (int $i7) (int $i6))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id27: ($f58 -> $i5, $f59 -> $i6), id24: ($f50 -> $i6, $f51 -> $i7)])
[slotted_egraphs::egraph::add] ret (And([id27: ($f58 -> $0, $f59 -> $1), id24: ($f50 -> $1, $f51 -> $2)]), ($0 -> $i5, $1 -> $i6, $2 -> $i7))
[entry::chc] calling make on And([id27: ($f58 -> $f60, $f59 -> $f61), id24: ($f50 -> $f61, $f51 -> $f62)])
[entry::chc] slots: {$f60, $f61, $f62}
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] childId : id24, mapToS : $f50
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] aggregateVarType for And([id27: ($f58 -> $f60, $f59 -> $f61), id24: ($f50 -> $f61, $f51 -> $f62)])
[entry::chc] get {$f61: Int, $f62: Int, $f60: Int}
[slotted_egraphs::egraph::add] classes insert id28
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id27: ($f58 -> $0, $f59 -> $1), id24: ($f50 -> $1, $f51 -> $2)])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] childId : id24, mapToS : $f50
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] aggregateVarType for And([id27: ($f58 -> $0, $f59 -> $1), id24: ($f50 -> $1, $f51 -> $2)])
[entry::chc] get {$2: Int, $0: Int, $1: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id28 <-> (and (geq (int $i5) (int $i6)) (eq (int $i7) (int $i6)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id22: ($f45 -> $i5, $f46 -> $i6, $f47 -> $i7), id28: ($f60 -> $i5, $f61 -> $i6, $f62 -> $i7), [])
[slotted_egraphs::egraph::add] ret (New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id28: ($f60 -> $0, $f61 -> $1, $f62 -> $2), []), ($0 -> $i5, $1 -> $i6, $2 -> $i7))
[entry::chc] calling make on New(id22: ($f45 -> $f63, $f46 -> $f64, $f47 -> $f65), id28: ($f60 -> $f63, $f61 -> $f64, $f62 -> $f65), [])
[entry::chc] slots: {$f63, $f64, $f65}
[entry::chc] childId : id22, mapToS : $f45
[entry::chc] childId : id28, mapToS : $f60
[entry::chc] childId : id22, mapToS : $f46
[entry::chc] childId : id28, mapToS : $f61
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] childId : id28, mapToS : $f62
[entry::chc] aggregateVarType for New(id22: ($f45 -> $f63, $f46 -> $f64, $f47 -> $f65), id28: ($f60 -> $f63, $f61 -> $f64, $f62 -> $f65), [])
[entry::chc] get {$f63: Int, $f64: Int, $f65: Int}
[slotted_egraphs::egraph::add] classes insert id29
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id28: ($f60 -> $0, $f61 -> $1, $f62 -> $2), [])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id22, mapToS : $f45
[entry::chc] childId : id28, mapToS : $f60
[entry::chc] childId : id22, mapToS : $f46
[entry::chc] childId : id28, mapToS : $f61
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] childId : id28, mapToS : $f62
[entry::chc] aggregateVarType for New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id28: ($f60 -> $0, $f61 -> $1, $f62 -> $2), [])
[entry::chc] get {$1: Int, $2: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id29 <-> (new (pred (int $i5) (int $i6) (int $i7)) (and (geq (int $i5) (int $i6)) (eq (int $i7) (int $i6))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id26: ($f55 -> $i5, $f56 -> $i6, $f57 -> $i7)), AppliedId(id29: ($f63 -> $i5, $f64 -> $i6, $f65 -> $i7))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id26: ($f55 -> $0, $f56 -> $1, $f57 -> $2)), AppliedId(id29: ($f63 -> $0, $f64 -> $1, $f65 -> $2))]), ($0 -> $i5, $1 -> $i6, $2 -> $i7))
[entry::chc] calling make on Compose([AppliedId(id26: ($f55 -> $f66, $f56 -> $f67, $f57 -> $f68)), AppliedId(id29: ($f63 -> $f66, $f64 -> $f67, $f65 -> $f68))])
[entry::chc] slots: {$f66, $f67, $f68}
[entry::chc] childId : id26, mapToS : $f55
[entry::chc] childId : id29, mapToS : $f63
[entry::chc] childId : id26, mapToS : $f56
[entry::chc] childId : id29, mapToS : $f64
[entry::chc] childId : id26, mapToS : $f57
[entry::chc] childId : id29, mapToS : $f65
[entry::chc] aggregateVarType for Compose([AppliedId(id26: ($f55 -> $f66, $f56 -> $f67, $f57 -> $f68)), AppliedId(id29: ($f63 -> $f66, $f64 -> $f67, $f65 -> $f68))])
[entry::chc] get {$f66: Int, $f67: Int, $f68: Int}
[slotted_egraphs::egraph::add] classes insert id30
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id26: ($f55 -> $0, $f56 -> $1, $f57 -> $2)), AppliedId(id29: ($f63 -> $0, $f64 -> $1, $f65 -> $2))])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id26, mapToS : $f55
[entry::chc] childId : id29, mapToS : $f63
[entry::chc] childId : id26, mapToS : $f56
[entry::chc] childId : id29, mapToS : $f64
[entry::chc] childId : id26, mapToS : $f57
[entry::chc] childId : id29, mapToS : $f65
[entry::chc] aggregateVarType for Compose([AppliedId(id26: ($f55 -> $0, $f56 -> $1, $f57 -> $2)), AppliedId(id29: ($f63 -> $0, $f64 -> $1, $f65 -> $2))])
[entry::chc] get {$1: Int, $2: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id30 <-> (compose (new (pred (int $i5) (int $i6) (int $i7)) (and (lt (int $i5) (int $i6)) (eq (int $i7) (int $i5)))) (new (pred (int $i5) (int $i6) (int $i7)) (and (geq (int $i5) (int $i6)) (eq (int $i7) (int $i6)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id30: ($f66 -> $i5, $f67 -> $i6), id21: ($f43 -> $i5, $f44 -> $i6)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$0: Int, $1: Int, $f66: Int, $f67: Int, $2: Int, $f68: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"min"}, varTypes: {$f43: Int, $1: Int, $f44: Int, $0: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"min"}, varTypes: {$f43: Int, $1: Int, $f66: Int, $f67: Int, $f44: Int, $0: Int, $f68: Int, $2: Int} }
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id26: ($f55 -> $0, $f56 -> $1, $f57 -> $2)), AppliedId(id29: ($f63 -> $0, $f64 -> $1, $f65 -> $2))])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id26, mapToS : $f55
[entry::chc] childId : id29, mapToS : $f63
[entry::chc] childId : id26, mapToS : $f56
[entry::chc] childId : id29, mapToS : $f64
[entry::chc] childId : id26, mapToS : $f57
[entry::chc] childId : id29, mapToS : $f65
[entry::chc] aggregateVarType for Compose([AppliedId(id26: ($f55 -> $0, $f56 -> $1, $f57 -> $2)), AppliedId(id29: ($f63 -> $0, $f64 -> $1, $f65 -> $2))])
[entry::chc] get {$0: Int, $1: Int, $2: Int}
[slotted_egraphs::parse] from (init leafDrop (pred <(int $i8) (node $i9) (node $i10)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (int $i8) (node $i9) (node $i10)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i8), id2: ($f1 -> $i9), id2: ($f1 -> $i10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id11: (), id12: ($f21 -> $i8, $f22 -> $i9, $f23 -> $i10))
[slotted_egraphs::egraph::add] ret (Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2)), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $i8) (node $i9) (node $i10)))
[slotted_egraphs::parse] from (compose <(new (pred <(int $i8) (node $i9) (node $i10)>) (and <(eq (node $i9) (leaf)) (eq (node $i10) (leaf))>) <>) (new (pred <(int $i8) (node $i9) (node $i10)>) (and <(leq (int $i8) 0) (eq (node $i9) (binode (int $i13) (node $i11) (node $i12))) (eq (node $i10) (binode (int $i13) (node $i11) (node $i12)))>) <>) (new (pred <(int $i8) (node $i9) (node $i10)>) (and <(eq (node $i9) (binode (int $i16) (node $i14) (node $i15))) (geq (int $i8) 1) (eq (int $i17) (- (int $i8) 1))>) <(init leafDrop (pred <(int $i8) (node $i9) (node $i10)>))>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $i9) leaf)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i10)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $i10) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $i9) leaf) (eq (node $i10) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) leaf) (eq (node $i10) leaf)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($i8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (leq (int $i8) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i13)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i11)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i11)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i12)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i12)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $i13) (node $i11) (node $i12))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $i9) (binode (int $i13) (node $i11) (node $i12)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($i10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i10)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($i13), RParen, LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i13)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i11), RParen, LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i11)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i11)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i12)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i12)
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $i13) (node $i11) (node $i12))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $i10) (binode (int $i13) (node $i11) (node $i12)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (leq (int $i8) 0) (eq (node $i9) (binode (int $i13) (node $i11) (node $i12))) (eq (node $i10) (binode (int $i13) (node $i11) (node $i12))))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $i8) (node $i9) (node $i10)) (and (leq (int $i8) 0) (eq (node $i9) (binode (int $i13) (node $i11) (node $i12))) (eq (node $i10) (binode (int $i13) (node $i11) (node $i12)))))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($i16), RParen, LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i16)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i14), RParen, LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i14)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i14)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i15)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $i16) (node $i14) (node $i15))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $i9) (binode (int $i16) (node $i14) (node $i15)))
[slotted_egraphs::parse] left tokens [LParen, Ident("geq"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $i8) 1)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($i17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i17)
[slotted_egraphs::parse] left tokens [LParen, Ident("-"), LParen, Ident("int"), Slot($i8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("-"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (- (int $i8) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $i17) (- (int $i8) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $i9) (binode (int $i16) (node $i14) (node $i15))) (geq (int $i8) 1) (eq (int $i17) (- (int $i8) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i8), RParen, LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i9), RParen, LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (int $i8) (node $i9) (node $i10)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) (binode (int $i16) (node $i14) (node $i15))) (geq (int $i8) 1) (eq (int $i17) (- (int $i8) 1))) (init leafDrop (pred (int $i8) (node $i9) (node $i10))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) leaf) (eq (node $i10) leaf))) (new (pred (int $i8) (node $i9) (node $i10)) (and (leq (int $i8) 0) (eq (node $i9) (binode (int $i13) (node $i11) (node $i12))) (eq (node $i10) (binode (int $i13) (node $i11) (node $i12))))) (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) (binode (int $i16) (node $i14) (node $i15))) (geq (int $i8) 1) (eq (int $i17) (- (int $i8) 1))) (init leafDrop (pred (int $i8) (node $i9) (node $i10)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i8), id2: ($f1 -> $i9), id2: ($f1 -> $i10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[entry::chc] calling make on Leaf
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id31
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Leaf
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $i9), id31: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id31: ()), ($0 -> $i9))
[entry::chc] calling make on Eq(id2: ($f1 -> $f71), id31: ())
[entry::chc] slots: {$f71}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f71), id31: ())
[entry::chc] get {$f71: Node}
[slotted_egraphs::egraph::add] classes insert id32
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Eq(id2: ($f1 -> $0), id31: ())
[entry::chc] slots: {$0}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $0), id31: ())
[entry::chc] get {$0: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> (eq (node $i9) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $i10), id31: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id31: ()), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> (eq (node $i10) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id32: ($f71 -> $i9), id32: ($f71 -> $i10)])
[slotted_egraphs::egraph::add] ret (And([id32: ($f71 -> $0), id32: ($f71 -> $1)]), ($0 -> $i9, $1 -> $i10))
[entry::chc] calling make on And([id32: ($f71 -> $f72), id32: ($f71 -> $f73)])
[entry::chc] slots: {$f72, $f73}
[entry::chc] childId : id32, mapToS : $f71
[entry::chc] childId : id32, mapToS : $f71
[entry::chc] aggregateVarType for And([id32: ($f71 -> $f72), id32: ($f71 -> $f73)])
[entry::chc] get {$f72: Node, $f73: Node}
[slotted_egraphs::egraph::add] classes insert id33
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id32: ($f71 -> $0), id32: ($f71 -> $1)])
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id32, mapToS : $f71
[entry::chc] childId : id32, mapToS : $f71
[entry::chc] aggregateVarType for And([id32: ($f71 -> $0), id32: ($f71 -> $1)])
[entry::chc] get {$1: Node, $0: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (and (eq (node $i9) leaf) (eq (node $i10) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $i8, $f22 -> $i9, $f23 -> $i10), id33: ($f72 -> $i9, $f73 -> $i10), [])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id33: ($f72 -> $1, $f73 -> $2), []), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[entry::chc] calling make on New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id33: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] slots: {$f74, $f75, $f76}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id33, mapToS : $f72
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] childId : id33, mapToS : $f73
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id33: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] get {$f74: Int, $f75: Node, $f76: Node}
[slotted_egraphs::egraph::add] classes insert id34
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id33: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id33, mapToS : $f72
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] childId : id33, mapToS : $f73
[entry::chc] aggregateVarType for New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id33: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] get {$0: Int, $1: Node, $2: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id34 <-> (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) leaf) (eq (node $i10) leaf)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i8), id2: ($f1 -> $i9), id2: ($f1 -> $i10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Leq(id1: ($f0 -> $i8), id6: ())
[slotted_egraphs::egraph::add] ret (Leq(id1: ($f0 -> $0), id6: ()), ($0 -> $i8))
[entry::chc] calling make on Leq(id1: ($f0 -> $f77), id6: ())
[entry::chc] slots: {$f77}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Leq(id1: ($f0 -> $f77), id6: ())
[entry::chc] get {$f77: Int}
[slotted_egraphs::egraph::add] classes insert id35
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Leq(id1: ($f0 -> $0), id6: ())
[entry::chc] slots: {$0}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Leq(id1: ($f0 -> $0), id6: ())
[entry::chc] get {$0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id35 <-> (leq (int $i8) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i13)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i13)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i11)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i11))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i11)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i12)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i12))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i12)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $i13), id2: ($f1 -> $i11), id2: ($f1 -> $i12))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $i13, $1 -> $i11, $2 -> $i12))
[entry::chc] calling make on BiNode(id1: ($f0 -> $f78), id2: ($f1 -> $f79), id2: ($f1 -> $f80))
[entry::chc] slots: {$f78, $f79, $f80}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] aggregateVarType for BiNode(id1: ($f0 -> $f78), id2: ($f1 -> $f79), id2: ($f1 -> $f80))
[entry::chc] get {$f80: Node, $f78: Int, $f79: Node}
[slotted_egraphs::egraph::add] classes insert id36
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[entry::chc] slots: {$0, $1, $2}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] aggregateVarType for BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[entry::chc] get {$1: Node, $2: Node, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (binode (int $i13) (node $i11) (node $i12))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $i9), id36: ($f78 -> $i13, $f79 -> $i11, $f80 -> $i12))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id36: ($f78 -> $1, $f79 -> $2, $f80 -> $3)), ($0 -> $i9, $1 -> $i13, $2 -> $i11, $3 -> $i12))
[entry::chc] calling make on Eq(id2: ($f1 -> $f81), id36: ($f78 -> $f82, $f79 -> $f83, $f80 -> $f84))
[entry::chc] slots: {$f81, $f82, $f83, $f84}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] childId : id36, mapToS : $f80
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f81), id36: ($f78 -> $f82, $f79 -> $f83, $f80 -> $f84))
[entry::chc] get {$f81: Node, $f82: Int, $f84: Node, $f83: Node}
[slotted_egraphs::egraph::add] classes insert id37
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Eq(id2: ($f1 -> $0), id36: ($f78 -> $1, $f79 -> $2, $f80 -> $3))
[entry::chc] slots: {$0, $1, $2, $3}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] childId : id36, mapToS : $f80
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $0), id36: ($f78 -> $1, $f79 -> $2, $f80 -> $3))
[entry::chc] get {$3: Node, $1: Int, $0: Node, $2: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (eq (node $i9) (binode (int $i13) (node $i11) (node $i12)))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i13)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i13)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i11)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i11))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i11)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i12)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i12))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i12)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $i13), id2: ($f1 -> $i11), id2: ($f1 -> $i12))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $i13, $1 -> $i11, $2 -> $i12))
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (binode (int $i13) (node $i11) (node $i12))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $i10), id36: ($f78 -> $i13, $f79 -> $i11, $f80 -> $i12))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id36: ($f78 -> $1, $f79 -> $2, $f80 -> $3)), ($0 -> $i10, $1 -> $i13, $2 -> $i11, $3 -> $i12))
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (eq (node $i10) (binode (int $i13) (node $i11) (node $i12)))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id35: ($f77 -> $i8), id37: ($f81 -> $i9, $f82 -> $i13, $f83 -> $i11, $f84 -> $i12), id37: ($f81 -> $i10, $f82 -> $i13, $f83 -> $i11, $f84 -> $i12)])
[slotted_egraphs::egraph::add] ret (And([id35: ($f77 -> $0), id37: ($f81 -> $1, $f82 -> $2, $f83 -> $3, $f84 -> $4), id37: ($f81 -> $5, $f82 -> $2, $f83 -> $3, $f84 -> $4)]), ($0 -> $i8, $1 -> $i9, $2 -> $i13, $3 -> $i11, $4 -> $i12, $5 -> $i10))
[entry::chc] calling make on And([id35: ($f77 -> $f85), id37: ($f81 -> $f86, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90), id37: ($f81 -> $f87, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90)])
[entry::chc] slots: {$f85, $f86, $f87, $f88, $f89, $f90}
[entry::chc] childId : id35, mapToS : $f77
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] aggregateVarType for And([id35: ($f77 -> $f85), id37: ($f81 -> $f86, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90), id37: ($f81 -> $f87, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90)])
[entry::chc] get {$f85: Int, $f88: Int, $f89: Node, $f90: Node, $f86: Node, $f87: Node}
[slotted_egraphs::egraph::add] classes insert id38
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id35: ($f77 -> $0), id37: ($f81 -> $1, $f82 -> $2, $f83 -> $3, $f84 -> $4), id37: ($f81 -> $5, $f82 -> $2, $f83 -> $3, $f84 -> $4)])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5}
[entry::chc] childId : id35, mapToS : $f77
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] aggregateVarType for And([id35: ($f77 -> $0), id37: ($f81 -> $1, $f82 -> $2, $f83 -> $3, $f84 -> $4), id37: ($f81 -> $5, $f82 -> $2, $f83 -> $3, $f84 -> $4)])
[entry::chc] get {$1: Node, $5: Node, $2: Int, $0: Int, $4: Node, $3: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (and (leq (int $i8) 0) (eq (node $i9) (binode (int $i13) (node $i11) (node $i12))) (eq (node $i10) (binode (int $i13) (node $i11) (node $i12))))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $i8, $f22 -> $i9, $f23 -> $i10), id38: ($f85 -> $i8, $f86 -> $i9, $f87 -> $i10, $f88 -> $i13, $f89 -> $i11, $f90 -> $i12), [])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id38: ($f85 -> $0, $f86 -> $1, $f87 -> $2, $f88 -> $3, $f89 -> $4, $f90 -> $5), []), ($0 -> $i8, $1 -> $i9, $2 -> $i10, $3 -> $i13, $4 -> $i11, $5 -> $i12))
[entry::chc] calling make on New(id12: ($f21 -> $f91, $f22 -> $f92, $f23 -> $f93), id38: ($f85 -> $f91, $f86 -> $f92, $f87 -> $f93, $f88 -> $f94, $f89 -> $f95, $f90 -> $f96), [])
[entry::chc] slots: {$f91, $f92, $f93, $f94, $f95, $f96}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id38, mapToS : $f85
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id38, mapToS : $f86
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] childId : id38, mapToS : $f87
[entry::chc] childId : id38, mapToS : $f88
[entry::chc] childId : id38, mapToS : $f89
[entry::chc] childId : id38, mapToS : $f90
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f91, $f22 -> $f92, $f23 -> $f93), id38: ($f85 -> $f91, $f86 -> $f92, $f87 -> $f93, $f88 -> $f94, $f89 -> $f95, $f90 -> $f96), [])
[entry::chc] get {$f95: Node, $f96: Node, $f92: Node, $f91: Int, $f93: Node, $f94: Int}
[slotted_egraphs::egraph::add] classes insert id39
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id38: ($f85 -> $0, $f86 -> $1, $f87 -> $2, $f88 -> $3, $f89 -> $4, $f90 -> $5), [])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id38, mapToS : $f85
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id38, mapToS : $f86
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] childId : id38, mapToS : $f87
[entry::chc] childId : id38, mapToS : $f88
[entry::chc] childId : id38, mapToS : $f89
[entry::chc] childId : id38, mapToS : $f90
[entry::chc] aggregateVarType for New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id38: ($f85 -> $0, $f86 -> $1, $f87 -> $2, $f88 -> $3, $f89 -> $4, $f90 -> $5), [])
[entry::chc] get {$0: Int, $3: Int, $4: Node, $1: Node, $5: Node, $2: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (new (pred (int $i8) (node $i9) (node $i10)) (and (leq (int $i8) 0) (eq (node $i9) (binode (int $i13) (node $i11) (node $i12))) (eq (node $i10) (binode (int $i13) (node $i11) (node $i12)))))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i8), id2: ($f1 -> $i9), id2: ($f1 -> $i10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i16)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i16)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i14)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i14))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i14)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i15)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i15)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $i16), id2: ($f1 -> $i14), id2: ($f1 -> $i15))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $i16, $1 -> $i14, $2 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (binode (int $i16) (node $i14) (node $i15))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $i9), id36: ($f78 -> $i16, $f79 -> $i14, $f80 -> $i15))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id36: ($f78 -> $1, $f79 -> $2, $f80 -> $3)), ($0 -> $i9, $1 -> $i16, $2 -> $i14, $3 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (eq (node $i9) (binode (int $i16) (node $i14) (node $i15)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[entry::chc] calling make on Number(1)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id40
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Number(1)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $i8), id40: ())
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id40: ()), ($0 -> $i8))
[entry::chc] calling make on Geq(id1: ($f0 -> $f97), id40: ())
[entry::chc] slots: {$f97}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f97), id40: ())
[entry::chc] get {$f97: Int}
[slotted_egraphs::egraph::add] classes insert id41
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id40: ())
[entry::chc] slots: {$0}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $0), id40: ())
[entry::chc] get {$0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id41 <-> (geq (int $i8) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i17)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i17)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Minus(id1: ($f0 -> $i8), id40: ())
[slotted_egraphs::egraph::add] ret (Minus(id1: ($f0 -> $0), id40: ()), ($0 -> $i8))
[entry::chc] calling make on Minus(id1: ($f0 -> $f98), id40: ())
[entry::chc] slots: {$f98}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Minus(id1: ($f0 -> $f98), id40: ())
[entry::chc] get {$f98: Int}
[slotted_egraphs::egraph::add] classes insert id42
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Minus(id1: ($f0 -> $0), id40: ())
[entry::chc] slots: {$0}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Minus(id1: ($f0 -> $0), id40: ())
[entry::chc] get {$0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> (- (int $i8) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i17), id42: ($f98 -> $i8))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id42: ($f98 -> $1)), ($0 -> $i17, $1 -> $i8))
[entry::chc] calling make on Eq(id1: ($f0 -> $f100), id42: ($f98 -> $f99))
[entry::chc] slots: {$f99, $f100}
[entry::chc] childId : id42, mapToS : $f98
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f100), id42: ($f98 -> $f99))
[entry::chc] get {$f99: Int, $f100: Int}
[slotted_egraphs::egraph::add] classes insert id43
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id42: ($f98 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id42, mapToS : $f98
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $0), id42: ($f98 -> $1))
[entry::chc] get {$0: Int, $1: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id43 <-> (eq (int $i17) (- (int $i8) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id37: ($f81 -> $i9, $f82 -> $i16, $f83 -> $i14, $f84 -> $i15), id41: ($f97 -> $i8), id43: ($f99 -> $i8, $f100 -> $i17)])
[slotted_egraphs::egraph::add] ret (And([id37: ($f81 -> $0, $f82 -> $1, $f83 -> $2, $f84 -> $3), id41: ($f97 -> $4), id43: ($f99 -> $4, $f100 -> $5)]), ($0 -> $i9, $1 -> $i16, $2 -> $i14, $3 -> $i15, $4 -> $i8, $5 -> $i17))
[entry::chc] calling make on And([id37: ($f81 -> $f102, $f82 -> $f103, $f83 -> $f104, $f84 -> $f105), id41: ($f97 -> $f101), id43: ($f99 -> $f101, $f100 -> $f106)])
[entry::chc] slots: {$f101, $f102, $f103, $f104, $f105, $f106}
[entry::chc] childId : id41, mapToS : $f97
[entry::chc] childId : id43, mapToS : $f99
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] aggregateVarType for And([id37: ($f81 -> $f102, $f82 -> $f103, $f83 -> $f104, $f84 -> $f105), id41: ($f97 -> $f101), id43: ($f99 -> $f101, $f100 -> $f106)])
[entry::chc] get {$f104: Node, $f103: Int, $f101: Int, $f102: Node, $f105: Node, $f106: Int}
[slotted_egraphs::egraph::add] classes insert id44
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id37: ($f81 -> $0, $f82 -> $1, $f83 -> $2, $f84 -> $3), id41: ($f97 -> $4), id43: ($f99 -> $4, $f100 -> $5)])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5}
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] childId : id41, mapToS : $f97
[entry::chc] childId : id43, mapToS : $f99
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] aggregateVarType for And([id37: ($f81 -> $0, $f82 -> $1, $f83 -> $2, $f84 -> $3), id41: ($f97 -> $4), id43: ($f99 -> $4, $f100 -> $5)])
[entry::chc] get {$1: Int, $3: Node, $0: Node, $4: Int, $5: Int, $2: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id44 <-> (and (eq (node $i9) (binode (int $i16) (node $i14) (node $i15))) (geq (int $i8) 1) (eq (int $i17) (- (int $i8) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i8), id2: ($f1 -> $i9), id2: ($f1 -> $i10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $i8) (node $i9) (node $i10))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id11: (), id12: ($f21 -> $i8, $f22 -> $i9, $f23 -> $i10))
[slotted_egraphs::egraph::add] ret (Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2)), ($0 -> $i8, $1 -> $i9, $2 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $i8) (node $i9) (node $i10)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $i8, $f22 -> $i9, $f23 -> $i10), id44: ($f101 -> $i8, $f102 -> $i9, $f103 -> $i16, $f104 -> $i14, $f105 -> $i15, $f106 -> $i17), [AppliedId(id13: ($f24 -> $i8, $f25 -> $i9, $f26 -> $i10))])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id44: ($f101 -> $0, $f102 -> $1, $f103 -> $3, $f104 -> $4, $f105 -> $5, $f106 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))]), ($0 -> $i8, $1 -> $i9, $2 -> $i10, $3 -> $i16, $4 -> $i14, $5 -> $i15, $6 -> $i17))
[entry::chc] calling make on New(id12: ($f21 -> $f107, $f22 -> $f108, $f23 -> $f109), id44: ($f101 -> $f107, $f102 -> $f108, $f103 -> $f110, $f104 -> $f111, $f105 -> $f112, $f106 -> $f113), [AppliedId(id13: ($f24 -> $f107, $f25 -> $f108, $f26 -> $f109))])
[entry::chc] slots: {$f107, $f108, $f109, $f110, $f111, $f112, $f113}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id44, mapToS : $f101
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id44, mapToS : $f102
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] childId : id44, mapToS : $f103
[entry::chc] childId : id44, mapToS : $f104
[entry::chc] childId : id44, mapToS : $f105
[entry::chc] childId : id44, mapToS : $f106
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f107, $f22 -> $f108, $f23 -> $f109), id44: ($f101 -> $f107, $f102 -> $f108, $f103 -> $f110, $f104 -> $f111, $f105 -> $f112, $f106 -> $f113), [AppliedId(id13: ($f24 -> $f107, $f25 -> $f108, $f26 -> $f109))])
[entry::chc] get {$f108: Node, $f112: Node, $f111: Node, $f113: Int, $f109: Node, $f110: Int, $f107: Int}
[slotted_egraphs::egraph::add] classes insert id45
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id44: ($f101 -> $0, $f102 -> $1, $f103 -> $3, $f104 -> $4, $f105 -> $5, $f106 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id44, mapToS : $f101
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id44, mapToS : $f102
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] childId : id44, mapToS : $f103
[entry::chc] childId : id44, mapToS : $f104
[entry::chc] childId : id44, mapToS : $f105
[entry::chc] childId : id44, mapToS : $f106
[entry::chc] aggregateVarType for New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id44: ($f101 -> $0, $f102 -> $1, $f103 -> $3, $f104 -> $4, $f105 -> $5, $f106 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] get {$5: Node, $0: Int, $2: Node, $6: Int, $1: Node, $3: Int, $4: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id45 <-> (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) (binode (int $i16) (node $i14) (node $i15))) (geq (int $i8) 1) (eq (int $i17) (- (int $i8) 1))) (init leafDrop (pred (int $i8) (node $i9) (node $i10))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f74 -> $i8, $f75 -> $i9, $f76 -> $i10)), AppliedId(id39: ($f91 -> $i8, $f92 -> $i9, $f93 -> $i10, $f94 -> $i13, $f95 -> $i11, $f96 -> $i12)), AppliedId(id45: ($f107 -> $i8, $f108 -> $i9, $f109 -> $i10, $f110 -> $i16, $f111 -> $i14, $f112 -> $i15, $f113 -> $i17))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f74 -> $0, $f75 -> $1, $f76 -> $2)), AppliedId(id39: ($f91 -> $0, $f92 -> $1, $f93 -> $2, $f94 -> $3, $f95 -> $4, $f96 -> $5)), AppliedId(id45: ($f107 -> $0, $f108 -> $1, $f109 -> $2, $f110 -> $6, $f111 -> $7, $f112 -> $8, $f113 -> $9))]), ($0 -> $i8, $1 -> $i9, $2 -> $i10, $3 -> $i13, $4 -> $i11, $5 -> $i12, $6 -> $i16, $7 -> $i14, $8 -> $i15, $9 -> $i17))
[entry::chc] calling make on Compose([AppliedId(id34: ($f74 -> $f114, $f75 -> $f115, $f76 -> $f116)), AppliedId(id39: ($f91 -> $f114, $f92 -> $f115, $f93 -> $f116, $f94 -> $f117, $f95 -> $f118, $f96 -> $f119)), AppliedId(id45: ($f107 -> $f114, $f108 -> $f115, $f109 -> $f116, $f110 -> $f120, $f111 -> $f121, $f112 -> $f122, $f113 -> $f123))])
[entry::chc] slots: {$f114, $f115, $f116, $f117, $f118, $f119, $f120, $f121, $f122, $f123}
[entry::chc] childId : id34, mapToS : $f74
[entry::chc] childId : id39, mapToS : $f91
[entry::chc] childId : id45, mapToS : $f107
[entry::chc] childId : id34, mapToS : $f75
[entry::chc] childId : id39, mapToS : $f92
[entry::chc] childId : id45, mapToS : $f108
[entry::chc] childId : id34, mapToS : $f76
[entry::chc] childId : id39, mapToS : $f93
[entry::chc] childId : id45, mapToS : $f109
[entry::chc] childId : id39, mapToS : $f94
[entry::chc] childId : id39, mapToS : $f95
[entry::chc] childId : id39, mapToS : $f96
[entry::chc] childId : id45, mapToS : $f110
[entry::chc] childId : id45, mapToS : $f111
[entry::chc] childId : id45, mapToS : $f112
[entry::chc] childId : id45, mapToS : $f113
[entry::chc] aggregateVarType for Compose([AppliedId(id34: ($f74 -> $f114, $f75 -> $f115, $f76 -> $f116)), AppliedId(id39: ($f91 -> $f114, $f92 -> $f115, $f93 -> $f116, $f94 -> $f117, $f95 -> $f118, $f96 -> $f119)), AppliedId(id45: ($f107 -> $f114, $f108 -> $f115, $f109 -> $f116, $f110 -> $f120, $f111 -> $f121, $f112 -> $f122, $f113 -> $f123))])
[entry::chc] get {$f116: Node, $f118: Node, $f123: Int, $f115: Node, $f117: Int, $f122: Node, $f114: Int, $f119: Node, $f120: Int, $f121: Node}
[slotted_egraphs::egraph::add] classes insert id46
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id34: ($f74 -> $0, $f75 -> $1, $f76 -> $2)), AppliedId(id39: ($f91 -> $0, $f92 -> $1, $f93 -> $2, $f94 -> $3, $f95 -> $4, $f96 -> $5)), AppliedId(id45: ($f107 -> $0, $f108 -> $1, $f109 -> $2, $f110 -> $6, $f111 -> $7, $f112 -> $8, $f113 -> $9))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9}
[entry::chc] childId : id34, mapToS : $f74
[entry::chc] childId : id39, mapToS : $f91
[entry::chc] childId : id45, mapToS : $f107
[entry::chc] childId : id34, mapToS : $f75
[entry::chc] childId : id39, mapToS : $f92
[entry::chc] childId : id45, mapToS : $f108
[entry::chc] childId : id34, mapToS : $f76
[entry::chc] childId : id39, mapToS : $f93
[entry::chc] childId : id45, mapToS : $f109
[entry::chc] childId : id39, mapToS : $f94
[entry::chc] childId : id39, mapToS : $f95
[entry::chc] childId : id39, mapToS : $f96
[entry::chc] childId : id45, mapToS : $f110
[entry::chc] childId : id45, mapToS : $f111
[entry::chc] childId : id45, mapToS : $f112
[entry::chc] childId : id45, mapToS : $f113
[entry::chc] aggregateVarType for Compose([AppliedId(id34: ($f74 -> $0, $f75 -> $1, $f76 -> $2)), AppliedId(id39: ($f91 -> $0, $f92 -> $1, $f93 -> $2, $f94 -> $3, $f95 -> $4, $f96 -> $5)), AppliedId(id45: ($f107 -> $0, $f108 -> $1, $f109 -> $2, $f110 -> $6, $f111 -> $7, $f112 -> $8, $f113 -> $9))])
[entry::chc] get {$2: Node, $3: Int, $6: Int, $4: Node, $5: Node, $7: Node, $8: Node, $9: Int, $1: Node, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id46 <-> (compose (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) leaf) (eq (node $i10) leaf))) (new (pred (int $i8) (node $i9) (node $i10)) (and (leq (int $i8) 0) (eq (node $i9) (binode (int $i13) (node $i11) (node $i12))) (eq (node $i10) (binode (int $i13) (node $i11) (node $i12))))) (new (pred (int $i8) (node $i9) (node $i10)) (and (eq (node $i9) (binode (int $i16) (node $i14) (node $i15))) (geq (int $i8) 1) (eq (int $i17) (- (int $i8) 1))) (init leafDrop (pred (int $i8) (node $i9) (node $i10)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id46: ($f114 -> $i8, $f115 -> $i9, $f116 -> $i10), id13: ($f24 -> $i8, $f25 -> $i9, $f26 -> $i10)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f118: Node, $f123: Int, $6: Int, $4: Node, $7: Node, $0: Int, $f119: Node, $f120: Int, $f116: Node, $2: Node, $5: Node, $8: Node, $3: Int, $f115: Node, $f117: Int, $f122: Node, $9: Int, $f114: Int, $1: Node, $f121: Node} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$1: Node, $f26: Node, $f24: Int, $f25: Node, $2: Node, $0: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f118: Node, $f123: Int, $6: Int, $4: Node, $7: Node, $0: Int, $f119: Node, $f120: Int, $f116: Node, $2: Node, $5: Node, $8: Node, $3: Int, $f26: Node, $f115: Node, $f24: Int, $f117: Int, $f122: Node, $9: Int, $f114: Int, $1: Node, $f25: Node, $f121: Node} }
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id34: ($f74 -> $0, $f75 -> $1, $f76 -> $2)), AppliedId(id39: ($f91 -> $0, $f92 -> $1, $f93 -> $2, $f94 -> $3, $f95 -> $4, $f96 -> $5)), AppliedId(id45: ($f107 -> $0, $f108 -> $1, $f109 -> $2, $f110 -> $6, $f111 -> $7, $f112 -> $8, $f113 -> $9))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9}
[entry::chc] childId : id34, mapToS : $f74
[entry::chc] childId : id39, mapToS : $f91
[entry::chc] childId : id45, mapToS : $f107
[entry::chc] childId : id34, mapToS : $f75
[entry::chc] childId : id39, mapToS : $f92
[entry::chc] childId : id45, mapToS : $f108
[entry::chc] childId : id34, mapToS : $f76
[entry::chc] childId : id39, mapToS : $f93
[entry::chc] childId : id45, mapToS : $f109
[entry::chc] childId : id39, mapToS : $f94
[entry::chc] childId : id39, mapToS : $f95
[entry::chc] childId : id39, mapToS : $f96
[entry::chc] childId : id45, mapToS : $f110
[entry::chc] childId : id45, mapToS : $f111
[entry::chc] childId : id45, mapToS : $f112
[entry::chc] childId : id45, mapToS : $f113
[entry::chc] aggregateVarType for Compose([AppliedId(id34: ($f74 -> $0, $f75 -> $1, $f76 -> $2)), AppliedId(id39: ($f91 -> $0, $f92 -> $1, $f93 -> $2, $f94 -> $3, $f95 -> $4, $f96 -> $5)), AppliedId(id45: ($f107 -> $0, $f108 -> $1, $f109 -> $2, $f110 -> $6, $f111 -> $7, $f112 -> $8, $f113 -> $9))])
[entry::chc] get {$8: Node, $0: Int, $1: Node, $4: Node, $2: Node, $9: Int, $5: Node, $6: Int, $3: Int, $7: Node}
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] slots: {$0, $1, $2, $3, $4}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] get {$2: Int, $3: Node, $1: Int, $4: Node, $0: Int}
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id44: ($f101 -> $0, $f102 -> $1, $f103 -> $3, $f104 -> $4, $f105 -> $5, $f106 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] childId : id44, mapToS : $f101
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] childId : id44, mapToS : $f102
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] childId : id44, mapToS : $f103
[entry::chc] childId : id44, mapToS : $f104
[entry::chc] childId : id44, mapToS : $f105
[entry::chc] childId : id44, mapToS : $f106
[entry::chc] aggregateVarType for New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id44: ($f101 -> $0, $f102 -> $1, $f103 -> $3, $f104 -> $4, $f105 -> $5, $f106 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] get {$5: Node, $6: Int, $1: Node, $3: Int, $0: Int, $4: Node, $2: Node}
[slotted_egraphs::parse] from (init minLeaf (pred <(node $i18) (int $i19)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $i18) (int $i19))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $i18) (int $i19)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $i18), id1: ($f0 -> $i19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $i18, $1 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $i18) (int $i19))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $i18, $f28 -> $i19))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $i18, $1 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $i18) (int $i19)))
[slotted_egraphs::parse] from (compose <(new (pred <(node $i18) (int $i19)>) (and <(eq (int $i19) 0) (eq (node $i18) (leaf))>) <>) (new (pred <(node $i18) (int $i19)>) (and <(eq (node $i18) (binode (int $i20) (node $i21) (node $i22))) (eq (int $i19) (+ (int $i25) 1))>) <(init minLeaf (pred <(node $i21) (int $i23)>)) (init minLeaf (pred <(node $i22) (int $i24)>)) (compose <(new (pred <(int $i23) (int $i24) (int $i25)>) (and <(lt (int $i23) (int $i24)) (eq (int $i25) (int $i23))>) <>) (new (pred <(int $i23) (int $i24) (int $i25)>) (and <(geq (int $i23) (int $i24)) (eq (int $i25) (int $i24))>) <>)>)>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $i18) (int $i19))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i19)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $i19) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i18)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $i18) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (int $i19) 0) (eq (node $i18) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $i18) (int $i19)) (and (eq (int $i19) 0) (eq (node $i18) leaf)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $i18) (int $i19))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($i18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i18)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($i20), RParen, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i20)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i20)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i21)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i21)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($i22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i22)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i22)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $i20) (node $i21) (node $i22))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $i18) (binode (int $i20) (node $i21) (node $i22)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($i19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i19)
[slotted_egraphs::parse] left tokens [LParen, Ident("+"), LParen, Ident("int"), Slot($i25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i25)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i25)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (int $i25) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $i19) (+ (int $i25) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $i18) (binode (int $i20) (node $i21) (node $i22))) (eq (int $i19) (+ (int $i25) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i21), RParen, LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i21)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i21)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i23)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $i21) (int $i23))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $i21) (int $i23)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($i22), RParen, LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($i22)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $i22)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i24), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i24)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $i22) (int $i24))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $i22) (int $i24)))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i23)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i24)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i25)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i25)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i23) (int $i24) (int $i25))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i23)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i24)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (int $i23) (int $i24))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i25)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i25)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i23), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i23)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $i25) (int $i23))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23))))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i23)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i24), RParen, LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i24)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i25), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i25)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i25)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $i23) (int $i24) (int $i25))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($i23), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i23)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i24), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i24)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $i23) (int $i24))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($i25), RParen, LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i25)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i25)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($i24), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($i24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $i24)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $i25) (int $i24))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))) (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24)))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $i18) (int $i19)) (and (eq (node $i18) (binode (int $i20) (node $i21) (node $i22))) (eq (int $i19) (+ (int $i25) 1))) (init minLeaf (pred (node $i21) (int $i23))) (init minLeaf (pred (node $i22) (int $i24))) (compose (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))) (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24))))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (node $i18) (int $i19)) (and (eq (int $i19) 0) (eq (node $i18) leaf))) (new (pred (node $i18) (int $i19)) (and (eq (node $i18) (binode (int $i20) (node $i21) (node $i22))) (eq (int $i19) (+ (int $i25) 1))) (init minLeaf (pred (node $i21) (int $i23))) (init minLeaf (pred (node $i22) (int $i24))) (compose (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))) (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24)))))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $i18), id1: ($f0 -> $i19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $i18, $1 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $i18) (int $i19))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i19)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i19), id6: ())
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id6: ()), ($0 -> $i19))
[entry::chc] calling make on Eq(id1: ($f0 -> $f138), id6: ())
[entry::chc] slots: {$f138}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f138), id6: ())
[entry::chc] get {$f138: Int}
[slotted_egraphs::egraph::add] classes insert id47
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id6: ())
[entry::chc] slots: {$0}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $0), id6: ())
[entry::chc] get {$0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id47 <-> (eq (int $i19) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i18)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $i18), id31: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id31: ()), ($0 -> $i18))
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> (eq (node $i18) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id47: ($f138 -> $i19), id32: ($f71 -> $i18)])
[slotted_egraphs::egraph::add] ret (And([id47: ($f138 -> $0), id32: ($f71 -> $1)]), ($0 -> $i19, $1 -> $i18))
[entry::chc] calling make on And([id47: ($f138 -> $f140), id32: ($f71 -> $f139)])
[entry::chc] slots: {$f139, $f140}
[entry::chc] childId : id32, mapToS : $f71
[entry::chc] childId : id47, mapToS : $f138
[entry::chc] aggregateVarType for And([id47: ($f138 -> $f140), id32: ($f71 -> $f139)])
[entry::chc] get {$f139: Node, $f140: Int}
[slotted_egraphs::egraph::add] classes insert id48
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id47: ($f138 -> $0), id32: ($f71 -> $1)])
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id47, mapToS : $f138
[entry::chc] childId : id32, mapToS : $f71
[entry::chc] aggregateVarType for And([id47: ($f138 -> $0), id32: ($f71 -> $1)])
[entry::chc] get {$1: Node, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id48 <-> (and (eq (int $i19) 0) (eq (node $i18) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id15: ($f27 -> $i18, $f28 -> $i19), id48: ($f139 -> $i18, $f140 -> $i19), [])
[slotted_egraphs::egraph::add] ret (New(id15: ($f27 -> $0, $f28 -> $1), id48: ($f139 -> $0, $f140 -> $1), []), ($0 -> $i18, $1 -> $i19))
[entry::chc] calling make on New(id15: ($f27 -> $f141, $f28 -> $f142), id48: ($f139 -> $f141, $f140 -> $f142), [])
[entry::chc] slots: {$f141, $f142}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] childId : id48, mapToS : $f139
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] childId : id48, mapToS : $f140
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f141, $f28 -> $f142), id48: ($f139 -> $f141, $f140 -> $f142), [])
[entry::chc] get {$f141: Node, $f142: Int}
[slotted_egraphs::egraph::add] classes insert id49
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id48: ($f139 -> $0, $f140 -> $1), [])
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] childId : id48, mapToS : $f139
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] childId : id48, mapToS : $f140
[entry::chc] aggregateVarType for New(id15: ($f27 -> $0, $f28 -> $1), id48: ($f139 -> $0, $f140 -> $1), [])
[entry::chc] get {$0: Node, $1: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id49 <-> (new (pred (node $i18) (int $i19)) (and (eq (int $i19) 0) (eq (node $i18) leaf)))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $i18), id1: ($f0 -> $i19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $i18, $1 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $i18) (int $i19))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i20)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i20))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i20)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i21)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i21))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i21)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i22)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i22))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i22)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $i20), id2: ($f1 -> $i21), id2: ($f1 -> $i22))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $i20, $1 -> $i21, $2 -> $i22))
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (binode (int $i20) (node $i21) (node $i22))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $i18), id36: ($f78 -> $i20, $f79 -> $i21, $f80 -> $i22))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id36: ($f78 -> $1, $f79 -> $2, $f80 -> $3)), ($0 -> $i18, $1 -> $i20, $2 -> $i21, $3 -> $i22))
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (eq (node $i18) (binode (int $i20) (node $i21) (node $i22)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i19)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i25)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i25)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id1: ($f0 -> $i25), id40: ())
[slotted_egraphs::egraph::add] ret (Add(id1: ($f0 -> $0), id40: ()), ($0 -> $i25))
[entry::chc] calling make on Add(id1: ($f0 -> $f143), id40: ())
[entry::chc] slots: {$f143}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f143), id40: ())
[entry::chc] get {$f143: Int}
[slotted_egraphs::egraph::add] classes insert id50
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Add(id1: ($f0 -> $0), id40: ())
[entry::chc] slots: {$0}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $0), id40: ())
[entry::chc] get {$0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id50 <-> (+ (int $i25) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i19), id50: ($f143 -> $i25))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id50: ($f143 -> $1)), ($0 -> $i19, $1 -> $i25))
[entry::chc] calling make on Eq(id1: ($f0 -> $f144), id50: ($f143 -> $f145))
[entry::chc] slots: {$f144, $f145}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id50, mapToS : $f143
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f144), id50: ($f143 -> $f145))
[entry::chc] get {$f145: Int, $f144: Int}
[slotted_egraphs::egraph::add] classes insert id51
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id50: ($f143 -> $1))
[entry::chc] slots: {$0, $1}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] childId : id50, mapToS : $f143
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $0), id50: ($f143 -> $1))
[entry::chc] get {$1: Int, $0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id51 <-> (eq (int $i19) (+ (int $i25) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id37: ($f81 -> $i18, $f82 -> $i20, $f83 -> $i21, $f84 -> $i22), id51: ($f144 -> $i19, $f145 -> $i25)])
[slotted_egraphs::egraph::add] ret (And([id37: ($f81 -> $0, $f82 -> $1, $f83 -> $2, $f84 -> $3), id51: ($f144 -> $4, $f145 -> $5)]), ($0 -> $i18, $1 -> $i20, $2 -> $i21, $3 -> $i22, $4 -> $i19, $5 -> $i25))
[entry::chc] calling make on And([id37: ($f81 -> $f146, $f82 -> $f148, $f83 -> $f149, $f84 -> $f150), id51: ($f144 -> $f147, $f145 -> $f151)])
[entry::chc] slots: {$f146, $f147, $f148, $f149, $f150, $f151}
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] childId : id51, mapToS : $f144
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] childId : id51, mapToS : $f145
[entry::chc] aggregateVarType for And([id37: ($f81 -> $f146, $f82 -> $f148, $f83 -> $f149, $f84 -> $f150), id51: ($f144 -> $f147, $f145 -> $f151)])
[entry::chc] get {$f151: Int, $f147: Int, $f148: Int, $f146: Node, $f150: Node, $f149: Node}
[slotted_egraphs::egraph::add] classes insert id52
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on And([id37: ($f81 -> $0, $f82 -> $1, $f83 -> $2, $f84 -> $3), id51: ($f144 -> $4, $f145 -> $5)])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5}
[entry::chc] childId : id37, mapToS : $f81
[entry::chc] childId : id37, mapToS : $f82
[entry::chc] childId : id37, mapToS : $f83
[entry::chc] childId : id37, mapToS : $f84
[entry::chc] childId : id51, mapToS : $f144
[entry::chc] childId : id51, mapToS : $f145
[entry::chc] aggregateVarType for And([id37: ($f81 -> $0, $f82 -> $1, $f83 -> $2, $f84 -> $3), id51: ($f144 -> $4, $f145 -> $5)])
[entry::chc] get {$1: Int, $0: Node, $2: Node, $5: Int, $3: Node, $4: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id52 <-> (and (eq (node $i18) (binode (int $i20) (node $i21) (node $i22))) (eq (int $i19) (+ (int $i25) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i21)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i21))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i21)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i23)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $i21), id1: ($f0 -> $i23)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $i21, $1 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $i21) (int $i23))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $i21, $f28 -> $i23))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $i21, $1 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $i21) (int $i23)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($i22)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $i22))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $i22)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i24)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $i22), id1: ($f0 -> $i24)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $i22, $1 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $i22) (int $i24))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $i22, $f28 -> $i24))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $i22, $1 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $i22) (int $i24)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i23)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i24)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i25)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i25)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i23), id1: ($f0 -> $i24), id1: ($f0 -> $i25)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $i23, $1 -> $i24, $2 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (pred (int $i23) (int $i24) (int $i25))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i23)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i24)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id1: ($f0 -> $i23), id1: ($f0 -> $i24))
[slotted_egraphs::egraph::add] ret (Less(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i23, $1 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (lt (int $i23) (int $i24))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i25)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i25)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i23)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i25), id1: ($f0 -> $i23))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i25, $1 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (eq (int $i25) (int $i23))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id23: ($f48 -> $i23, $f49 -> $i24), id24: ($f50 -> $i23, $f51 -> $i25)])
[slotted_egraphs::egraph::add] ret (And([id23: ($f48 -> $0, $f49 -> $1), id24: ($f50 -> $0, $f51 -> $2)]), ($0 -> $i23, $1 -> $i24, $2 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id25 <-> (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id22: ($f45 -> $i23, $f46 -> $i24, $f47 -> $i25), id25: ($f52 -> $i23, $f53 -> $i24, $f54 -> $i25), [])
[slotted_egraphs::egraph::add] ret (New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id25: ($f52 -> $0, $f53 -> $1, $f54 -> $2), []), ($0 -> $i23, $1 -> $i24, $2 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23))))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i23)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i24)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i25)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i25)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i23), id1: ($f0 -> $i24), id1: ($f0 -> $i25)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $i23, $1 -> $i24, $2 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (pred (int $i23) (int $i24) (int $i25))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i23)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i24)
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $i23), id1: ($f0 -> $i24))
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i23, $1 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (geq (int $i23) (int $i24))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i25)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i25)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($i24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $i24)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i25), id1: ($f0 -> $i24))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i25, $1 -> $i24))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (eq (int $i25) (int $i24))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id27: ($f58 -> $i23, $f59 -> $i24), id24: ($f50 -> $i24, $f51 -> $i25)])
[slotted_egraphs::egraph::add] ret (And([id27: ($f58 -> $0, $f59 -> $1), id24: ($f50 -> $1, $f51 -> $2)]), ($0 -> $i23, $1 -> $i24, $2 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id28 <-> (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id22: ($f45 -> $i23, $f46 -> $i24, $f47 -> $i25), id28: ($f60 -> $i23, $f61 -> $i24, $f62 -> $i25), [])
[slotted_egraphs::egraph::add] ret (New(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2), id28: ($f60 -> $0, $f61 -> $1, $f62 -> $2), []), ($0 -> $i23, $1 -> $i24, $2 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id29 <-> (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id26: ($f55 -> $i23, $f56 -> $i24, $f57 -> $i25)), AppliedId(id29: ($f63 -> $i23, $f64 -> $i24, $f65 -> $i25))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id26: ($f55 -> $0, $f56 -> $1, $f57 -> $2)), AppliedId(id29: ($f63 -> $0, $f64 -> $1, $f65 -> $2))]), ($0 -> $i23, $1 -> $i24, $2 -> $i25))
[slotted_egraphs::egraph::add] add_syn_expr: id21 <-> (compose (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))) (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24)))))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id15: ($f27 -> $i18, $f28 -> $i19), id52: ($f146 -> $i18, $f147 -> $i19, $f148 -> $i20, $f149 -> $i21, $f150 -> $i22, $f151 -> $i25), [AppliedId(id16: ($f29 -> $i21, $f30 -> $i23)), AppliedId(id16: ($f29 -> $i22, $f30 -> $i24)), AppliedId(id21: ($f43 -> $i23, $f44 -> $i24))])
[slotted_egraphs::egraph::add] ret (New(id15: ($f27 -> $0, $f28 -> $1), id52: ($f146 -> $0, $f147 -> $1, $f148 -> $2, $f149 -> $3, $f150 -> $4, $f151 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id21: ($f43 -> $6, $f44 -> $7))]), ($0 -> $i18, $1 -> $i19, $2 -> $i20, $3 -> $i21, $4 -> $i22, $5 -> $i25, $6 -> $i23, $7 -> $i24))
[entry::chc] calling make on New(id15: ($f27 -> $f152, $f28 -> $f153), id52: ($f146 -> $f152, $f147 -> $f153, $f148 -> $f154, $f149 -> $f155, $f150 -> $f156, $f151 -> $f157), [AppliedId(id16: ($f29 -> $f155, $f30 -> $f158)), AppliedId(id16: ($f29 -> $f156, $f30 -> $f159)), AppliedId(id21: ($f43 -> $f158, $f44 -> $f159))])
[entry::chc] slots: {$f152, $f153, $f154, $f155, $f156, $f157, $f158, $f159}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] childId : id52, mapToS : $f146
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] childId : id52, mapToS : $f147
[entry::chc] childId : id52, mapToS : $f148
[entry::chc] childId : id52, mapToS : $f149
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id52, mapToS : $f150
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id52, mapToS : $f151
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id21, mapToS : $f43
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id21, mapToS : $f44
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f152, $f28 -> $f153), id52: ($f146 -> $f152, $f147 -> $f153, $f148 -> $f154, $f149 -> $f155, $f150 -> $f156, $f151 -> $f157), [AppliedId(id16: ($f29 -> $f155, $f30 -> $f158)), AppliedId(id16: ($f29 -> $f156, $f30 -> $f159)), AppliedId(id21: ($f43 -> $f158, $f44 -> $f159))])
[entry::chc] get {$f153: Int, $f158: Int, $f156: Node, $f157: Int, $f152: Node, $f159: Int, $f155: Node, $f154: Int}
[slotted_egraphs::egraph::add] classes insert id53
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id52: ($f146 -> $0, $f147 -> $1, $f148 -> $2, $f149 -> $3, $f150 -> $4, $f151 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id21: ($f43 -> $6, $f44 -> $7))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6, $7}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] childId : id52, mapToS : $f146
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] childId : id52, mapToS : $f147
[entry::chc] childId : id52, mapToS : $f148
[entry::chc] childId : id52, mapToS : $f149
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id52, mapToS : $f150
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id52, mapToS : $f151
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id21, mapToS : $f43
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id21, mapToS : $f44
[entry::chc] aggregateVarType for New(id15: ($f27 -> $0, $f28 -> $1), id52: ($f146 -> $0, $f147 -> $1, $f148 -> $2, $f149 -> $3, $f150 -> $4, $f151 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id21: ($f43 -> $6, $f44 -> $7))])
[entry::chc] get {$0: Node, $2: Int, $6: Int, $7: Int, $3: Node, $5: Int, $4: Node, $1: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id53 <-> (new (pred (node $i18) (int $i19)) (and (eq (node $i18) (binode (int $i20) (node $i21) (node $i22))) (eq (int $i19) (+ (int $i25) 1))) (init minLeaf (pred (node $i21) (int $i23))) (init minLeaf (pred (node $i22) (int $i24))) (compose (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))) (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24))))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id49: ($f141 -> $i18, $f142 -> $i19)), AppliedId(id53: ($f152 -> $i18, $f153 -> $i19, $f154 -> $i20, $f155 -> $i21, $f156 -> $i22, $f157 -> $i25, $f158 -> $i23, $f159 -> $i24))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id49: ($f141 -> $0, $f142 -> $1)), AppliedId(id53: ($f152 -> $0, $f153 -> $1, $f154 -> $2, $f155 -> $3, $f156 -> $4, $f157 -> $5, $f158 -> $6, $f159 -> $7))]), ($0 -> $i18, $1 -> $i19, $2 -> $i20, $3 -> $i21, $4 -> $i22, $5 -> $i25, $6 -> $i23, $7 -> $i24))
[entry::chc] calling make on Compose([AppliedId(id49: ($f141 -> $f160, $f142 -> $f161)), AppliedId(id53: ($f152 -> $f160, $f153 -> $f161, $f154 -> $f162, $f155 -> $f163, $f156 -> $f164, $f157 -> $f165, $f158 -> $f166, $f159 -> $f167))])
[entry::chc] slots: {$f160, $f161, $f162, $f163, $f164, $f165, $f166, $f167}
[entry::chc] childId : id49, mapToS : $f141
[entry::chc] childId : id53, mapToS : $f152
[entry::chc] childId : id49, mapToS : $f142
[entry::chc] childId : id53, mapToS : $f153
[entry::chc] childId : id53, mapToS : $f154
[entry::chc] childId : id53, mapToS : $f155
[entry::chc] childId : id53, mapToS : $f156
[entry::chc] childId : id53, mapToS : $f157
[entry::chc] childId : id53, mapToS : $f158
[entry::chc] childId : id53, mapToS : $f159
[entry::chc] aggregateVarType for Compose([AppliedId(id49: ($f141 -> $f160, $f142 -> $f161)), AppliedId(id53: ($f152 -> $f160, $f153 -> $f161, $f154 -> $f162, $f155 -> $f163, $f156 -> $f164, $f157 -> $f165, $f158 -> $f166, $f159 -> $f167))])
[entry::chc] get {$f166: Int, $f160: Node, $f162: Int, $f165: Int, $f167: Int, $f164: Node, $f161: Int, $f163: Node}
[slotted_egraphs::egraph::add] classes insert id54
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id49: ($f141 -> $0, $f142 -> $1)), AppliedId(id53: ($f152 -> $0, $f153 -> $1, $f154 -> $2, $f155 -> $3, $f156 -> $4, $f157 -> $5, $f158 -> $6, $f159 -> $7))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6, $7}
[entry::chc] childId : id49, mapToS : $f141
[entry::chc] childId : id53, mapToS : $f152
[entry::chc] childId : id49, mapToS : $f142
[entry::chc] childId : id53, mapToS : $f153
[entry::chc] childId : id53, mapToS : $f154
[entry::chc] childId : id53, mapToS : $f155
[entry::chc] childId : id53, mapToS : $f156
[entry::chc] childId : id53, mapToS : $f157
[entry::chc] childId : id53, mapToS : $f158
[entry::chc] childId : id53, mapToS : $f159
[entry::chc] aggregateVarType for Compose([AppliedId(id49: ($f141 -> $0, $f142 -> $1)), AppliedId(id53: ($f152 -> $0, $f153 -> $1, $f154 -> $2, $f155 -> $3, $f156 -> $4, $f157 -> $5, $f158 -> $6, $f159 -> $7))])
[entry::chc] get {$1: Int, $6: Int, $7: Int, $5: Int, $2: Int, $3: Node, $4: Node, $0: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id54 <-> (compose (new (pred (node $i18) (int $i19)) (and (eq (int $i19) 0) (eq (node $i18) leaf))) (new (pred (node $i18) (int $i19)) (and (eq (node $i18) (binode (int $i20) (node $i21) (node $i22))) (eq (int $i19) (+ (int $i25) 1))) (init minLeaf (pred (node $i21) (int $i23))) (init minLeaf (pred (node $i22) (int $i24))) (compose (new (pred (int $i23) (int $i24) (int $i25)) (and (lt (int $i23) (int $i24)) (eq (int $i25) (int $i23)))) (new (pred (int $i23) (int $i24) (int $i25)) (and (geq (int $i23) (int $i24)) (eq (int $i25) (int $i24)))))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id54: ($f160 -> $i18, $f161 -> $i19), id16: ($f29 -> $i18, $f30 -> $i19)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f160: Node, $2: Int, $1: Int, $3: Node, $4: Node, $f166: Int, $f162: Int, $f165: Int, $0: Node, $f167: Int, $5: Int, $f164: Node, $6: Int, $f161: Int, $f163: Node, $7: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Int, $f29: Node, $1: Int, $0: Node} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f160: Node, $2: Int, $1: Int, $3: Node, $4: Node, $f166: Int, $f162: Int, $f165: Int, $0: Node, $f167: Int, $5: Int, $f164: Node, $6: Int, $f161: Int, $f163: Node, $f30: Int, $f29: Node, $7: Int} }
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id52: ($f146 -> $0, $f147 -> $1, $f148 -> $2, $f149 -> $3, $f150 -> $4, $f151 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id21: ($f43 -> $6, $f44 -> $7))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6, $7}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] childId : id52, mapToS : $f146
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] childId : id52, mapToS : $f147
[entry::chc] childId : id52, mapToS : $f148
[entry::chc] childId : id52, mapToS : $f149
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id52, mapToS : $f150
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id52, mapToS : $f151
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id21, mapToS : $f43
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id21, mapToS : $f44
[entry::chc] aggregateVarType for New(id15: ($f27 -> $0, $f28 -> $1), id52: ($f146 -> $0, $f147 -> $1, $f148 -> $2, $f149 -> $3, $f150 -> $4, $f151 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id21: ($f43 -> $6, $f44 -> $7))])
[entry::chc] get {$7: Int, $2: Int, $1: Int, $6: Int, $3: Node, $5: Int, $0: Node, $4: Node}
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] slots: {$0, $1, $2, $3, $4}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] get {$1: Int, $3: Node, $2: Int, $0: Int, $4: Node}
[slotted_egraphs::egraph::rebuild] from update_analysis
[entry::chc] calling make on Compose([AppliedId(id49: ($f141 -> $0, $f142 -> $1)), AppliedId(id53: ($f152 -> $0, $f153 -> $1, $f154 -> $2, $f155 -> $3, $f156 -> $4, $f157 -> $5, $f158 -> $6, $f159 -> $7))])
[entry::chc] slots: {$0, $1, $2, $3, $4, $5, $6, $7}
[entry::chc] childId : id49, mapToS : $f141
[entry::chc] childId : id53, mapToS : $f152
[entry::chc] childId : id49, mapToS : $f142
[entry::chc] childId : id53, mapToS : $f153
[entry::chc] childId : id53, mapToS : $f154
[entry::chc] childId : id53, mapToS : $f155
[entry::chc] childId : id53, mapToS : $f156
[entry::chc] childId : id53, mapToS : $f157
[entry::chc] childId : id53, mapToS : $f158
[entry::chc] childId : id53, mapToS : $f159
[entry::chc] aggregateVarType for Compose([AppliedId(id49: ($f141 -> $0, $f142 -> $1)), AppliedId(id53: ($f152 -> $0, $f153 -> $1, $f154 -> $2, $f155 -> $3, $f156 -> $4, $f157 -> $5, $f158 -> $6, $f159 -> $7))])
[entry::chc] get {$3: Node, $6: Int, $0: Node, $4: Node, $7: Int, $5: Int, $1: Int, $2: Int}
[entry::chc::tst] egraph after

 == Egraph ==
{}
CHCData { predNames: {}, varTypes: {} }
id0():>> PredName("root")
 - PredName("root")

{}
CHCData { predNames: {}, varTypes: {$f0: Int, $0: Int} }
id1($f0):>> Int($f0)
 - Int($f0)

{}
CHCData { predNames: {}, varTypes: {$0: Node, $f1: Node} }
id2($f1):>> Node($f1)
 - Node($f1)

{}
CHCData { predNames: {}, varTypes: {$f4: Node, $f6: Int, $2: Node, $3: Int, $f2: Int, $0: Int, $1: Node, $f3: Node, $f5: Int, $4: Int} }
id3($f2, $f3, $f4, $f5, $f6):>> PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
 - PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])

{"root"}
CHCData { predNames: {"root"}, varTypes: {$4: Int, $f11: Int, $f10: Int, $f7: Int, $0: Int, $f36: Int, $f8: Node, $1: Node, $f37: Node, $f9: Node, $3: Int, $f40: Int, $2: Node, $f38: Node, $f39: Int} }
id4($f7, $f8, $f9, $f10, $f11):>> Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])

{}
CHCData { predNames: {}, varTypes: {} }
id5():>> PredSyntax([])
 - PredSyntax([])

{}
CHCData { predNames: {}, varTypes: {} }
id6():>> Number(0)
 - Number(0)

{}
CHCData { predNames: {}, varTypes: {$0: Int, $f12: Int} }
id7($f12):>> Geq(id1: ($f0 -> $f12), id6: ())
 - Geq(id1: ($f0 -> $f12), id6: ())

{}
CHCData { predNames: {}, varTypes: {$0: Int, $1: Int, $f14: Int, $f13: Int} }
id8($f13, $f14):>> Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
 - Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))

{}
CHCData { predNames: {}, varTypes: {$f15: Int, $f16: Int, $0: Int, $1: Int, $f17: Int, $2: Int} }
id9($f15, $f16, $f17):>> Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
 - Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))

{}
CHCData { predNames: {}, varTypes: {$f18: Int, $1: Int, $0: Int, $f19: Int, $f20: Int, $2: Int} }
id10($f18, $f19, $f20):>> And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
 - And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])

{}
CHCData { predNames: {}, varTypes: {} }
id11():>> PredName("leafDrop")
 - PredName("leafDrop")

{}
CHCData { predNames: {}, varTypes: {$0: Int, $2: Node, $1: Node, $f21: Int, $f22: Node, $f23: Node} }
id12($f21, $f22, $f23):>> PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
 - PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])

{"leafDrop"}
CHCData { predNames: {"leafDrop"}, varTypes: {$f118: Node, $f123: Int, $6: Int, $4: Node, $7: Node, $0: Int, $f119: Node, $f120: Int, $f116: Node, $2: Node, $5: Node, $8: Node, $3: Int, $f26: Node, $f115: Node, $f24: Int, $f117: Int, $f122: Node, $9: Int, $f114: Int, $1: Node, $f25: Node, $f121: Node} }
id13($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
 - Compose([AppliedId(id34: ($f74 -> $f24, $f75 -> $f25, $f76 -> $f26)), AppliedId(id39: ($f91 -> $f24, $f92 -> $f25, $f93 -> $f26, $f94 -> $f131, $f95 -> $f132, $f96 -> $f133)), AppliedId(id45: ($f107 -> $f24, $f108 -> $f25, $f109 -> $f26, $f110 -> $f134, $f111 -> $f135, $f112 -> $f136, $f113 -> $f137))])
 - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))

{}
CHCData { predNames: {}, varTypes: {} }
id14():>> PredName("minLeaf")
 - PredName("minLeaf")

{}
CHCData { predNames: {}, varTypes: {$1: Int, $f27: Node, $f28: Int, $0: Node} }
id15($f27, $f28):>> PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
 - PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])

{"minLeaf"}
CHCData { predNames: {"minLeaf"}, varTypes: {$f160: Node, $2: Int, $1: Int, $3: Node, $4: Node, $f166: Int, $f162: Int, $f165: Int, $0: Node, $f167: Int, $5: Int, $f164: Node, $6: Int, $f161: Int, $f163: Node, $f30: Int, $f29: Node, $7: Int} }
id16($f29, $f30):>> Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
 - Compose([AppliedId(id49: ($f141 -> $f29, $f142 -> $f30)), AppliedId(id53: ($f152 -> $f29, $f153 -> $f30, $f154 -> $f174, $f155 -> $f175, $f156 -> $f176, $f157 -> $f177, $f158 -> $f178, $f159 -> $f179))])
 - Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))

{"root"}
CHCData { predNames: {}, varTypes: {$1: Int, $2: Int, $f33: Node, $f34: Int, $f31: Int, $4: Node, $f32: Node, $f35: Int, $0: Int, $3: Node} }
id17($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])

{}
CHCData { predNames: {}, varTypes: {} }
id19():>> PredName("min")
 - PredName("min")

{}
CHCData { predNames: {}, varTypes: {$0: Int, $1: Int, $f42: Int, $f41: Int} }
id20($f41, $f42):>> PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42)])
 - PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42)])

{"min"}
CHCData { predNames: {"min"}, varTypes: {$f43: Int, $1: Int, $f66: Int, $f67: Int, $f44: Int, $0: Int, $f68: Int, $2: Int} }
id21($f43, $f44):>> Init(id19: (), id20: ($f41 -> $f43, $f42 -> $f44))
 - Init(id19: (), id20: ($f41 -> $f43, $f42 -> $f44))
 - Compose([AppliedId(id26: ($f55 -> $f43, $f56 -> $f44, $f57 -> $f70)), AppliedId(id29: ($f63 -> $f43, $f64 -> $f44, $f65 -> $f70))])

{}
CHCData { predNames: {}, varTypes: {$f46: Int, $0: Int, $f45: Int, $2: Int, $1: Int, $f47: Int} }
id22($f45, $f46, $f47):>> PredSyntax([id1: ($f0 -> $f45), id1: ($f0 -> $f46), id1: ($f0 -> $f47)])
 - PredSyntax([id1: ($f0 -> $f45), id1: ($f0 -> $f46), id1: ($f0 -> $f47)])

{}
CHCData { predNames: {}, varTypes: {$f49: Int, $1: Int, $0: Int, $f48: Int} }
id23($f48, $f49):>> Less(id1: ($f0 -> $f48), id1: ($f0 -> $f49))
 - Less(id1: ($f0 -> $f48), id1: ($f0 -> $f49))

{}
CHCData { predNames: {}, varTypes: {$1: Int, $0: Int, $f51: Int, $f50: Int} }
id24($f50, $f51):>> Eq(id1: ($f0 -> $f51), id1: ($f0 -> $f50))
 - Eq(id1: ($f0 -> $f51), id1: ($f0 -> $f50))

{}
CHCData { predNames: {}, varTypes: {$f54: Int, $2: Int, $1: Int, $0: Int, $f52: Int, $f53: Int} }
id25($f52, $f53, $f54):>> And([id23: ($f48 -> $f52, $f49 -> $f53), id24: ($f50 -> $f52, $f51 -> $f54)])
 - And([id23: ($f48 -> $f52, $f49 -> $f53), id24: ($f50 -> $f52, $f51 -> $f54)])

{"min"}
CHCData { predNames: {}, varTypes: {$1: Int, $0: Int, $f55: Int, $f56: Int, $f57: Int, $2: Int} }
id26($f55, $f56, $f57):>> New(id22: ($f45 -> $f55, $f46 -> $f56, $f47 -> $f57), id25: ($f52 -> $f55, $f53 -> $f56, $f54 -> $f57), [])
 - New(id22: ($f45 -> $f55, $f46 -> $f56, $f47 -> $f57), id25: ($f52 -> $f55, $f53 -> $f56, $f54 -> $f57), [])

{}
CHCData { predNames: {}, varTypes: {$1: Int, $0: Int, $f59: Int, $f58: Int} }
id27($f58, $f59):>> Geq(id1: ($f0 -> $f58), id1: ($f0 -> $f59))
 - Geq(id1: ($f0 -> $f58), id1: ($f0 -> $f59))

{}
CHCData { predNames: {}, varTypes: {$f62: Int, $2: Int, $f61: Int, $0: Int, $1: Int, $f60: Int} }
id28($f60, $f61, $f62):>> And([id27: ($f58 -> $f60, $f59 -> $f61), id24: ($f50 -> $f61, $f51 -> $f62)])
 - And([id27: ($f58 -> $f60, $f59 -> $f61), id24: ($f50 -> $f61, $f51 -> $f62)])

{"min"}
CHCData { predNames: {}, varTypes: {$0: Int, $f63: Int, $f64: Int, $1: Int, $2: Int, $f65: Int} }
id29($f63, $f64, $f65):>> New(id22: ($f45 -> $f63, $f46 -> $f64, $f47 -> $f65), id28: ($f60 -> $f63, $f61 -> $f64, $f62 -> $f65), [])
 - New(id22: ($f45 -> $f63, $f46 -> $f64, $f47 -> $f65), id28: ($f60 -> $f63, $f61 -> $f64, $f62 -> $f65), [])

{}
CHCData { predNames: {}, varTypes: {} }
id31():>> Leaf
 - Leaf

{}
CHCData { predNames: {}, varTypes: {$f71: Node, $0: Node} }
id32($f71):>> Eq(id2: ($f1 -> $f71), id31: ())
 - Eq(id2: ($f1 -> $f71), id31: ())

{}
CHCData { predNames: {}, varTypes: {$f72: Node, $f73: Node, $0: Node, $1: Node} }
id33($f72, $f73):>> And([id32: ($f71 -> $f72), id32: ($f71 -> $f73)])
 - And([id32: ($f71 -> $f72), id32: ($f71 -> $f73)])

{"leafDrop"}
CHCData { predNames: {}, varTypes: {$0: Int, $f74: Int, $1: Node, $f76: Node, $2: Node, $f75: Node} }
id34($f74, $f75, $f76):>> New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id33: ($f72 -> $f75, $f73 -> $f76), [])
 - New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id33: ($f72 -> $f75, $f73 -> $f76), [])

{}
CHCData { predNames: {}, varTypes: {$0: Int, $f77: Int} }
id35($f77):>> Leq(id1: ($f0 -> $f77), id6: ())
 - Leq(id1: ($f0 -> $f77), id6: ())

{}
CHCData { predNames: {}, varTypes: {$f80: Node, $f78: Int, $f79: Node, $2: Node, $0: Int, $1: Node} }
id36($f78, $f79, $f80):>> BiNode(id1: ($f0 -> $f78), id2: ($f1 -> $f79), id2: ($f1 -> $f80))
 - BiNode(id1: ($f0 -> $f78), id2: ($f1 -> $f79), id2: ($f1 -> $f80))

{}
CHCData { predNames: {}, varTypes: {$2: Node, $f81: Node, $f82: Int, $3: Node, $f84: Node, $1: Int, $0: Node, $f83: Node} }
id37($f81, $f82, $f83, $f84):>> Eq(id2: ($f1 -> $f81), id36: ($f78 -> $f82, $f79 -> $f83, $f80 -> $f84))
 - Eq(id2: ($f1 -> $f81), id36: ($f78 -> $f82, $f79 -> $f83, $f80 -> $f84))

{}
CHCData { predNames: {}, varTypes: {$4: Node, $5: Node, $3: Node, $f85: Int, $f87: Node, $f88: Int, $f89: Node, $f90: Node, $f86: Node, $1: Node, $2: Int, $0: Int} }
id38($f85, $f86, $f87, $f88, $f89, $f90):>> And([id35: ($f77 -> $f85), id37: ($f81 -> $f86, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90), id37: ($f81 -> $f87, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90)])
 - And([id35: ($f77 -> $f85), id37: ($f81 -> $f86, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90), id37: ($f81 -> $f87, $f82 -> $f88, $f83 -> $f89, $f84 -> $f90)])

{"leafDrop"}
CHCData { predNames: {}, varTypes: {$f95: Node, $5: Node, $f92: Node, $f91: Int, $0: Int, $1: Node, $f96: Node, $4: Node, $f94: Int, $f93: Node, $3: Int, $2: Node} }
id39($f91, $f92, $f93, $f94, $f95, $f96):>> New(id12: ($f21 -> $f91, $f22 -> $f92, $f23 -> $f93), id38: ($f85 -> $f91, $f86 -> $f92, $f87 -> $f93, $f88 -> $f94, $f89 -> $f95, $f90 -> $f96), [])
 - New(id12: ($f21 -> $f91, $f22 -> $f92, $f23 -> $f93), id38: ($f85 -> $f91, $f86 -> $f92, $f87 -> $f93, $f88 -> $f94, $f89 -> $f95, $f90 -> $f96), [])

{}
CHCData { predNames: {}, varTypes: {} }
id40():>> Number(1)
 - Number(1)

{}
CHCData { predNames: {}, varTypes: {$0: Int, $f97: Int} }
id41($f97):>> Geq(id1: ($f0 -> $f97), id40: ())
 - Geq(id1: ($f0 -> $f97), id40: ())

{}
CHCData { predNames: {}, varTypes: {$f98: Int, $0: Int} }
id42($f98):>> Minus(id1: ($f0 -> $f98), id40: ())
 - Minus(id1: ($f0 -> $f98), id40: ())

{}
CHCData { predNames: {}, varTypes: {$f99: Int, $f100: Int, $1: Int, $0: Int} }
id43($f99, $f100):>> Eq(id1: ($f0 -> $f100), id42: ($f98 -> $f99))
 - Eq(id1: ($f0 -> $f100), id42: ($f98 -> $f99))

{}
CHCData { predNames: {}, varTypes: {$5: Int, $f104: Node, $f103: Int, $f102: Node, $4: Int, $1: Int, $f106: Int, $3: Node, $0: Node, $f105: Node, $2: Node, $f101: Int} }
id44($f101, $f102, $f103, $f104, $f105, $f106):>> And([id37: ($f81 -> $f102, $f82 -> $f103, $f83 -> $f104, $f84 -> $f105), id41: ($f97 -> $f101), id43: ($f99 -> $f101, $f100 -> $f106)])
 - And([id37: ($f81 -> $f102, $f82 -> $f103, $f83 -> $f104, $f84 -> $f105), id41: ($f97 -> $f101), id43: ($f99 -> $f101, $f100 -> $f106)])

{"leafDrop"}
CHCData { predNames: {}, varTypes: {$f108: Node, $0: Int, $2: Node, $6: Int, $5: Node, $1: Node, $3: Int, $4: Node, $f112: Node, $f111: Node, $f113: Int, $f109: Node, $f110: Int, $f107: Int} }
id45($f107, $f108, $f109, $f110, $f111, $f112, $f113):>> New(id12: ($f21 -> $f107, $f22 -> $f108, $f23 -> $f109), id44: ($f101 -> $f107, $f102 -> $f108, $f103 -> $f110, $f104 -> $f111, $f105 -> $f112, $f106 -> $f113), [AppliedId(id13: ($f24 -> $f107, $f25 -> $f108, $f26 -> $f109))])
 - New(id12: ($f21 -> $f107, $f22 -> $f108, $f23 -> $f109), id44: ($f101 -> $f107, $f102 -> $f108, $f103 -> $f110, $f104 -> $f111, $f105 -> $f112, $f106 -> $f113), [AppliedId(id13: ($f24 -> $f107, $f25 -> $f108, $f26 -> $f109))])

{}
CHCData { predNames: {}, varTypes: {$0: Int, $f138: Int} }
id47($f138):>> Eq(id1: ($f0 -> $f138), id6: ())
 - Eq(id1: ($f0 -> $f138), id6: ())

{}
CHCData { predNames: {}, varTypes: {$f139: Node, $f140: Int, $1: Node, $0: Int} }
id48($f139, $f140):>> And([id47: ($f138 -> $f140), id32: ($f71 -> $f139)])
 - And([id47: ($f138 -> $f140), id32: ($f71 -> $f139)])

{"minLeaf"}
CHCData { predNames: {}, varTypes: {$f141: Node, $f142: Int, $1: Int, $0: Node} }
id49($f141, $f142):>> New(id15: ($f27 -> $f141, $f28 -> $f142), id48: ($f139 -> $f141, $f140 -> $f142), [])
 - New(id15: ($f27 -> $f141, $f28 -> $f142), id48: ($f139 -> $f141, $f140 -> $f142), [])

{}
CHCData { predNames: {}, varTypes: {$0: Int, $f143: Int} }
id50($f143):>> Add(id1: ($f0 -> $f143), id40: ())
 - Add(id1: ($f0 -> $f143), id40: ())

{}
CHCData { predNames: {}, varTypes: {$f145: Int, $0: Int, $f144: Int, $1: Int} }
id51($f144, $f145):>> Eq(id1: ($f0 -> $f144), id50: ($f143 -> $f145))
 - Eq(id1: ($f0 -> $f144), id50: ($f143 -> $f145))

{}
CHCData { predNames: {}, varTypes: {$f149: Node, $f147: Int, $0: Node, $f146: Node, $3: Node, $4: Int, $f151: Int, $5: Int, $f148: Int, $2: Node, $1: Int, $f150: Node} }
id52($f146, $f147, $f148, $f149, $f150, $f151):>> And([id37: ($f81 -> $f146, $f82 -> $f148, $f83 -> $f149, $f84 -> $f150), id51: ($f144 -> $f147, $f145 -> $f151)])
 - And([id37: ($f81 -> $f146, $f82 -> $f148, $f83 -> $f149, $f84 -> $f150), id51: ($f144 -> $f147, $f145 -> $f151)])

{"minLeaf"}
CHCData { predNames: {}, varTypes: {$f153: Int, $1: Int, $6: Int, $f158: Int, $f157: Int, $f152: Node, $5: Int, $f155: Node, $f154: Int, $2: Int, $3: Node, $f156: Node, $f159: Int, $4: Node, $0: Node, $7: Int} }
id53($f152, $f153, $f154, $f155, $f156, $f157, $f158, $f159):>> New(id15: ($f27 -> $f152, $f28 -> $f153), id52: ($f146 -> $f152, $f147 -> $f153, $f148 -> $f154, $f149 -> $f155, $f150 -> $f156, $f151 -> $f157), [AppliedId(id16: ($f29 -> $f155, $f30 -> $f158)), AppliedId(id16: ($f29 -> $f156, $f30 -> $f159)), AppliedId(id21: ($f43 -> $f158, $f44 -> $f159))])
 - New(id15: ($f27 -> $f152, $f28 -> $f153), id52: ($f146 -> $f152, $f147 -> $f153, $f148 -> $f154, $f149 -> $f155, $f150 -> $f156, $f151 -> $f157), [AppliedId(id16: ($f29 -> $f155, $f30 -> $f158)), AppliedId(id16: ($f29 -> $f156, $f30 -> $f159)), AppliedId(id21: ($f43 -> $f158, $f44 -> $f159))])
test chc::tst::tst2 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 73 filtered out; finished in 0.10s


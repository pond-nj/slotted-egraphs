   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.25s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
[entry::chc] p_compose = (compose <(new (pred P <(var $0) (var $1)>) (true) <(compose <(new (pred Q <(var $0) (var $1)>) (true) <(compose <(new (pred R1 <(var $0)>) (true) <>)>) (compose <(new (pred R2 <(var $1)>) (true) <>)>)>)>) (compose <(new (pred S <(var $0)>) (true) <>)>)>) (new (pred P <(var $0) (var $1)>) (true) <>)>)
[slotted_egraphs::parse] tokenizing s = (compose <(new (pred P <(var $0) (var $1)>) (true) <(compose <(new (pred Q <(var $0) (var $1)>) (true) <(compose <(new (pred R1 <(var $0)>) (true) <>)>) (compose <(new (pred R2 <(var $1)>) (true) <>)>)>)>) (compose <(new (pred S <(var $0)>) (true) <>)>)>) (new (pred P <(var $0) (var $1)>) (true) <>)>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("P")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("P")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($0)]
[entry::chc] from_syntax::ret = Some(Var($0))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($1)]
[entry::chc] from_syntax::ret = Some(Var($1))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[], id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("Q"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("Q")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("Q")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($0)]
[entry::chc] from_syntax::ret = Some(Var($0))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($1)]
[entry::chc] from_syntax::ret = Some(Var($1))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[], id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R1"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("R1")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("R1")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($0)]
[entry::chc] from_syntax::ret = Some(Var($0))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R2"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("R2")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("R2")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($1)]
[entry::chc] from_syntax::ret = Some(Var($1))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("S"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("S")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("S")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($0)]
[entry::chc] from_syntax::ret = Some(Var($0))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("P"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("P")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("P")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($0)]
[entry::chc] from_syntax::ret = Some(Var($0))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("var"), Slot($1)]
[entry::chc] from_syntax::ret = Some(Var($1))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[], id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), AppliedId(id0: map-[])]))
[slotted_egraphs::parse] tokenizing s = (compose <(new ?syntax1 (true) <(compose <*1>) *2>) *3>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(1)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(1)]
[entry::chc] from_syntax::ret = Some(Compose([Star(1)]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(2)]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(3), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(3)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(3)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(3)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(3)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(1), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(1)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(1)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(1)]))
[slotted_egraphs::parse] tokenizing s = (compose <*1>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(1), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(1)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(1)]
[entry::chc] from_syntax::ret = Some(Compose([Star(1)]))
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f22, $f19 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f22, $f14 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_3_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "star_2_0": id19: map-[$f17 -> $f24],
            "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
            "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
            "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "cond": id3: map-[],
            "star_1_1": id13: map-[$f10 -> $f26],
            "star_1_0": id9: map-[$f7 -> $f27],
            "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id19: map-[$f17 -> $f28],
            "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
            "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id8: map-[$f6 -> $f7],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id8: map-[$f6 -> $f7],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id12: map-[$f9 -> $f10],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id12: map-[$f9 -> $f10],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id14: map-[$f11 -> $f13, $f12 -> $f14],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id14: map-[$f11 -> $f13, $f12 -> $f14],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id18: map-[$f16 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id18: map-[$f16 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "star_1_0": id8: map-[$f6 -> $f30],
        },
        {
            "star_1_0": id12: map-[$f9 -> $f31],
        },
        {
            "star_1_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
        },
        {
            "star_1_0": id18: map-[$f16 -> $f34],
        },
        {
            "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
            "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        4,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax2",
                ),
                ENode(
                    True,
                    [],
                ),
                PVar(
                    "star_4_0",
                ),
                PVar(
                    "star_4_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "syntax2": id5: map-[$f3 -> $f38, $f4 -> $f37],
        "star_4_0": id9: map-[$f7 -> $f38],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_4_1": id13: map-[$f10 -> $f37],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "syntax2": id5: map-[$f3 -> $f38, $f4 -> $f37],
        "star_4_0": id9: map-[$f7 -> $f38],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_4_1": id13: map-[$f10 -> $f37],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "syntax2": id5: map-[$f3 -> $f38, $f4 -> $f37],
        "star_4_0": id9: map-[$f7 -> $f38],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_4_1": id13: map-[$f10 -> $f37],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "syntax2": id5: map-[$f3 -> $f38, $f4 -> $f37],
        "star_4_0": id9: map-[$f7 -> $f38],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_4_1": id13: map-[$f10 -> $f37],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "syntax2": id5: map-[$f3 -> $f38, $f4 -> $f37],
        "star_4_0": id9: map-[$f7 -> $f38],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_4_1": id13: map-[$f10 -> $f37],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "syntax2": id5: map-[$f3 -> $f38, $f4 -> $f37],
        "star_4_0": id9: map-[$f7 -> $f38],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_4_1": id13: map-[$f10 -> $f37],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_1",
    )
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::rewrite::pattern] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true (compose ?star_1_0) ?star_2_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_1_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_3_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_3_0",
            ),
            PVar(
                "star_4_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f24],
        "star_1_0": id14: map-[$f11 -> $f24, $f12 -> $f25],
        "star_3_0": id21: map-[$f20 -> $f24, $f21 -> $f25],
        "star_4_0": id23: map-[$f39 -> $f24, $f40 -> $f25, $f41 -> $f37, $f42 -> $f38],
        "syntax1": id2: map-[$f1 -> $f24, $f2 -> $f25],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::parse] tokenizing s = (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(2)]))
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id9: map-[$f7 -> $f27],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id13: map-[$f10 -> $f26],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f26],
        "star_2_0": id13: map-[$f10 -> $f26],
        "star_1_0": id9: map-[$f7 -> $f27],
        "syntax": id5: map-[$f3 -> $f27, $f4 -> $f26],
        "star_2_1": id9: map-[$f7 -> $f27],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id19: map-[$f17 -> $f28],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f28],
        "star_2_0": id19: map-[$f17 -> $f28],
        "star_1_0": id15: map-[$f13 -> $f28, $f14 -> $f29],
        "syntax": id2: map-[$f1 -> $f28, $f2 -> $f29],
        "star_2_1": id15: map-[$f13 -> $f28, $f14 -> $f29],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::parse] tokenizing s = (compose <*2>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(Compose([Star(2)]))
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f30],
        "star_1_0": id8: map-[$f6 -> $f30],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f30],
        "star_1_0": id8: map-[$f6 -> $f30],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f30],
        "star_1_0": id8: map-[$f6 -> $f30],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f30],
        "star_1_0": id8: map-[$f6 -> $f30],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f31],
        "star_1_0": id12: map-[$f9 -> $f31],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f31],
        "star_1_0": id12: map-[$f9 -> $f31],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f31],
        "star_1_0": id12: map-[$f9 -> $f31],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f31],
        "star_1_0": id12: map-[$f9 -> $f31],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
        "star_1_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
        "star_1_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
        "star_1_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
        "star_1_0": id14: map-[$f11 -> $f32, $f12 -> $f33],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f34],
        "star_1_0": id18: map-[$f16 -> $f34],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f34],
        "star_1_0": id18: map-[$f16 -> $f34],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f34],
        "star_1_0": id18: map-[$f16 -> $f34],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f34],
        "star_1_0": id18: map-[$f16 -> $f34],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_2_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_2_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_2_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_2_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_2_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_2_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_1": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_1": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_1": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_1": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_1": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_0": id21: map-[$f20 -> $f35, $f21 -> $f36],
        "star_2_1": id20: map-[$f18 -> $f35, $f19 -> $f36],
        "star_1_0": id20: map-[$f18 -> $f35, $f19 -> $f36],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id27,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f49, $3 -> $f50],
                src_id: id24,
            },
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f22, $f21 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(2)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f22, $f21 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(2)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f22, $f19 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f22, $f14 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_3_0",
        ),
        PVar(
            "star_3_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "star_2_0": id19: map-[$f17 -> $f61],
            "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
            "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
            "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
        },
        {
            "star_2_0": id15: map-[$f13 -> $f63, $f14 -> $f64],
            "star_1_0": id18: map-[$f16 -> $f63],
            "star_3_0": id21: map-[$f20 -> $f63, $f21 -> $f64],
            "syntax1": id2: map-[$f1 -> $f63, $f2 -> $f64],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f11],
                "star_1_0": id13: map-[$f10 -> $f12],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f11],
                "star_1_0": id13: map-[$f10 -> $f12],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f18],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f18],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "star_1_0": id19: map-[$f17 -> $f18],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "star_1_0": id19: map-[$f17 -> $f18],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id27,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f49, $3 -> $f50],
                src_id: id24,
            },
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "cond": id3: map-[],
            "star_1_1": id13: map-[$f10 -> $f65],
            "star_1_0": id9: map-[$f7 -> $f66],
            "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id9: map-[$f7 -> $f67],
            "star_1_0": id13: map-[$f10 -> $f68],
            "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id19: map-[$f17 -> $f69],
            "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
            "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
            "star_1_0": id19: map-[$f17 -> $f71],
            "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id9: map-[$f7 -> $f77],
            "star_1_0": id19: map-[$f17 -> $f78],
            "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
            "star_1_2": id13: map-[$f10 -> $f80],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id8: map-[$f6 -> $f7],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id8: map-[$f6 -> $f7],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id12: map-[$f9 -> $f10],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id12: map-[$f9 -> $f10],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id14: map-[$f11 -> $f13, $f12 -> $f14],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id14: map-[$f11 -> $f13, $f12 -> $f14],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id18: map-[$f16 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id18: map-[$f16 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id27,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f49, $3 -> $f50],
                src_id: id24,
            },
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id20: map-[$f18 -> $f22, $f19 -> $f23],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id20: map-[$f18 -> $f22, $f19 -> $f23],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f88, $f42 -> $f89],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id20: map-[$f18 -> $f22, $f19 -> $f23],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f88, $f42 -> $f89],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id20: map-[$f18 -> $f22, $f19 -> $f23],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f88, $f42 -> $f89],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "star_1_0": id8: map-[$f6 -> $f81],
        },
        {
            "star_1_0": id12: map-[$f9 -> $f82],
        },
        {
            "star_1_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
        },
        {
            "star_1_0": id18: map-[$f16 -> $f85],
        },
        {
            "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
            "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
        },
        {
            "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
            "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
        },
        {
            "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
            "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        4,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax2",
                ),
                ENode(
                    True,
                    [],
                ),
                PVar(
                    "star_4_0",
                ),
                PVar(
                    "star_4_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_4_1": id9: map-[$f7 -> $f11],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_4_1": id9: map-[$f7 -> $f11],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        4,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax2",
                ),
                ENode(
                    True,
                    [],
                ),
                PVar(
                    "star_4_0",
                ),
                PVar(
                    "star_4_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f99, $f4 -> $f98],
        "star_4_0": id9: map-[$f7 -> $f99],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id13: map-[$f10 -> $f98],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f99, $f4 -> $f98],
        "star_4_0": id9: map-[$f7 -> $f99],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id13: map-[$f10 -> $f98],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f99, $f4 -> $f98],
        "star_4_0": id9: map-[$f7 -> $f99],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id13: map-[$f10 -> $f98],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f99, $f4 -> $f98],
        "star_4_0": id9: map-[$f7 -> $f99],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id13: map-[$f10 -> $f98],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f99, $f4 -> $f98],
        "star_4_0": id9: map-[$f7 -> $f99],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id13: map-[$f10 -> $f98],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f99, $f4 -> $f98],
        "star_4_0": id9: map-[$f7 -> $f99],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id13: map-[$f10 -> $f98],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f100, $f4 -> $f101],
        "star_4_0": id13: map-[$f10 -> $f101],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id9: map-[$f7 -> $f100],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f100, $f4 -> $f101],
        "star_4_0": id13: map-[$f10 -> $f101],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id9: map-[$f7 -> $f100],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f100, $f4 -> $f101],
        "star_4_0": id13: map-[$f10 -> $f101],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id9: map-[$f7 -> $f100],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f100, $f4 -> $f101],
        "star_4_0": id13: map-[$f10 -> $f101],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id9: map-[$f7 -> $f100],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f100, $f4 -> $f101],
        "star_4_0": id13: map-[$f10 -> $f101],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id9: map-[$f7 -> $f100],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "syntax2": id5: map-[$f3 -> $f100, $f4 -> $f101],
        "star_4_0": id13: map-[$f10 -> $f101],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_4_1": id9: map-[$f7 -> $f100],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_1",
    )
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::rewrite::pattern] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true (compose ?star_1_0) ?star_2_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_1_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_3_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_3_0",
            ),
            PVar(
                "star_4_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id23: map-[$f39 -> $f61, $f40 -> $f62, $f41 -> $f98, $f42 -> $f99],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true (compose ?star_1_0) ?star_2_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_1_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_3_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_3_0",
            ),
            PVar(
                "star_4_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f61],
        "star_1_0": id14: map-[$f11 -> $f61, $f12 -> $f62],
        "star_3_0": id21: map-[$f20 -> $f61, $f21 -> $f62],
        "star_4_0": id28: map-[$f102 -> $f61, $f103 -> $f62, $f104 -> $f100, $f105 -> $f101],
        "syntax1": id2: map-[$f1 -> $f61, $f2 -> $f62],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(2)]))
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id9: map-[$f7 -> $f66],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id13: map-[$f10 -> $f65],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f65],
        "star_2_0": id13: map-[$f10 -> $f65],
        "star_1_0": id9: map-[$f7 -> $f66],
        "syntax": id5: map-[$f3 -> $f66, $f4 -> $f65],
        "star_2_1": id9: map-[$f7 -> $f66],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id13: map-[$f10 -> $f68],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id9: map-[$f7 -> $f67],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f67],
        "star_2_0": id9: map-[$f7 -> $f67],
        "star_1_0": id13: map-[$f10 -> $f68],
        "syntax": id5: map-[$f3 -> $f67, $f4 -> $f68],
        "star_2_1": id13: map-[$f10 -> $f68],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id19: map-[$f17 -> $f69],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f69],
        "star_2_0": id19: map-[$f17 -> $f69],
        "star_1_0": id15: map-[$f13 -> $f69, $f14 -> $f70],
        "syntax": id2: map-[$f1 -> $f69, $f2 -> $f70],
        "star_2_1": id15: map-[$f13 -> $f69, $f14 -> $f70],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id19: map-[$f17 -> $f71],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_2_0": id15: map-[$f13 -> $f71, $f14 -> $f72],
        "star_1_0": id19: map-[$f17 -> $f71],
        "syntax": id2: map-[$f1 -> $f71, $f2 -> $f72],
        "star_2_1": id19: map-[$f17 -> $f71],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id13: map-[$f10 -> $f80],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f77],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f78],
        "star_2_1": id13: map-[$f10 -> $f80],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id19: map-[$f17 -> $f78],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id9: map-[$f7 -> $f77],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f80],
        "star_2_1": id9: map-[$f7 -> $f77],
        "star_1_0": id19: map-[$f17 -> $f78],
        "syntax": id2: map-[$f1 -> $f78, $f2 -> $f79],
        "star_2_2": id19: map-[$f17 -> $f78],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f77],
        "star_1_2": id13: map-[$f10 -> $f80],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::parse] tokenizing s = (compose <*2>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(Compose([Star(2)]))
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f81],
        "star_1_0": id8: map-[$f6 -> $f81],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f81],
        "star_1_0": id8: map-[$f6 -> $f81],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f81],
        "star_1_0": id8: map-[$f6 -> $f81],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f81],
        "star_1_0": id8: map-[$f6 -> $f81],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f82],
        "star_1_0": id12: map-[$f9 -> $f82],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f82],
        "star_1_0": id12: map-[$f9 -> $f82],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f82],
        "star_1_0": id12: map-[$f9 -> $f82],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f82],
        "star_1_0": id12: map-[$f9 -> $f82],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
        "star_1_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
        "star_1_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
        "star_1_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
        "star_1_0": id14: map-[$f11 -> $f83, $f12 -> $f84],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f85],
        "star_1_0": id18: map-[$f16 -> $f85],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f85],
        "star_1_0": id18: map-[$f16 -> $f85],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f85],
        "star_1_0": id18: map-[$f16 -> $f85],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f85],
        "star_1_0": id18: map-[$f16 -> $f85],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_2_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_2_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_2_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_2_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_2_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_2_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_1": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_1": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_1": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_1": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_1": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_0": id20: map-[$f18 -> $f90, $f19 -> $f91],
        "star_2_1": id21: map-[$f20 -> $f90, $f21 -> $f91],
        "star_1_0": id21: map-[$f20 -> $f90, $f21 -> $f91],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_2_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_2_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_2_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_2_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_2_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_2_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_1": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_1": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_1": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_1": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_1": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_0": id23: map-[$f39 -> $f92, $f40 -> $f93, $f41 -> $f94, $f42 -> $f95],
        "star_2_1": id21: map-[$f20 -> $f92, $f21 -> $f93],
        "star_1_0": id21: map-[$f20 -> $f92, $f21 -> $f93],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_2_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_2_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_2_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_2_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_2_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_2_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_1": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_1": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_1": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_1": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_1": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_0": id21: map-[$f20 -> $f96, $f21 -> $f97],
        "star_2_1": id20: map-[$f18 -> $f96, $f19 -> $f97],
        "star_1_0": id20: map-[$f18 -> $f96, $f19 -> $f97],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), Star(3)]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f136, $3 -> $f137],
                src_id: id34,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id27,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f49, $3 -> $f50],
                src_id: id24,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f22, $f19 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f22, $f14 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_3_0",
        ),
        PVar(
            "star_3_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f140, $f42 -> $f141]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id31,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id32,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id33,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id30,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id28,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f141]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f140]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f140]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id12: map-[$f9 -> $f140],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f141]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id8: map-[$f6 -> $f141],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_2_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star(
                            1,
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        2,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax1",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star(
                                1,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "star_1_0",
                        ),
                    ],
                ),
                PVar(
                    "star_2_0",
                ),
                PVar(
                    "star_2_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_3_0",
        ),
        PVar(
            "star_3_0",
        ),
        PVar(
            "star_3_0",
        ),
        PVar(
            "star_3_0",
        ),
        PVar(
            "star_3_0",
        ),
        PVar(
            "star_3_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        Star(
                            2,
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star(
                                    1,
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                    PVar(
                        "star_2_1",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f22, $f21 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(2)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f22, $f21 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(2)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_1_0": id14: map-[$f11 -> $f22, $f12 -> $f23],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id15: map-[$f13 -> $f22, $f14 -> $f23],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id19: map-[$f17 -> $f22],
                "star_1_0": id12: map-[$f9 -> $f140],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id9: map-[$f7 -> $f141],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id19: map-[$f17 -> $f22],
                "star_2_1": id13: map-[$f10 -> $f140],
                "star_1_0": id8: map-[$f6 -> $f141],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_2_0": id13: map-[$f10 -> $f140],
                "star_2_1": id9: map-[$f7 -> $f141],
                "star_1_0": id18: map-[$f16 -> $f22],
                "star_3_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "syntax1": id2: map-[$f1 -> $f22, $f2 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id31,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id32,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id33,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id30,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id28,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "star_2_0": id19: map-[$f17 -> $f146],
            "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
            "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
            "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
        },
        {
            "star_2_0": id15: map-[$f13 -> $f148, $f14 -> $f149],
            "star_1_0": id18: map-[$f16 -> $f148],
            "star_3_0": id21: map-[$f20 -> $f148, $f21 -> $f149],
            "syntax1": id2: map-[$f1 -> $f148, $f2 -> $f149],
        },
        {
            "star_2_0": id13: map-[$f10 -> $f150],
            "star_2_1": id19: map-[$f17 -> $f151],
            "star_1_0": id8: map-[$f6 -> $f152],
            "star_3_0": id21: map-[$f20 -> $f151, $f21 -> $f153],
            "syntax1": id2: map-[$f1 -> $f151, $f2 -> $f153],
        },
        {
            "star_2_0": id19: map-[$f17 -> $f154],
            "star_2_1": id9: map-[$f7 -> $f155],
            "star_1_0": id12: map-[$f9 -> $f156],
            "star_3_0": id21: map-[$f20 -> $f154, $f21 -> $f157],
            "syntax1": id2: map-[$f1 -> $f154, $f2 -> $f157],
        },
        {
            "star_2_0": id9: map-[$f7 -> $f158],
            "star_2_1": id19: map-[$f17 -> $f159],
            "star_1_0": id12: map-[$f9 -> $f160],
            "star_3_0": id21: map-[$f20 -> $f159, $f21 -> $f161],
            "syntax1": id2: map-[$f1 -> $f159, $f2 -> $f161],
        },
        {
            "star_2_0": id9: map-[$f7 -> $f162],
            "star_2_1": id13: map-[$f10 -> $f163],
            "star_1_0": id18: map-[$f16 -> $f164],
            "star_3_0": id21: map-[$f20 -> $f164, $f21 -> $f165],
            "syntax1": id2: map-[$f1 -> $f164, $f2 -> $f165],
        },
        {
            "star_2_0": id19: map-[$f17 -> $f166],
            "star_2_1": id13: map-[$f10 -> $f167],
            "star_1_0": id8: map-[$f6 -> $f168],
            "star_3_0": id21: map-[$f20 -> $f166, $f21 -> $f169],
            "syntax1": id2: map-[$f1 -> $f166, $f2 -> $f169],
        },
        {
            "star_2_0": id13: map-[$f10 -> $f170],
            "star_2_1": id9: map-[$f7 -> $f171],
            "star_1_0": id18: map-[$f16 -> $f172],
            "star_3_0": id21: map-[$f20 -> $f172, $f21 -> $f173],
            "syntax1": id2: map-[$f1 -> $f172, $f2 -> $f173],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    Star(
                        3,
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            Star(
                                2,
                            ),
                        ],
                    ),
                    [
                        PVar(
                            "syntax1",
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    Star(
                                        1,
                                    ),
                                ],
                            ),
                            [
                                PVar(
                                    "star_1_0",
                                ),
                            ],
                        ),
                        PVar(
                            "star_2_0",
                        ),
                        PVar(
                            "star_2_1",
                        ),
                    ],
                ),
                PVar(
                    "star_3_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f11],
                "star_1_0": id13: map-[$f10 -> $f12],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f12],
                "star_1_0": id9: map-[$f7 -> $f11],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f11],
                "star_1_0": id13: map-[$f10 -> $f12],
                "syntax": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f18],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f18],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "star_1_0": id19: map-[$f17 -> $f18],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f18],
                "star_1_0": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id15: map-[$f13 -> $f18, $f14 -> $f19],
                "star_1_0": id19: map-[$f17 -> $f18],
                "syntax": id2: map-[$f1 -> $f18, $f2 -> $f19],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(1)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f136, $3 -> $f137],
                src_id: id34,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id27,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f49, $3 -> $f50],
                src_id: id24,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id31,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id32,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id33,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id30,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id28,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "cond",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "cond": id3: map-[],
                "star_1_0": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id13: map-[$f10 -> $f41],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id19: map-[$f17 -> $f39],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id9: map-[$f7 -> $f42],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id19: map-[$f17 -> $f39],
                "star_1_0": id9: map-[$f7 -> $f42],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id13: map-[$f10 -> $f41],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "cond": id3: map-[],
                "star_1_1": id13: map-[$f10 -> $f41],
                "star_1_0": id19: map-[$f17 -> $f39],
                "syntax": id2: map-[$f1 -> $f39, $f2 -> $f40],
                "star_1_2": id9: map-[$f7 -> $f42],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "cond": id3: map-[],
            "star_1_1": id13: map-[$f10 -> $f174],
            "star_1_0": id9: map-[$f7 -> $f175],
            "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id9: map-[$f7 -> $f176],
            "star_1_0": id13: map-[$f10 -> $f177],
            "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id19: map-[$f17 -> $f178],
            "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
            "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
            "star_1_0": id19: map-[$f17 -> $f180],
            "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id13: map-[$f10 -> $f190],
            "star_1_0": id9: map-[$f7 -> $f191],
            "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
            "star_1_2": id19: map-[$f17 -> $f192],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id19: map-[$f17 -> $f194],
            "star_1_0": id13: map-[$f10 -> $f195],
            "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
            "star_1_2": id9: map-[$f7 -> $f197],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id9: map-[$f7 -> $f198],
            "star_1_0": id13: map-[$f10 -> $f199],
            "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
            "star_1_2": id19: map-[$f17 -> $f200],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id9: map-[$f7 -> $f202],
            "star_1_0": id19: map-[$f17 -> $f203],
            "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
            "star_1_2": id13: map-[$f10 -> $f205],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id19: map-[$f17 -> $f206],
            "star_1_0": id9: map-[$f7 -> $f207],
            "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
            "star_1_2": id13: map-[$f10 -> $f209],
        },
        {
            "cond": id3: map-[],
            "star_1_1": id13: map-[$f10 -> $f210],
            "star_1_0": id19: map-[$f17 -> $f211],
            "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
            "star_1_2": id9: map-[$f7 -> $f213],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax",
                ),
                PVar(
                    "cond",
                ),
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
                PVar(
                    "star_1_2",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id8: map-[$f6 -> $f7],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id8: map-[$f6 -> $f7],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id12: map-[$f9 -> $f10],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id12: map-[$f9 -> $f10],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id14: map-[$f11 -> $f13, $f12 -> $f14],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id14: map-[$f11 -> $f13, $f12 -> $f14],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id18: map-[$f16 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_0": id18: map-[$f16 -> $f17],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f136, $3 -> $f137],
                src_id: id34,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id27,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f49, $3 -> $f50],
                src_id: id24,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f221, $f42 -> $f222],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f221, $f42 -> $f222],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f221, $f42 -> $f222],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f221, $f42 -> $f222],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id20: map-[$f18 -> $f22, $f19 -> $f23],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f221, $f42 -> $f222],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id20: map-[$f18 -> $f22, $f19 -> $f23],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_1_1": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f225, $f42 -> $f226],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_1_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id20: map-[$f18 -> $f22, $f19 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id21: map-[$f20 -> $f22, $f21 -> $f23],
                "star_1_0": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f221, $f42 -> $f222],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id20: map-[$f18 -> $f22, $f19 -> $f23],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_1_1": id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f225, $f42 -> $f226],
                "star_1_0": id21: map-[$f20 -> $f22, $f21 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id31,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id32,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id33,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id30,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id28,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "star_1_0": id8: map-[$f6 -> $f214],
        },
        {
            "star_1_0": id12: map-[$f9 -> $f215],
        },
        {
            "star_1_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
        },
        {
            "star_1_0": id18: map-[$f16 -> $f218],
        },
        {
            "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
            "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
        },
        {
            "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
            "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        },
        {
            "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
            "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
        },
        {
            "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
            "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
        ENode(
            Compose(
                [
                    Star(
                        1,
                    ),
                ],
            ),
            [
                PVar(
                    "star_1_0",
                ),
                PVar(
                    "star_1_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        4,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax2",
                ),
                ENode(
                    True,
                    [],
                ),
                PVar(
                    "star_4_0",
                ),
                PVar(
                    "star_4_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 1
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "syntax2",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_0",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down1
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "star_4_1": id9: map-[$f7 -> $f11],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "star_4_1",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            PVar(
                "syntax2",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "star_4_1": id13: map-[$f10 -> $f12],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id9: map-[$f7 -> $f11],
            },
            partial_slotmap: [],
        },
        State {
            partial_subst: {
                "star_4_1": id9: map-[$f7 -> $f11],
                "syntax2": id5: map-[$f3 -> $f11, $f4 -> $f12],
                "star_4_0": id13: map-[$f10 -> $f12],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    Star(
                        4,
                    ),
                ],
            ),
            [
                PVar(
                    "syntax2",
                ),
                ENode(
                    True,
                    [],
                ),
                PVar(
                    "star_4_0",
                ),
                PVar(
                    "star_4_1",
                ),
            ],
        ),
    ]
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f240, $f4 -> $f239],
        "star_4_0": id9: map-[$f7 -> $f240],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id13: map-[$f10 -> $f239],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f240, $f4 -> $f239],
        "star_4_0": id9: map-[$f7 -> $f240],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id13: map-[$f10 -> $f239],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f240, $f4 -> $f239],
        "star_4_0": id9: map-[$f7 -> $f240],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id13: map-[$f10 -> $f239],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f240, $f4 -> $f239],
        "star_4_0": id9: map-[$f7 -> $f240],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id13: map-[$f10 -> $f239],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f240, $f4 -> $f239],
        "star_4_0": id9: map-[$f7 -> $f240],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id13: map-[$f10 -> $f239],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f240, $f4 -> $f239],
        "star_4_0": id9: map-[$f7 -> $f240],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id13: map-[$f10 -> $f239],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true ?star_2_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f241, $f4 -> $f242],
        "star_4_0": id13: map-[$f10 -> $f242],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id9: map-[$f7 -> $f241],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_4_0",
            ),
            PVar(
                "star_4_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f241, $f4 -> $f242],
        "star_4_0": id13: map-[$f10 -> $f242],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id9: map-[$f7 -> $f241],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f241, $f4 -> $f242],
        "star_4_0": id13: map-[$f10 -> $f242],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id9: map-[$f7 -> $f241],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f241, $f4 -> $f242],
        "star_4_0": id13: map-[$f10 -> $f242],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id9: map-[$f7 -> $f241],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f241, $f4 -> $f242],
        "star_4_0": id13: map-[$f10 -> $f242],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id9: map-[$f7 -> $f241],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "syntax2": id5: map-[$f3 -> $f241, $f4 -> $f242],
        "star_4_0": id13: map-[$f10 -> $f242],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_4_1": id9: map-[$f7 -> $f241],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_1",
    )
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::rewrite::pattern] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true (compose ?star_1_0) ?star_2_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_1_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_3_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_3_0",
            ),
            PVar(
                "star_4_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f239, $f42 -> $f240],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "syntax1",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            PVar(
                                "star_1_0",
                            ),
                        ],
                    ),
                    PVar(
                        "star_2_0",
                    ),
                ],
            ),
            PVar(
                "star_3_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax1 true (compose ?star_1_0) ?star_2_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax1",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    PVar(
                        "star_1_0",
                    ),
                ],
            ),
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax1",
    )
[slotted_egraphs::rewrite::pattern] pattern = true
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        True,
        [],
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_1_0)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose ?star_3_0 *4)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_3_0",
            ),
            PVar(
                "star_4_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_3_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_3_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_4_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f146],
        "star_1_0": id14: map-[$f11 -> $f146, $f12 -> $f147],
        "star_3_0": id21: map-[$f20 -> $f146, $f21 -> $f147],
        "star_4_0": id23: map-[$f39 -> $f146, $f40 -> $f147, $f41 -> $f242, $f42 -> $f241],
        "syntax1": id2: map-[$f1 -> $f146, $f2 -> $f147],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_4_0",
    )
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax2 (true) <*4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax2"), LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(4)]))
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [Star(4)]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::parse] tokenizing s = (new ?syntax1 (true) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (compose <?star_3_0  *4>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("star_3_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(4), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), Star(4)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(4)]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), Star(4)]))
[slotted_egraphs::parse] tokenizing s = (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [Star(2)]))
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id9: map-[$f7 -> $f175],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id13: map-[$f10 -> $f174],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f174],
        "star_2_0": id13: map-[$f10 -> $f174],
        "star_1_0": id9: map-[$f7 -> $f175],
        "syntax": id5: map-[$f3 -> $f175, $f4 -> $f174],
        "star_2_1": id9: map-[$f7 -> $f175],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id13: map-[$f10 -> $f177],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id9: map-[$f7 -> $f176],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f176],
        "star_2_0": id9: map-[$f7 -> $f176],
        "star_1_0": id13: map-[$f10 -> $f177],
        "syntax": id5: map-[$f3 -> $f176, $f4 -> $f177],
        "star_2_1": id13: map-[$f10 -> $f177],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id19: map-[$f17 -> $f178],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f178],
        "star_2_0": id19: map-[$f17 -> $f178],
        "star_1_0": id15: map-[$f13 -> $f178, $f14 -> $f179],
        "syntax": id2: map-[$f1 -> $f178, $f2 -> $f179],
        "star_2_1": id15: map-[$f13 -> $f178, $f14 -> $f179],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id19: map-[$f17 -> $f180],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "cond": id3: map-[],
        "star_1_1": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_2_0": id15: map-[$f13 -> $f180, $f14 -> $f181],
        "star_1_0": id19: map-[$f17 -> $f180],
        "syntax": id2: map-[$f1 -> $f180, $f2 -> $f181],
        "star_2_1": id19: map-[$f17 -> $f180],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id19: map-[$f17 -> $f192],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f190],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f191],
        "star_2_1": id19: map-[$f17 -> $f192],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id9: map-[$f7 -> $f191],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id13: map-[$f10 -> $f190],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f192],
        "star_2_1": id13: map-[$f10 -> $f190],
        "star_1_0": id9: map-[$f7 -> $f191],
        "syntax": id2: map-[$f1 -> $f192, $f2 -> $f193],
        "star_2_2": id9: map-[$f7 -> $f191],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f190],
        "star_1_2": id19: map-[$f17 -> $f192],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id9: map-[$f7 -> $f197],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f194],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f195],
        "star_2_1": id9: map-[$f7 -> $f197],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id13: map-[$f10 -> $f195],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id19: map-[$f17 -> $f194],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f197],
        "star_2_1": id19: map-[$f17 -> $f194],
        "star_1_0": id13: map-[$f10 -> $f195],
        "syntax": id2: map-[$f1 -> $f194, $f2 -> $f196],
        "star_2_2": id13: map-[$f10 -> $f195],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f194],
        "star_1_2": id9: map-[$f7 -> $f197],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id19: map-[$f17 -> $f200],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f198],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f199],
        "star_2_1": id19: map-[$f17 -> $f200],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id13: map-[$f10 -> $f199],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id9: map-[$f7 -> $f198],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f200],
        "star_2_1": id9: map-[$f7 -> $f198],
        "star_1_0": id13: map-[$f10 -> $f199],
        "syntax": id2: map-[$f1 -> $f200, $f2 -> $f201],
        "star_2_2": id13: map-[$f10 -> $f199],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f198],
        "star_1_2": id19: map-[$f17 -> $f200],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id13: map-[$f10 -> $f205],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f202],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f203],
        "star_2_1": id13: map-[$f10 -> $f205],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id19: map-[$f17 -> $f203],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id9: map-[$f7 -> $f202],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f205],
        "star_2_1": id9: map-[$f7 -> $f202],
        "star_1_0": id19: map-[$f17 -> $f203],
        "syntax": id2: map-[$f1 -> $f203, $f2 -> $f204],
        "star_2_2": id19: map-[$f17 -> $f203],
        "cond": id3: map-[],
        "star_1_1": id9: map-[$f7 -> $f202],
        "star_1_2": id13: map-[$f10 -> $f205],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id13: map-[$f10 -> $f209],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f206],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f207],
        "star_2_1": id13: map-[$f10 -> $f209],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id9: map-[$f7 -> $f207],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id19: map-[$f17 -> $f206],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f209],
        "star_2_1": id19: map-[$f17 -> $f206],
        "star_1_0": id9: map-[$f7 -> $f207],
        "syntax": id2: map-[$f1 -> $f206, $f2 -> $f208],
        "star_2_2": id9: map-[$f7 -> $f207],
        "cond": id3: map-[],
        "star_1_1": id19: map-[$f17 -> $f206],
        "star_1_2": id13: map-[$f10 -> $f209],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id9: map-[$f7 -> $f213],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id13: map-[$f10 -> $f210],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id19: map-[$f17 -> $f211],
        "star_2_1": id9: map-[$f7 -> $f213],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id19: map-[$f17 -> $f211],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id13: map-[$f10 -> $f210],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
            PVar(
                "star_1_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_2",
    )
[slotted_egraphs::rewrite::pattern] pattern = (new ?syntax ?cond *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        New(
            id0: map-[],
            id0: map-[],
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "syntax",
            ),
            PVar(
                "cond",
            ),
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
            PVar(
                "star_2_2",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?syntax
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "syntax",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?cond
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "cond",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_2
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id9: map-[$f7 -> $f213],
        "star_2_1": id13: map-[$f10 -> $f210],
        "star_1_0": id19: map-[$f17 -> $f211],
        "syntax": id2: map-[$f1 -> $f211, $f2 -> $f212],
        "star_2_2": id19: map-[$f17 -> $f211],
        "cond": id3: map-[],
        "star_1_1": id13: map-[$f10 -> $f210],
        "star_1_2": id9: map-[$f7 -> $f213],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_2",
    )
[slotted_egraphs::parse] tokenizing s = (compose <*2>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star(2), RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star(2)])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star(2)]
[entry::chc] from_syntax::ret = Some(Compose([Star(2)]))
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f214],
        "star_1_0": id8: map-[$f6 -> $f214],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f214],
        "star_1_0": id8: map-[$f6 -> $f214],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f214],
        "star_1_0": id8: map-[$f6 -> $f214],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id8: map-[$f6 -> $f214],
        "star_1_0": id8: map-[$f6 -> $f214],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f215],
        "star_1_0": id12: map-[$f9 -> $f215],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f215],
        "star_1_0": id12: map-[$f9 -> $f215],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f215],
        "star_1_0": id12: map-[$f9 -> $f215],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id12: map-[$f9 -> $f215],
        "star_1_0": id12: map-[$f9 -> $f215],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
        "star_1_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
        "star_1_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
        "star_1_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
        "star_1_0": id14: map-[$f11 -> $f216, $f12 -> $f217],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f218],
        "star_1_0": id18: map-[$f16 -> $f218],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f218],
        "star_1_0": id18: map-[$f16 -> $f218],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f218],
        "star_1_0": id18: map-[$f16 -> $f218],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_2_0": id18: map-[$f16 -> $f218],
        "star_1_0": id18: map-[$f16 -> $f218],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_2_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_2_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_2_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_2_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_2_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_2_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_1": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_1": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_1": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_1": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_1": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_0": id21: map-[$f20 -> $f227, $f21 -> $f228],
        "star_2_1": id20: map-[$f18 -> $f227, $f19 -> $f228],
        "star_1_0": id20: map-[$f18 -> $f227, $f19 -> $f228],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_2_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_2_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_2_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_2_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_2_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_2_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_1": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_1": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_1": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_1": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_1": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_0": id21: map-[$f20 -> $f229, $f21 -> $f230],
        "star_2_1": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
        "star_1_0": id23: map-[$f39 -> $f229, $f40 -> $f230, $f41 -> $f231, $f42 -> $f232],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_2_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_2_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_2_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_2_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_2_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_2_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_1": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_1": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_1": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_1": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_1": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_0": id20: map-[$f18 -> $f233, $f19 -> $f234],
        "star_2_1": id21: map-[$f20 -> $f233, $f21 -> $f234],
        "star_1_0": id21: map-[$f20 -> $f233, $f21 -> $f234],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_2_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_2_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_2_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_2_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_2_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_2_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *1)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_1": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_1_0",
            ),
            PVar(
                "star_1_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_1": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_1_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_1": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_1_1",
    )
[slotted_egraphs::rewrite::pattern] pattern = (compose *2)
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_1": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = ENode(
        Compose(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
        [
            PVar(
                "star_2_0",
            ),
            PVar(
                "star_2_1",
            ),
        ],
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_0
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_1": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_0",
    )
[slotted_egraphs::rewrite::pattern] pattern = ?star_2_1
[slotted_egraphs::rewrite::pattern] subst = {
        "star_1_1": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_0": id23: map-[$f39 -> $f235, $f40 -> $f236, $f41 -> $f237, $f42 -> $f238],
        "star_2_1": id21: map-[$f20 -> $f235, $f21 -> $f236],
        "star_1_0": id21: map-[$f20 -> $f235, $f21 -> $f236],
    }
[slotted_egraphs::rewrite::pattern] newPat = PVar(
        "star_2_1",
    )
[entry::chc] report = Report { iterations: 3, stop_reason: Saturated, egraph_nodes: 34, egraph_classes: 35, total_time: 0.289808203 }
[entry::chc] eg after rewrite = 
     == Egraph ==
    id0():>> PredName("P")
     - PredName("P")
    
    id1($f0):>> Var($f0)
     - Var($f0)
    
    id2($f1, $f2):>> PredSyntax(id0: map-[], [id1: map-[$f0 -> $f1], id1: map-[$f0 -> $f2]])
     - PredSyntax(id0: map-[], [id1: map-[$f0 -> $f1], id1: map-[$f0 -> $f2]])
    
    id3():>> True
     - True
    
    id4():>> PredName("Q")
     - PredName("Q")
    
    id5($f3, $f4):>> PredSyntax(id4: map-[], [id1: map-[$f0 -> $f3], id1: map-[$f0 -> $f4]])
     - PredSyntax(id4: map-[], [id1: map-[$f0 -> $f3], id1: map-[$f0 -> $f4]])
    
    id6():>> PredName("R1")
     - PredName("R1")
    
    id7($f5):>> PredSyntax(id6: map-[], [id1: map-[$f0 -> $f5]])
     - PredSyntax(id6: map-[], [id1: map-[$f0 -> $f5]])
    
    id8($f6):>> New(id7: map-[$f5 -> $f6], id3: map-[], [])
     - New(id7: map-[$f5 -> $f6], id3: map-[], [])
    
    id9($f7):>> Compose([AppliedId(id8: map-[$f6 -> $f7])])
     - Compose([AppliedId(id8: map-[$f6 -> $f7])])
    
    id10():>> PredName("R2")
     - PredName("R2")
    
    id11($f8):>> PredSyntax(id10: map-[], [id1: map-[$f0 -> $f8]])
     - PredSyntax(id10: map-[], [id1: map-[$f0 -> $f8]])
    
    id12($f9):>> New(id11: map-[$f8 -> $f9], id3: map-[], [])
     - New(id11: map-[$f8 -> $f9], id3: map-[], [])
    
    id13($f10):>> Compose([AppliedId(id12: map-[$f9 -> $f10])])
     - Compose([AppliedId(id12: map-[$f9 -> $f10])])
    
    id14($f11, $f12):>> New(id5: map-[$f3 -> $f11, $f4 -> $f12], id3: map-[], [AppliedId(id9: map-[$f7 -> $f11]), AppliedId(id13: map-[$f10 -> $f12])])
     - New(id5: map-[$f3 -> $f11, $f4 -> $f12], id3: map-[], [AppliedId(id9: map-[$f7 -> $f11]), AppliedId(id13: map-[$f10 -> $f12])])
     - New(id5: map-[$f3 -> $f11, $f4 -> $f12], id3: map-[], [AppliedId(id13: map-[$f10 -> $f12]), AppliedId(id9: map-[$f7 -> $f11])])
    
    id15($f13, $f14):>> Compose([AppliedId(id14: map-[$f11 -> $f13, $f12 -> $f14])])
     - Compose([AppliedId(id14: map-[$f11 -> $f13, $f12 -> $f14])])
    
    id16():>> PredName("S")
     - PredName("S")
    
    id17($f15):>> PredSyntax(id16: map-[], [id1: map-[$f0 -> $f15]])
     - PredSyntax(id16: map-[], [id1: map-[$f0 -> $f15]])
    
    id18($f16):>> New(id17: map-[$f15 -> $f16], id3: map-[], [])
     - New(id17: map-[$f15 -> $f16], id3: map-[], [])
    
    id19($f17):>> Compose([AppliedId(id18: map-[$f16 -> $f17])])
     - Compose([AppliedId(id18: map-[$f16 -> $f17])])
    
    id20($f18, $f19):>> New(id2: map-[$f1 -> $f18, $f2 -> $f19], id3: map-[], [AppliedId(id15: map-[$f13 -> $f18, $f14 -> $f19]), AppliedId(id19: map-[$f17 -> $f18])])
     - New(id2: map-[$f1 -> $f18, $f2 -> $f19], id3: map-[], [AppliedId(id15: map-[$f13 -> $f18, $f14 -> $f19]), AppliedId(id19: map-[$f17 -> $f18])])
     - New(id2: map-[$f1 -> $f18, $f2 -> $f19], id3: map-[], [AppliedId(id19: map-[$f17 -> $f18]), AppliedId(id15: map-[$f13 -> $f18, $f14 -> $f19])])
    
    id21($f20, $f21):>> New(id2: map-[$f1 -> $f20, $f2 -> $f21], id3: map-[], [])
     - New(id2: map-[$f1 -> $f20, $f2 -> $f21], id3: map-[], [])
    
    id22($f22, $f23):>> Compose([AppliedId(id20: map-[$f18 -> $f22, $f19 -> $f23]), AppliedId(id21: map-[$f20 -> $f22, $f21 -> $f23])])
     - Compose([AppliedId(id20: map-[$f18 -> $f22, $f19 -> $f23]), AppliedId(id21: map-[$f20 -> $f22, $f21 -> $f23])])
     - Compose([AppliedId(id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f136, $f42 -> $f137]), AppliedId(id21: map-[$f20 -> $f22, $f21 -> $f23])])
     - Compose([AppliedId(id21: map-[$f20 -> $f22, $f21 -> $f23]), AppliedId(id20: map-[$f18 -> $f22, $f19 -> $f23])])
     - Compose([AppliedId(id21: map-[$f20 -> $f22, $f21 -> $f23]), AppliedId(id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f49, $f42 -> $f50])])
    
    id23($f39, $f40, $f41, $f42):>> New(id2: map-[$f1 -> $f39, $f2 -> $f40], id3: map-[], [AppliedId(id19: map-[$f17 -> $f39]), AppliedId(id9: map-[$f7 -> $f42]), AppliedId(id13: map-[$f10 -> $f41])])
     - New(id2: map-[$f1 -> $f39, $f2 -> $f40], id3: map-[], [AppliedId(id9: map-[$f7 -> $f42]), AppliedId(id13: map-[$f10 -> $f41]), AppliedId(id19: map-[$f17 -> $f39])])
     - New(id2: map-[$f1 -> $f39, $f2 -> $f40], id3: map-[], [AppliedId(id13: map-[$f10 -> $f41]), AppliedId(id19: map-[$f17 -> $f39]), AppliedId(id9: map-[$f7 -> $f42])])
     - New(id2: map-[$f1 -> $f39, $f2 -> $f40], id3: map-[], [AppliedId(id13: map-[$f10 -> $f41]), AppliedId(id9: map-[$f7 -> $f42]), AppliedId(id19: map-[$f17 -> $f39])])
     - New(id2: map-[$f1 -> $f39, $f2 -> $f40], id3: map-[], [AppliedId(id19: map-[$f17 -> $f39]), AppliedId(id9: map-[$f7 -> $f42]), AppliedId(id13: map-[$f10 -> $f41])])
     - New(id2: map-[$f1 -> $f39, $f2 -> $f40], id3: map-[], [AppliedId(id9: map-[$f7 -> $f42]), AppliedId(id19: map-[$f17 -> $f39]), AppliedId(id13: map-[$f10 -> $f41])])
     - New(id2: map-[$f1 -> $f39, $f2 -> $f40], id3: map-[], [AppliedId(id19: map-[$f17 -> $f39]), AppliedId(id13: map-[$f10 -> $f41]), AppliedId(id9: map-[$f7 -> $f42])])
    
[slotted_egraphs::parse] tokenizing s = (compose <(new (pred P <?a ?b>) (true) <(compose <(new (pred Q <?a ?b>) (true) <(compose <(new (pred R1 <?a>) (true) <>)>) (compose <(new (pred R2 <?b>) (true) <>)>)>)>) (compose <(new (pred S <?a>) (true) <>)>)>) (new (pred P <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("P")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("P")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[], id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("Q"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("Q")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("Q")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[], id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R1"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("R1")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("R1")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R2"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("R2")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("R2")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("S"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("S")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("S")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("P"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("P")]
[entry::chc] Calling from_syntax_arms2
[slotted_egraphs::lang] L(Bare)::from_syntax with elems = [String("P")]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0: map-[]), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0: map-[], [id0: map-[], id0: map-[]]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0: map-[]), AppliedId(id0: map-[]), Vec([])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] from_syntax::ret = Some(New(id0: map-[], id0: map-[], []))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0: map-[]), AppliedId(id0: map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0: map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0: map-[]), AppliedId(id0: map-[])]))
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new (pred P ?a ?b) true (compose (new (pred Q ?a ?b) true (compose (new (pred R1 ?a) true)) (compose (new (pred R2 ?b) true)))) (compose (new (pred S ?a) true))) (new (pred P ?a ?b) true))
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id1: map-[$f0 -> $f0]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Var(
                $0,
            ): ProvenSourceNode {
                elem: [$0 -> $f0],
                src_id: id1,
            },
        },
        slots: {
            $f0,
        },
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0],
            },
            next: None,
        },
        syn_enode: Var(
            $f0,
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f1, $f2 -> $f2]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f3, $f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f7]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f8]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f9]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f10]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f11, $f12 -> $f12]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f13, $f14 -> $f14]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f15]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f16]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f17]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at Compose([AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != Compose([AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f18, $f19 -> $f19]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f20, $f21 -> $f21]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] enodes_applied i = id22: map-[$f22 -> $f22, $f23 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id22,
            },
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f136, $3 -> $f137],
                src_id: id34,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23],
                src_id: id27,
            },
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f22, $1 -> $f23, $2 -> $f49, $3 -> $f50],
                src_id: id24,
            },
        },
        slots: {
            $f22,
            $f23,
        },
        usages: {},
        group: Group {
            identity: ProvenPerm {
                elem: [$f22 -> $f22, $f23 -> $f23],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id20: map-[$f18 -> $f22, $f19 -> $f23],
                ),
                AppliedId(
                    id21: map-[$f20 -> $f22, $f21 -> $f23],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id20: map-[$f18 -> $f22, $f19 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id20,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f18, $1 -> $f19],
                src_id: id26,
            },
        },
        slots: {
            $f18,
            $f19,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f18 -> $f18, $f19 -> $f19],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f18, $f2 -> $f19],
            id3: map-[],
            [
                AppliedId(
                    id15: map-[$f13 -> $f18, $f14 -> $f19],
                ),
                AppliedId(
                    id19: map-[$f17 -> $f18],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f22, $f2 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "P",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "P",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "a",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "b",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
            PVar(
                "b",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "P",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "P",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id15: map-[$f13 -> $f22, $f14 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f13, $1 -> $f14],
                src_id: id15,
            },
        },
        slots: {
            $f13,
            $f14,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f13 -> $f13, $f14 -> $f14],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id14: map-[$f11 -> $f13, $f12 -> $f14],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id14: map-[$f11 -> $f22, $f12 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id14,
            },
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f11, $1 -> $f12],
                src_id: id25,
            },
        },
        slots: {
            $f11,
            $f12,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id14: map-[$f11 -> $0, $f12 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f11 -> $f11, $f12 -> $f12],
            },
            next: None,
        },
        syn_enode: New(
            id5: map-[$f3 -> $f11, $f4 -> $f12],
            id3: map-[],
            [
                AppliedId(
                    id9: map-[$f7 -> $f11],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f12],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f22, $f4 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "Q",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "Q",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "a",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "b",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
            PVar(
                "a",
            ),
            PVar(
                "b",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "Q",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "Q",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id9: map-[$f7 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f7],
                src_id: id9,
            },
        },
        slots: {
            $f7,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f7 -> $f7],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id8: map-[$f6 -> $f7],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id8: map-[$f6 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id8: map-[$f6 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: New(
            id7: map-[$f5 -> $f6],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id7: map-[$f5 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id6: map-[],
            [
                id1: map-[$f0 -> $f5],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id6: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id6,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id6: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "R1",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "R1",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "R1",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "R1",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "a",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "R1",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "R1",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "R1",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R1",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R1",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R1",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "R1",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "R1",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "R1",
                                ),
                                [],
                            ),
                            PVar(
                                "a",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "R1",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "R1",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "R1",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "a",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "R2",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "R2",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "R2",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "R2",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "b",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "R2",
                ),
                [],
            ),
            PVar(
                "b",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "R2",
                    ),
                    [],
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "R2",
                    ),
                    [],
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R2",
                        ),
                        [],
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R2",
                        ),
                        [],
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R2",
                        ),
                        [],
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "R2",
                            ),
                            [],
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "R2",
                            ),
                            [],
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "R2",
                                ),
                                [],
                            ),
                            PVar(
                                "b",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "R2",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "R1",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "a",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "R2",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "R1",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "a",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                        ],
                    ),
                ],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "R2",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "b",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "Q",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "R1",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "a",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                            ],
                        ),
                    ],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "R2",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "b",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id5: map-[$f3 -> $f22, $f4 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f3, $1 -> $f4],
                src_id: id5,
            },
        },
        slots: {
            $f3,
            $f4,
        },
        usages: {
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f3 -> $f3, $f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id4: map-[],
            [
                id1: map-[$f0 -> $f3],
                id1: map-[$f0 -> $f4],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id4: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id4,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id4: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "Q",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "Q",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "a",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "b",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
            PVar(
                "a",
            ),
            PVar(
                "b",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "Q",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "Q",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id13: map-[$f10 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f10],
                src_id: id13,
            },
        },
        slots: {
            $f10,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f10 -> $f10],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id12: map-[$f9 -> $f10],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id12: map-[$f9 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f9],
                src_id: id12,
            },
        },
        slots: {
            $f9,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id12: map-[$f9 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f9 -> $f9],
            },
            next: None,
        },
        syn_enode: New(
            id11: map-[$f8 -> $f9],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id11: map-[$f8 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f8],
                src_id: id11,
            },
        },
        slots: {
            $f8,
        },
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f8 -> $f8],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id10: map-[],
            [
                id1: map-[$f0 -> $f8],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id10: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R2",
            ): ProvenSourceNode {
                elem: [],
                src_id: id10,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id10: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R2",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "R1",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "R1",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "R1",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "R1",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "Q",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "R1",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "a",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                            ],
                        ),
                    ],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "R2",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "b",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "Q",
                                ),
                                [],
                            ),
                            PVar(
                                "a",
                            ),
                            PVar(
                                "b",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "R1",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "a",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "R2",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "b",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "Q",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "R1",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "a",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "R2",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "b",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "Q",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "R1",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "a",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "R2",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "b",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "Q",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "a",
                                    ),
                                    PVar(
                                        "b",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0: map-[],
                                            id0: map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0: map-[],
                                                    [
                                                        id0: map-[],
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R1",
                                                        ),
                                                        [],
                                                    ),
                                                    PVar(
                                                        "a",
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0: map-[],
                                            id0: map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0: map-[],
                                                    [
                                                        id0: map-[],
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R2",
                                                        ),
                                                        [],
                                                    ),
                                                    PVar(
                                                        "b",
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id17: map-[$f15 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f15],
                src_id: id17,
            },
        },
        slots: {
            $f15,
        },
        usages: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f15 -> $f15],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id16: map-[],
            [
                id1: map-[$f0 -> $f15],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id16: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "S",
            ): ProvenSourceNode {
                elem: [],
                src_id: id16,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id16: map-[],
                [
                    id1: map-[$f0 -> $0],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "S",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "S",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "S",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "S",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "S",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "a",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "S",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "S",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "S",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "S",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "S",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "S",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "S",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "S",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "S",
                                ),
                                [],
                            ),
                            PVar(
                                "a",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "S",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "Q",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "a",
                                    ),
                                    PVar(
                                        "b",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0: map-[],
                                            id0: map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0: map-[],
                                                    [
                                                        id0: map-[],
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R1",
                                                        ),
                                                        [],
                                                    ),
                                                    PVar(
                                                        "a",
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0: map-[],
                                            id0: map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0: map-[],
                                                    [
                                                        id0: map-[],
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R2",
                                                        ),
                                                        [],
                                                    ),
                                                    PVar(
                                                        "b",
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "S",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "Q",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "a",
                                    ),
                                    PVar(
                                        "b",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0: map-[],
                                            id0: map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0: map-[],
                                                    [
                                                        id0: map-[],
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R1",
                                                        ),
                                                        [],
                                                    ),
                                                    PVar(
                                                        "a",
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0: map-[],
                                            id0: map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0: map-[],
                                                    [
                                                        id0: map-[],
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R2",
                                                        ),
                                                        [],
                                                    ),
                                                    PVar(
                                                        "b",
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0: map-[],
                            id0: map-[],
                            [],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0: map-[],
                                    [
                                        id0: map-[],
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "S",
                                        ),
                                        [],
                                    ),
                                    PVar(
                                        "a",
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "P",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "Q",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "a",
                                        ),
                                        PVar(
                                            "b",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                                ENode(
                                    Compose(
                                        [
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                        ],
                                    ),
                                    [
                                        ENode(
                                            New(
                                                id0: map-[],
                                                id0: map-[],
                                                [],
                                            ),
                                            [
                                                ENode(
                                                    PredSyntax(
                                                        id0: map-[],
                                                        [
                                                            id0: map-[],
                                                        ],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredName(
                                                                "R1",
                                                            ),
                                                            [],
                                                        ),
                                                        PVar(
                                                            "a",
                                                        ),
                                                    ],
                                                ),
                                                ENode(
                                                    True,
                                                    [],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                                ENode(
                                    Compose(
                                        [
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                        ],
                                    ),
                                    [
                                        ENode(
                                            New(
                                                id0: map-[],
                                                id0: map-[],
                                                [],
                                            ),
                                            [
                                                ENode(
                                                    PredSyntax(
                                                        id0: map-[],
                                                        [
                                                            id0: map-[],
                                                        ],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredName(
                                                                "R2",
                                                            ),
                                                            [],
                                                        ),
                                                        PVar(
                                                            "b",
                                                        ),
                                                    ],
                                                ),
                                                ENode(
                                                    True,
                                                    [],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "S",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "a",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f22, $f2 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "P",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "P",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "a",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "b",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
            PVar(
                "b",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "P",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "P",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id19: map-[$f17 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f17],
                src_id: id19,
            },
        },
        slots: {
            $f17,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f17 -> $f17],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id18: map-[$f16 -> $f17],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id18: map-[$f16 -> $f22]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f16],
                src_id: id18,
            },
        },
        slots: {
            $f16,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id18: map-[$f16 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f16 -> $f16],
            },
            next: None,
        },
        syn_enode: New(
            id17: map-[$f15 -> $f16],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "P",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "Q",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "a",
                                        ),
                                        PVar(
                                            "b",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                                ENode(
                                    Compose(
                                        [
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                        ],
                                    ),
                                    [
                                        ENode(
                                            New(
                                                id0: map-[],
                                                id0: map-[],
                                                [],
                                            ),
                                            [
                                                ENode(
                                                    PredSyntax(
                                                        id0: map-[],
                                                        [
                                                            id0: map-[],
                                                        ],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredName(
                                                                "R1",
                                                            ),
                                                            [],
                                                        ),
                                                        PVar(
                                                            "a",
                                                        ),
                                                    ],
                                                ),
                                                ENode(
                                                    True,
                                                    [],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                                ENode(
                                    Compose(
                                        [
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                        ],
                                    ),
                                    [
                                        ENode(
                                            New(
                                                id0: map-[],
                                                id0: map-[],
                                                [],
                                            ),
                                            [
                                                ENode(
                                                    PredSyntax(
                                                        id0: map-[],
                                                        [
                                                            id0: map-[],
                                                        ],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredName(
                                                                "R2",
                                                            ),
                                                            [],
                                                        ),
                                                        PVar(
                                                            "b",
                                                        ),
                                                    ],
                                                ),
                                                ENode(
                                                    True,
                                                    [],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                ENode(
                    Compose(
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            New(
                                id0: map-[],
                                id0: map-[],
                                [],
                            ),
                            [
                                ENode(
                                    PredSyntax(
                                        id0: map-[],
                                        [
                                            id0: map-[],
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredName(
                                                "S",
                                            ),
                                            [],
                                        ),
                                        PVar(
                                            "a",
                                        ),
                                    ],
                                ),
                                ENode(
                                    True,
                                    [],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "P",
                                ),
                                [],
                            ),
                            PVar(
                                "a",
                            ),
                            PVar(
                                "b",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "Q",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "a",
                                            ),
                                            PVar(
                                                "b",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0: map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0: map-[],
                                                    id0: map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0: map-[],
                                                            [
                                                                id0: map-[],
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R1",
                                                                ),
                                                                [],
                                                            ),
                                                            PVar(
                                                                "a",
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0: map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0: map-[],
                                                    id0: map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0: map-[],
                                                            [
                                                                id0: map-[],
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R2",
                                                                ),
                                                                [],
                                                            ),
                                                            PVar(
                                                                "b",
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "S",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "a",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f22, $f21 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id2: map-[$f1 -> $f22, $f2 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f1, $1 -> $f2],
                src_id: id2,
            },
        },
        slots: {
            $f1,
            $f2,
        },
        usages: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f1 -> $f1, $f2 -> $f2],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0: map-[],
            [
                id1: map-[$f0 -> $f1],
                id1: map-[$f0 -> $f2],
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id0: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0: map-[],
                [
                    id1: map-[$f0 -> $0],
                    id1: map-[$f0 -> $1],
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        Bare,
    ]
[slotted_egraphs::lang] b = [
        Bare,
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredName(
                "P",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredName(
                "P",
            ),
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "a",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        PVar(
            "b",
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
            PVar(
                "a",
            ),
            PVar(
                "b",
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "P",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            PredSyntax(
                id0: map-[],
                [
                    id0: map-[],
                    id0: map-[],
                ],
            ),
            [
                ENode(
                    PredName(
                        "P",
                    ),
                    [],
                ),
                PVar(
                    "a",
                ),
                PVar(
                    "b",
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id3: map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            New(
                id11: map-[$f8 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                ],
            ),
            New(
                id17: map-[$f15 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id15: map-[$f13 -> $0, $f14 -> $1],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ),
            New(
                id7: map-[$f5 -> $0],
                id3: map-[],
                [],
            ),
            New(
                id5: map-[$f3 -> $0, $f4 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $1],
                    ),
                ],
            ),
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            True,
            [],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                PredSyntax(
                    id0: map-[],
                    [
                        id0: map-[],
                        id0: map-[],
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                    PVar(
                        "a",
                    ),
                    PVar(
                        "b",
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "P",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "P",
                                ),
                                [],
                            ),
                            PVar(
                                "a",
                            ),
                            PVar(
                                "b",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "Q",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "a",
                                            ),
                                            PVar(
                                                "b",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0: map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0: map-[],
                                                    id0: map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0: map-[],
                                                            [
                                                                id0: map-[],
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R1",
                                                                ),
                                                                [],
                                                            ),
                                                            PVar(
                                                                "a",
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0: map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0: map-[],
                                                    id0: map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0: map-[],
                                                            [
                                                                id0: map-[],
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R2",
                                                                ),
                                                                [],
                                                            ),
                                                            PVar(
                                                                "b",
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "S",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "a",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] next = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] nextPatternChildren = [
        ENode(
            New(
                id0: map-[],
                id0: map-[],
                [],
            ),
            [
                ENode(
                    PredSyntax(
                        id0: map-[],
                        [
                            id0: map-[],
                            id0: map-[],
                        ],
                    ),
                    [
                        ENode(
                            PredName(
                                "P",
                            ),
                            [],
                        ),
                        PVar(
                            "a",
                        ),
                        PVar(
                            "b",
                        ),
                    ],
                ),
                ENode(
                    True,
                    [],
                ),
            ],
        ),
    ]
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = [
        [
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [
                        AppliedId(
                            id0: map-[],
                        ),
                        AppliedId(
                            id0: map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "P",
                                ),
                                [],
                            ),
                            PVar(
                                "a",
                            ),
                            PVar(
                                "b",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                        AppliedId(
                                            id0: map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "Q",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "a",
                                            ),
                                            PVar(
                                                "b",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0: map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0: map-[],
                                                    id0: map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0: map-[],
                                                            [
                                                                id0: map-[],
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R1",
                                                                ),
                                                                [],
                                                            ),
                                                            PVar(
                                                                "a",
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0: map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0: map-[],
                                                    id0: map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0: map-[],
                                                            [
                                                                id0: map-[],
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R2",
                                                                ),
                                                                [],
                                                            ),
                                                            PVar(
                                                                "b",
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0: map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0: map-[],
                                    id0: map-[],
                                    [],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0: map-[],
                                            [
                                                id0: map-[],
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "S",
                                                ),
                                                [],
                                            ),
                                            PVar(
                                                "a",
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            ENode(
                New(
                    id0: map-[],
                    id0: map-[],
                    [],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0: map-[],
                            [
                                id0: map-[],
                                id0: map-[],
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "P",
                                ),
                                [],
                            ),
                            PVar(
                                "a",
                            ),
                            PVar(
                                "b",
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                ],
            ),
        ],
    ]
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "P",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "Q",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "a",
                                                ),
                                                PVar(
                                                    "b",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                        ENode(
                                            Compose(
                                                [
                                                    AppliedId(
                                                        id0: map-[],
                                                    ),
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    New(
                                                        id0: map-[],
                                                        id0: map-[],
                                                        [],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredSyntax(
                                                                id0: map-[],
                                                                [
                                                                    id0: map-[],
                                                                ],
                                                            ),
                                                            [
                                                                ENode(
                                                                    PredName(
                                                                        "R1",
                                                                    ),
                                                                    [],
                                                                ),
                                                                PVar(
                                                                    "a",
                                                                ),
                                                            ],
                                                        ),
                                                        ENode(
                                                            True,
                                                            [],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            Compose(
                                                [
                                                    AppliedId(
                                                        id0: map-[],
                                                    ),
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    New(
                                                        id0: map-[],
                                                        id0: map-[],
                                                        [],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredSyntax(
                                                                id0: map-[],
                                                                [
                                                                    id0: map-[],
                                                                ],
                                                            ),
                                                            [
                                                                ENode(
                                                                    PredName(
                                                                        "R2",
                                                                    ),
                                                                    [],
                                                                ),
                                                                PVar(
                                                                    "b",
                                                                ),
                                                            ],
                                                        ),
                                                        ENode(
                                                            True,
                                                            [],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "S",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "a",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "P",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f22, $f40 -> $f23, $f41 -> $f245, $f42 -> $f246]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id31,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id32,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id33,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id30,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id28,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[]), AppliedId(id0: map-[])])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f22, $f21 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::egraph] enodes_applied i = id21: map-[$f20 -> $f22, $f21 -> $f23]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f20, $1 -> $f21],
                src_id: id21,
            },
        },
        slots: {
            $f20,
            $f21,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id20: map-[$f18 -> $0, $f19 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f20 -> $f20, $f21 -> $f21],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f20, $f2 -> $f21],
            id3: map-[],
            [],
        ),
        ..
    }
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return false 0
[slotted_egraphs::lang] a = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0: map-[],
                ),
                AppliedId(
                    id0: map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0: map-[],
        ),
        AppliedId(
            id0: map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return false 1
[slotted_egraphs::rewrite::ematch] continue at New(id0: map-[], id0: map-[], [AppliedId(id0: map-[]), AppliedId(id0: map-[])]) != New(id0: map-[], id0: map-[], [])
[slotted_egraphs::rewrite::ematch] out = []
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::rewrite::ematch] acc = [
        State {
            partial_subst: {},
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] accPatternChildren = [
        [],
    ]
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] acc = []
[slotted_egraphs::rewrite::ematch] accPatternChildren = []
[slotted_egraphs::rewrite::ematch] next = []
[slotted_egraphs::rewrite::ematch] nextPatternChildren = []
[slotted_egraphs::rewrite::ematch] nextAccPatternChildren = []
[slotted_egraphs::rewrite::ematch] out = [
        State {
            partial_subst: {
                "a": id1: map-[$f0 -> $f22],
                "b": id1: map-[$f0 -> $f23],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] outPatternChildren = []
[slotted_egraphs::egraph] enodes_applied i = id23: map-[$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id31,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id32,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id33,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id23,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id9: map-[$f7 -> $2],
                    ),
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f42, $3 -> $f41],
                src_id: id30,
            },
            New(
                id2: map-[$f1 -> $0, $f2 -> $1],
                id3: map-[],
                [
                    AppliedId(
                        id19: map-[$f17 -> $0],
                    ),
                    AppliedId(
                        id13: map-[$f10 -> $2],
                    ),
                    AppliedId(
                        id9: map-[$f7 -> $3],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f39, $1 -> $f40, $2 -> $f41, $3 -> $f42],
                src_id: id28,
            },
        },
        slots: {
            $f39,
            $f40,
            $f41,
            $f42,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                ],
            ),
            Compose(
                [
                    AppliedId(
                        id21: map-[$f20 -> $0, $f21 -> $1],
                    ),
                    AppliedId(
                        id23: map-[$f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42],
            },
            next: None,
        },
        syn_enode: New(
            id2: map-[$f1 -> $f39, $f2 -> $f40],
            id3: map-[],
            [
                AppliedId(
                    id19: map-[$f17 -> $f39],
                ),
                AppliedId(
                    id9: map-[$f7 -> $f42],
                ),
                AppliedId(
                    id13: map-[$f10 -> $f41],
                ),
            ],
        ),
        ..
    }
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] ematch_all result out = [
        {
            "a": id1: map-[$f0 -> $f251],
            "b": id1: map-[$f0 -> $f252],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_all result outPatterns = [
        ENode(
            Compose(
                [
                    AppliedId(
                        id0: map-[],
                    ),
                    AppliedId(
                        id0: map-[],
                    ),
                ],
            ),
            [
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [
                            AppliedId(
                                id0: map-[],
                            ),
                            AppliedId(
                                id0: map-[],
                            ),
                        ],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "P",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                            AppliedId(
                                                id0: map-[],
                                            ),
                                        ],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "Q",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "a",
                                                ),
                                                PVar(
                                                    "b",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                        ENode(
                                            Compose(
                                                [
                                                    AppliedId(
                                                        id0: map-[],
                                                    ),
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    New(
                                                        id0: map-[],
                                                        id0: map-[],
                                                        [],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredSyntax(
                                                                id0: map-[],
                                                                [
                                                                    id0: map-[],
                                                                ],
                                                            ),
                                                            [
                                                                ENode(
                                                                    PredName(
                                                                        "R1",
                                                                    ),
                                                                    [],
                                                                ),
                                                                PVar(
                                                                    "a",
                                                                ),
                                                            ],
                                                        ),
                                                        ENode(
                                                            True,
                                                            [],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            Compose(
                                                [
                                                    AppliedId(
                                                        id0: map-[],
                                                    ),
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    New(
                                                        id0: map-[],
                                                        id0: map-[],
                                                        [],
                                                    ),
                                                    [
                                                        ENode(
                                                            PredSyntax(
                                                                id0: map-[],
                                                                [
                                                                    id0: map-[],
                                                                ],
                                                            ),
                                                            [
                                                                ENode(
                                                                    PredName(
                                                                        "R2",
                                                                    ),
                                                                    [],
                                                                ),
                                                                PVar(
                                                                    "b",
                                                                ),
                                                            ],
                                                        ),
                                                        ENode(
                                                            True,
                                                            [],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ENode(
                            Compose(
                                [
                                    AppliedId(
                                        id0: map-[],
                                    ),
                                ],
                            ),
                            [
                                ENode(
                                    New(
                                        id0: map-[],
                                        id0: map-[],
                                        [],
                                    ),
                                    [
                                        ENode(
                                            PredSyntax(
                                                id0: map-[],
                                                [
                                                    id0: map-[],
                                                ],
                                            ),
                                            [
                                                ENode(
                                                    PredName(
                                                        "S",
                                                    ),
                                                    [],
                                                ),
                                                PVar(
                                                    "a",
                                                ),
                                            ],
                                        ),
                                        ENode(
                                            True,
                                            [],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                ENode(
                    New(
                        id0: map-[],
                        id0: map-[],
                        [],
                    ),
                    [
                        ENode(
                            PredSyntax(
                                id0: map-[],
                                [
                                    id0: map-[],
                                    id0: map-[],
                                ],
                            ),
                            [
                                ENode(
                                    PredName(
                                        "P",
                                    ),
                                    [],
                                ),
                                PVar(
                                    "a",
                                ),
                                PVar(
                                    "b",
                                ),
                            ],
                        ),
                        ENode(
                            True,
                            [],
                        ),
                    ],
                ),
            ],
        ),
    ]
[entry::chc] match unfold result1 = [{"a": id1: map-[$f0 -> $f251], "b": id1: map-[$f0 -> $f252]}]
test chc::tst1 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 70 filtered out; finished in 0.39s


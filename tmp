   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 3.09s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-17b4e8f2b1e0119d)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-f8fe6369ec6bb3ca)

running 1 test
[slotted_egraphs::parse] from (new (pred <(int $0) (int $1)>) (and <(eq (int $1) 0) (eq (int $0) (leaf))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $1) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $0) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (int $1) 0) (eq (int $0) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $0) (int $1)) (and (eq (int $1) 0) (eq (int $0) leaf)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[entry::chc] calling make on Int($f0)
[entry::chc] result {$f0: Int}
[slotted_egraphs::egraph::add] classes insert id0
[slotted_egraphs::egraph::add] add to id0 Int($0)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id0
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[slotted_egraphs::egraph::add] remove from id0 Int($0)
[slotted_egraphs::egraph::add] add to id0 Int($0)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id0 Int($0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] calling make on Int($0)
[entry::chc] exists in egraph
[entry::chc] result {$f0: Int}
[entry::chc] calling merge to id0
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f0: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f0: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] eclassSlots {$f0}
[entry::chc] result varTypes {$f0: Int}
[slotted_egraphs::egraph] updating data for id0
[slotted_egraphs::egraph::rebuild] end of handle_pending id0: ($f0 -> $f0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f1: Int, $f2: Int}
[slotted_egraphs::egraph::add] classes insert id1
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id1
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::add] remove from id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f1: Int, $f2: Int}
[entry::chc] calling merge to id1
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] eclassSlots {$f2, $f1}
[entry::chc] result varTypes {$f1: Int, $f2: Int}
[slotted_egraphs::egraph] updating data for id1
[slotted_egraphs::egraph::rebuild] end of handle_pending id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[entry::chc] calling make on Number(0)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id2
[slotted_egraphs::egraph::add] add to id2 Number(0)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id2
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[slotted_egraphs::egraph::add] remove from id2 Number(0)
[slotted_egraphs::egraph::add] add to id2 Number(0)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id2 Number(0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[entry::chc] calling make on Number(0)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[entry::chc] calling merge to id2
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id2
[slotted_egraphs::egraph::rebuild] end of handle_pending id2: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $1), id2: ())
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id2: ()), ($0 -> $1))
[entry::chc] calling make on Eq(id0: ($f0 -> $f3), id2: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f3), id2: ())
[entry::chc] get {$f3: Int}
[slotted_egraphs::egraph::add] classes insert id3
[slotted_egraphs::egraph::add] add to id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id3
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[slotted_egraphs::egraph::add] remove from id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::add] add to id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id2: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f3), id2: ())
[entry::chc] get {$f3: Int}
[entry::chc] calling merge to id3
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f3: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f3: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] eclassSlots {$f3}
[entry::chc] result varTypes {$f3: Int}
[slotted_egraphs::egraph] updating data for id3
[slotted_egraphs::egraph::rebuild] end of handle_pending id3: ($f3 -> $f3)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (eq (int $1) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[entry::chc] calling make on Leaf
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id4
[slotted_egraphs::egraph::add] add to id4 Leaf
[slotted_egraphs::egraph::rebuild] begin of handle_pending id4
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[slotted_egraphs::egraph::add] remove from id4 Leaf
[slotted_egraphs::egraph::add] add to id4 Leaf
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[slotted_egraphs::egraph::rebuild] from update_analysis id4 Leaf
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[entry::chc] calling make on Leaf
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[entry::chc] calling merge to id4
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id4
[slotted_egraphs::egraph::rebuild] end of handle_pending id4: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id4: ()), ($0 -> $0))
[entry::chc] calling make on Eq(id0: ($f0 -> $f4), id4: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f4}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f4), id4: ())
[entry::chc] get {$f4: Int}
[slotted_egraphs::egraph::add] classes insert id5
[slotted_egraphs::egraph::add] add to id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id5
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[slotted_egraphs::egraph::add] remove from id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::add] add to id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id4: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f4}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f4), id4: ())
[entry::chc] get {$f4: Int}
[entry::chc] calling merge to id5
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f4: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f4: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] eclassSlots {$f4}
[entry::chc] result varTypes {$f4: Int}
[slotted_egraphs::egraph] updating data for id5
[slotted_egraphs::egraph::rebuild] end of handle_pending id5: ($f4 -> $f4)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (eq (int $0) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id3: ($f3 -> $1), id5: ($f4 -> $0)])
[slotted_egraphs::egraph::add] ret (And([id3: ($f3 -> $0), id5: ($f4 -> $1)]), ($0 -> $1, $1 -> $0))
[entry::chc] calling make on And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f5, $f6}
[entry::chc] childId : id5, mapToS : $f4
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
[entry::chc] get {$f6: Int, $f5: Int}
[slotted_egraphs::egraph::add] classes insert id6
[slotted_egraphs::egraph::add] add to id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id6
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[slotted_egraphs::egraph::add] remove from id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::add] add to id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] calling make on And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f5, $f6}
[entry::chc] childId : id5, mapToS : $f4
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
[entry::chc] get {$f5: Int, $f6: Int}
[entry::chc] calling merge to id6
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] eclassSlots {$f5, $f6}
[entry::chc] result varTypes {$f5: Int, $f6: Int}
[slotted_egraphs::egraph] updating data for id6
[slotted_egraphs::egraph::rebuild] end of handle_pending id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> (and (eq (int $1) 0) (eq (int $0) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), []), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f7, $f8}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id6, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
[entry::chc] get {$f7: Int, $f8: Int}
[slotted_egraphs::egraph::add] classes insert id7
[slotted_egraphs::egraph::add] add to id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id7
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::add] remove from id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] add to id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f7, $f8}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id6, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
[entry::chc] get {$f8: Int, $f7: Int}
[entry::chc] calling merge to id7
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f8: Int, $f7: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[entry::chc] eclassSlots {$f8, $f7}
[entry::chc] result varTypes {$f7: Int, $f8: Int}
[slotted_egraphs::egraph] updating data for id7
[slotted_egraphs::egraph::rebuild] end of handle_pending id7: ($f7 -> $f7, $f8 -> $f8)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> (new (pred (int $0) (int $1)) (and (eq (int $1) 0) (eq (int $0) leaf)))
[slotted_egraphs::parse] from (interface minLeaf (pred <(int $0) (int $1)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id8
[slotted_egraphs::egraph::add] add to id8 PredName("minLeaf")
[slotted_egraphs::egraph::rebuild] begin of handle_pending id8
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[slotted_egraphs::egraph::add] remove from id8 PredName("minLeaf")
[slotted_egraphs::egraph::add] add to id8 PredName("minLeaf")
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[slotted_egraphs::egraph::rebuild] from update_analysis id8 PredName("minLeaf")
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[entry::chc] calling merge to id8
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id8
[slotted_egraphs::egraph::rebuild] end of handle_pending id8: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[entry::chc] calling make on Number(1)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id9
[slotted_egraphs::egraph::add] add to id9 Number(1)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id9
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[slotted_egraphs::egraph::add] remove from id9 Number(1)
[slotted_egraphs::egraph::add] add to id9 Number(1)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id9 Number(1)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[entry::chc] calling make on Number(1)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[entry::chc] calling merge to id9
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id9
[slotted_egraphs::egraph::rebuild] end of handle_pending id9: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ()), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f9, $f10}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
[entry::chc] get {$f9: Int, $f10: Int}
[slotted_egraphs::egraph::add] classes insert id10
[slotted_egraphs::egraph::add] add to id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id10
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] remove from id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::add] add to id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f9, $f10}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
[entry::chc] get {$f9: Int, $f10: Int}
[entry::chc] calling merge to id10
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] eclassSlots {$f10, $f9}
[entry::chc] result varTypes {$f10: Int, $f9: Int}
[slotted_egraphs::egraph] updating data for id10
[slotted_egraphs::egraph::rebuild] end of handle_pending id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id7: ($f7 -> $0, $f8 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::union] r: id10: ($f9 -> $0, $f10 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::union] Call move_to id7: ($f7 -> $0, $f8 -> $1), id10: ($f9 -> $0, $f10 -> $1)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
[entry::chc] calling merge to id10
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] eclassSlots {$f10, $f9}
[entry::chc] result varTypes {$f9: Int, $f10: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[slotted_egraphs::egraph] updating data for id10
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] remove from id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] add to id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), []) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id10
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] remove from id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] add to id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f9, $f10}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id6, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
[entry::chc] get {$f9: Int, $f10: Int}
[entry::chc] calling merge to id10
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f9: Int, $f10: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] eclassSlots {$f10, $f9}
[entry::chc] result varTypes {$f10: Int, $f9: Int}
[slotted_egraphs::egraph] updating data for id10
[slotted_egraphs::egraph::rebuild] end of handle_pending id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::parse] from (new (pred <(int $0) (int $1)>) (and <(eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1))>) <(init minLeaf (pred <(node $3) (int $5)>)) (init minLeaf (pred <(node $4) (int $6)>)) (init min (pred <(int $5) (int $6) (int $7)>))>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $2)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $3)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $4)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $2) (node $3) (node $4))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $0) (binode (int $2) (node $3) (node $4)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (int $7) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $1) (+ (int $7) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $3)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $3) (int $5))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $3) (int $5)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $4)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $4) (int $6))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $4) (int $6)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 min
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init min (pred (int $5) (int $6) (int $7)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $0) (int $1)) (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1))) (init minLeaf (pred (node $3) (int $5))) (init minLeaf (pred (node $4) (int $6))) (init min (pred (int $5) (int $6) (int $7))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($2)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $2)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($3)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $3))
[entry::chc] calling make on Node($f11)
[entry::chc] result {$f11: Node}
[slotted_egraphs::egraph::add] classes insert id11
[slotted_egraphs::egraph::add] add to id11 Node($0)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id11
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[slotted_egraphs::egraph::add] remove from id11 Node($0)
[slotted_egraphs::egraph::add] add to id11 Node($0)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id11 Node($0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] calling make on Node($0)
[entry::chc] exists in egraph
[entry::chc] result {$f11: Node}
[entry::chc] calling merge to id11
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f11: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f11: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] eclassSlots {$f11}
[entry::chc] result varTypes {$f11: Node}
[slotted_egraphs::egraph] updating data for id11
[slotted_egraphs::egraph::rebuild] end of handle_pending id11: ($f11 -> $f11)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $3)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($4)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $4)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id0: ($f0 -> $2), id11: ($f11 -> $3), id11: ($f11 -> $4))
[slotted_egraphs::egraph::add] ret (BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2)), ($0 -> $2, $1 -> $3, $2 -> $4))
[entry::chc] calling make on BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f12, $f13, $f14}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
[entry::chc] get {$f12: Int, $f13: Node, $f14: Node}
[slotted_egraphs::egraph::add] classes insert id12
[slotted_egraphs::egraph::add] add to id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f13: Node, $f14: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[slotted_egraphs::egraph::add] remove from id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::add] add to id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f13: Node, $f14: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f13: Node, $f14: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] calling make on BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f12, $f13, $f14}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
[entry::chc] get {$f12: Int, $f13: Node, $f14: Node}
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f13: Node, $f14: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f12: Int, $f13: Node, $f14: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f12: Int, $f13: Node, $f14: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f13: Node, $f14: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] eclassSlots {$f14, $f13, $f12}
[entry::chc] result varTypes {$f12: Int, $f14: Node, $f13: Node}
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::rebuild] end of handle_pending id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (binode (int $2) (node $3) (node $4))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $0), id12: ($f12 -> $2, $f13 -> $3, $f14 -> $4))
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3)), ($0 -> $0, $1 -> $2, $2 -> $3, $3 -> $4))
[entry::chc] calling make on Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f15, $f16, $f17, $f18}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id12, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id12, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f17 to varTypes
[entry::chc] childId : id12, mapToS : $f14
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f18 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
[entry::chc] get {$f17: Node, $f15: Int, $f16: Int, $f18: Node}
[slotted_egraphs::egraph::add] classes insert id13
[slotted_egraphs::egraph::add] add to id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id13
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[slotted_egraphs::egraph::add] remove from id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::add] add to id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f15, $f16, $f17, $f18}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id12, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id12, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f17 to varTypes
[entry::chc] childId : id12, mapToS : $f14
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f18 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
[entry::chc] get {$f15: Int, $f16: Int, $f18: Node, $f17: Node}
[entry::chc] calling merge to id13
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f15: Int, $f16: Int, $f18: Node, $f17: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] eclassSlots {$f18, $f17, $f16, $f15}
[entry::chc] result varTypes {$f17: Node, $f15: Int, $f16: Int, $f18: Node}
[slotted_egraphs::egraph] updating data for id13
[slotted_egraphs::egraph::rebuild] end of handle_pending id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (eq (int $0) (binode (int $2) (node $3) (node $4)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id0: ($f0 -> $7), id9: ())
[slotted_egraphs::egraph::add] ret (Add(id0: ($f0 -> $0), id9: ()), ($0 -> $7))
[entry::chc] calling make on Add(id0: ($f0 -> $f19), id9: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f19}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f19 to varTypes
[entry::chc] aggregateVarType for Add(id0: ($f0 -> $f19), id9: ())
[entry::chc] get {$f19: Int}
[slotted_egraphs::egraph::add] classes insert id14
[slotted_egraphs::egraph::add] add to id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id14
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[slotted_egraphs::egraph::add] remove from id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::add] add to id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] calling make on Add(id0: ($f0 -> $0), id9: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f19}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f19 to varTypes
[entry::chc] aggregateVarType for Add(id0: ($f0 -> $f19), id9: ())
[entry::chc] get {$f19: Int}
[entry::chc] calling merge to id14
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f19: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f19: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] eclassSlots {$f19}
[entry::chc] result varTypes {$f19: Int}
[slotted_egraphs::egraph] updating data for id14
[slotted_egraphs::egraph::rebuild] end of handle_pending id14: ($f19 -> $f19)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> (+ (int $7) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $1), id14: ($f19 -> $7))
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id14: ($f19 -> $1)), ($0 -> $1, $1 -> $7))
[entry::chc] calling make on Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f20, $f21}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f20 to varTypes
[entry::chc] childId : id14, mapToS : $f19
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] adding $f21 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
[entry::chc] get {$f20: Int, $f21: Int}
[slotted_egraphs::egraph::add] classes insert id15
[slotted_egraphs::egraph::add] add to id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id15
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[slotted_egraphs::egraph::add] remove from id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::add] add to id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f20, $f21}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f20 to varTypes
[entry::chc] childId : id14, mapToS : $f19
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] adding $f21 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
[entry::chc] get {$f21: Int, $f20: Int}
[entry::chc] calling merge to id15
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f21: Int, $f20: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] eclassSlots {$f20, $f21}
[entry::chc] result varTypes {$f20: Int, $f21: Int}
[slotted_egraphs::egraph] updating data for id15
[slotted_egraphs::egraph::rebuild] end of handle_pending id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (eq (int $1) (+ (int $7) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id13: ($f15 -> $0, $f16 -> $2, $f17 -> $3, $f18 -> $4), id15: ($f20 -> $1, $f21 -> $7)])
[slotted_egraphs::egraph::add] ret (And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)]), ($0 -> $0, $1 -> $2, $2 -> $3, $3 -> $4, $4 -> $1, $5 -> $7))
[entry::chc] calling make on And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f22, $f23, $f24, $f25, $f26, $f27}
[entry::chc] childId : id13, mapToS : $f15
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id15, mapToS : $f20
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f23 to varTypes
[entry::chc] childId : id13, mapToS : $f16
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id13, mapToS : $f17
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id13, mapToS : $f18
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id15, mapToS : $f21
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f27 to varTypes
[entry::chc] aggregateVarType for And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
[entry::chc] get {$f23: Int, $f26: Node, $f24: Int, $f25: Node, $f27: Int, $f22: Int}
[slotted_egraphs::egraph::add] classes insert id16
[slotted_egraphs::egraph::add] add to id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id16
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f26: Node, $f24: Int, $f25: Node, $f27: Int, $f22: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[slotted_egraphs::egraph::add] remove from id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::add] add to id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f26: Node, $f24: Int, $f25: Node, $f27: Int, $f22: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f26: Node, $f24: Int, $f25: Node, $f27: Int, $f22: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] calling make on And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f22, $f23, $f24, $f25, $f26, $f27}
[entry::chc] childId : id13, mapToS : $f15
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id15, mapToS : $f20
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f23 to varTypes
[entry::chc] childId : id13, mapToS : $f16
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id13, mapToS : $f17
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id13, mapToS : $f18
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id15, mapToS : $f21
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f27 to varTypes
[entry::chc] aggregateVarType for And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
[entry::chc] get {$f25: Node, $f26: Node, $f22: Int, $f23: Int, $f27: Int, $f24: Int}
[entry::chc] calling merge to id16
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f26: Node, $f24: Int, $f25: Node, $f27: Int, $f22: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f23: Int, $f26: Node, $f24: Int, $f25: Node, $f27: Int, $f22: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f25: Node, $f26: Node, $f22: Int, $f23: Int, $f27: Int, $f24: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f26: Node, $f24: Int, $f25: Node, $f27: Int, $f22: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] eclassSlots {$f26, $f25, $f24, $f23, $f22, $f27}
[entry::chc] result varTypes {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int}
[slotted_egraphs::egraph] updating data for id16
[slotted_egraphs::egraph::rebuild] end of handle_pending id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($3)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $3))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $3)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $3), id0: ($f0 -> $5)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)]), ($0 -> $3, $1 -> $5))
[entry::chc] calling make on PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f28, $f29}
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f28 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f29 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
[entry::chc] get {$f28: Node, $f29: Int}
[slotted_egraphs::egraph::add] classes insert id17
[slotted_egraphs::egraph::add] add to id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id17
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[slotted_egraphs::egraph::add] remove from id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] add to id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] calling make on PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f28, $f29}
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f28 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f29 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
[entry::chc] get {$f28: Node, $f29: Int}
[entry::chc] calling merge to id17
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] eclassSlots {$f29, $f28}
[entry::chc] result varTypes {$f28: Node, $f29: Int}
[slotted_egraphs::egraph] updating data for id17
[slotted_egraphs::egraph::rebuild] end of handle_pending id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (pred (node $3) (int $5))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id8: (), id17: ($f28 -> $3, $f29 -> $5))
[slotted_egraphs::egraph::add] ret (Init(id8: (), id17: ($f28 -> $0, $f29 -> $1)), ($0 -> $3, $1 -> $5))
[entry::chc] calling make on Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f30, $f31}
[entry::chc] childId : id17, mapToS : $f28
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id17, mapToS : $f29
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] aggregateVarType for Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
[entry::chc] get {$f30: Node, $f31: Int}
[slotted_egraphs::egraph::add] classes insert id18
[slotted_egraphs::egraph::add] add to id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id18
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Node, $f31: Int} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[slotted_egraphs::egraph::add] remove from id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::add] add to id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Node, $f31: Int} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Node, $f31: Int} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] calling make on Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f30, $f31}
[entry::chc] childId : id17, mapToS : $f28
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id17, mapToS : $f29
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] aggregateVarType for Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
[entry::chc] get {$f31: Int, $f30: Node}
[entry::chc] calling merge to id18
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Node, $f31: Int} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Node, $f31: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Node, $f31: Int} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] eclassSlots {$f31, $f30}
[entry::chc] result varTypes {$f31: Int, $f30: Node}
[slotted_egraphs::egraph] updating data for id18
[slotted_egraphs::egraph::rebuild] end of handle_pending id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (init minLeaf (pred (node $3) (int $5)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($4)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $4)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $4), id0: ($f0 -> $6)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)]), ($0 -> $4, $1 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (pred (node $4) (int $6))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id8: (), id17: ($f28 -> $4, $f29 -> $6))
[slotted_egraphs::egraph::add] ret (Init(id8: (), id17: ($f28 -> $0, $f29 -> $1)), ($0 -> $4, $1 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (init minLeaf (pred (node $4) (int $6)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("min")
[slotted_egraphs::egraph::add] ret (PredName("min"), ())
[entry::chc] calling make on PredName("min")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id19
[slotted_egraphs::egraph::add] add to id19 PredName("min")
[slotted_egraphs::egraph::rebuild] begin of handle_pending id19
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[slotted_egraphs::egraph::add] remove from id19 PredName("min")
[slotted_egraphs::egraph::add] add to id19 PredName("min")
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[slotted_egraphs::egraph::rebuild] from update_analysis id19 PredName("min")
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[entry::chc] calling make on PredName("min")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[entry::chc] calling merge to id19
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id19
[slotted_egraphs::egraph::rebuild] end of handle_pending id19: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $5), id0: ($f0 -> $6), id0: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f32, $f33, $f34}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f34 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
[entry::chc] get {$f33: Int, $f34: Int, $f32: Int}
[slotted_egraphs::egraph::add] classes insert id20
[slotted_egraphs::egraph::add] add to id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id20
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f33: Int, $f34: Int, $f32: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[slotted_egraphs::egraph::add] remove from id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::add] add to id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f33: Int, $f34: Int, $f32: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f33: Int, $f34: Int, $f32: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f32, $f33, $f34}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f34 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
[entry::chc] get {$f33: Int, $f32: Int, $f34: Int}
[entry::chc] calling merge to id20
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f33: Int, $f34: Int, $f32: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f33: Int, $f34: Int, $f32: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f33: Int, $f32: Int, $f34: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f33: Int, $f34: Int, $f32: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] eclassSlots {$f32, $f34, $f33}
[entry::chc] result varTypes {$f32: Int, $f33: Int, $f34: Int}
[slotted_egraphs::egraph] updating data for id20
[slotted_egraphs::egraph::rebuild] end of handle_pending id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id19: (), id20: ($f32 -> $5, $f33 -> $6, $f34 -> $7))
[slotted_egraphs::egraph::add] ret (Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2)), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f35, $f36, $f37}
[entry::chc] childId : id20, mapToS : $f32
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id20, mapToS : $f33
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id20, mapToS : $f34
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f37 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
[entry::chc] get {$f36: Int, $f37: Int, $f35: Int}
[slotted_egraphs::egraph::add] classes insert id21
[slotted_egraphs::egraph::add] add to id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id21
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[slotted_egraphs::egraph::add] remove from id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::add] add to id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] calling make on Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f35, $f36, $f37}
[entry::chc] childId : id20, mapToS : $f32
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id20, mapToS : $f33
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id20, mapToS : $f34
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f37 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
[entry::chc] get {$f37: Int, $f36: Int, $f35: Int}
[entry::chc] calling merge to id21
[entry::chc] dump from merge c 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] x CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
[entry::chc] y CHCData { predNames: {"min"}, varTypes: {$f37: Int, $f36: Int, $f35: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] eclassSlots {$f37, $f36, $f35}
[entry::chc] result varTypes {$f35: Int, $f37: Int, $f36: Int}
[slotted_egraphs::egraph] updating data for id21
[slotted_egraphs::egraph::rebuild] end of handle_pending id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[slotted_egraphs::egraph::add] add_syn_expr: id21 <-> (init min (pred (int $5) (int $6) (int $7)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $7), [AppliedId(id18: ($f30 -> $3, $f31 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $5, $f36 -> $6, $f37 -> $7))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $3, $4 -> $4, $5 -> $7, $6 -> $5, $7 -> $6))
[entry::chc] calling make on New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f45 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
[entry::chc] get {$f38: Int, $f41: Node, $f40: Int, $f42: Node, $f43: Int, $f44: Int, $f39: Int, $f45: Int}
[slotted_egraphs::egraph::add] classes insert id22
[slotted_egraphs::egraph::add] add to id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id22
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f38: Int, $f41: Node, $f40: Int, $f42: Node, $f43: Int, $f44: Int, $f39: Int, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::add] remove from id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f38: Int, $f41: Node, $f40: Int, $f42: Node, $f43: Int, $f44: Int, $f39: Int, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f38: Int, $f41: Node, $f40: Int, $f42: Node, $f43: Int, $f44: Int, $f39: Int, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f45 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
[entry::chc] get {$f38: Int, $f42: Node, $f44: Int, $f43: Int, $f39: Int, $f41: Node, $f40: Int, $f45: Int}
[entry::chc] calling merge to id22
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f38: Int, $f41: Node, $f40: Int, $f42: Node, $f43: Int, $f44: Int, $f39: Int, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f38: Int, $f41: Node, $f40: Int, $f42: Node, $f43: Int, $f44: Int, $f39: Int, $f45: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f38: Int, $f42: Node, $f44: Int, $f43: Int, $f39: Int, $f41: Node, $f40: Int, $f45: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f38: Int, $f41: Node, $f40: Int, $f42: Node, $f43: Int, $f44: Int, $f39: Int, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[entry::chc] eclassSlots {$f43, $f42, $f41, $f40, $f39, $f38, $f45, $f44}
[entry::chc] result varTypes {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int}
[slotted_egraphs::egraph] updating data for id22
[slotted_egraphs::egraph::rebuild] end of handle_pending id22: ($f38 -> $f38, $f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42, $f43 -> $f43, $f44 -> $f44, $f45 -> $f45)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (new (pred (int $0) (int $1)) (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1))) (init minLeaf (pred (node $3) (int $5))) (init minLeaf (pred (node $4) (int $6))) (init min (pred (int $5) (int $6) (int $7))))
[slotted_egraphs::parse] from (interface minLeaf (pred <(int $0) (int $1)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 2
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(2)
[slotted_egraphs::egraph::add] ret (Number(2), ())
[entry::chc] calling make on Number(2)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id23
[slotted_egraphs::egraph::add] add to id23 Number(2)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id23
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[slotted_egraphs::egraph::add] remove from id23 Number(2)
[slotted_egraphs::egraph::add] add to id23 Number(2)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id23 Number(2)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[entry::chc] calling make on Number(2)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[entry::chc] calling merge to id23
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id23
[slotted_egraphs::egraph::rebuild] end of handle_pending id23: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> 2
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ()), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f46, $f47}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
[entry::chc] get {$f47: Int, $f46: Int}
[slotted_egraphs::egraph::add] classes insert id24
[slotted_egraphs::egraph::add] add to id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::add] remove from id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::add] add to id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
[entry::chc] get {$f46: Int, $f47: Int}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] eclassSlots {$f46, $f47}
[entry::chc] result varTypes {$f47: Int, $f46: Int}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id22: ($f38 -> $0, $f39 -> $1, $f40 -> $2, $f41 -> $3, $f42 -> $4, $f43 -> $5, $f44 -> $6, $f45 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $0, $f47 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id22: ($f38 -> $0, $f39 -> $1, $f40 -> $2, $f41 -> $3, $f42 -> $4, $f43 -> $5, $f44 -> $6, $f45 -> $7)
[slotted_egraphs::egraph::rebuild] cap {$0, $1}
[slotted_egraphs::egraph::rebuild] origcap {$f38, $f39}
[slotted_egraphs::egraph::rebuild] new cap {$f38, $f39}
[slotted_egraphs::egraph::rebuild] before change c.slots 
    CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::rebuild] after change c.slots 
    CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
    ($f38, $f39):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id22: ($f38 -> $0, $f39 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
    ($f38, $f39):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $0, $f47 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::union] Call move_to id22: ($f38 -> $0, $f39 -> $1), id24: ($f46 -> $0, $f47 -> $1)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] eclassSlots {$f46, $f47}
[entry::chc] result varTypes {$f46: Int, $f47: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f41: Node, $f39: Int, $f44: Int, $f43: Int, $f40: Int, $f42: Node, $f45: Int, $f38: Int} }
    ($f38, $f39):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::add] remove from id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f48, $f25 -> $f49, $f26 -> $f50, $f27 -> $f51), [AppliedId(id18: ($f30 -> $f49, $f31 -> $f52)), AppliedId(id18: ($f30 -> $f50, $f31 -> $f53)), AppliedId(id21: ($f35 -> $f52, $f36 -> $f53, $f37 -> $f51))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f48, $f25 -> $f49, $f26 -> $f50, $f27 -> $f51), [AppliedId(id18: ($f30 -> $f49, $f31 -> $f52)), AppliedId(id18: ($f30 -> $f50, $f31 -> $f53)), AppliedId(id21: ($f35 -> $f52, $f36 -> $f53, $f37 -> $f51))])
    
[slotted_egraphs::egraph::add] remove from id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47, $f54, $f55, $f56, $f57, $f58, $f59}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f59 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
[entry::chc] get {$f54: Int, $f55: Node, $f46: Int, $f47: Int, $f58: Int, $f56: Node, $f57: Int, $f59: Int}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f54: Int, $f55: Node, $f46: Int, $f47: Int, $f58: Int, $f56: Node, $f57: Int, $f59: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] eclassSlots {$f55, $f59, $f54, $f47, $f46, $f57, $f58, $f56}
[entry::chc] result varTypes {$f55: Node, $f54: Int, $f57: Int, $f58: Int, $f59: Int, $f46: Int, $f56: Node, $f47: Int}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f55: Node, $f54: Int, $f57: Int, $f58: Int, $f59: Int, $f46: Int, $f56: Node, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::parse] from (compose <(interface minLeaf (pred <(int $0) (int $1)>) 1) (interface minLeaf (pred <(int $0) (int $1)>) 2)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::parse] left tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 2
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (interface minLeaf (pred (int $0) (int $1)) 1) (interface minLeaf (pred (int $0) (int $1)) 2))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ()), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(2)
[slotted_egraphs::egraph::add] ret (Number(2), ())
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> 2
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ()), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f55: Node, $f54: Int, $f57: Int, $f58: Int, $f59: Int, $f46: Int, $f56: Node, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f55: Node, $f54: Int, $f57: Int, $f58: Int, $f59: Int, $f46: Int, $f56: Node, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f60: Int, $f61: Int}
[slotted_egraphs::egraph::add] classes insert id25
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id25
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f55: Node, $f54: Int, $f57: Int, $f58: Int, $f59: Int, $f46: Int, $f56: Node, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f55: Node, $f54: Int, $f57: Int, $f58: Int, $f59: Int, $f46: Int, $f56: Node, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f61: Int, $f60: Int}
[entry::chc] calling merge to id25
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f60: Int, $f61: Int}
[slotted_egraphs::egraph] updating data for id25
[slotted_egraphs::egraph::rebuild] end of handle_pending id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id25 <-> (compose (interface minLeaf (pred (int $0) (int $1)) 1) (interface minLeaf (pred (int $0) (int $1)) 2))

 == Egraph ==
CHCData { predNames: {}, varTypes: {$f0: Int} }
id0($f0):>> Int($f0)
 - Int($f0)

CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
id1($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
 - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])

CHCData { predNames: {}, varTypes: {} }
id2():>> Number(0)
 - Number(0)

CHCData { predNames: {}, varTypes: {$f3: Int} }
id3($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
 - Eq(id0: ($f0 -> $f3), id2: ())

CHCData { predNames: {}, varTypes: {} }
id4():>> Leaf
 - Leaf

CHCData { predNames: {}, varTypes: {$f4: Int} }
id5($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
 - Eq(id0: ($f0 -> $f4), id4: ())

CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
id6($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
 - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])

CHCData { predNames: {}, varTypes: {} }
id8():>> PredName("minLeaf")
 - PredName("minLeaf")

CHCData { predNames: {}, varTypes: {} }
id9():>> Number(1)
 - Number(1)

CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
id10($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
 - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
 - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())

CHCData { predNames: {}, varTypes: {$f11: Node} }
id11($f11):>> Node($f11)
 - Node($f11)

CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
id12($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
 - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))

CHCData { predNames: {}, varTypes: {$f17: Node, $f15: Int, $f16: Int, $f18: Node} }
id13($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
 - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))

CHCData { predNames: {}, varTypes: {$f19: Int} }
id14($f19):>> Add(id0: ($f0 -> $f19), id9: ())
 - Add(id0: ($f0 -> $f19), id9: ())

CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
id15($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
 - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))

CHCData { predNames: {}, varTypes: {$f25: Node, $f22: Int, $f26: Node, $f27: Int, $f23: Int, $f24: Int} }
id16($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
 - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])

CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
id17($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
 - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
id18($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
 - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))

CHCData { predNames: {}, varTypes: {} }
id19():>> PredName("min")
 - PredName("min")

CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
id20($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
 - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])

CHCData { predNames: {"min"}, varTypes: {$f35: Int, $f37: Int, $f36: Int} }
id21($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
 - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))

CHCData { predNames: {}, varTypes: {} }
id23():>> Number(2)
 - Number(2)

CHCData { predNames: {"minLeaf"}, varTypes: {$f55: Node, $f54: Int, $f57: Int, $f58: Int, $f59: Int, $f46: Int, $f56: Node, $f47: Int} }
id24($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
 - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])

CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
id25($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
 - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
test chc::tst::tst3 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 73 filtered out; finished in 0.05s


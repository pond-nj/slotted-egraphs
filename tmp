   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.75s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
p_compose = (compose <(new (pred P <$0 $1>) (true) <(compose <(new (pred Q <$0 $1>) (true) <(compose <(new (pred R1 <$0>) (true) <>)>) (compose <(new (pred R2 <$1>) (true) <>)>)>)>)>)>)
[slotted_egraphs::parse] 
    s = "(compose <(new (pred P <$0 $1>) (true) <(compose <(new (pred Q <$0 $1>) (true) <(compose <(new (pred R1 <$0>) (true) <>)>) (compose <(new (pred R2 <$1>) (true) <>)>)>)>)>)>)"
[slotted_egraphs::parse] tokenize: ret = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("P"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] second case
[entry::chc] from_syntax::elems = [String("P")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("P")]
[slotted_egraphs::parse] node2 = Some(PredName("P"))
[entry::chc] from_syntax::elems = [String("P")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("P")]
[slotted_egraphs::parse] parse_pattern_nosubst ret3 = ENode(PredName("P"), [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredName(
            "P",
        ),
        [],
    ), pat_display = P
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredName("P"), [])), [LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret2 = Slot($0)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret2 = Slot($1)
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Slot($0), Slot($1)])
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some([$0, $1])
[entry::chc] fields: [$0, $1]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0, $1]))
[slotted_egraphs::parse] node1 = Some(PredSyntax(id0, map-[], [$0, $1]))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some([$0, $1])
[entry::chc] fields: [$0, $1]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0, $1]))
[slotted_egraphs::parse] node = PredSyntax(id0, map-[], [$0, $1])
[slotted_egraphs::parse] before syntax_elems = [String("pred"), Pattern(ENode(PredName("P"), [])), Vec([Slot($0), Slot($1)])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredName("P"), [])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredSyntax(
            id0, map-[],
            [
                $0,
                $1,
            ],
        ),
        [
            ENode(
                PredName(
                    "P",
                ),
                [],
            ),
        ],
    ), pat_display = (pred P $0 $1)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])])), [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node1 = Some(True)
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node = True
[slotted_egraphs::parse] before syntax_elems = [String("true")]
[slotted_egraphs::parse] transformed syntax_elems = []
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(True, [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        True,
        [],
    ), pat_display = true
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(True, [])), [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("Q"), LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] second case
[entry::chc] from_syntax::elems = [String("Q")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("Q")]
[slotted_egraphs::parse] node2 = Some(PredName("Q"))
[entry::chc] from_syntax::elems = [String("Q")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("Q")]
[slotted_egraphs::parse] parse_pattern_nosubst ret3 = ENode(PredName("Q"), [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredName(
            "Q",
        ),
        [],
    ), pat_display = Q
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredName("Q"), [])), [LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret2 = Slot($0)
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret2 = Slot($1)
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Slot($0), Slot($1)])
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some([$0, $1])
[entry::chc] fields: [$0, $1]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0, $1]))
[slotted_egraphs::parse] node1 = Some(PredSyntax(id0, map-[], [$0, $1]))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0), Slot($1)])]
[entry::chc] tmp = Some([$0, $1])
[entry::chc] fields: [$0, $1]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0, $1]))
[slotted_egraphs::parse] node = PredSyntax(id0, map-[], [$0, $1])
[slotted_egraphs::parse] before syntax_elems = [String("pred"), Pattern(ENode(PredName("Q"), [])), Vec([Slot($0), Slot($1)])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredName("Q"), [])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredSyntax(
            id0, map-[],
            [
                $0,
                $1,
            ],
        ),
        [
            ENode(
                PredName(
                    "Q",
                ),
                [],
            ),
        ],
    ), pat_display = (pred Q $0 $1)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])])), [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node1 = Some(True)
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node = True
[slotted_egraphs::parse] before syntax_elems = [String("true")]
[slotted_egraphs::parse] transformed syntax_elems = []
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(True, [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        True,
        [],
    ), pat_display = true
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(True, [])), [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R1"), LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] second case
[entry::chc] from_syntax::elems = [String("R1")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("R1")]
[slotted_egraphs::parse] node2 = Some(PredName("R1"))
[entry::chc] from_syntax::elems = [String("R1")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("R1")]
[slotted_egraphs::parse] parse_pattern_nosubst ret3 = ENode(PredName("R1"), [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredName(
            "R1",
        ),
        [],
    ), pat_display = R1
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredName("R1"), [])), [LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($0), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret2 = Slot($0)
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Slot($0)])
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0)])]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($0)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0)])]
[entry::chc] tmp = Some([$0])
[entry::chc] fields: [$0]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0]))
[slotted_egraphs::parse] node1 = Some(PredSyntax(id0, map-[], [$0]))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($0)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($0)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($0)])]
[entry::chc] tmp = Some([$0])
[entry::chc] fields: [$0]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$0]))
[slotted_egraphs::parse] node = PredSyntax(id0, map-[], [$0])
[slotted_egraphs::parse] before syntax_elems = [String("pred"), Pattern(ENode(PredName("R1"), [])), Vec([Slot($0)])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredName("R1"), [])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredSyntax(
            id0, map-[],
            [
                $0,
            ],
        ),
        [
            ENode(
                PredName(
                    "R1",
                ),
                [],
            ),
        ],
    ), pat_display = (pred R1 $0)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])])), [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node1 = Some(True)
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node = True
[slotted_egraphs::parse] before syntax_elems = [String("true")]
[slotted_egraphs::parse] transformed syntax_elems = []
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(True, [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        True,
        [],
    ), pat_display = true
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(True, [])), [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([])
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] tmp = Some([])
[entry::chc] fields: []
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], []))
[slotted_egraphs::parse] node1 = Some(New(id0, map-[], id0, map-[], []))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] tmp = Some([])
[entry::chc] fields: []
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], []))
[slotted_egraphs::parse] node = New(id0, map-[], id0, map-[], [])
[slotted_egraphs::parse] before syntax_elems = [String("new"), Pattern(ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])])), Pattern(ENode(True, [])), Vec([])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        New(
            id0, map-[],
            id0, map-[],
            [],
        ),
        [
            ENode(
                PredSyntax(
                    id0, map-[],
                    [
                        $0,
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R1",
                        ),
                        [],
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ), pat_display = (new (pred R1 $0) true)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])), [RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])]))])
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node1 = Some(Compose([AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node = Compose([AppliedId(id0, map-[])])
[slotted_egraphs::parse] before syntax_elems = [String("compose"), Vec([Pattern(ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])]))])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0, map-[],
                            [
                                $0,
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "R1",
                                ),
                                [],
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                ],
            ),
        ],
    ), pat_display = (compose (new (pred R1 $0) true))
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])])), [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("pred"), Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [Ident("R2"), LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] second case
[entry::chc] from_syntax::elems = [String("R2")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("R2")]
[slotted_egraphs::parse] node2 = Some(PredName("R2"))
[entry::chc] from_syntax::elems = [String("R2")]
[entry::chc] Calling from_syntax_arms2
L(Bare)::from_syntax with elems = [String("R2")]
[slotted_egraphs::parse] parse_pattern_nosubst ret3 = ENode(PredName("R2"), [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredName(
            "R2",
        ),
        [],
    ), pat_display = R2
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredName("R2"), [])), [LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Slot($1), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret2 = Slot($1)
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Slot($1)])
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($1)])]
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($1)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($1)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($1)])]
[entry::chc] tmp = Some([$1])
[entry::chc] fields: [$1]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$1]))
[slotted_egraphs::parse] node1 = Some(PredSyntax(id0, map-[], [$1]))
[entry::chc] from_syntax::elems = [String("pred"), AppliedId(id0, map-[]), Vec([Slot($1)])]
[entry::chc] children: [AppliedId(id0, map-[]), Vec([Slot($1)])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Slot($1)])]
[entry::chc] tmp = Some([$1])
[entry::chc] fields: [$1]
[entry::chc] from_syntax::ret = Some(PredSyntax(id0, map-[], [$1]))
[slotted_egraphs::parse] node = PredSyntax(id0, map-[], [$1])
[slotted_egraphs::parse] before syntax_elems = [String("pred"), Pattern(ENode(PredName("R2"), [])), Vec([Slot($1)])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredName("R2"), [])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        PredSyntax(
            id0, map-[],
            [
                $1,
            ],
        ),
        [
            ENode(
                PredName(
                    "R2",
                ),
                [],
            ),
        ],
    ), pat_display = (pred R2 $1)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])])), [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node1 = Some(True)
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node = True
[slotted_egraphs::parse] before syntax_elems = [String("true")]
[slotted_egraphs::parse] transformed syntax_elems = []
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(True, [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        True,
        [],
    ), pat_display = true
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(True, [])), [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([])
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] tmp = Some([])
[entry::chc] fields: []
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], []))
[slotted_egraphs::parse] node1 = Some(New(id0, map-[], id0, map-[], []))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([])]
[entry::chc] tmp = Some([])
[entry::chc] fields: []
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], []))
[slotted_egraphs::parse] node = New(id0, map-[], id0, map-[], [])
[slotted_egraphs::parse] before syntax_elems = [String("new"), Pattern(ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])])), Pattern(ENode(True, [])), Vec([])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        New(
            id0, map-[],
            id0, map-[],
            [],
        ),
        [
            ENode(
                PredSyntax(
                    id0, map-[],
                    [
                        $1,
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "R2",
                        ),
                        [],
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
        ],
    ), pat_display = (new (pred R2 $1) true)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])), [RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])]))])
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node1 = Some(Compose([AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node = Compose([AppliedId(id0, map-[])])
[slotted_egraphs::parse] before syntax_elems = [String("compose"), Vec([Pattern(ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])]))])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0, map-[],
                            [
                                $1,
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "R2",
                                ),
                                [],
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                ],
            ),
        ],
    ), pat_display = (compose (new (pred R2 $1) true))
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])), [RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])])), Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])]))])
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[]), AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[]), AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node1 = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[]), AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[]), AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node = New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])])
[slotted_egraphs::parse] before syntax_elems = [String("new"), Pattern(ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])])), Pattern(ENode(True, [])), Vec([Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])])), Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])]))])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        New(
            id0, map-[],
            id0, map-[],
            [
                AppliedId(
                    id0, map-[],
                ),
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                PredSyntax(
                    id0, map-[],
                    [
                        $0,
                        $1,
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "Q",
                        ),
                        [],
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0, map-[],
                            id0, map-[],
                            [],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0, map-[],
                                    [
                                        $0,
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "R1",
                                        ),
                                        [],
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                        ],
                    ),
                ],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0, map-[],
                            id0, map-[],
                            [],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0, map-[],
                                    [
                                        $1,
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "R2",
                                        ),
                                        [],
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ), pat_display = (new (pred Q $0 $1) true (compose (new (pred R1 $0) true)) (compose (new (pred R2 $1) true)))
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])), [RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])]))])
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node1 = Some(Compose([AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node = Compose([AppliedId(id0, map-[])])
[slotted_egraphs::parse] before syntax_elems = [String("compose"), Vec([Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])]))])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                        AppliedId(
                            id0, map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0, map-[],
                            [
                                $0,
                                $1,
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "Q",
                                ),
                                [],
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0, map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0, map-[],
                                    id0, map-[],
                                    [],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0, map-[],
                                            [
                                                $0,
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "R1",
                                                ),
                                                [],
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0, map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0, map-[],
                                    id0, map-[],
                                    [],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0, map-[],
                                            [
                                                $1,
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "R2",
                                                ),
                                                [],
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ), pat_display = (compose (new (pred Q $0 $1) true (compose (new (pred R1 $0) true)) (compose (new (pred R2 $1) true))))
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])), [RVecBracket, RParen, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])]))])
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[])])]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[])])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node1 = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[])])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node = New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])])
[slotted_egraphs::parse] before syntax_elems = [String("new"), Pattern(ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])])), Pattern(ENode(True, [])), Vec([Pattern(ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])]))])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        New(
            id0, map-[],
            id0, map-[],
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                PredSyntax(
                    id0, map-[],
                    [
                        $0,
                        $1,
                    ],
                ),
                [
                    ENode(
                        PredName(
                            "P",
                        ),
                        [],
                    ),
                ],
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        New(
                            id0, map-[],
                            id0, map-[],
                            [
                                AppliedId(
                                    id0, map-[],
                                ),
                                AppliedId(
                                    id0, map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                PredSyntax(
                                    id0, map-[],
                                    [
                                        $0,
                                        $1,
                                    ],
                                ),
                                [
                                    ENode(
                                        PredName(
                                            "Q",
                                        ),
                                        [],
                                    ),
                                ],
                            ),
                            ENode(
                                True,
                                [],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0, map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0, map-[],
                                            id0, map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0, map-[],
                                                    [
                                                        $0,
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R1",
                                                        ),
                                                        [],
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                            ENode(
                                Compose(
                                    [
                                        AppliedId(
                                            id0, map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        New(
                                            id0, map-[],
                                            id0, map-[],
                                            [],
                                        ),
                                        [
                                            ENode(
                                                PredSyntax(
                                                    id0, map-[],
                                                    [
                                                        $1,
                                                    ],
                                                ),
                                                [
                                                    ENode(
                                                        PredName(
                                                            "R2",
                                                        ),
                                                        [],
                                                    ),
                                                ],
                                            ),
                                            ENode(
                                                True,
                                                [],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ), pat_display = (new (pred P $0 $1) true (compose (new (pred Q $0 $1) true (compose (new (pred R1 $0) true)) (compose (new (pred R2 $1) true)))))
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])])), [RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])]))])
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node1 = Some(Compose([AppliedId(id0, map-[])]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[])])]
[entry::chc] children: [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[entry::chc] tmp = Some([AppliedId(id0, map-[])])
[entry::chc] fields: [AppliedId(id0, map-[])]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[])]))
[slotted_egraphs::parse] node = Compose([AppliedId(id0, map-[])])
[slotted_egraphs::parse] before syntax_elems = [String("compose"), Vec([Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])]))])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])])]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])])])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                    ],
                ),
                [
                    ENode(
                        PredSyntax(
                            id0, map-[],
                            [
                                $0,
                                $1,
                            ],
                        ),
                        [
                            ENode(
                                PredName(
                                    "P",
                                ),
                                [],
                            ),
                        ],
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                AppliedId(
                                    id0, map-[],
                                ),
                            ],
                        ),
                        [
                            ENode(
                                New(
                                    id0, map-[],
                                    id0, map-[],
                                    [
                                        AppliedId(
                                            id0, map-[],
                                        ),
                                        AppliedId(
                                            id0, map-[],
                                        ),
                                    ],
                                ),
                                [
                                    ENode(
                                        PredSyntax(
                                            id0, map-[],
                                            [
                                                $0,
                                                $1,
                                            ],
                                        ),
                                        [
                                            ENode(
                                                PredName(
                                                    "Q",
                                                ),
                                                [],
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        True,
                                        [],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0, map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0, map-[],
                                                    id0, map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0, map-[],
                                                            [
                                                                $0,
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R1",
                                                                ),
                                                                [],
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                    ENode(
                                        Compose(
                                            [
                                                AppliedId(
                                                    id0, map-[],
                                                ),
                                            ],
                                        ),
                                        [
                                            ENode(
                                                New(
                                                    id0, map-[],
                                                    id0, map-[],
                                                    [],
                                                ),
                                                [
                                                    ENode(
                                                        PredSyntax(
                                                            id0, map-[],
                                                            [
                                                                $1,
                                                            ],
                                                        ),
                                                        [
                                                            ENode(
                                                                PredName(
                                                                    "R2",
                                                                ),
                                                                [],
                                                            ),
                                                        ],
                                                    ),
                                                    ENode(
                                                        True,
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ), pat_display = (compose (new (pred P $0 $1) true (compose (new (pred Q $0 $1) true (compose (new (pred R1 $0) true)) (compose (new (pred R2 $1) true))))))
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredName("P"), [])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(True, [])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredName("Q"), [])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(True, [])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredName("R1"), [])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(True, [])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(PredName("R2"), [])
[slotted_egraphs::rewrite::pattern] pattern_to_re input pat = ENode(True, [])
[slotted_egraphs::parse] RecExpr::parse: ret = ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("P"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), AppliedId(id0, map-[])]), [ENode(PredSyntax(id0, map-[], [$0, $1]), [ENode(PredName("Q"), [])]), ENode(True, []), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$0]), [ENode(PredName("R1"), [])]), ENode(True, [])])]), ENode(Compose([AppliedId(id0, map-[])]), [ENode(New(id0, map-[], id0, map-[], []), [ENode(PredSyntax(id0, map-[], [$1]), [ENode(PredName("R2"), [])]), ENode(True, [])])])])])])])
eg = 
 == Egraph ==
id0():>> PredName("P")
 - PredName("P")

id1($f0, $f1):>> PredSyntax(id0, map-[], [$f0, $f1])
 - PredSyntax(id0, map-[], [$f0, $f1])

id2():>> True
 - True

id3():>> PredName("Q")
 - PredName("Q")

id4($f2, $f3):>> PredSyntax(id3, map-[], [$f2, $f3])
 - PredSyntax(id3, map-[], [$f2, $f3])

id5():>> PredName("R1")
 - PredName("R1")

id6($f4):>> PredSyntax(id5, map-[], [$f4])
 - PredSyntax(id5, map-[], [$f4])

id7($f5):>> New(id6, map-[$f4 -> $f5], id2, map-[], [])
 - New(id6, map-[$f4 -> $f5], id2, map-[], [])

id8($f6):>> Compose([AppliedId(id7, map-[$f5 -> $f6])])
 - Compose([AppliedId(id7, map-[$f5 -> $f6])])

id9():>> PredName("R2")
 - PredName("R2")

id10($f7):>> PredSyntax(id9, map-[], [$f7])
 - PredSyntax(id9, map-[], [$f7])

id11($f8):>> New(id10, map-[$f7 -> $f8], id2, map-[], [])
 - New(id10, map-[$f7 -> $f8], id2, map-[], [])

id12($f9):>> Compose([AppliedId(id11, map-[$f8 -> $f9])])
 - Compose([AppliedId(id11, map-[$f8 -> $f9])])

id13($f10, $f11):>> New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
 - New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])

id14($f12, $f13):>> Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
 - Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])

id15($f14, $f15):>> New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
 - New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])

id16($f16, $f17):>> Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
 - Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])

[slotted_egraphs::parse] 
    s = "(compose <(new ?s (true) <(compose <*>) *>) *>)"
[slotted_egraphs::parse] tokenize: ret = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("new"), PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [PVar("s"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst ret1 = PVar("s")
[slotted_egraphs::parse] parse_pattern ret pat_struct = PVar(
        "s",
    ), pat_display = ?s
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(PVar("s")), [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node1 = Some(True)
[entry::chc] from_syntax::elems = [String("true")]
[entry::chc] children: []
[entry::chc] from_syntax::ret = Some(True)
[slotted_egraphs::parse] node = True
[slotted_egraphs::parse] before syntax_elems = [String("true")]
[slotted_egraphs::parse] transformed syntax_elems = []
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(True, [])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        True,
        [],
    ), pat_display = true
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(True, [])), [LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] Last case in parse_nested_syntax_elem, tok = [LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern input tok = [LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst input tok = [LParen, Ident("compose"), LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [LVecBracket, Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star, RVecBracket, RParen, Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Star])
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star])]
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star])]
[entry::chc] children: [Vec([Star])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star]
[entry::chc] tmp = Some([Star])
[entry::chc] fields: [Star]
[entry::chc] from_syntax::ret = Some(Compose([Star]))
[slotted_egraphs::parse] node1 = Some(Compose([Star]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([Star])]
[entry::chc] children: [Vec([Star])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([Star])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star]
[entry::chc] tmp = Some([Star])
[entry::chc] fields: [Star]
[entry::chc] from_syntax::ret = Some(Compose([Star]))
[slotted_egraphs::parse] node = Compose([Star])
[slotted_egraphs::parse] before syntax_elems = [String("compose"), Vec([Star])]
[slotted_egraphs::parse] transformed syntax_elems = [Star]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(Compose([Star]), [Star])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        Compose(
            [
                Star,
            ],
        ),
        [
            Star,
        ],
    ), pat_display = (compose *)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(Compose([Star]), [Star])), [Star, RVecBracket, RParen, Star, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star, RVecBracket, RParen, Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(Compose([Star]), [Star])), Star])
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star]
[entry::chc] tmp = Some([AppliedId(id0, map-[]), Star])
[entry::chc] fields: [AppliedId(id0, map-[]), Star]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]))
[slotted_egraphs::parse] node1 = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]))
[entry::chc] from_syntax::elems = [String("new"), AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] children: [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[entry::chc] tmp = Some(id0, map-[])
[entry::chc] fields: id0, map-[]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star]
[entry::chc] tmp = Some([AppliedId(id0, map-[]), Star])
[entry::chc] fields: [AppliedId(id0, map-[]), Star]
[entry::chc] from_syntax::ret = Some(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]))
[slotted_egraphs::parse] node = New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star])
[slotted_egraphs::parse] before syntax_elems = [String("new"), Pattern(PVar("s")), Pattern(ENode(True, [])), Vec([Pattern(ENode(Compose([Star]), [Star])), Star])]
[slotted_egraphs::parse] transformed syntax_elems = [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]), [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        New(
            id0, map-[],
            id0, map-[],
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
        [
            PVar(
                "s",
            ),
            ENode(
                True,
                [],
            ),
            ENode(
                Compose(
                    [
                        Star,
                    ],
                ),
                [
                    Star,
                ],
            ),
            Star,
        ],
    ), pat_display = (new ?s true (compose *) *)
[slotted_egraphs::parse] parse_nested_syntax_elem ret3 = Ok((Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]), [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star])), [Star, RVecBracket, RParen]))
[slotted_egraphs::parse] parse_nested_syntax_elem input tok = [Star, RVecBracket, RParen]
[slotted_egraphs::parse] parse_nested_syntax_elem ret1 = Vec([Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]), [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star])), Star])
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] children: [Vec([AppliedId(id0, map-[]), Star])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star]
[entry::chc] tmp = Some([AppliedId(id0, map-[]), Star])
[entry::chc] fields: [AppliedId(id0, map-[]), Star]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[]), Star]))
[slotted_egraphs::parse] node1 = Some(Compose([AppliedId(id0, map-[]), Star]))
[entry::chc] from_syntax::elems = [String("compose"), Vec([AppliedId(id0, map-[]), Star])]
[entry::chc] children: [Vec([AppliedId(id0, map-[]), Star])]
[slotted_egraphs::lang] vec<L>::from_syntax input elems = []
[slotted_egraphs::lang] vec<L>::from_syntax return None1
[slotted_egraphs::lang] vec<L>::from_syntax input elems = [Vec([AppliedId(id0, map-[]), Star])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [AppliedId(id0, map-[])]
[slotted_egraphs::lang] AppliedIdOrStar::from_syntax, elems: [Star]
[entry::chc] tmp = Some([AppliedId(id0, map-[]), Star])
[entry::chc] fields: [AppliedId(id0, map-[]), Star]
[entry::chc] from_syntax::ret = Some(Compose([AppliedId(id0, map-[]), Star]))
[slotted_egraphs::parse] node = Compose([AppliedId(id0, map-[]), Star])
[slotted_egraphs::parse] before syntax_elems = [String("compose"), Vec([Pattern(ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]), [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star])), Star])]
[slotted_egraphs::parse] transformed syntax_elems = [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]), [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star]), Star]
[slotted_egraphs::parse] parse_pattern_nosubst ret2 = ENode(Compose([AppliedId(id0, map-[]), Star]), [ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]), [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star]), Star])
[slotted_egraphs::parse] parse_pattern ret pat_struct = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                        Star,
                    ],
                ),
                [
                    PVar(
                        "s",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star,
                            ],
                        ),
                        [
                            Star,
                        ],
                    ),
                    Star,
                ],
            ),
            Star,
        ],
    ), pat_display = (compose (new ?s true (compose *) *) *)
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = ENode(
        Compose(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
        [
            ENode(
                New(
                    id0, map-[],
                    id0, map-[],
                    [
                        AppliedId(
                            id0, map-[],
                        ),
                        Star,
                    ],
                ),
                [
                    PVar(
                        "s",
                    ),
                    ENode(
                        True,
                        [],
                    ),
                    ENode(
                        Compose(
                            [
                                Star,
                            ],
                        ),
                        [
                            Star,
                        ],
                    ),
                    Star,
                ],
            ),
            Star,
        ],
    )
[slotted_egraphs::egraph] enodes_applied i = id0, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "P",
            ): ProvenSourceNode {
                elem: [],
                src_id: id0,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id0, map-[],
                [
                    $0,
                    $1,
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "P",
        ),
        ..
    }
enodes_applied result = [PredName("P")]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [PredName("P")]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(5)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id1, map-[$f0 -> $f0, $f1 -> $f1]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id0, map-[],
                [
                    $0,
                    $1,
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f0, $1 -> $f1],
                src_id: id1,
            },
        },
        slots: {
            $f0,
            $f1,
        },
        usages: {
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f0 -> $f0, $f1 -> $f1],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id0, map-[],
            [
                $f0,
                $f1,
            ],
        ),
        ..
    }
enodes_applied result = [PredSyntax(id0, map-[], [$f0, $f1])]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [PredSyntax(id0, map-[], [$f0, $f1])]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(1)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id2, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id2,
            },
        },
        slots: {},
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ),
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
enodes_applied result = [True]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [True]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(4)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id3, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "Q",
            ): ProvenSourceNode {
                elem: [],
                src_id: id3,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id3, map-[],
                [
                    $0,
                    $1,
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "Q",
        ),
        ..
    }
enodes_applied result = [PredName("Q")]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [PredName("Q")]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(5)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id4, map-[$f2 -> $f2, $f3 -> $f3]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id3, map-[],
                [
                    $0,
                    $1,
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f2, $1 -> $f3],
                src_id: id4,
            },
        },
        slots: {
            $f2,
            $f3,
        },
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f2 -> $f2, $f3 -> $f3],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id3, map-[],
            [
                $f2,
                $f3,
            ],
        ),
        ..
    }
enodes_applied result = [PredSyntax(id3, map-[], [$f2, $f3])]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [PredSyntax(id3, map-[], [$f2, $f3])]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(1)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id5, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredName(
                "R1",
            ): ProvenSourceNode {
                elem: [],
                src_id: id5,
            },
        },
        slots: {},
        usages: {
            PredSyntax(
                id5, map-[],
                [
                    $0,
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: PredName(
            "R1",
        ),
        ..
    }
enodes_applied result = [PredName("R1")]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [PredName("R1")]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(5)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id6, map-[$f4 -> $f4]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            PredSyntax(
                id5, map-[],
                [
                    $0,
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f4],
                src_id: id6,
            },
        },
        slots: {
            $f4,
        },
        usages: {
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f4 -> $f4],
            },
            next: None,
        },
        syn_enode: PredSyntax(
            id5, map-[],
            [
                $f4,
            ],
        ),
        ..
    }
enodes_applied result = [PredSyntax(id5, map-[], [$f4])]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [PredSyntax(id5, map-[], [$f4])]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(1)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id7, map-[$f5 -> $f5]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id7, map-[$f5 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: New(
            id6, map-[$f4 -> $f5],
            id2, map-[],
            [],
        ),
        ..
    }
enodes_applied result = [New(id6, map-[$f4 -> $f5], id2, map-[], [])]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [New(id6, map-[$f4 -> $f5], id2, map-[], [])]
[slotted_egraphs::rewrite::ematch] ematch_impl continue at Discriminant(3) != Discriminant(2)
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = []
[slotted_egraphs::egraph] enodes_applied i = id8, map-[$f6 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            Compose(
                [
                    AppliedId(
                        id7, map-[$f5 -> $0],
                    ),
                ],
            ): ProvenSourceNode {
                elem: [$0 -> $f6],
                src_id: id8,
            },
        },
        slots: {
            $f6,
        },
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f6 -> $f6],
            },
            next: None,
        },
        syn_enode: Compose(
            [
                AppliedId(
                    id7, map-[$f5 -> $f6],
                ),
            ],
        ),
        ..
    }
enodes_applied result = [Compose([AppliedId(id7, map-[$f5 -> $f6])])]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [Compose([AppliedId(id7, map-[$f5 -> $f6])])]
[slotted_egraphs::rewrite::ematch] ematch_node children_type [Vec([AppliedId(id0, map-[]), Star])] vs [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::lang] call vec_language_children_type_eq_with_star
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] call vec_language_children_type_eq_with_star
[slotted_egraphs::lang] a = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
            ],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] updated partial_slotmap = []
[slotted_egraphs::rewrite::ematch] eg = 
     == Egraph ==
    id0():>> PredName("P")
     - PredName("P")
    
    id1($f0, $f1):>> PredSyntax(id0, map-[], [$f0, $f1])
     - PredSyntax(id0, map-[], [$f0, $f1])
    
    id2():>> True
     - True
    
    id3():>> PredName("Q")
     - PredName("Q")
    
    id4($f2, $f3):>> PredSyntax(id3, map-[], [$f2, $f3])
     - PredSyntax(id3, map-[], [$f2, $f3])
    
    id5():>> PredName("R1")
     - PredName("R1")
    
    id6($f4):>> PredSyntax(id5, map-[], [$f4])
     - PredSyntax(id5, map-[], [$f4])
    
    id7($f5):>> New(id6, map-[$f4 -> $f5], id2, map-[], [])
     - New(id6, map-[$f4 -> $f5], id2, map-[], [])
    
    id8($f6):>> Compose([AppliedId(id7, map-[$f5 -> $f6])])
     - Compose([AppliedId(id7, map-[$f5 -> $f6])])
    
    id9():>> PredName("R2")
     - PredName("R2")
    
    id10($f7):>> PredSyntax(id9, map-[], [$f7])
     - PredSyntax(id9, map-[], [$f7])
    
    id11($f8):>> New(id10, map-[$f7 -> $f8], id2, map-[], [])
     - New(id10, map-[$f7 -> $f8], id2, map-[], [])
    
    id12($f9):>> Compose([AppliedId(id11, map-[$f8 -> $f9])])
     - Compose([AppliedId(id11, map-[$f8 -> $f9])])
    
    id13($f10, $f11):>> New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
     - New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
    
    id14($f12, $f13):>> Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
     - Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
    
    id15($f14, $f15):>> New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
     - New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
    
    id16($f16, $f17):>> Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
     - Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
    
[slotted_egraphs::rewrite::ematch] eclass_children = [
        id7, map-[$f5 -> $f6],
    ]
[slotted_egraphs::rewrite::ematch] pattern_children = [
        ENode(
            New(
                id0, map-[],
                id0, map-[],
                [
                    AppliedId(
                        id0, map-[],
                    ),
                    Star,
                ],
            ),
            [
                PVar(
                    "s",
                ),
                ENode(
                    True,
                    [],
                ),
                ENode(
                    Compose(
                        [
                            Star,
                        ],
                    ),
                    [
                        Star,
                    ],
                ),
                Star,
            ],
        ),
        Star,
    ]
[slotted_egraphs::rewrite::ematch] n_sh = Compose(
        [
            AppliedId(
                id0, map-[],
            ),
            Star,
        ],
    )
[slotted_egraphs::rewrite::ematch] clear_n2_sh = Compose(
        [
            AppliedId(
                id0, map-[],
            ),
        ],
    )
[slotted_egraphs::rewrite::ematch] ematch_node children_type [Vec([AppliedId(id0, map-[]), Star])] vs [Vec([AppliedId(id0, map-[])])]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] recursing down with ematch_impl with sub_pat = ENode(New(id0, map-[], id0, map-[], [AppliedId(id0, map-[]), Star]), [PVar("s"), ENode(True, []), ENode(Compose([Star]), [Star]), Star]), a = State { partial_subst: {}, partial_slotmap: [] }, sub_id = id7, map-[$f5 -> $f6]
[slotted_egraphs::egraph] enodes_applied i = id7, map-[$f5 -> $f6]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ): ProvenSourceNode {
                elem: [$0 -> $f5],
                src_id: id7,
            },
        },
        slots: {
            $f5,
        },
        usages: {
            Compose(
                [
                    AppliedId(
                        id7, map-[$f5 -> $0],
                    ),
                ],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [$f5 -> $f5],
            },
            next: None,
        },
        syn_enode: New(
            id6, map-[$f4 -> $f5],
            id2, map-[],
            [],
        ),
        ..
    }
enodes_applied result = [New(id6, map-[$f4 -> $f6], id2, map-[], [])]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [New(id6, map-[$f4 -> $f6], id2, map-[], [])]
[slotted_egraphs::rewrite::ematch] ematch_node children_type [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])] vs [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[slotted_egraphs::lang] call vec_language_children_type_eq_with_star
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        Star,
    ]
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::lang] call vec_language_children_type_eq_with_star
[slotted_egraphs::lang] a = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [
                AppliedId(
                    id0, map-[],
                ),
                Star,
            ],
        ),
    ]
[slotted_egraphs::lang] b = [
        AppliedId(
            id0, map-[],
        ),
        AppliedId(
            id0, map-[],
        ),
        Vec(
            [],
        ),
    ]
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] updated partial_slotmap = []
[slotted_egraphs::rewrite::ematch] eg = 
     == Egraph ==
    id0():>> PredName("P")
     - PredName("P")
    
    id1($f0, $f1):>> PredSyntax(id0, map-[], [$f0, $f1])
     - PredSyntax(id0, map-[], [$f0, $f1])
    
    id2():>> True
     - True
    
    id3():>> PredName("Q")
     - PredName("Q")
    
    id4($f2, $f3):>> PredSyntax(id3, map-[], [$f2, $f3])
     - PredSyntax(id3, map-[], [$f2, $f3])
    
    id5():>> PredName("R1")
     - PredName("R1")
    
    id6($f4):>> PredSyntax(id5, map-[], [$f4])
     - PredSyntax(id5, map-[], [$f4])
    
    id7($f5):>> New(id6, map-[$f4 -> $f5], id2, map-[], [])
     - New(id6, map-[$f4 -> $f5], id2, map-[], [])
    
    id8($f6):>> Compose([AppliedId(id7, map-[$f5 -> $f6])])
     - Compose([AppliedId(id7, map-[$f5 -> $f6])])
    
    id9():>> PredName("R2")
     - PredName("R2")
    
    id10($f7):>> PredSyntax(id9, map-[], [$f7])
     - PredSyntax(id9, map-[], [$f7])
    
    id11($f8):>> New(id10, map-[$f7 -> $f8], id2, map-[], [])
     - New(id10, map-[$f7 -> $f8], id2, map-[], [])
    
    id12($f9):>> Compose([AppliedId(id11, map-[$f8 -> $f9])])
     - Compose([AppliedId(id11, map-[$f8 -> $f9])])
    
    id13($f10, $f11):>> New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
     - New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
    
    id14($f12, $f13):>> Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
     - Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
    
    id15($f14, $f15):>> New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
     - New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
    
    id16($f16, $f17):>> Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
     - Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
    
[slotted_egraphs::rewrite::ematch] eclass_children = [
        id6, map-[$f4 -> $f6],
        id2, map-[],
    ]
[slotted_egraphs::rewrite::ematch] pattern_children = [
        PVar(
            "s",
        ),
        ENode(
            True,
            [],
        ),
        ENode(
            Compose(
                [
                    Star,
                ],
            ),
            [
                Star,
            ],
        ),
        Star,
    ]
[slotted_egraphs::rewrite::ematch] n_sh = New(
        id0, map-[],
        id0, map-[],
        [
            AppliedId(
                id0, map-[],
            ),
            Star,
        ],
    )
[slotted_egraphs::rewrite::ematch] clear_n2_sh = New(
        id0, map-[],
        id0, map-[],
        [],
    )
[slotted_egraphs::rewrite::ematch] ematch_node children_type [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])] vs [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] recursing down with ematch_impl with sub_pat = PVar("s"), a = State { partial_subst: {}, partial_slotmap: [] }, sub_id = id6, map-[$f4 -> $f6]
st before insert = State {
    partial_subst: {},
    partial_slotmap: [],
}
st after insert = State {
    partial_subst: {
        "s": id6, map-[$f4 -> $f6],
    },
    partial_slotmap: [],
}
[slotted_egraphs::rewrite::ematch] eg = 
     == Egraph ==
    id0():>> PredName("P")
     - PredName("P")
    
    id1($f0, $f1):>> PredSyntax(id0, map-[], [$f0, $f1])
     - PredSyntax(id0, map-[], [$f0, $f1])
    
    id2():>> True
     - True
    
    id3():>> PredName("Q")
     - PredName("Q")
    
    id4($f2, $f3):>> PredSyntax(id3, map-[], [$f2, $f3])
     - PredSyntax(id3, map-[], [$f2, $f3])
    
    id5():>> PredName("R1")
     - PredName("R1")
    
    id6($f4):>> PredSyntax(id5, map-[], [$f4])
     - PredSyntax(id5, map-[], [$f4])
    
    id7($f5):>> New(id6, map-[$f4 -> $f5], id2, map-[], [])
     - New(id6, map-[$f4 -> $f5], id2, map-[], [])
    
    id8($f6):>> Compose([AppliedId(id7, map-[$f5 -> $f6])])
     - Compose([AppliedId(id7, map-[$f5 -> $f6])])
    
    id9():>> PredName("R2")
     - PredName("R2")
    
    id10($f7):>> PredSyntax(id9, map-[], [$f7])
     - PredSyntax(id9, map-[], [$f7])
    
    id11($f8):>> New(id10, map-[$f7 -> $f8], id2, map-[], [])
     - New(id10, map-[$f7 -> $f8], id2, map-[], [])
    
    id12($f9):>> Compose([AppliedId(id11, map-[$f8 -> $f9])])
     - Compose([AppliedId(id11, map-[$f8 -> $f9])])
    
    id13($f10, $f11):>> New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
     - New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
    
    id14($f12, $f13):>> Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
     - Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
    
    id15($f14, $f15):>> New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
     - New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
    
    id16($f16, $f17):>> Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
     - Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
    
[slotted_egraphs::rewrite::ematch] eclass_children = [
        id6, map-[$f4 -> $f6],
        id2, map-[],
    ]
[slotted_egraphs::rewrite::ematch] pattern_children = [
        PVar(
            "s",
        ),
        ENode(
            True,
            [],
        ),
        ENode(
            Compose(
                [
                    Star,
                ],
            ),
            [
                Star,
            ],
        ),
        Star,
    ]
[slotted_egraphs::rewrite::ematch] n_sh = New(
        id0, map-[],
        id0, map-[],
        [
            AppliedId(
                id0, map-[],
            ),
            Star,
        ],
    )
[slotted_egraphs::rewrite::ematch] clear_n2_sh = New(
        id0, map-[],
        id0, map-[],
        [],
    )
[slotted_egraphs::rewrite::ematch] ematch_node children_type [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])] vs [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]
[slotted_egraphs::rewrite::ematch] recurse down2
[slotted_egraphs::rewrite::ematch] recursing down with ematch_impl with sub_pat = ENode(True, []), a = State { partial_subst: {"s": id6, map-[$f4 -> $f6]}, partial_slotmap: [] }, sub_id = id2, map-[]
[slotted_egraphs::egraph] enodes_applied i = id2, map-[]
[slotted_egraphs::egraph] classes = EClass {
        nodes: {
            True: ProvenSourceNode {
                elem: [],
                src_id: id2,
            },
        },
        slots: {},
        usages: {
            New(
                id4, map-[$f2 -> $0, $f3 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id8, map-[$f6 -> $0],
                    ),
                    AppliedId(
                        id12, map-[$f9 -> $1],
                    ),
                ],
            ),
            New(
                id10, map-[$f7 -> $0],
                id2, map-[],
                [],
            ),
            New(
                id1, map-[$f0 -> $0, $f1 -> $1],
                id2, map-[],
                [
                    AppliedId(
                        id14, map-[$f12 -> $0, $f13 -> $1],
                    ),
                ],
            ),
            New(
                id6, map-[$f4 -> $0],
                id2, map-[],
                [],
            ),
        },
        group: Group {
            identity: ProvenPerm {
                elem: [],
            },
            next: None,
        },
        syn_enode: True,
        ..
    }
enodes_applied result = [True]
[slotted_egraphs::rewrite::ematch] ematch_impl enodes in eclass = [True]
[slotted_egraphs::rewrite::ematch] ematch_node children_type [] vs []
[slotted_egraphs::lang] call vec_language_children_type_eq_with_star
[slotted_egraphs::lang] a = []
[slotted_egraphs::lang] b = []
[slotted_egraphs::lang] return true 2
[slotted_egraphs::rewrite::ematch] updated partial_slotmap = []
[slotted_egraphs::rewrite::ematch] ematch_node return out = [
        State {
            partial_subst: {
                "s": id6, map-[$f4 -> $f6],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] ematch_impl, ENode case out = [
        State {
            partial_subst: {
                "s": id6, map-[$f4 -> $f6],
            },
            partial_slotmap: [],
        },
    ]
[slotted_egraphs::rewrite::ematch] eg = 
     == Egraph ==
    id0():>> PredName("P")
     - PredName("P")
    
    id1($f0, $f1):>> PredSyntax(id0, map-[], [$f0, $f1])
     - PredSyntax(id0, map-[], [$f0, $f1])
    
    id2():>> True
     - True
    
    id3():>> PredName("Q")
     - PredName("Q")
    
    id4($f2, $f3):>> PredSyntax(id3, map-[], [$f2, $f3])
     - PredSyntax(id3, map-[], [$f2, $f3])
    
    id5():>> PredName("R1")
     - PredName("R1")
    
    id6($f4):>> PredSyntax(id5, map-[], [$f4])
     - PredSyntax(id5, map-[], [$f4])
    
    id7($f5):>> New(id6, map-[$f4 -> $f5], id2, map-[], [])
     - New(id6, map-[$f4 -> $f5], id2, map-[], [])
    
    id8($f6):>> Compose([AppliedId(id7, map-[$f5 -> $f6])])
     - Compose([AppliedId(id7, map-[$f5 -> $f6])])
    
    id9():>> PredName("R2")
     - PredName("R2")
    
    id10($f7):>> PredSyntax(id9, map-[], [$f7])
     - PredSyntax(id9, map-[], [$f7])
    
    id11($f8):>> New(id10, map-[$f7 -> $f8], id2, map-[], [])
     - New(id10, map-[$f7 -> $f8], id2, map-[], [])
    
    id12($f9):>> Compose([AppliedId(id11, map-[$f8 -> $f9])])
     - Compose([AppliedId(id11, map-[$f8 -> $f9])])
    
    id13($f10, $f11):>> New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
     - New(id4, map-[$f2 -> $f10, $f3 -> $f11], id2, map-[], [AppliedId(id8, map-[$f6 -> $f10]), AppliedId(id12, map-[$f9 -> $f11])])
    
    id14($f12, $f13):>> Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
     - Compose([AppliedId(id13, map-[$f10 -> $f12, $f11 -> $f13])])
    
    id15($f14, $f15):>> New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
     - New(id1, map-[$f0 -> $f14, $f1 -> $f15], id2, map-[], [AppliedId(id14, map-[$f12 -> $f14, $f13 -> $f15])])
    
    id16($f16, $f17):>> Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
     - Compose([AppliedId(id15, map-[$f14 -> $f16, $f15 -> $f17])])
    
[slotted_egraphs::rewrite::ematch] eclass_children = [
        id6, map-[$f4 -> $f6],
        id2, map-[],
    ]
[slotted_egraphs::rewrite::ematch] pattern_children = [
        PVar(
            "s",
        ),
        ENode(
            True,
            [],
        ),
        ENode(
            Compose(
                [
                    Star,
                ],
            ),
            [
                Star,
            ],
        ),
        Star,
    ]
[slotted_egraphs::rewrite::ematch] n_sh = New(
        id0, map-[],
        id0, map-[],
        [
            AppliedId(
                id0, map-[],
            ),
            Star,
        ],
    )
[slotted_egraphs::rewrite::ematch] clear_n2_sh = New(
        id0, map-[],
        id0, map-[],
        [],
    )
[slotted_egraphs::rewrite::ematch] ematch_node children_type [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([AppliedId(id0, map-[]), Star])] vs [AppliedId(id0, map-[]), AppliedId(id0, map-[]), Vec([])]

thread 'chc::tst1' panicked at /home/pondnj/chc/project/slotted-egraphs/src/rewrite/ematch.rs:200:41:
index out of bounds: the len is 2 but the index is 2
stack backtrace:
   0: __rustc::rust_begin_unwind
             at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/std/src/panicking.rs:697:5
   1: core::panicking::panic_fmt
             at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:75:14
   2: core::panicking::panic_bounds_check
             at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/panicking.rs:280:5
   3: <usize as core::slice::index::SliceIndex<[T]>>::index
             at /home/pondnj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/index.rs:269:10
   4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index
             at /home/pondnj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/index.rs:17:15
   5: <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index
             at /home/pondnj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:3408:9
   6: slotted_egraphs::rewrite::ematch::ematch_node
             at ./src/rewrite/ematch.rs:200:41
   7: slotted_egraphs::rewrite::ematch::ematch_impl
             at ./src/rewrite/ematch.rs:79:17
   8: slotted_egraphs::rewrite::ematch::recurse_down_children_eclass
             at ./src/rewrite/ematch.rs:104:21
   9: slotted_egraphs::rewrite::ematch::ematch_node
             at ./src/rewrite/ematch.rs:203:19
  10: slotted_egraphs::rewrite::ematch::ematch_impl
             at ./src/rewrite/ematch.rs:79:17
  11: slotted_egraphs::rewrite::ematch::ematch_all
             at ./src/rewrite/ematch.rs:29:13
  12: entry::chc::unfold::{{closure}}
             at ./tests/chc/mod.rs:87:26
  13: slotted_egraphs::rewrite::RewriteT<L,N,T>::into::{{closure}}
             at ./src/rewrite/mod.rs:36:44
  14: slotted_egraphs::rewrite::apply_rewrites
             at ./src/rewrite/mod.rs:55:9
  15: slotted_egraphs::run::runner::Runner<L,N,IterData,CustomErrorT>::run_one
             at ./src/run/runner.rs:181:24
  16: slotted_egraphs::run::runner::Runner<L,N,IterData,CustomErrorT>::run
             at ./src/run/runner.rs:153:29
  17: entry::chc::tst1
             at ./tests/chc/mod.rs:154:25
  18: entry::chc::tst1::{{closure}}
             at ./tests/chc/mod.rs:120:10
  19: core::ops::function::FnOnce::call_once
             at /home/pondnj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:250:5
  20: core::ops::function::FnOnce::call_once
             at /rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2/library/core/src/ops/function.rs:250:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
test chc::tst1 ... FAILED

failures:

failures:
    chc::tst1

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 70 filtered out; finished in 0.05s

error: test failed, to rerun pass `--test entry`

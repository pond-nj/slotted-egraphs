warning: unused variable: `appId`
   --> src/rewrite/pattern.rs:103:15
    |
103 |     let Some((appId, someNode)) = constructENodefromPatternSubstInternal(eg, pattern, subst) else {
    |               ^^^^^ help: if this is intentional, prefix it with an underscore: `_appId`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `slotted-egraphs` (lib) generated 1 warning
   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
warning: `slotted-egraphs` (lib test) generated 1 warning (1 duplicate)
warning: static variable `gCounter` should have an upper case name
 --> tests/chc/rewrite.rs:9:8
  |
9 | static gCounter: AtomicUsize = AtomicUsize::new(0);
  |        ^^^^^^^^ help: convert the identifier to upper case: `G_COUNTER`
  |
  = note: `#[warn(non_upper_case_globals)]` on by default

warning: `slotted-egraphs` (test "entry") generated 1 warning
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.30s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-7db37e3e129514c0)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-9a9d60ae6aa2b312)

running 1 test
[slotted_egraphs::parse] from (init root (pred <(int $0) (node $1) (node $2) (int $3) (int $4)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("root"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen]
[entry::chc] calling make on PredName("root")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("root")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id0
[slotted_egraphs::egraph::add] add to id0 PredName("root")
[slotted_egraphs::egraph::add] remove from id0 PredName("root")
[slotted_egraphs::egraph::add] add to id0 PredName("root")
[entry::chc] calling make on PredName("root")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("root")
[entry::chc] get {}
[entry::chc] calling merge to id0
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> root
[entry::chc] calling make on Int($f0)
[entry::chc] result {$f0: Int}
[slotted_egraphs::egraph::add] classes insert id1
[slotted_egraphs::egraph::add] add to id1 Int($0)
[slotted_egraphs::egraph::add] remove from id1 Int($0)
[slotted_egraphs::egraph::add] add to id1 Int($0)
[entry::chc] calling make on Int($0)
[entry::chc] exists in egraph
[entry::chc] result {$f0: Int}
[entry::chc] calling merge to id1
[entry::chc] eclassSlots {$f0}
[entry::chc] result varTypes {$f0: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[entry::chc] calling make on Node($f1)
[entry::chc] result {$f1: Node}
[slotted_egraphs::egraph::add] classes insert id2
[slotted_egraphs::egraph::add] add to id2 Node($0)
[slotted_egraphs::egraph::add] remove from id2 Node($0)
[slotted_egraphs::egraph::add] add to id2 Node($0)
[entry::chc] calling make on Node($0)
[entry::chc] exists in egraph
[entry::chc] result {$f1: Node}
[entry::chc] calling merge to id2
[entry::chc] eclassSlots {$f1}
[entry::chc] result varTypes {$f1: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $1)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $2)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f2, $f3, $f4, $f5, $f6}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f2 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f3 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f4 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] get {$f4: Node, $f3: Node, $f2: Int, $f5: Int, $f6: Int}
[slotted_egraphs::egraph::add] classes insert id3
[slotted_egraphs::egraph::add] add to id3 PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[slotted_egraphs::egraph::add] remove from id3 PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[slotted_egraphs::egraph::add] add to id3 PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2, $f3, $f4, $f5, $f6}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f2 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f3 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f4 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] get {$f3: Node, $f6: Int, $f2: Int, $f4: Node, $f5: Int}
[entry::chc] calling merge to id3
[entry::chc] eclassSlots {$f2, $f6, $f5, $f4, $f3}
[entry::chc] result varTypes {$f3: Node, $f6: Int, $f4: Node, $f5: Int, $f2: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred (int $0) (node $1) (node $2) (int $3) (int $4))
[entry::chc] calling make on Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f7, $f8, $f9, $f10, $f11}
[entry::chc] childId : id3, mapToS : $f2
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id3, mapToS : $f4
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id3, mapToS : $f5
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id3, mapToS : $f6
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] get {$f11: Int, $f9: Node, $f10: Int, $f8: Node, $f7: Int}
[slotted_egraphs::egraph::add] classes insert id4
[slotted_egraphs::egraph::add] add to id4 Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[slotted_egraphs::egraph::add] remove from id4 Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[slotted_egraphs::egraph::add] add to id4 Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[entry::chc] calling make on Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f7, $f8, $f9, $f10, $f11}
[entry::chc] childId : id3, mapToS : $f2
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id3, mapToS : $f4
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id3, mapToS : $f5
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id3, mapToS : $f6
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] get {$f9: Node, $f7: Int, $f11: Int, $f8: Node, $f10: Int}
[entry::chc] calling merge to id4
[entry::chc] eclassSlots {$f8, $f7, $f11, $f10, $f9}
[entry::chc] result varTypes {$f8: Node, $f9: Node, $f7: Int, $f11: Int, $f10: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (init root (pred (int $0) (node $1) (node $2) (int $3) (int $4)))
[slotted_egraphs::parse] from (compose <(new (pred <>) (and <(geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))>) <(init leafDrop (pred <(int $0) (node $1) (node $2)>)) (init minLeaf (pred <(node $2) (int $3)>)) (init minLeaf (pred <(node $1) (int $4)>))>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($0), RParen, RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] calling make on PredSyntax([])
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredSyntax([])
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id5
[slotted_egraphs::egraph::add] add to id5 PredSyntax([])
[slotted_egraphs::egraph::add] remove from id5 PredSyntax([])
[slotted_egraphs::egraph::add] add to id5 PredSyntax([])
[entry::chc] calling make on PredSyntax([])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredSyntax([])
[entry::chc] get {}
[entry::chc] calling merge to id5
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[entry::chc] calling make on Number(0)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id6
[slotted_egraphs::egraph::add] add to id6 Number(0)
[slotted_egraphs::egraph::add] remove from id6 Number(0)
[slotted_egraphs::egraph::add] add to id6 Number(0)
[entry::chc] calling make on Number(0)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[entry::chc] calling merge to id6
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[entry::chc] calling make on Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f12}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f12 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] get {$f12: Int}
[slotted_egraphs::egraph::add] classes insert id7
[slotted_egraphs::egraph::add] add to id7 Geq(id1: ($f0 -> $0), id6: ())
[slotted_egraphs::egraph::add] remove from id7 Geq(id1: ($f0 -> $0), id6: ())
[slotted_egraphs::egraph::add] add to id7 Geq(id1: ($f0 -> $0), id6: ())
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id6: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f12}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f12 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] get {$f12: Int}
[entry::chc] calling merge to id7
[entry::chc] eclassSlots {$f12}
[entry::chc] result varTypes {$f12: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> (geq (int $0) 0)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[entry::chc] calling make on Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f13, $f14}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] get {$f14: Int, $f13: Int}
[slotted_egraphs::egraph::add] classes insert id8
[slotted_egraphs::egraph::add] add to id8 Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] remove from id8 Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] add to id8 Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f13, $f14}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] get {$f13: Int, $f14: Int}
[entry::chc] calling merge to id8
[entry::chc] eclassSlots {$f14, $f13}
[entry::chc] result varTypes {$f14: Int, $f13: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (+ (int $3) (int $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[entry::chc] calling make on Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f15, $f16, $f17}
[entry::chc] childId : id8, mapToS : $f13
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id8, mapToS : $f14
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f17 to varTypes
[entry::chc] aggregateVarType for Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] get {$f15: Int, $f16: Int, $f17: Int}
[slotted_egraphs::egraph::add] classes insert id9
[slotted_egraphs::egraph::add] add to id9 Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[slotted_egraphs::egraph::add] remove from id9 Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[slotted_egraphs::egraph::add] add to id9 Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[entry::chc] calling make on Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f15, $f16, $f17}
[entry::chc] childId : id8, mapToS : $f13
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id8, mapToS : $f14
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f17 to varTypes
[entry::chc] aggregateVarType for Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] get {$f16: Int, $f17: Int, $f15: Int}
[entry::chc] calling merge to id9
[entry::chc] eclassSlots {$f17, $f16, $f15}
[entry::chc] result varTypes {$f15: Int, $f17: Int, $f16: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (lt (+ (int $3) (int $0)) (int $4))
[entry::chc] calling make on And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f18, $f19, $f20}
[entry::chc] childId : id7, mapToS : $f12
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f15
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f16
[entry::chc] adding $f19 to varTypes
[entry::chc] childId : id9, mapToS : $f17
[entry::chc] adding $f20 to varTypes
[entry::chc] aggregateVarType for And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] get {$f19: Int, $f18: Int, $f20: Int}
[slotted_egraphs::egraph::add] classes insert id10
[slotted_egraphs::egraph::add] add to id10 And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[slotted_egraphs::egraph::add] remove from id10 And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[slotted_egraphs::egraph::add] add to id10 And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[entry::chc] calling make on And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f18, $f19, $f20}
[entry::chc] childId : id7, mapToS : $f12
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f15
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f16
[entry::chc] adding $f19 to varTypes
[entry::chc] childId : id9, mapToS : $f17
[entry::chc] adding $f20 to varTypes
[entry::chc] aggregateVarType for And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] get {$f20: Int, $f19: Int, $f18: Int}
[entry::chc] calling merge to id10
[entry::chc] eclassSlots {$f20, $f19, $f18}
[entry::chc] result varTypes {$f20: Int, $f19: Int, $f18: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4)))
[entry::chc] calling make on PredName("leafDrop")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("leafDrop")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id11
[slotted_egraphs::egraph::add] add to id11 PredName("leafDrop")
[slotted_egraphs::egraph::add] remove from id11 PredName("leafDrop")
[slotted_egraphs::egraph::add] add to id11 PredName("leafDrop")
[entry::chc] calling make on PredName("leafDrop")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("leafDrop")
[entry::chc] get {}
[entry::chc] calling merge to id11
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $1)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $2)
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f21, $f22, $f23}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f21 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f23 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] get {$f22: Node, $f23: Node, $f21: Int}
[slotted_egraphs::egraph::add] classes insert id12
[slotted_egraphs::egraph::add] add to id12 PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[slotted_egraphs::egraph::add] remove from id12 PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[slotted_egraphs::egraph::add] add to id12 PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f21, $f22, $f23}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f21 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f23 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] get {$f21: Int, $f23: Node, $f22: Node}
[entry::chc] calling merge to id12
[entry::chc] eclassSlots {$f23, $f22, $f21}
[entry::chc] result varTypes {$f23: Node, $f22: Node, $f21: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $0) (node $1) (node $2))
[entry::chc] calling make on Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] get {$f24: Int, $f26: Node, $f25: Node}
[slotted_egraphs::egraph::add] classes insert id13
[slotted_egraphs::egraph::add] add to id13 Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[slotted_egraphs::egraph::add] remove from id13 Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[slotted_egraphs::egraph::add] add to id13 Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[entry::chc] calling make on Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] get {$f24: Int, $f26: Node, $f25: Node}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f24: Int, $f26: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $0) (node $1) (node $2)))
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id14
[slotted_egraphs::egraph::add] add to id14 PredName("minLeaf")
[slotted_egraphs::egraph::add] remove from id14 PredName("minLeaf")
[slotted_egraphs::egraph::add] add to id14 PredName("minLeaf")
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[entry::chc] calling merge to id14
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $2)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[entry::chc] calling make on PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f27, $f28}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f28 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] get {$f27: Node, $f28: Int}
[slotted_egraphs::egraph::add] classes insert id15
[slotted_egraphs::egraph::add] add to id15 PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[slotted_egraphs::egraph::add] remove from id15 PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[slotted_egraphs::egraph::add] add to id15 PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[entry::chc] calling make on PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f27, $f28}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f28 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] get {$f27: Node, $f28: Int}
[entry::chc] calling merge to id15
[entry::chc] eclassSlots {$f28, $f27}
[entry::chc] result varTypes {$f28: Int, $f27: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $2) (int $3))
[entry::chc] calling make on Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] get {$f29: Node, $f30: Int}
[slotted_egraphs::egraph::add] classes insert id16
[slotted_egraphs::egraph::add] add to id16 Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[slotted_egraphs::egraph::add] remove from id16 Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[slotted_egraphs::egraph::add] add to id16 Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[entry::chc] calling make on Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] get {$f29: Node, $f30: Int}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Int, $f29: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $2) (int $3)))
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $1)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $1) (int $4))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $1) (int $4)))
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f31: Int, $f32: Node, $f35: Int, $f33: Node, $f34: Int}
[slotted_egraphs::egraph::add] classes insert id17
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[slotted_egraphs::egraph::add] remove from id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f32: Node, $f33: Node, $f35: Int, $f31: Int, $f34: Int}
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f33: Node, $f34: Int, $f31: Int, $f35: Int, $f32: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (new pred (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))) (init leafDrop (pred (int $0) (node $1) (node $2))) (init minLeaf (pred (node $2) (int $3))) (init minLeaf (pred (node $1) (int $4))))
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f36, $f37, $f38, $f39, $f40}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] get {$f37: Node, $f40: Int, $f39: Int, $f36: Int, $f38: Node}
[slotted_egraphs::egraph::add] classes insert id18
[slotted_egraphs::egraph::add] add to id18 Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[slotted_egraphs::egraph::add] remove from id18 Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[slotted_egraphs::egraph::add] add to id18 Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f36, $f37, $f38, $f39, $f40}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] get {$f36: Int, $f40: Int, $f39: Int, $f37: Node, $f38: Node}
[entry::chc] calling merge to id18
[entry::chc] eclassSlots {$f37, $f36, $f40, $f39, $f38}
[entry::chc] result varTypes {$f39: Int, $f37: Node, $f38: Node, $f36: Int, $f40: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (compose (new pred (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))) (init leafDrop (pred (int $0) (node $1) (node $2))) (init minLeaf (pred (node $2) (int $3))) (init minLeaf (pred (node $1) (int $4)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id18: ($f36 -> $0, $f37 -> $1, $f38 -> $2, $f39 -> $3, $f40 -> $4), id4: ($f7 -> $0, $f8 -> $1, $f9 -> $2, $f10 -> $3, $f11 -> $4)
[entry::chc] calling merge to id4
[entry::chc] eclassSlots {$f8, $f7, $f11, $f10, $f9}
[entry::chc] result varTypes {$f9: Node, $f7: Int, $f11: Int, $f10: Int, $f8: Node}
[slotted_egraphs::egraph::add] remove from id18 Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[slotted_egraphs::egraph::add] add to id4 Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))]) to self.pending
[slotted_egraphs::egraph::add] remove from id4 Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[slotted_egraphs::egraph::add] add to id4 Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f7, $f8, $f9, $f10, $f11}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[entry::chc] get {$f9: Node, $f11: Int, $f10: Int, $f7: Int, $f8: Node}
[entry::chc] calling merge to id4
[entry::chc] eclassSlots {$f8, $f7, $f11, $f10, $f9}
[entry::chc] result varTypes {$f10: Int, $f8: Node, $f9: Node, $f11: Int, $f7: Int}
[slotted_egraphs::parse] from (init min (pred <(int $5) (int $6) (int $7)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen]
[entry::chc] calling make on PredName("min")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id19
[slotted_egraphs::egraph::add] add to id19 PredName("min")
[slotted_egraphs::egraph::add] remove from id19 PredName("min")
[slotted_egraphs::egraph::add] add to id19 PredName("min")
[entry::chc] calling make on PredName("min")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[entry::chc] calling merge to id19
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f41, $f42, $f43}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f43 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
[entry::chc] get {$f41: Int, $f43: Int, $f42: Int}
[slotted_egraphs::egraph::add] classes insert id20
[slotted_egraphs::egraph::add] add to id20 PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[slotted_egraphs::egraph::add] remove from id20 PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[slotted_egraphs::egraph::add] add to id20 PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f41, $f42, $f43}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f43 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
[entry::chc] get {$f42: Int, $f43: Int, $f41: Int}
[entry::chc] calling merge to id20
[entry::chc] eclassSlots {$f43, $f42, $f41}
[entry::chc] result varTypes {$f43: Int, $f42: Int, $f41: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f44, $f45, $f46}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f46 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
[entry::chc] get {$f44: Int, $f45: Int, $f46: Int}
[slotted_egraphs::egraph::add] classes insert id21
[slotted_egraphs::egraph::add] add to id21 Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[slotted_egraphs::egraph::add] remove from id21 Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[slotted_egraphs::egraph::add] add to id21 Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f44, $f45, $f46}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f46 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
[entry::chc] get {$f44: Int, $f45: Int, $f46: Int}
[entry::chc] calling merge to id21
[entry::chc] eclassSlots {$f46, $f45, $f44}
[entry::chc] result varTypes {$f45: Int, $f46: Int, $f44: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id21 <-> (init min (pred (int $5) (int $6) (int $7)))
[slotted_egraphs::parse] from (new (pred <(int $5) (int $6) (int $7)>) (and <(lt (int $5) (int $6)) (eq (int $7) (int $5))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[entry::chc] calling make on Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f47, $f48}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f48 to varTypes
[entry::chc] aggregateVarType for Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
[entry::chc] get {$f47: Int, $f48: Int}
[slotted_egraphs::egraph::add] classes insert id22
[slotted_egraphs::egraph::add] add to id22 Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] remove from id22 Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] add to id22 Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f47, $f48}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f48 to varTypes
[entry::chc] aggregateVarType for Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
[entry::chc] get {$f48: Int, $f47: Int}
[entry::chc] calling merge to id22
[entry::chc] eclassSlots {$f48, $f47}
[entry::chc] result varTypes {$f47: Int, $f48: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (lt (int $5) (int $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[entry::chc] calling make on Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f49, $f50}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f49 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f50 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
[entry::chc] get {$f50: Int, $f49: Int}
[slotted_egraphs::egraph::add] classes insert id23
[slotted_egraphs::egraph::add] add to id23 Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] remove from id23 Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] add to id23 Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f49, $f50}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f49 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f50 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
[entry::chc] get {$f49: Int, $f50: Int}
[entry::chc] calling merge to id23
[entry::chc] eclassSlots {$f49, $f50}
[entry::chc] result varTypes {$f50: Int, $f49: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $5))
[entry::chc] calling make on And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f51, $f52, $f53}
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id22, mapToS : $f48
[entry::chc] adding $f52 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f53 to varTypes
[entry::chc] aggregateVarType for And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
[entry::chc] get {$f53: Int, $f51: Int, $f52: Int}
[slotted_egraphs::egraph::add] classes insert id24
[slotted_egraphs::egraph::add] add to id24 And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)])
[slotted_egraphs::egraph::add] remove from id24 And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)])
[slotted_egraphs::egraph::add] add to id24 And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)])
[entry::chc] calling make on And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f51, $f52, $f53}
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id22, mapToS : $f48
[entry::chc] adding $f52 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f53 to varTypes
[entry::chc] aggregateVarType for And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
[entry::chc] get {$f51: Int, $f52: Int, $f53: Int}
[entry::chc] calling merge to id24
[entry::chc] eclassSlots {$f52, $f51, $f53}
[entry::chc] result varTypes {$f52: Int, $f53: Int, $f51: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[entry::chc] calling make on New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f54, $f55, $f56}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id24, mapToS : $f52
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id24, mapToS : $f53
[entry::chc] adding $f56 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
[entry::chc] get {$f54: Int, $f55: Int, $f56: Int}
[slotted_egraphs::egraph::add] classes insert id25
[slotted_egraphs::egraph::add] add to id25 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[slotted_egraphs::egraph::add] remove from id25 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[slotted_egraphs::egraph::add] add to id25 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f54, $f55, $f56}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id24, mapToS : $f52
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id24, mapToS : $f53
[entry::chc] adding $f56 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
[entry::chc] get {$f55: Int, $f56: Int, $f54: Int}
[entry::chc] calling merge to id25
[entry::chc] eclassSlots {$f55, $f54, $f56}
[entry::chc] result varTypes {$f56: Int, $f55: Int, $f54: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id25 <-> (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::parse] from (interface min (pred <(int $5) (int $6) (int $7)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[entry::chc] calling make on Number(1)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id26
[slotted_egraphs::egraph::add] add to id26 Number(1)
[slotted_egraphs::egraph::add] remove from id26 Number(1)
[slotted_egraphs::egraph::add] add to id26 Number(1)
[entry::chc] calling make on Number(1)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[entry::chc] calling merge to id26
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[entry::chc] calling make on Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f57, $f58, $f59}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
[entry::chc] get {$f58: Int, $f59: Int, $f57: Int}
[slotted_egraphs::egraph::add] classes insert id27
[slotted_egraphs::egraph::add] add to id27 Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ())
[slotted_egraphs::egraph::add] remove from id27 Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ())
[slotted_egraphs::egraph::add] add to id27 Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ())
[entry::chc] calling make on Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f57, $f58, $f59}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
[entry::chc] get {$f58: Int, $f57: Int, $f59: Int}
[entry::chc] calling merge to id27
[entry::chc] eclassSlots {$f58, $f57, $f59}
[entry::chc] result varTypes {$f59: Int, $f57: Int, $f58: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (interface min (pred (int $5) (int $6) (int $7)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id25: ($f54 -> $5, $f55 -> $6, $f56 -> $7), id27: ($f57 -> $5, $f58 -> $6, $f59 -> $7)
[entry::chc] calling merge to id27
[entry::chc] eclassSlots {$f58, $f57, $f59}
[entry::chc] result varTypes {$f58: Int, $f57: Int, $f59: Int}
[slotted_egraphs::egraph::add] remove from id25 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[slotted_egraphs::egraph::add] add to id27 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), []) to self.pending
[slotted_egraphs::egraph::add] remove from id27 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[slotted_egraphs::egraph::add] add to id27 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f57, $f58, $f59}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id24, mapToS : $f52
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f59 to varTypes
[entry::chc] childId : id24, mapToS : $f53
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[entry::chc] get {$f59: Int, $f58: Int, $f57: Int}
[entry::chc] calling merge to id27
[entry::chc] eclassSlots {$f59, $f58, $f57}
[entry::chc] result varTypes {$f58: Int, $f59: Int, $f57: Int}
[slotted_egraphs::parse] from (new (pred <(int $5) (int $6) (int $7)>) (and <(lt (int $5) (int $6)) (eq (int $7) (int $5))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (lt (int $5) (int $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $5))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::parse] from (interface min (pred <(int $5) (int $6) (int $7)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (interface min (pred (int $5) (int $6) (int $7)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::parse] from (compose <(new (pred <(int $5) (int $6) (int $7)>) (and <(lt (int $5) (int $6)) (eq (int $7) (int $5))>) <>) (new (pred <(int $5) (int $6) (int $7)>) (and <(geq (int $5) (int $6)) (eq (int $7) (int $6))>) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (lt (int $5) (int $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $5))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[entry::chc] calling make on Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
[entry::chc] get {$f61: Int, $f60: Int}
[slotted_egraphs::egraph::add] classes insert id28
[slotted_egraphs::egraph::add] add to id28 Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] remove from id28 Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[slotted_egraphs::egraph::add] add to id28 Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
[entry::chc] get {$f60: Int, $f61: Int}
[entry::chc] calling merge to id28
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Int, $f60: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id28 <-> (geq (int $5) (int $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $6))
[entry::chc] calling make on And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f62, $f63, $f64}
[entry::chc] childId : id28, mapToS : $f60
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id28, mapToS : $f61
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f64 to varTypes
[entry::chc] aggregateVarType for And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
[entry::chc] get {$f62: Int, $f63: Int, $f64: Int}
[slotted_egraphs::egraph::add] classes insert id29
[slotted_egraphs::egraph::add] add to id29 And([id28: ($f60 -> $0, $f61 -> $1), id23: ($f49 -> $1, $f50 -> $2)])
[slotted_egraphs::egraph::add] remove from id29 And([id28: ($f60 -> $0, $f61 -> $1), id23: ($f49 -> $1, $f50 -> $2)])
[slotted_egraphs::egraph::add] add to id29 And([id28: ($f60 -> $0, $f61 -> $1), id23: ($f49 -> $1, $f50 -> $2)])
[entry::chc] calling make on And([id28: ($f60 -> $0, $f61 -> $1), id23: ($f49 -> $1, $f50 -> $2)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f62, $f63, $f64}
[entry::chc] childId : id28, mapToS : $f60
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id28, mapToS : $f61
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f64 to varTypes
[entry::chc] aggregateVarType for And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
[entry::chc] get {$f62: Int, $f63: Int, $f64: Int}
[entry::chc] calling merge to id29
[entry::chc] eclassSlots {$f64, $f63, $f62}
[entry::chc] result varTypes {$f63: Int, $f62: Int, $f64: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id29 <-> (and (geq (int $5) (int $6)) (eq (int $7) (int $6)))
[entry::chc] calling make on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f65, $f66, $f67}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id29, mapToS : $f62
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id29, mapToS : $f63
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f67 to varTypes
[entry::chc] childId : id29, mapToS : $f64
[entry::chc] adding $f67 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[entry::chc] get {$f67: Int, $f66: Int, $f65: Int}
[slotted_egraphs::egraph::add] classes insert id30
[slotted_egraphs::egraph::add] add to id30 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id29: ($f62 -> $0, $f63 -> $1, $f64 -> $2), [])
[slotted_egraphs::egraph::add] remove from id30 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id29: ($f62 -> $0, $f63 -> $1, $f64 -> $2), [])
[slotted_egraphs::egraph::add] add to id30 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id29: ($f62 -> $0, $f63 -> $1, $f64 -> $2), [])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id29: ($f62 -> $0, $f63 -> $1, $f64 -> $2), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f65, $f66, $f67}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id29, mapToS : $f62
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id29, mapToS : $f63
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f67 to varTypes
[entry::chc] childId : id29, mapToS : $f64
[entry::chc] adding $f67 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[entry::chc] get {$f67: Int, $f66: Int, $f65: Int}
[entry::chc] calling merge to id30
[entry::chc] eclassSlots {$f67, $f66, $f65}
[entry::chc] result varTypes {$f66: Int, $f65: Int, $f67: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id30 <-> (new (pred (int $5) (int $6) (int $7)) (and (geq (int $5) (int $6)) (eq (int $7) (int $6))))
[entry::chc] calling make on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f68, $f69, $f70}
[entry::chc] childId : id27, mapToS : $f57
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id30, mapToS : $f65
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id30, mapToS : $f66
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] adding $f70 to varTypes
[entry::chc] childId : id30, mapToS : $f67
[entry::chc] adding $f70 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[entry::chc] get {$f68: Int, $f69: Int, $f70: Int}
[slotted_egraphs::egraph::add] classes insert id31
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2)), AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2))])
[slotted_egraphs::egraph::add] remove from id31 Compose([AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2)), AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2))])
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2)), AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2)), AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f68, $f69, $f70}
[entry::chc] childId : id27, mapToS : $f57
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id30, mapToS : $f65
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id30, mapToS : $f66
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] adding $f70 to varTypes
[entry::chc] childId : id30, mapToS : $f67
[entry::chc] adding $f70 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[entry::chc] get {$f70: Int, $f68: Int, $f69: Int}
[entry::chc] calling merge to id31
[entry::chc] eclassSlots {$f70, $f69, $f68}
[entry::chc] result varTypes {$f70: Int, $f68: Int, $f69: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> (compose (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))) (new (pred (int $5) (int $6) (int $7)) (and (geq (int $5) (int $6)) (eq (int $7) (int $6)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id21: ($f44 -> $5, $f45 -> $6, $f46 -> $7), id31: ($f68 -> $5, $f69 -> $6, $f70 -> $7)
[entry::chc] calling merge to id31
[entry::chc] eclassSlots {$f70, $f69, $f68}
[entry::chc] result varTypes {$f70: Int, $f68: Int, $f69: Int}
[slotted_egraphs::egraph::add] remove from id21 Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[slotted_egraphs::egraph::add] add to id31 Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[slotted_egraphs::egraph::union] adding Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2)) to self.pending
[slotted_egraphs::egraph::add] remove from id31 Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[slotted_egraphs::egraph::add] add to id31 Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f68, $f69, $f70}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f70 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70))
[entry::chc] get {$f69: Int, $f70: Int, $f68: Int}
[entry::chc] calling merge to id31
[entry::chc] eclassSlots {$f70, $f69, $f68}
[entry::chc] result varTypes {$f68: Int, $f70: Int, $f69: Int}
[slotted_egraphs::parse] from (init leafDrop (pred <(int $8) (node $9) (node $10)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::parse] from (new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (leaf)) (eq (node $10) (leaf))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[entry::chc] calling make on Leaf
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id32
[slotted_egraphs::egraph::add] add to id32 Leaf
[slotted_egraphs::egraph::add] remove from id32 Leaf
[slotted_egraphs::egraph::add] add to id32 Leaf
[entry::chc] calling make on Leaf
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[entry::chc] calling merge to id32
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[entry::chc] calling make on Eq(id2: ($f1 -> $f71), id32: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f71}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f71 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f71), id32: ())
[entry::chc] get {$f71: Node}
[slotted_egraphs::egraph::add] classes insert id33
[slotted_egraphs::egraph::add] add to id33 Eq(id2: ($f1 -> $0), id32: ())
[slotted_egraphs::egraph::add] remove from id33 Eq(id2: ($f1 -> $0), id32: ())
[slotted_egraphs::egraph::add] add to id33 Eq(id2: ($f1 -> $0), id32: ())
[entry::chc] calling make on Eq(id2: ($f1 -> $0), id32: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f71}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f71 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f71), id32: ())
[entry::chc] get {$f71: Node}
[entry::chc] calling merge to id33
[entry::chc] eclassSlots {$f71}
[entry::chc] result varTypes {$f71: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $9) leaf)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $10) leaf)
[entry::chc] calling make on And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f72, $f73}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f72 to varTypes
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f73 to varTypes
[entry::chc] aggregateVarType for And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
[entry::chc] get {$f72: Node, $f73: Node}
[slotted_egraphs::egraph::add] classes insert id34
[slotted_egraphs::egraph::add] add to id34 And([id33: ($f71 -> $0), id33: ($f71 -> $1)])
[slotted_egraphs::egraph::add] remove from id34 And([id33: ($f71 -> $0), id33: ($f71 -> $1)])
[slotted_egraphs::egraph::add] add to id34 And([id33: ($f71 -> $0), id33: ($f71 -> $1)])
[entry::chc] calling make on And([id33: ($f71 -> $0), id33: ($f71 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f72, $f73}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f72 to varTypes
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f73 to varTypes
[entry::chc] aggregateVarType for And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
[entry::chc] get {$f72: Node, $f73: Node}
[entry::chc] calling merge to id34
[entry::chc] eclassSlots {$f73, $f72}
[entry::chc] result varTypes {$f73: Node, $f72: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id34 <-> (and (eq (node $9) leaf) (eq (node $10) leaf))
[entry::chc] calling make on New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f74, $f75, $f76}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id34, mapToS : $f72
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id34, mapToS : $f73
[entry::chc] adding $f76 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] get {$f74: Int, $f76: Node, $f75: Node}
[slotted_egraphs::egraph::add] classes insert id35
[slotted_egraphs::egraph::add] add to id35 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[slotted_egraphs::egraph::add] remove from id35 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[slotted_egraphs::egraph::add] add to id35 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f74, $f75, $f76}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id34, mapToS : $f72
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id34, mapToS : $f73
[entry::chc] adding $f76 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] get {$f75: Node, $f74: Int, $f76: Node}
[entry::chc] calling merge to id35
[entry::chc] eclassSlots {$f76, $f75, $f74}
[entry::chc] result varTypes {$f76: Node, $f75: Node, $f74: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id35 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf)))
[slotted_egraphs::parse] from (interface leafDrop (pred <(int $8) (node $9) (node $10)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f77, $f78, $f79}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
[entry::chc] get {$f78: Node, $f79: Node, $f77: Int}
[slotted_egraphs::egraph::add] classes insert id36
[slotted_egraphs::egraph::add] add to id36 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id26: ())
[slotted_egraphs::egraph::add] remove from id36 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id26: ())
[slotted_egraphs::egraph::add] add to id36 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id26: ())
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id26: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f77, $f78, $f79}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
[entry::chc] get {$f77: Int, $f79: Node, $f78: Node}
[entry::chc] calling merge to id36
[entry::chc] eclassSlots {$f78, $f77, $f79}
[entry::chc] result varTypes {$f79: Node, $f77: Int, $f78: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (interface leafDrop (pred (int $8) (node $9) (node $10)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id35: ($f74 -> $8, $f75 -> $9, $f76 -> $10), id36: ($f77 -> $8, $f78 -> $9, $f79 -> $10)
[entry::chc] calling merge to id36
[entry::chc] eclassSlots {$f78, $f77, $f79}
[entry::chc] result varTypes {$f79: Node, $f78: Node, $f77: Int}
[slotted_egraphs::egraph::add] remove from id35 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[slotted_egraphs::egraph::add] add to id36 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[slotted_egraphs::egraph::union] adding New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), []) to self.pending
[slotted_egraphs::egraph::add] remove from id36 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[slotted_egraphs::egraph::add] add to id36 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f77, $f78, $f79}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id34, mapToS : $f72
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f79 to varTypes
[entry::chc] childId : id34, mapToS : $f73
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[entry::chc] get {$f77: Int, $f78: Node, $f79: Node}
[entry::chc] calling merge to id36
[entry::chc] eclassSlots {$f78, $f77, $f79}
[entry::chc] result varTypes {$f77: Int, $f79: Node, $f78: Node}
[slotted_egraphs::parse] from (new (pred <(int $8) (node $9) (node $10)>) (and <(leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[entry::chc] calling make on Leq(id1: ($f0 -> $f80), id6: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f80}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f80 to varTypes
[entry::chc] aggregateVarType for Leq(id1: ($f0 -> $f80), id6: ())
[entry::chc] get {$f80: Int}
[slotted_egraphs::egraph::add] classes insert id37
[slotted_egraphs::egraph::add] add to id37 Leq(id1: ($f0 -> $0), id6: ())
[slotted_egraphs::egraph::add] remove from id37 Leq(id1: ($f0 -> $0), id6: ())
[slotted_egraphs::egraph::add] add to id37 Leq(id1: ($f0 -> $0), id6: ())
[entry::chc] calling make on Leq(id1: ($f0 -> $0), id6: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f80}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f80 to varTypes
[entry::chc] aggregateVarType for Leq(id1: ($f0 -> $f80), id6: ())
[entry::chc] get {$f80: Int}
[entry::chc] calling merge to id37
[entry::chc] eclassSlots {$f80}
[entry::chc] result varTypes {$f80: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (leq (int $8) 0)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[entry::chc] calling make on BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f81, $f82, $f83}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f81 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f83 to varTypes
[entry::chc] aggregateVarType for BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
[entry::chc] get {$f82: Node, $f83: Int, $f81: Node}
[slotted_egraphs::egraph::add] classes insert id38
[slotted_egraphs::egraph::add] add to id38 BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[slotted_egraphs::egraph::add] remove from id38 BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[slotted_egraphs::egraph::add] add to id38 BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[entry::chc] calling make on BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f81, $f82, $f83}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f81 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f83 to varTypes
[entry::chc] aggregateVarType for BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
[entry::chc] get {$f83: Int, $f81: Node, $f82: Node}
[entry::chc] calling merge to id38
[entry::chc] eclassSlots {$f81, $f83, $f82}
[entry::chc] result varTypes {$f81: Node, $f83: Int, $f82: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[entry::chc] calling make on Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f84, $f85, $f86, $f87}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id38, mapToS : $f81
[entry::chc] adding $f85 to varTypes
[entry::chc] childId : id38, mapToS : $f82
[entry::chc] adding $f86 to varTypes
[entry::chc] childId : id38, mapToS : $f83
[entry::chc] adding $f87 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
[entry::chc] get {$f87: Int, $f86: Node, $f84: Node, $f85: Node}
[slotted_egraphs::egraph::add] classes insert id39
[slotted_egraphs::egraph::add] add to id39 Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3))
[slotted_egraphs::egraph::add] remove from id39 Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3))
[slotted_egraphs::egraph::add] add to id39 Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3))
[entry::chc] calling make on Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f84, $f85, $f86, $f87}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id38, mapToS : $f81
[entry::chc] adding $f85 to varTypes
[entry::chc] childId : id38, mapToS : $f82
[entry::chc] adding $f86 to varTypes
[entry::chc] childId : id38, mapToS : $f83
[entry::chc] adding $f87 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
[entry::chc] get {$f87: Int, $f84: Node, $f85: Node, $f86: Node}
[entry::chc] calling merge to id39
[entry::chc] eclassSlots {$f84, $f87, $f86, $f85}
[entry::chc] result varTypes {$f85: Node, $f84: Node, $f87: Int, $f86: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $10) (binode (int $13) (node $11) (node $12)))
[entry::chc] calling make on And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f88, $f89, $f90, $f91, $f92, $f93}
[entry::chc] childId : id37, mapToS : $f80
[entry::chc] adding $f88 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f89 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f90 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] aggregateVarType for And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
[entry::chc] get {$f89: Node, $f93: Int, $f88: Int, $f91: Node, $f92: Node, $f90: Node}
[slotted_egraphs::egraph::add] classes insert id40
[slotted_egraphs::egraph::add] add to id40 And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)])
[slotted_egraphs::egraph::add] remove from id40 And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)])
[slotted_egraphs::egraph::add] add to id40 And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)])
[entry::chc] calling make on And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f88, $f89, $f90, $f91, $f92, $f93}
[entry::chc] childId : id37, mapToS : $f80
[entry::chc] adding $f88 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f89 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f90 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] aggregateVarType for And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
[entry::chc] get {$f93: Int, $f88: Int, $f92: Node, $f89: Node, $f90: Node, $f91: Node}
[entry::chc] calling merge to id40
[entry::chc] eclassSlots {$f90, $f89, $f88, $f93, $f92, $f91}
[entry::chc] result varTypes {$f90: Node, $f93: Int, $f88: Int, $f89: Node, $f91: Node, $f92: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))
[entry::chc] calling make on New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f94, $f95, $f96, $f97, $f98, $f99}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id40, mapToS : $f88
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id40, mapToS : $f89
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f90
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f91
[entry::chc] adding $f97 to varTypes
[entry::chc] childId : id40, mapToS : $f92
[entry::chc] adding $f98 to varTypes
[entry::chc] childId : id40, mapToS : $f93
[entry::chc] adding $f99 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
[entry::chc] get {$f94: Int, $f99: Int, $f97: Node, $f98: Node, $f95: Node, $f96: Node}
[slotted_egraphs::egraph::add] classes insert id41
[slotted_egraphs::egraph::add] add to id41 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[slotted_egraphs::egraph::add] remove from id41 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[slotted_egraphs::egraph::add] add to id41 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f94, $f95, $f96, $f97, $f98, $f99}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id40, mapToS : $f88
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id40, mapToS : $f89
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f90
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f91
[entry::chc] adding $f97 to varTypes
[entry::chc] childId : id40, mapToS : $f92
[entry::chc] adding $f98 to varTypes
[entry::chc] childId : id40, mapToS : $f93
[entry::chc] adding $f99 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
[entry::chc] get {$f96: Node, $f97: Node, $f95: Node, $f98: Node, $f99: Int, $f94: Int}
[entry::chc] calling merge to id41
[entry::chc] eclassSlots {$f96, $f95, $f94, $f99, $f98, $f97}
[entry::chc] result varTypes {$f94: Int, $f95: Node, $f96: Node, $f99: Int, $f97: Node, $f98: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id41 <-> (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))))
[slotted_egraphs::parse] from (interface leafDrop (pred <(int $8) (node $9) (node $10)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[entry::chc] calling make on Number(2)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id42
[slotted_egraphs::egraph::add] add to id42 Number(2)
[slotted_egraphs::egraph::add] remove from id42 Number(2)
[slotted_egraphs::egraph::add] add to id42 Number(2)
[entry::chc] calling make on Number(2)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[entry::chc] calling merge to id42
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f100, $f101, $f102}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f102 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
[entry::chc] get {$f101: Node, $f102: Node, $f100: Int}
[slotted_egraphs::egraph::add] classes insert id43
[slotted_egraphs::egraph::add] add to id43 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id42: ())
[slotted_egraphs::egraph::add] remove from id43 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id42: ())
[slotted_egraphs::egraph::add] add to id43 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id42: ())
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id42: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f100, $f101, $f102}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f102 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
[entry::chc] get {$f102: Node, $f100: Int, $f101: Node}
[entry::chc] calling merge to id43
[entry::chc] eclassSlots {$f102, $f101, $f100}
[entry::chc] result varTypes {$f101: Node, $f100: Int, $f102: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id43 <-> (interface leafDrop (pred (int $8) (node $9) (node $10)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id41: ($f94 -> $8, $f95 -> $9, $f96 -> $10), id43: ($f100 -> $8, $f101 -> $9, $f102 -> $10)
[entry::chc] calling merge to id43
[entry::chc] eclassSlots {$f102, $f101, $f100}
[entry::chc] result varTypes {$f102: Node, $f101: Node, $f100: Int}
[slotted_egraphs::egraph::add] remove from id41 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[slotted_egraphs::egraph::add] add to id43 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[slotted_egraphs::egraph::union] adding New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), []) to self.pending
[slotted_egraphs::egraph::add] remove from id43 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[slotted_egraphs::egraph::add] add to id43 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f100, $f101, $f102, $f106, $f107, $f108}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id40, mapToS : $f88
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id40, mapToS : $f89
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f102 to varTypes
[entry::chc] childId : id40, mapToS : $f90
[entry::chc] adding $f102 to varTypes
[entry::chc] childId : id40, mapToS : $f91
[entry::chc] adding $f106 to varTypes
[entry::chc] childId : id40, mapToS : $f92
[entry::chc] adding $f107 to varTypes
[entry::chc] childId : id40, mapToS : $f93
[entry::chc] adding $f108 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f106, $f92 -> $f107, $f93 -> $f108), [])
[entry::chc] get {$f108: Int, $f101: Node, $f100: Int, $f107: Node, $f106: Node, $f102: Node}
[entry::chc] calling merge to id43
[entry::chc] eclassSlots {$f102, $f101, $f107, $f100, $f106, $f108}
[entry::chc] result varTypes {$f102: Node, $f100: Int, $f108: Int, $f107: Node, $f106: Node, $f101: Node}
[slotted_egraphs::parse] from (new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))>) <(init leafDrop (pred <(int $8) (node $9) (node $10)>))>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $16)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $14)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $15)
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $16) (node $14) (node $15))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $16) (node $14) (node $15)))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[entry::chc] calling make on Geq(id1: ($f0 -> $f109), id26: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f109}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f109 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f109), id26: ())
[entry::chc] get {$f109: Int}
[slotted_egraphs::egraph::add] classes insert id44
[slotted_egraphs::egraph::add] add to id44 Geq(id1: ($f0 -> $0), id26: ())
[slotted_egraphs::egraph::add] remove from id44 Geq(id1: ($f0 -> $0), id26: ())
[slotted_egraphs::egraph::add] add to id44 Geq(id1: ($f0 -> $0), id26: ())
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id26: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f109}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f109 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f109), id26: ())
[entry::chc] get {$f109: Int}
[entry::chc] calling merge to id44
[entry::chc] eclassSlots {$f109}
[entry::chc] result varTypes {$f109: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id44 <-> (geq (int $8) 1)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $17)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[entry::chc] calling make on Minus(id1: ($f0 -> $f110), id26: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f110}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f110 to varTypes
[entry::chc] aggregateVarType for Minus(id1: ($f0 -> $f110), id26: ())
[entry::chc] get {$f110: Int}
[slotted_egraphs::egraph::add] classes insert id45
[slotted_egraphs::egraph::add] add to id45 Minus(id1: ($f0 -> $0), id26: ())
[slotted_egraphs::egraph::add] remove from id45 Minus(id1: ($f0 -> $0), id26: ())
[slotted_egraphs::egraph::add] add to id45 Minus(id1: ($f0 -> $0), id26: ())
[entry::chc] calling make on Minus(id1: ($f0 -> $0), id26: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f110}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f110 to varTypes
[entry::chc] aggregateVarType for Minus(id1: ($f0 -> $f110), id26: ())
[entry::chc] get {$f110: Int}
[entry::chc] calling merge to id45
[entry::chc] eclassSlots {$f110}
[entry::chc] result varTypes {$f110: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id45 <-> (- (int $8) 1)
[entry::chc] calling make on Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f111, $f112}
[entry::chc] childId : id45, mapToS : $f110
[entry::chc] adding $f111 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f112 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
[entry::chc] get {$f112: Int, $f111: Int}
[slotted_egraphs::egraph::add] classes insert id46
[slotted_egraphs::egraph::add] add to id46 Eq(id1: ($f0 -> $0), id45: ($f110 -> $1))
[slotted_egraphs::egraph::add] remove from id46 Eq(id1: ($f0 -> $0), id45: ($f110 -> $1))
[slotted_egraphs::egraph::add] add to id46 Eq(id1: ($f0 -> $0), id45: ($f110 -> $1))
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id45: ($f110 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f111, $f112}
[entry::chc] childId : id45, mapToS : $f110
[entry::chc] adding $f111 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f112 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
[entry::chc] get {$f111: Int, $f112: Int}
[entry::chc] calling merge to id46
[entry::chc] eclassSlots {$f111, $f112}
[entry::chc] result varTypes {$f111: Int, $f112: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id46 <-> (eq (int $17) (- (int $8) 1))
[entry::chc] calling make on And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f113, $f114, $f115, $f116, $f117, $f118}
[entry::chc] childId : id44, mapToS : $f109
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id46, mapToS : $f111
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f114 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f115 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f116 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f117 to varTypes
[entry::chc] childId : id46, mapToS : $f112
[entry::chc] adding $f118 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
[entry::chc] get {$f117: Int, $f116: Node, $f118: Int, $f113: Int, $f115: Node, $f114: Node}
[slotted_egraphs::egraph::add] classes insert id47
[slotted_egraphs::egraph::add] add to id47 And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)])
[slotted_egraphs::egraph::add] remove from id47 And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)])
[slotted_egraphs::egraph::add] add to id47 And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)])
[entry::chc] calling make on And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f113, $f114, $f115, $f116, $f117, $f118}
[entry::chc] childId : id44, mapToS : $f109
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id46, mapToS : $f111
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f114 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f115 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f116 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f117 to varTypes
[entry::chc] childId : id46, mapToS : $f112
[entry::chc] adding $f118 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
[entry::chc] get {$f114: Node, $f116: Node, $f113: Int, $f115: Node, $f117: Int, $f118: Int}
[entry::chc] calling merge to id47
[entry::chc] eclassSlots {$f114, $f113, $f118, $f117, $f116, $f115}
[entry::chc] result varTypes {$f113: Int, $f114: Node, $f117: Int, $f118: Int, $f115: Node, $f116: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id47 <-> (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1)))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $8) (node $9) (node $10)))
[entry::chc] calling make on New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f119, $f120, $f121, $f122, $f123, $f124, $f125}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id47, mapToS : $f113
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id47, mapToS : $f114
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id47, mapToS : $f115
[entry::chc] adding $f122 to varTypes
[entry::chc] childId : id47, mapToS : $f116
[entry::chc] adding $f123 to varTypes
[entry::chc] childId : id47, mapToS : $f117
[entry::chc] adding $f124 to varTypes
[entry::chc] childId : id47, mapToS : $f118
[entry::chc] adding $f125 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
[entry::chc] get {$f119: Int, $f123: Node, $f120: Node, $f122: Node, $f124: Int, $f125: Int, $f121: Node}
[slotted_egraphs::egraph::add] classes insert id48
[slotted_egraphs::egraph::add] add to id48 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] remove from id48 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] add to id48 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f119, $f120, $f121, $f122, $f123, $f124, $f125}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id47, mapToS : $f113
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id47, mapToS : $f114
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id47, mapToS : $f115
[entry::chc] adding $f122 to varTypes
[entry::chc] childId : id47, mapToS : $f116
[entry::chc] adding $f123 to varTypes
[entry::chc] childId : id47, mapToS : $f117
[entry::chc] adding $f124 to varTypes
[entry::chc] childId : id47, mapToS : $f118
[entry::chc] adding $f125 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
[entry::chc] get {$f119: Int, $f121: Node, $f124: Int, $f122: Node, $f123: Node, $f120: Node, $f125: Int}
[entry::chc] calling merge to id48
[entry::chc] eclassSlots {$f120, $f119, $f124, $f123, $f125, $f122, $f121}
[entry::chc] result varTypes {$f124: Int, $f123: Node, $f125: Int, $f121: Node, $f120: Node, $f122: Node, $f119: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id48 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10))))
[slotted_egraphs::parse] from (interface leafDrop (pred <(int $8) (node $9) (node $10)>) 3)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("3"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[entry::chc] calling make on Number(3)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(3)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id49
[slotted_egraphs::egraph::add] add to id49 Number(3)
[slotted_egraphs::egraph::add] remove from id49 Number(3)
[slotted_egraphs::egraph::add] add to id49 Number(3)
[entry::chc] calling make on Number(3)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(3)
[entry::chc] get {}
[entry::chc] calling merge to id49
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id49 <-> 3
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f126, $f127, $f128}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f128 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
[entry::chc] get {$f127: Node, $f126: Int, $f128: Node}
[slotted_egraphs::egraph::add] classes insert id50
[slotted_egraphs::egraph::add] add to id50 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id49: ())
[slotted_egraphs::egraph::add] remove from id50 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id49: ())
[slotted_egraphs::egraph::add] add to id50 Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id49: ())
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id49: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f126, $f127, $f128}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f128 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
[entry::chc] get {$f128: Node, $f126: Int, $f127: Node}
[entry::chc] calling merge to id50
[entry::chc] eclassSlots {$f128, $f127, $f126}
[entry::chc] result varTypes {$f127: Node, $f128: Node, $f126: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id50 <-> (interface leafDrop (pred (int $8) (node $9) (node $10)) 3)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id48: ($f119 -> $8, $f120 -> $9, $f121 -> $10), id50: ($f126 -> $8, $f127 -> $9, $f128 -> $10)
[entry::chc] calling merge to id50
[entry::chc] eclassSlots {$f128, $f127, $f126}
[entry::chc] result varTypes {$f128: Node, $f127: Node, $f126: Int}
[slotted_egraphs::egraph::add] remove from id48 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] add to id50 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::union] adding New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id50 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] add to id50 New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f126, $f127, $f128, $f133, $f134, $f135, $f136}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id47, mapToS : $f113
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id47, mapToS : $f114
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id47, mapToS : $f115
[entry::chc] adding $f133 to varTypes
[entry::chc] childId : id47, mapToS : $f116
[entry::chc] adding $f134 to varTypes
[entry::chc] childId : id47, mapToS : $f117
[entry::chc] adding $f135 to varTypes
[entry::chc] childId : id47, mapToS : $f118
[entry::chc] adding $f136 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[entry::chc] get {$f133: Node, $f126: Int, $f135: Int, $f136: Int, $f134: Node, $f128: Node, $f127: Node}
[entry::chc] calling merge to id50
[entry::chc] eclassSlots {$f133, $f136, $f135, $f134, $f128, $f127, $f126}
[entry::chc] result varTypes {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int}
[slotted_egraphs::parse] from (compose <(new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (leaf)) (eq (node $10) (leaf))>) <>) (new (pred <(int $8) (node $9) (node $10)>) (and <(leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))>) <>) (new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))>) <(init leafDrop (pred <(int $8) (node $9) (node $10)>))>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $9) leaf)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $10) leaf)
[slotted_egraphs::egraph::add] add_syn_expr: id34 <-> (and (eq (node $9) leaf) (eq (node $10) leaf))
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf)))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (leq (int $8) 0)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $10) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))
[slotted_egraphs::egraph::add] add_syn_expr: id43 <-> (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $16)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $14)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $15)
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $16) (node $14) (node $15))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $16) (node $14) (node $15)))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] add_syn_expr: id44 <-> (geq (int $8) 1)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $17)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] add_syn_expr: id45 <-> (- (int $8) 1)
[slotted_egraphs::egraph::add] add_syn_expr: id46 <-> (eq (int $17) (- (int $8) 1))
[slotted_egraphs::egraph::add] add_syn_expr: id47 <-> (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1)))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::egraph::add] add_syn_expr: id50 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10))))
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f137, $f138, $f139}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f139 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
[entry::chc] get {$f139: Node, $f137: Int, $f138: Node}
[slotted_egraphs::egraph::add] classes insert id51
[slotted_egraphs::egraph::add] add to id51 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] remove from id51 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] add to id51 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f137, $f138, $f139}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f139 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
[entry::chc] get {$f137: Int, $f139: Node, $f138: Node}
[entry::chc] calling merge to id51
[entry::chc] eclassSlots {$f137, $f139, $f138}
[entry::chc] result varTypes {$f138: Node, $f139: Node, $f137: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id51 <-> (compose (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf))) (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))) (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id51: ($f137 -> $8, $f138 -> $9, $f139 -> $10), id13: ($f24 -> $8, $f25 -> $9, $f26 -> $10)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f26: Node, $f24: Int}
[slotted_egraphs::egraph::add] remove from id51 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[entry::chc] get {$f24: Int, $f25: Node, $f26: Node}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f24: Int, $f25: Node, $f26: Node}
[slotted_egraphs::parse] from (init minLeaf (pred <(node $18) (int $19)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $18) (int $19)))
[slotted_egraphs::parse] from (new (pred <(node $18) (int $19)>) (and <(eq (int $19) 0) (eq (node $18) (leaf))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[entry::chc] calling make on Eq(id1: ($f0 -> $f140), id6: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f140}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f140 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f140), id6: ())
[entry::chc] get {$f140: Int}
[slotted_egraphs::egraph::add] classes insert id52
[slotted_egraphs::egraph::add] add to id52 Eq(id1: ($f0 -> $0), id6: ())
[slotted_egraphs::egraph::add] remove from id52 Eq(id1: ($f0 -> $0), id6: ())
[slotted_egraphs::egraph::add] add to id52 Eq(id1: ($f0 -> $0), id6: ())
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id6: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f140}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f140 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f140), id6: ())
[entry::chc] get {$f140: Int}
[entry::chc] calling merge to id52
[entry::chc] eclassSlots {$f140}
[entry::chc] result varTypes {$f140: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id52 <-> (eq (int $19) 0)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $18) leaf)
[entry::chc] calling make on And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f141, $f142}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id52, mapToS : $f140
[entry::chc] adding $f142 to varTypes
[entry::chc] aggregateVarType for And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
[entry::chc] get {$f141: Node, $f142: Int}
[slotted_egraphs::egraph::add] classes insert id53
[slotted_egraphs::egraph::add] add to id53 And([id52: ($f140 -> $0), id33: ($f71 -> $1)])
[slotted_egraphs::egraph::add] remove from id53 And([id52: ($f140 -> $0), id33: ($f71 -> $1)])
[slotted_egraphs::egraph::add] add to id53 And([id52: ($f140 -> $0), id33: ($f71 -> $1)])
[entry::chc] calling make on And([id52: ($f140 -> $0), id33: ($f71 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f141, $f142}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id52, mapToS : $f140
[entry::chc] adding $f142 to varTypes
[entry::chc] aggregateVarType for And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
[entry::chc] get {$f141: Node, $f142: Int}
[entry::chc] calling merge to id53
[entry::chc] eclassSlots {$f142, $f141}
[entry::chc] result varTypes {$f142: Int, $f141: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id53 <-> (and (eq (int $19) 0) (eq (node $18) leaf))
[entry::chc] calling make on New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f143, $f144}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id53, mapToS : $f141
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f144 to varTypes
[entry::chc] childId : id53, mapToS : $f142
[entry::chc] adding $f144 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
[entry::chc] get {$f144: Int, $f143: Node}
[slotted_egraphs::egraph::add] classes insert id54
[slotted_egraphs::egraph::add] add to id54 New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[slotted_egraphs::egraph::add] remove from id54 New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[slotted_egraphs::egraph::add] add to id54 New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f143, $f144}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id53, mapToS : $f141
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f144 to varTypes
[entry::chc] childId : id53, mapToS : $f142
[entry::chc] adding $f144 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
[entry::chc] get {$f144: Int, $f143: Node}
[entry::chc] calling merge to id54
[entry::chc] eclassSlots {$f143, $f144}
[entry::chc] result varTypes {$f143: Node, $f144: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id54 <-> (new (pred (node $18) (int $19)) (and (eq (int $19) 0) (eq (node $18) leaf)))
[slotted_egraphs::parse] from (interface minLeaf (pred <(node $18) (int $19)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f145, $f146}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f146 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
[entry::chc] get {$f146: Int, $f145: Node}
[slotted_egraphs::egraph::add] classes insert id55
[slotted_egraphs::egraph::add] add to id55 Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ())
[slotted_egraphs::egraph::add] remove from id55 Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ())
[slotted_egraphs::egraph::add] add to id55 Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ())
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f145, $f146}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f146 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
[entry::chc] get {$f145: Node, $f146: Int}
[entry::chc] calling merge to id55
[entry::chc] eclassSlots {$f146, $f145}
[entry::chc] result varTypes {$f146: Int, $f145: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id55 <-> (interface minLeaf (pred (node $18) (int $19)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id54: ($f143 -> $18, $f144 -> $19), id55: ($f145 -> $18, $f146 -> $19)
[entry::chc] calling merge to id55
[entry::chc] eclassSlots {$f146, $f145}
[entry::chc] result varTypes {$f145: Node, $f146: Int}
[slotted_egraphs::egraph::add] remove from id54 New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[slotted_egraphs::egraph::add] add to id55 New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[slotted_egraphs::egraph::union] adding New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), []) to self.pending
[slotted_egraphs::egraph::add] remove from id55 New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[slotted_egraphs::egraph::add] add to id55 New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f145, $f146}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id53, mapToS : $f141
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f146 to varTypes
[entry::chc] childId : id53, mapToS : $f142
[entry::chc] adding $f146 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[entry::chc] get {$f146: Int, $f145: Node}
[entry::chc] calling merge to id55
[entry::chc] eclassSlots {$f146, $f145}
[entry::chc] result varTypes {$f146: Int, $f145: Node}
[slotted_egraphs::parse] from (new (pred <(node $18) (int $19)>) (and <(eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1))>) <(init minLeaf (pred <(node $21) (int $23)>)) (init minLeaf (pred <(node $22) (int $24)>)) (init min (pred <(int $23) (int $24) (int $25)>))>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($20), RParen, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $20)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $21)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $22)
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $20) (node $21) (node $22))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $18) (binode (int $20) (node $21) (node $22)))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $25)
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[entry::chc] calling make on Add(id1: ($f0 -> $f147), id26: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f147}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f147 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f147), id26: ())
[entry::chc] get {$f147: Int}
[slotted_egraphs::egraph::add] classes insert id56
[slotted_egraphs::egraph::add] add to id56 Add(id1: ($f0 -> $0), id26: ())
[slotted_egraphs::egraph::add] remove from id56 Add(id1: ($f0 -> $0), id26: ())
[slotted_egraphs::egraph::add] add to id56 Add(id1: ($f0 -> $0), id26: ())
[entry::chc] calling make on Add(id1: ($f0 -> $0), id26: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f147}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f147 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f147), id26: ())
[entry::chc] get {$f147: Int}
[entry::chc] calling merge to id56
[entry::chc] eclassSlots {$f147}
[entry::chc] result varTypes {$f147: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id56 <-> (+ (int $25) 1)
[entry::chc] calling make on Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f148, $f149}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id56, mapToS : $f147
[entry::chc] adding $f149 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
[entry::chc] get {$f149: Int, $f148: Int}
[slotted_egraphs::egraph::add] classes insert id57
[slotted_egraphs::egraph::add] add to id57 Eq(id1: ($f0 -> $0), id56: ($f147 -> $1))
[slotted_egraphs::egraph::add] remove from id57 Eq(id1: ($f0 -> $0), id56: ($f147 -> $1))
[slotted_egraphs::egraph::add] add to id57 Eq(id1: ($f0 -> $0), id56: ($f147 -> $1))
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id56: ($f147 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f148, $f149}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id56, mapToS : $f147
[entry::chc] adding $f149 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
[entry::chc] get {$f148: Int, $f149: Int}
[entry::chc] calling merge to id57
[entry::chc] eclassSlots {$f149, $f148}
[entry::chc] result varTypes {$f148: Int, $f149: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id57 <-> (eq (int $19) (+ (int $25) 1))
[entry::chc] calling make on And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f150, $f151, $f152, $f153, $f154, $f155}
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f150 to varTypes
[entry::chc] childId : id57, mapToS : $f148
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id57, mapToS : $f149
[entry::chc] adding $f155 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
[entry::chc] get {$f151: Int, $f150: Node, $f155: Int, $f152: Int, $f153: Node, $f154: Node}
[slotted_egraphs::egraph::add] classes insert id58
[slotted_egraphs::egraph::add] add to id58 And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id57: ($f148 -> $4, $f149 -> $5)])
[slotted_egraphs::egraph::add] remove from id58 And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id57: ($f148 -> $4, $f149 -> $5)])
[slotted_egraphs::egraph::add] add to id58 And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id57: ($f148 -> $4, $f149 -> $5)])
[entry::chc] calling make on And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id57: ($f148 -> $4, $f149 -> $5)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f150, $f151, $f152, $f153, $f154, $f155}
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f150 to varTypes
[entry::chc] childId : id57, mapToS : $f148
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id57, mapToS : $f149
[entry::chc] adding $f155 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
[entry::chc] get {$f151: Int, $f150: Node, $f153: Node, $f152: Int, $f154: Node, $f155: Int}
[entry::chc] calling merge to id58
[entry::chc] eclassSlots {$f155, $f154, $f153, $f152, $f151, $f150}
[entry::chc] result varTypes {$f152: Int, $f150: Node, $f153: Node, $f154: Node, $f151: Int, $f155: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id58 <-> (and (eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1)))
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $21)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $23)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $21) (int $23))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $21) (int $23)))
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $22)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $24)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $22) (int $24))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $22) (int $24)))
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $23)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $24)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $25)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $23) (int $24) (int $25))
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> (init min (pred (int $23) (int $24) (int $25)))
[entry::chc] calling make on New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f158 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f163 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f163 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
[entry::chc] get {$f156: Node, $f163: Int, $f157: Int, $f161: Int, $f160: Node, $f162: Int, $f159: Node, $f158: Int}
[slotted_egraphs::egraph::add] classes insert id59
[slotted_egraphs::egraph::add] add to id59 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[slotted_egraphs::egraph::add] remove from id59 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[slotted_egraphs::egraph::add] add to id59 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f158 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f163 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f163 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
[entry::chc] get {$f162: Int, $f159: Node, $f156: Node, $f161: Int, $f163: Int, $f157: Int, $f158: Int, $f160: Node}
[entry::chc] calling merge to id59
[entry::chc] eclassSlots {$f161, $f160, $f159, $f158, $f157, $f156, $f163, $f162}
[entry::chc] result varTypes {$f161: Int, $f158: Int, $f163: Int, $f159: Node, $f156: Node, $f160: Node, $f157: Int, $f162: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id59 <-> (new (pred (node $18) (int $19)) (and (eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1))) (init minLeaf (pred (node $21) (int $23))) (init minLeaf (pred (node $22) (int $24))) (init min (pred (int $23) (int $24) (int $25))))
[slotted_egraphs::parse] from (interface minLeaf (pred <(node $18) (int $19)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f164, $f165}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
[entry::chc] get {$f164: Node, $f165: Int}
[slotted_egraphs::egraph::add] classes insert id60
[slotted_egraphs::egraph::add] add to id60 Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ())
[slotted_egraphs::egraph::add] remove from id60 Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ())
[slotted_egraphs::egraph::add] add to id60 Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ())
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
[entry::chc] get {$f164: Node, $f165: Int}
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f164, $f165}
[entry::chc] result varTypes {$f165: Int, $f164: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id60 <-> (interface minLeaf (pred (node $18) (int $19)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id59: ($f156 -> $18, $f157 -> $19), id60: ($f164 -> $18, $f165 -> $19)
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f164, $f165}
[entry::chc] result varTypes {$f164: Node, $f165: Int}
[slotted_egraphs::egraph::add] remove from id59 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[slotted_egraphs::egraph::union] adding New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))]) to self.pending
[slotted_egraphs::egraph::add] remove from id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f172, $f173, $f174, $f175, $f176, $f177}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f172 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f175 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f175 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f176 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f176 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f177 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f177 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
[entry::chc] get {$f175: Int, $f174: Node, $f176: Int, $f177: Int, $f165: Int, $f164: Node, $f173: Node, $f172: Int}
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f177, $f172, $f165, $f176, $f164, $f175, $f174, $f173}
[entry::chc] result varTypes {$f165: Int, $f164: Node, $f177: Int, $f174: Node, $f172: Int, $f175: Int, $f173: Node, $f176: Int}
[slotted_egraphs::parse] from (compose <(interface minLeaf (pred <(node $18) (int $19)>) 1) (interface minLeaf (pred <(node $18) (int $19)>) 2)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] add_syn_expr: id55 <-> (interface minLeaf (pred (node $18) (int $19)) 1)
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[slotted_egraphs::egraph::add] add_syn_expr: id60 <-> (interface minLeaf (pred (node $18) (int $19)) 2)
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f178, $f179}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f179 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f179 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
[entry::chc] get {$f178: Node, $f179: Int}
[slotted_egraphs::egraph::add] classes insert id61
[slotted_egraphs::egraph::add] add to id61 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] remove from id61 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id61 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f178, $f179}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f179 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f179 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
[entry::chc] get {$f178: Node, $f179: Int}
[entry::chc] calling merge to id61
[entry::chc] eclassSlots {$f178, $f179}
[entry::chc] result varTypes {$f178: Node, $f179: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id61 <-> (compose (interface minLeaf (pred (node $18) (int $19)) 1) (interface minLeaf (pred (node $18) (int $19)) 2))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id61: ($f178 -> $18, $f179 -> $19), id16: ($f29 -> $18, $f30 -> $19)
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Node, $f30: Int}
[slotted_egraphs::egraph::add] remove from id61 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[entry::chc] get {$f29: Node, $f30: Int}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Node, $f30: Int}
[entry::chc::tst] egraph before run

 == Egraph ==
CHCData { predNames: {}, varTypes: {} }
id0():>> PredName("root")
 - PredName("root")

CHCData { predNames: {}, varTypes: {$f0: Int} }
id1($f0):>> Int($f0)
 - Int($f0)

CHCData { predNames: {}, varTypes: {$f1: Node} }
id2($f1):>> Node($f1)
 - Node($f1)

CHCData { predNames: {}, varTypes: {$f3: Node, $f6: Int, $f4: Node, $f5: Int, $f2: Int} }
id3($f2, $f3, $f4, $f5, $f6):>> PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
 - PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])

CHCData { predNames: {"root"}, varTypes: {$f10: Int, $f8: Node, $f9: Node, $f11: Int, $f7: Int} }
id4($f7, $f8, $f9, $f10, $f11):>> Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])

CHCData { predNames: {}, varTypes: {} }
id5():>> PredSyntax([])
 - PredSyntax([])

CHCData { predNames: {}, varTypes: {} }
id6():>> Number(0)
 - Number(0)

CHCData { predNames: {}, varTypes: {$f12: Int} }
id7($f12):>> Geq(id1: ($f0 -> $f12), id6: ())
 - Geq(id1: ($f0 -> $f12), id6: ())

CHCData { predNames: {}, varTypes: {$f14: Int, $f13: Int} }
id8($f13, $f14):>> Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
 - Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))

CHCData { predNames: {}, varTypes: {$f15: Int, $f17: Int, $f16: Int} }
id9($f15, $f16, $f17):>> Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
 - Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))

CHCData { predNames: {}, varTypes: {$f20: Int, $f19: Int, $f18: Int} }
id10($f18, $f19, $f20):>> And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
 - And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])

CHCData { predNames: {}, varTypes: {} }
id11():>> PredName("leafDrop")
 - PredName("leafDrop")

CHCData { predNames: {}, varTypes: {$f23: Node, $f22: Node, $f21: Int} }
id12($f21, $f22, $f23):>> PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
 - PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])

CHCData { predNames: {"leafDrop"}, varTypes: {$f24: Int, $f25: Node, $f26: Node} }
id13($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
 - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
 - Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])

CHCData { predNames: {}, varTypes: {} }
id14():>> PredName("minLeaf")
 - PredName("minLeaf")

CHCData { predNames: {}, varTypes: {$f28: Int, $f27: Node} }
id15($f27, $f28):>> PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
 - PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f29: Node, $f30: Int} }
id16($f29, $f30):>> Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
 - Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
 - Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))

CHCData { predNames: {}, varTypes: {$f33: Node, $f34: Int, $f31: Int, $f35: Int, $f32: Node} }
id17($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])

CHCData { predNames: {}, varTypes: {} }
id19():>> PredName("min")
 - PredName("min")

CHCData { predNames: {}, varTypes: {$f43: Int, $f42: Int, $f41: Int} }
id20($f41, $f42, $f43):>> PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
 - PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])

CHCData { predNames: {}, varTypes: {$f47: Int, $f48: Int} }
id22($f47, $f48):>> Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
 - Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))

CHCData { predNames: {}, varTypes: {$f50: Int, $f49: Int} }
id23($f49, $f50):>> Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
 - Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))

CHCData { predNames: {}, varTypes: {$f52: Int, $f53: Int, $f51: Int} }
id24($f51, $f52, $f53):>> And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
 - And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])

CHCData { predNames: {}, varTypes: {} }
id26():>> Number(1)
 - Number(1)

CHCData { predNames: {"min"}, varTypes: {$f58: Int, $f59: Int, $f57: Int} }
id27($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
 - New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
 - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())

CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
id28($f60, $f61):>> Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
 - Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))

CHCData { predNames: {}, varTypes: {$f63: Int, $f62: Int, $f64: Int} }
id29($f62, $f63, $f64):>> And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
 - And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])

CHCData { predNames: {}, varTypes: {$f66: Int, $f65: Int, $f67: Int} }
id30($f65, $f66, $f67):>> New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
 - New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])

CHCData { predNames: {"min"}, varTypes: {$f68: Int, $f70: Int, $f69: Int} }
id31($f68, $f69, $f70):>> Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
 - Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
 - Init(id19: (), id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70))

CHCData { predNames: {}, varTypes: {} }
id32():>> Leaf
 - Leaf

CHCData { predNames: {}, varTypes: {$f71: Node} }
id33($f71):>> Eq(id2: ($f1 -> $f71), id32: ())
 - Eq(id2: ($f1 -> $f71), id32: ())

CHCData { predNames: {}, varTypes: {$f73: Node, $f72: Node} }
id34($f72, $f73):>> And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
 - And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])

CHCData { predNames: {"leafDrop"}, varTypes: {$f77: Int, $f79: Node, $f78: Node} }
id36($f77, $f78, $f79):>> Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
 - New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
 - Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())

CHCData { predNames: {}, varTypes: {$f80: Int} }
id37($f80):>> Leq(id1: ($f0 -> $f80), id6: ())
 - Leq(id1: ($f0 -> $f80), id6: ())

CHCData { predNames: {}, varTypes: {$f81: Node, $f83: Int, $f82: Node} }
id38($f81, $f82, $f83):>> BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
 - BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))

CHCData { predNames: {}, varTypes: {$f85: Node, $f84: Node, $f87: Int, $f86: Node} }
id39($f84, $f85, $f86, $f87):>> Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
 - Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))

CHCData { predNames: {}, varTypes: {$f90: Node, $f93: Int, $f88: Int, $f89: Node, $f91: Node, $f92: Node} }
id40($f88, $f89, $f90, $f91, $f92, $f93):>> And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
 - And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])

CHCData { predNames: {}, varTypes: {} }
id42():>> Number(2)
 - Number(2)

CHCData { predNames: {"leafDrop"}, varTypes: {$f102: Node, $f100: Int, $f108: Int, $f107: Node, $f106: Node, $f101: Node} }
id43($f100, $f101, $f102):>> Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
 - Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
 - New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f106, $f92 -> $f107, $f93 -> $f108), [])

CHCData { predNames: {}, varTypes: {$f109: Int} }
id44($f109):>> Geq(id1: ($f0 -> $f109), id26: ())
 - Geq(id1: ($f0 -> $f109), id26: ())

CHCData { predNames: {}, varTypes: {$f110: Int} }
id45($f110):>> Minus(id1: ($f0 -> $f110), id26: ())
 - Minus(id1: ($f0 -> $f110), id26: ())

CHCData { predNames: {}, varTypes: {$f111: Int, $f112: Int} }
id46($f111, $f112):>> Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
 - Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))

CHCData { predNames: {}, varTypes: {$f113: Int, $f114: Node, $f117: Int, $f118: Int, $f115: Node, $f116: Node} }
id47($f113, $f114, $f115, $f116, $f117, $f118):>> And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
 - And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])

CHCData { predNames: {}, varTypes: {} }
id49():>> Number(3)
 - Number(3)

CHCData { predNames: {"leafDrop"}, varTypes: {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int} }
id50($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
 - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
 - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])

CHCData { predNames: {}, varTypes: {$f140: Int} }
id52($f140):>> Eq(id1: ($f0 -> $f140), id6: ())
 - Eq(id1: ($f0 -> $f140), id6: ())

CHCData { predNames: {}, varTypes: {$f142: Int, $f141: Node} }
id53($f141, $f142):>> And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
 - And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f146: Int, $f145: Node} }
id55($f145, $f146):>> Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
 - Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
 - New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])

CHCData { predNames: {}, varTypes: {$f147: Int} }
id56($f147):>> Add(id1: ($f0 -> $f147), id26: ())
 - Add(id1: ($f0 -> $f147), id26: ())

CHCData { predNames: {}, varTypes: {$f148: Int, $f149: Int} }
id57($f148, $f149):>> Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
 - Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))

CHCData { predNames: {}, varTypes: {$f152: Int, $f150: Node, $f153: Node, $f154: Node, $f151: Int, $f155: Int} }
id58($f150, $f151, $f152, $f153, $f154, $f155):>> And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
 - And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f165: Int, $f164: Node, $f177: Int, $f174: Node, $f172: Int, $f175: Int, $f173: Node, $f176: Int} }
id60($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
 - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
[slotted_egraphs::parse] from (compose <(new ?syntax1 (true) <(compose <*1>) *2>) *3>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] from (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] from (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id53: ($f141 -> $f29, $f142 -> $f30), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id24: ($f51 -> $f68, $f52 -> $f69, $f53 -> $f70), [])
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f214, $f92 -> $f215, $f93 -> $f216), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f221, $f116 -> $f222, $f117 -> $f223, $f118 -> $f224), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f221, $f116 -> $f222, $f117 -> $f223, $f118 -> $f224) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f238, $f153 -> $f239, $f154 -> $f240, $f155 -> $f241), [AppliedId(id16: ($f29 -> $f239, $f30 -> $f242)), AppliedId(id16: ($f29 -> $f240, $f30 -> $f243)), AppliedId(id31: ($f68 -> $f242, $f69 -> $f243, $f70 -> $f241))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f238, $f153 -> $f239, $f154 -> $f240, $f155 -> $f241) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f239, $f30 -> $f242) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f240, $f30 -> $f243) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f242, $f69 -> $f243, $f70 -> $f241) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f299, $f92 -> $f300, $f93 -> $f301), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f306, $f116 -> $f307, $f117 -> $f308, $f118 -> $f309), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f306, $f116 -> $f307, $f117 -> $f308, $f118 -> $f309) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f323, $f153 -> $f324, $f154 -> $f325, $f155 -> $f326), [AppliedId(id16: ($f29 -> $f324, $f30 -> $f327)), AppliedId(id16: ($f29 -> $f325, $f30 -> $f328)), AppliedId(id31: ($f68 -> $f327, $f69 -> $f328, $f70 -> $f326))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f323, $f153 -> $f324, $f154 -> $f325, $f155 -> $f326) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f324, $f30 -> $f327) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f325, $f30 -> $f328) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f327, $f69 -> $f328, $f70 -> $f326) to subst
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f337, $f19 -> $f338, $f20 -> $f339), [AppliedId(id16: ($f29 -> $f340, $f30 -> $f338)), AppliedId(id13: ($f24 -> $f337, $f25 -> $f341, $f26 -> $f340)), AppliedId(id16: ($f29 -> $f341, $f30 -> $f339))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f337, $f338, $f339, $f340, $f341}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f337 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f337 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f338 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f338 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f339 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f339 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f340 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f340 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f341 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f341 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f337, $f19 -> $f338, $f20 -> $f339), [AppliedId(id16: ($f29 -> $f340, $f30 -> $f338)), AppliedId(id13: ($f24 -> $f337, $f25 -> $f341, $f26 -> $f340)), AppliedId(id16: ($f29 -> $f341, $f30 -> $f339))])
[entry::chc] get {$f341: Node, $f338: Int, $f339: Int, $f340: Node, $f337: Int}
[slotted_egraphs::egraph::add] classes insert id62
[slotted_egraphs::egraph::add] add to id62 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] remove from id62 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id62 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f337, $f338, $f339, $f340, $f341}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f337 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f337 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f338 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f338 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f339 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f339 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f340 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f340 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f341 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f341 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f337, $f19 -> $f338, $f20 -> $f339), [AppliedId(id16: ($f29 -> $f340, $f30 -> $f338)), AppliedId(id13: ($f24 -> $f337, $f25 -> $f341, $f26 -> $f340)), AppliedId(id16: ($f29 -> $f341, $f30 -> $f339))])
[entry::chc] get {$f341: Node, $f340: Node, $f337: Int, $f338: Int, $f339: Int}
[entry::chc] calling merge to id62
[entry::chc] eclassSlots {$f337, $f341, $f340, $f339, $f338}
[entry::chc] result varTypes {$f338: Int, $f341: Node, $f339: Int, $f337: Int, $f340: Node}
[slotted_egraphs::egraph::union] Call move_to id62: ($f337 -> $f206, $f338 -> $f207, $f339 -> $f208, $f340 -> $f209, $f341 -> $f210), id17: ($f31 -> $f206, $f32 -> $f210, $f33 -> $f209, $f34 -> $f207, $f35 -> $f208)
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f32: Node, $f34: Int, $f35: Int, $f33: Node, $f31: Int}
[slotted_egraphs::egraph::add] remove from id62 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::union] adding New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f34: Int, $f35: Int, $f32: Node, $f31: Int, $f33: Node}
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f32: Node, $f34: Int, $f35: Int, $f33: Node, $f31: Int}
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f342, $f19 -> $f343, $f20 -> $f344), [AppliedId(id16: ($f29 -> $f345, $f30 -> $f343)), AppliedId(id16: ($f29 -> $f346, $f30 -> $f344)), AppliedId(id13: ($f24 -> $f342, $f25 -> $f346, $f26 -> $f345))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f342, $f343, $f344, $f345, $f346}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f342 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f342 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f343 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f343 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f344 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f344 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f345 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f345 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f346 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f346 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f342, $f19 -> $f343, $f20 -> $f344), [AppliedId(id16: ($f29 -> $f345, $f30 -> $f343)), AppliedId(id16: ($f29 -> $f346, $f30 -> $f344)), AppliedId(id13: ($f24 -> $f342, $f25 -> $f346, $f26 -> $f345))])
[entry::chc] get {$f343: Int, $f346: Node, $f344: Int, $f345: Node, $f342: Int}
[slotted_egraphs::egraph::add] classes insert id63
[slotted_egraphs::egraph::add] add to id63 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] remove from id63 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id63 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f342, $f343, $f344, $f345, $f346}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f342 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f342 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f343 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f343 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f344 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f344 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f345 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f345 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f346 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f346 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f342, $f19 -> $f343, $f20 -> $f344), [AppliedId(id16: ($f29 -> $f345, $f30 -> $f343)), AppliedId(id16: ($f29 -> $f346, $f30 -> $f344)), AppliedId(id13: ($f24 -> $f342, $f25 -> $f346, $f26 -> $f345))])
[entry::chc] get {$f344: Int, $f345: Node, $f342: Int, $f343: Int, $f346: Node}
[entry::chc] calling merge to id63
[entry::chc] eclassSlots {$f342, $f346, $f345, $f344, $f343}
[entry::chc] result varTypes {$f344: Int, $f343: Int, $f346: Node, $f342: Int, $f345: Node}
[slotted_egraphs::egraph::union] Call move_to id63: ($f342 -> $f206, $f343 -> $f207, $f344 -> $f208, $f345 -> $f209, $f346 -> $f210), id17: ($f31 -> $f206, $f32 -> $f210, $f33 -> $f209, $f34 -> $f207, $f35 -> $f208)
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f35: Int, $f33: Node, $f31: Int, $f34: Int, $f32: Node}
[slotted_egraphs::egraph::add] remove from id63 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::union] adding New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))]) to self.pending
[slotted_egraphs::egraph::add] remove from id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[entry::chc] get {$f33: Node, $f32: Node, $f34: Int, $f31: Int, $f35: Int}
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f31: Int, $f33: Node, $f34: Int, $f32: Node, $f35: Int}
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f347, $f19 -> $f348, $f20 -> $f349), [AppliedId(id13: ($f24 -> $f347, $f25 -> $f351, $f26 -> $f350)), AppliedId(id16: ($f29 -> $f351, $f30 -> $f349)), AppliedId(id16: ($f29 -> $f350, $f30 -> $f348))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f347, $f348, $f349, $f350, $f351}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f347 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f347 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f348 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f348 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f349 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f349 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f350 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f350 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f351 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f351 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f347, $f19 -> $f348, $f20 -> $f349), [AppliedId(id13: ($f24 -> $f347, $f25 -> $f351, $f26 -> $f350)), AppliedId(id16: ($f29 -> $f351, $f30 -> $f349)), AppliedId(id16: ($f29 -> $f350, $f30 -> $f348))])
[entry::chc] get {$f348: Int, $f351: Node, $f350: Node, $f347: Int, $f349: Int}
[slotted_egraphs::egraph::add] classes insert id64
[slotted_egraphs::egraph::add] add to id64 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] remove from id64 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id64 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f347, $f348, $f349, $f350, $f351}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f347 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f347 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f348 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f348 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f349 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f349 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f350 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f350 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f351 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f351 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f347, $f19 -> $f348, $f20 -> $f349), [AppliedId(id13: ($f24 -> $f347, $f25 -> $f351, $f26 -> $f350)), AppliedId(id16: ($f29 -> $f351, $f30 -> $f349)), AppliedId(id16: ($f29 -> $f350, $f30 -> $f348))])
[entry::chc] get {$f348: Int, $f351: Node, $f347: Int, $f349: Int, $f350: Node}
[entry::chc] calling merge to id64
[entry::chc] eclassSlots {$f348, $f347, $f351, $f350, $f349}
[entry::chc] result varTypes {$f351: Node, $f350: Node, $f349: Int, $f347: Int, $f348: Int}
[slotted_egraphs::egraph::union] Call move_to id64: ($f347 -> $f206, $f348 -> $f207, $f349 -> $f208, $f350 -> $f209, $f351 -> $f210), id17: ($f31 -> $f206, $f32 -> $f210, $f33 -> $f209, $f34 -> $f207, $f35 -> $f208)
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f31: Int, $f32: Node, $f33: Node, $f34: Int, $f35: Int}
[slotted_egraphs::egraph::add] remove from id64 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::union] adding New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[entry::chc] get {$f35: Int, $f34: Int, $f31: Int, $f32: Node, $f33: Node}
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f33: Node, $f31: Int, $f34: Int, $f35: Int, $f32: Node}
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f352, $f19 -> $f353, $f20 -> $f354), [AppliedId(id16: ($f29 -> $f356, $f30 -> $f354)), AppliedId(id13: ($f24 -> $f352, $f25 -> $f356, $f26 -> $f355)), AppliedId(id16: ($f29 -> $f355, $f30 -> $f353))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f352, $f353, $f354, $f355, $f356}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f352 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f352 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f353 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f353 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f354 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f354 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f355 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f355 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f356 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f356 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f352, $f19 -> $f353, $f20 -> $f354), [AppliedId(id16: ($f29 -> $f356, $f30 -> $f354)), AppliedId(id13: ($f24 -> $f352, $f25 -> $f356, $f26 -> $f355)), AppliedId(id16: ($f29 -> $f355, $f30 -> $f353))])
[entry::chc] get {$f352: Int, $f355: Node, $f356: Node, $f354: Int, $f353: Int}
[slotted_egraphs::egraph::add] classes insert id65
[slotted_egraphs::egraph::add] add to id65 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] remove from id65 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id65 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f352, $f353, $f354, $f355, $f356}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f352 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f352 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f353 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f353 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f354 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f354 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f355 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f355 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f356 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f356 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f352, $f19 -> $f353, $f20 -> $f354), [AppliedId(id16: ($f29 -> $f356, $f30 -> $f354)), AppliedId(id13: ($f24 -> $f352, $f25 -> $f356, $f26 -> $f355)), AppliedId(id16: ($f29 -> $f355, $f30 -> $f353))])
[entry::chc] get {$f355: Node, $f354: Int, $f352: Int, $f353: Int, $f356: Node}
[entry::chc] calling merge to id65
[entry::chc] eclassSlots {$f354, $f353, $f352, $f356, $f355}
[entry::chc] result varTypes {$f356: Node, $f353: Int, $f352: Int, $f354: Int, $f355: Node}
[slotted_egraphs::egraph::union] Call move_to id65: ($f352 -> $f206, $f353 -> $f207, $f354 -> $f208, $f355 -> $f209, $f356 -> $f210), id17: ($f31 -> $f206, $f32 -> $f210, $f33 -> $f209, $f34 -> $f207, $f35 -> $f208)
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f34: Int, $f33: Node, $f32: Node, $f35: Int, $f31: Int}
[slotted_egraphs::egraph::add] remove from id65 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::union] adding New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[entry::chc] get {$f31: Int, $f32: Node, $f35: Int, $f33: Node, $f34: Int}
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f34: Int, $f33: Node, $f32: Node, $f35: Int, $f31: Int}
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f357, $f19 -> $f358, $f20 -> $f359), [AppliedId(id16: ($f29 -> $f361, $f30 -> $f359)), AppliedId(id16: ($f29 -> $f360, $f30 -> $f358)), AppliedId(id13: ($f24 -> $f357, $f25 -> $f361, $f26 -> $f360))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f357, $f358, $f359, $f360, $f361}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f357 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f357 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f358 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f358 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f359 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f359 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f360 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f360 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f361 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f361 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f357, $f19 -> $f358, $f20 -> $f359), [AppliedId(id16: ($f29 -> $f361, $f30 -> $f359)), AppliedId(id16: ($f29 -> $f360, $f30 -> $f358)), AppliedId(id13: ($f24 -> $f357, $f25 -> $f361, $f26 -> $f360))])
[entry::chc] get {$f359: Int, $f361: Node, $f358: Int, $f360: Node, $f357: Int}
[slotted_egraphs::egraph::add] classes insert id66
[slotted_egraphs::egraph::add] add to id66 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] remove from id66 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id66 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f357, $f358, $f359, $f360, $f361}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f357 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f357 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f358 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f358 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f359 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f359 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f360 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f360 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f361 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f361 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f357, $f19 -> $f358, $f20 -> $f359), [AppliedId(id16: ($f29 -> $f361, $f30 -> $f359)), AppliedId(id16: ($f29 -> $f360, $f30 -> $f358)), AppliedId(id13: ($f24 -> $f357, $f25 -> $f361, $f26 -> $f360))])
[entry::chc] get {$f360: Node, $f357: Int, $f358: Int, $f359: Int, $f361: Node}
[entry::chc] calling merge to id66
[entry::chc] eclassSlots {$f360, $f359, $f358, $f357, $f361}
[entry::chc] result varTypes {$f357: Int, $f360: Node, $f359: Int, $f361: Node, $f358: Int}
[slotted_egraphs::egraph::union] Call move_to id66: ($f357 -> $f206, $f358 -> $f207, $f359 -> $f208, $f360 -> $f209, $f361 -> $f210), id17: ($f31 -> $f206, $f32 -> $f210, $f33 -> $f209, $f34 -> $f207, $f35 -> $f208)
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f33: Node, $f31: Int, $f35: Int, $f34: Int, $f32: Node}
[slotted_egraphs::egraph::add] remove from id66 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::union] adding New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))]) to self.pending
[slotted_egraphs::egraph::add] remove from id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id17 New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[entry::chc] get {$f35: Int, $f31: Int, $f33: Node, $f32: Node, $f34: Int}
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f32, $f31, $f35, $f34, $f33}
[entry::chc] result varTypes {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node}
[entry::chc] calling make on New(id15: ($f27 -> $f362, $f28 -> $f363), id58: ($f150 -> $f362, $f151 -> $f363, $f152 -> $f364, $f153 -> $f365, $f154 -> $f366, $f155 -> $f367), [AppliedId(id16: ($f29 -> $f366, $f30 -> $f368)), AppliedId(id16: ($f29 -> $f365, $f30 -> $f369)), AppliedId(id31: ($f68 -> $f369, $f69 -> $f368, $f70 -> $f367))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f362, $f363, $f364, $f365, $f366, $f367, $f368, $f369}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f362 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f362 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f363 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f363 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f364 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f365 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f365 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f366 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f366 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f367 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f367 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f369 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f369 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f362, $f28 -> $f363), id58: ($f150 -> $f362, $f151 -> $f363, $f152 -> $f364, $f153 -> $f365, $f154 -> $f366, $f155 -> $f367), [AppliedId(id16: ($f29 -> $f366, $f30 -> $f368)), AppliedId(id16: ($f29 -> $f365, $f30 -> $f369)), AppliedId(id31: ($f68 -> $f369, $f69 -> $f368, $f70 -> $f367))])
[entry::chc] get {$f367: Int, $f363: Int, $f369: Int, $f364: Int, $f368: Int, $f365: Node, $f362: Node, $f366: Node}
[slotted_egraphs::egraph::add] classes insert id67
[slotted_egraphs::egraph::add] add to id67 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[slotted_egraphs::egraph::add] remove from id67 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[slotted_egraphs::egraph::add] add to id67 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f362, $f363, $f364, $f365, $f366, $f367, $f368, $f369}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f362 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f362 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f363 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f363 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f364 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f365 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f365 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f366 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f366 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f367 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f367 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f369 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f369 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f362, $f28 -> $f363), id58: ($f150 -> $f362, $f151 -> $f363, $f152 -> $f364, $f153 -> $f365, $f154 -> $f366, $f155 -> $f367), [AppliedId(id16: ($f29 -> $f366, $f30 -> $f368)), AppliedId(id16: ($f29 -> $f365, $f30 -> $f369)), AppliedId(id31: ($f68 -> $f369, $f69 -> $f368, $f70 -> $f367))])
[entry::chc] get {$f363: Int, $f364: Int, $f365: Node, $f366: Node, $f367: Int, $f368: Int, $f362: Node, $f369: Int}
[entry::chc] calling merge to id67
[entry::chc] eclassSlots {$f369, $f368, $f367, $f366, $f365, $f364, $f363, $f362}
[entry::chc] result varTypes {$f362: Node, $f369: Int, $f366: Node, $f364: Int, $f367: Int, $f365: Node, $f363: Int, $f368: Int}
[slotted_egraphs::egraph::union] Call move_to id67: ($f362 -> $f244, $f363 -> $f245), id60: ($f164 -> $f244, $f165 -> $f245)
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f177, $f172, $f165, $f176, $f164, $f175, $f174, $f173}
[entry::chc] result varTypes {$f176: Int, $f165: Int, $f174: Node, $f164: Node, $f177: Int, $f173: Node, $f175: Int, $f172: Int}
[slotted_egraphs::egraph::add] remove from id67 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[slotted_egraphs::egraph::union] adding New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))]) to self.pending
[slotted_egraphs::egraph::add] remove from id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id16: ($f29 -> $3, $f30 -> $7)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f376, $f377, $f378, $f379, $f380, $f381}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f376 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f377 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f377 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f378 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f378 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f379 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f379 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f380 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f380 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f381 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f381 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
[entry::chc] get {$f376: Int, $f378: Node, $f164: Node, $f379: Int, $f380: Int, $f377: Node, $f381: Int, $f165: Int}
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f172, $f380, $f378, $f177, $f376, $f164, $f175, $f173, $f381, $f379, $f377, $f165, $f176, $f174}
[entry::chc] result varTypes {$f172: Int, $f380: Int, $f377: Node, $f378: Node, $f174: Node, $f176: Int, $f164: Node, $f175: Int, $f376: Int, $f381: Int, $f177: Int, $f379: Int, $f165: Int, $f173: Node}
[slotted_egraphs::egraph::add] remove from id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[entry::chc] get {$f29: Node, $f30: Int}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Int, $f29: Node}
[entry::chc] calling make on New(id15: ($f27 -> $f382, $f28 -> $f383), id58: ($f150 -> $f382, $f151 -> $f383, $f152 -> $f384, $f153 -> $f385, $f154 -> $f386, $f155 -> $f387), [AppliedId(id16: ($f29 -> $f386, $f30 -> $f388)), AppliedId(id31: ($f68 -> $f389, $f69 -> $f388, $f70 -> $f387)), AppliedId(id16: ($f29 -> $f385, $f30 -> $f389))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f382, $f383, $f384, $f385, $f386, $f387, $f388, $f389}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f382 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f382 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f383 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f383 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f384 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f385 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f385 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f386 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f386 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f387 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f387 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f388 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f388 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f389 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f389 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f382, $f28 -> $f383), id58: ($f150 -> $f382, $f151 -> $f383, $f152 -> $f384, $f153 -> $f385, $f154 -> $f386, $f155 -> $f387), [AppliedId(id16: ($f29 -> $f386, $f30 -> $f388)), AppliedId(id31: ($f68 -> $f389, $f69 -> $f388, $f70 -> $f387)), AppliedId(id16: ($f29 -> $f385, $f30 -> $f389))])
[entry::chc] get {$f382: Node, $f387: Int, $f384: Int, $f385: Node, $f389: Int, $f383: Int, $f386: Node, $f388: Int}
[slotted_egraphs::egraph::add] classes insert id68
[slotted_egraphs::egraph::add] add to id68 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[slotted_egraphs::egraph::add] remove from id68 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id68 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f382, $f383, $f384, $f385, $f386, $f387, $f388, $f389}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f382 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f382 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f383 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f383 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f384 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f385 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f385 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f386 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f386 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f387 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f387 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f388 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f388 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f389 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f389 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f382, $f28 -> $f383), id58: ($f150 -> $f382, $f151 -> $f383, $f152 -> $f384, $f153 -> $f385, $f154 -> $f386, $f155 -> $f387), [AppliedId(id16: ($f29 -> $f386, $f30 -> $f388)), AppliedId(id31: ($f68 -> $f389, $f69 -> $f388, $f70 -> $f387)), AppliedId(id16: ($f29 -> $f385, $f30 -> $f389))])
[entry::chc] get {$f388: Int, $f389: Int, $f387: Int, $f383: Int, $f386: Node, $f382: Node, $f384: Int, $f385: Node}
[entry::chc] calling merge to id68
[entry::chc] eclassSlots {$f384, $f383, $f382, $f389, $f388, $f387, $f386, $f385}
[entry::chc] result varTypes {$f384: Int, $f382: Node, $f389: Int, $f388: Int, $f383: Int, $f387: Int, $f385: Node, $f386: Node}
[slotted_egraphs::egraph::union] Call move_to id68: ($f382 -> $f244, $f383 -> $f245), id60: ($f164 -> $f244, $f165 -> $f245)
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f172, $f380, $f378, $f177, $f376, $f164, $f175, $f173, $f381, $f379, $f377, $f165, $f176, $f174}
[entry::chc] result varTypes {$f175: Int, $f173: Node, $f376: Int, $f377: Node, $f177: Int, $f172: Int, $f176: Int, $f381: Int, $f379: Int, $f165: Int, $f174: Node, $f164: Node, $f380: Int, $f378: Node}
[slotted_egraphs::egraph::add] remove from id68 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[slotted_egraphs::egraph::union] adding New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))]) to self.pending
[slotted_egraphs::egraph::add] remove from id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $4, $f30 -> $6)), AppliedId(id31: ($f68 -> $7, $f69 -> $6, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f396, $f397, $f398, $f399, $f400, $f401}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f396 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f397 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f397 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f398 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f398 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f399 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f399 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f400 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f400 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f401 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f401 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
[entry::chc] get {$f399: Int, $f401: Int, $f164: Node, $f397: Node, $f396: Int, $f398: Node, $f400: Int, $f165: Int}
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f172, $f380, $f378, $f177, $f376, $f164, $f175, $f398, $f173, $f396, $f400, $f381, $f379, $f401, $f377, $f165, $f176, $f399, $f174, $f397}
[entry::chc] result varTypes {$f399: Int, $f376: Int, $f177: Int, $f380: Int, $f173: Node, $f378: Node, $f176: Int, $f381: Int, $f397: Node, $f175: Int, $f379: Int, $f165: Int, $f172: Int, $f398: Node, $f377: Node, $f164: Node, $f400: Int, $f174: Node, $f396: Int, $f401: Int}
[slotted_egraphs::egraph::add] remove from id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[entry::chc] get {$f30: Int, $f29: Node}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Node, $f30: Int}
[entry::chc] calling make on New(id15: ($f27 -> $f402, $f28 -> $f403), id58: ($f150 -> $f402, $f151 -> $f403, $f152 -> $f404, $f153 -> $f405, $f154 -> $f406, $f155 -> $f407), [AppliedId(id16: ($f29 -> $f405, $f30 -> $f409)), AppliedId(id31: ($f68 -> $f409, $f69 -> $f408, $f70 -> $f407)), AppliedId(id16: ($f29 -> $f406, $f30 -> $f408))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f402, $f403, $f404, $f405, $f406, $f407, $f408, $f409}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f402 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f402 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f403 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f403 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f404 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f405 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f405 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f406 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f406 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f407 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f407 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f408 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f408 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f409 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f409 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f402, $f28 -> $f403), id58: ($f150 -> $f402, $f151 -> $f403, $f152 -> $f404, $f153 -> $f405, $f154 -> $f406, $f155 -> $f407), [AppliedId(id16: ($f29 -> $f405, $f30 -> $f409)), AppliedId(id31: ($f68 -> $f409, $f69 -> $f408, $f70 -> $f407)), AppliedId(id16: ($f29 -> $f406, $f30 -> $f408))])
[entry::chc] get {$f407: Int, $f402: Node, $f408: Int, $f405: Node, $f403: Int, $f404: Int, $f406: Node, $f409: Int}
[slotted_egraphs::egraph::add] classes insert id69
[slotted_egraphs::egraph::add] add to id69 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] remove from id69 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id69 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f402, $f403, $f404, $f405, $f406, $f407, $f408, $f409}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f402 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f402 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f403 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f403 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f404 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f405 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f405 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f406 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f406 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f407 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f407 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f408 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f408 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f409 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f409 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f402, $f28 -> $f403), id58: ($f150 -> $f402, $f151 -> $f403, $f152 -> $f404, $f153 -> $f405, $f154 -> $f406, $f155 -> $f407), [AppliedId(id16: ($f29 -> $f405, $f30 -> $f409)), AppliedId(id31: ($f68 -> $f409, $f69 -> $f408, $f70 -> $f407)), AppliedId(id16: ($f29 -> $f406, $f30 -> $f408))])
[entry::chc] get {$f405: Node, $f402: Node, $f409: Int, $f404: Int, $f403: Int, $f408: Int, $f406: Node, $f407: Int}
[entry::chc] calling merge to id69
[entry::chc] eclassSlots {$f407, $f406, $f405, $f404, $f403, $f402, $f409, $f408}
[entry::chc] result varTypes {$f402: Node, $f403: Int, $f404: Int, $f407: Int, $f408: Int, $f405: Node, $f406: Node, $f409: Int}
[slotted_egraphs::egraph::union] Call move_to id69: ($f402 -> $f244, $f403 -> $f245), id60: ($f164 -> $f244, $f165 -> $f245)
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f172, $f380, $f378, $f177, $f376, $f164, $f175, $f398, $f173, $f396, $f400, $f381, $f379, $f401, $f377, $f165, $f176, $f399, $f174, $f397}
[entry::chc] result varTypes {$f400: Int, $f399: Int, $f379: Int, $f173: Node, $f398: Node, $f396: Int, $f378: Node, $f380: Int, $f397: Node, $f377: Node, $f376: Int, $f165: Int, $f164: Node, $f176: Int, $f401: Int, $f174: Node, $f175: Int, $f381: Int, $f172: Int, $f177: Int}
[slotted_egraphs::egraph::add] remove from id69 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::union] adding New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))]) to self.pending
[slotted_egraphs::egraph::add] remove from id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f416, $f417, $f418, $f419, $f420, $f421}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f416 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f417 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f417 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f418 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f418 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f419 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f419 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f420 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f420 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f421 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f421 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
[entry::chc] get {$f418: Node, $f420: Int, $f421: Int, $f416: Int, $f417: Node, $f164: Node, $f419: Int, $f165: Int}
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f419, $f172, $f417, $f380, $f378, $f177, $f376, $f164, $f175, $f420, $f173, $f396, $f418, $f398, $f400, $f416, $f381, $f379, $f401, $f377, $f165, $f176, $f399, $f421, $f174, $f397}
[entry::chc] result varTypes {$f174: Node, $f397: Node, $f400: Int, $f380: Int, $f417: Node, $f379: Int, $f401: Int, $f376: Int, $f418: Node, $f172: Int, $f396: Int, $f420: Int, $f164: Node, $f398: Node, $f419: Int, $f177: Int, $f176: Int, $f173: Node, $f381: Int, $f175: Int, $f378: Node, $f165: Int, $f377: Node, $f399: Int, $f416: Int, $f421: Int}
[slotted_egraphs::egraph::add] remove from id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[entry::chc] get {$f30: Int, $f29: Node}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Int, $f29: Node}
[entry::chc] calling make on New(id15: ($f27 -> $f422, $f28 -> $f423), id58: ($f150 -> $f422, $f151 -> $f423, $f152 -> $f424, $f153 -> $f425, $f154 -> $f426, $f155 -> $f427), [AppliedId(id31: ($f68 -> $f429, $f69 -> $f428, $f70 -> $f427)), AppliedId(id16: ($f29 -> $f425, $f30 -> $f429)), AppliedId(id16: ($f29 -> $f426, $f30 -> $f428))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f422, $f423, $f424, $f425, $f426, $f427, $f428, $f429}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f422 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f422 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f423 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f423 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f424 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f425 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f425 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f426 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f426 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f427 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f427 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f428 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f428 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f429 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f429 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f422, $f28 -> $f423), id58: ($f150 -> $f422, $f151 -> $f423, $f152 -> $f424, $f153 -> $f425, $f154 -> $f426, $f155 -> $f427), [AppliedId(id31: ($f68 -> $f429, $f69 -> $f428, $f70 -> $f427)), AppliedId(id16: ($f29 -> $f425, $f30 -> $f429)), AppliedId(id16: ($f29 -> $f426, $f30 -> $f428))])
[entry::chc] get {$f424: Int, $f427: Int, $f426: Node, $f425: Node, $f423: Int, $f428: Int, $f429: Int, $f422: Node}
[slotted_egraphs::egraph::add] classes insert id70
[slotted_egraphs::egraph::add] add to id70 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] remove from id70 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id70 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f422, $f423, $f424, $f425, $f426, $f427, $f428, $f429}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f422 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f422 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f423 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f423 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f424 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f425 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f425 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f426 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f426 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f427 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f427 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f428 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f428 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f429 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f429 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f422, $f28 -> $f423), id58: ($f150 -> $f422, $f151 -> $f423, $f152 -> $f424, $f153 -> $f425, $f154 -> $f426, $f155 -> $f427), [AppliedId(id31: ($f68 -> $f429, $f69 -> $f428, $f70 -> $f427)), AppliedId(id16: ($f29 -> $f425, $f30 -> $f429)), AppliedId(id16: ($f29 -> $f426, $f30 -> $f428))])
[entry::chc] get {$f427: Int, $f425: Node, $f428: Int, $f424: Int, $f422: Node, $f429: Int, $f423: Int, $f426: Node}
[entry::chc] calling merge to id70
[entry::chc] eclassSlots {$f429, $f428, $f427, $f426, $f425, $f424, $f423, $f422}
[entry::chc] result varTypes {$f424: Int, $f425: Node, $f427: Int, $f428: Int, $f422: Node, $f426: Node, $f429: Int, $f423: Int}
[slotted_egraphs::egraph::union] Call move_to id70: ($f422 -> $f244, $f423 -> $f245), id60: ($f164 -> $f244, $f165 -> $f245)
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f419, $f172, $f417, $f380, $f378, $f177, $f376, $f164, $f175, $f420, $f173, $f396, $f418, $f398, $f400, $f416, $f381, $f379, $f401, $f377, $f165, $f176, $f399, $f421, $f174, $f397}
[entry::chc] result varTypes {$f174: Node, $f376: Int, $f177: Int, $f173: Node, $f401: Int, $f398: Node, $f165: Int, $f417: Node, $f176: Int, $f164: Node, $f380: Int, $f397: Node, $f378: Node, $f381: Int, $f420: Int, $f418: Node, $f421: Int, $f400: Int, $f379: Int, $f416: Int, $f399: Int, $f377: Node, $f419: Int, $f172: Int, $f175: Int, $f396: Int}
[slotted_egraphs::egraph::add] remove from id70 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::union] adding New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))]) to self.pending
[slotted_egraphs::egraph::add] remove from id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f436, $f437, $f438, $f439, $f440, $f441}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f436 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f437 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f437 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f438 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f438 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f439 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f439 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f440 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f440 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f441 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f441 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
[entry::chc] get {$f164: Node, $f441: Int, $f438: Node, $f165: Int, $f437: Node, $f439: Int, $f436: Int, $f440: Int}
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f419, $f172, $f441, $f437, $f378, $f400, $f164, $f175, $f396, $f418, $f440, $f381, $f436, $f377, $f399, $f421, $f174, $f417, $f439, $f380, $f177, $f376, $f398, $f420, $f173, $f416, $f438, $f379, $f401, $f165, $f176, $f397}
[entry::chc] result varTypes {$f376: Int, $f416: Int, $f420: Int, $f440: Int, $f439: Int, $f172: Int, $f379: Int, $f175: Int, $f400: Int, $f436: Int, $f421: Int, $f396: Int, $f401: Int, $f418: Node, $f174: Node, $f176: Int, $f173: Node, $f419: Int, $f377: Node, $f437: Node, $f417: Node, $f438: Node, $f398: Node, $f380: Int, $f378: Node, $f397: Node, $f381: Int, $f164: Node, $f177: Int, $f165: Int, $f441: Int, $f399: Int}
[slotted_egraphs::egraph::add] remove from id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[entry::chc] get {$f30: Int, $f29: Node}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f29: Node, $f30: Int}
[entry::chc] calling make on New(id15: ($f27 -> $f442, $f28 -> $f443), id58: ($f150 -> $f442, $f151 -> $f443, $f152 -> $f444, $f153 -> $f445, $f154 -> $f446, $f155 -> $f447), [AppliedId(id31: ($f68 -> $f449, $f69 -> $f448, $f70 -> $f447)), AppliedId(id16: ($f29 -> $f446, $f30 -> $f448)), AppliedId(id16: ($f29 -> $f445, $f30 -> $f449))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f442, $f443, $f444, $f445, $f446, $f447, $f448, $f449}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f442 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f442 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f443 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f443 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f444 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f445 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f445 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f446 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f446 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f447 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f447 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f448 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f448 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f449 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f449 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f442, $f28 -> $f443), id58: ($f150 -> $f442, $f151 -> $f443, $f152 -> $f444, $f153 -> $f445, $f154 -> $f446, $f155 -> $f447), [AppliedId(id31: ($f68 -> $f449, $f69 -> $f448, $f70 -> $f447)), AppliedId(id16: ($f29 -> $f446, $f30 -> $f448)), AppliedId(id16: ($f29 -> $f445, $f30 -> $f449))])
[entry::chc] get {$f444: Int, $f448: Int, $f442: Node, $f446: Node, $f445: Node, $f443: Int, $f447: Int, $f449: Int}
[slotted_egraphs::egraph::add] classes insert id71
[slotted_egraphs::egraph::add] add to id71 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[slotted_egraphs::egraph::add] remove from id71 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[slotted_egraphs::egraph::add] add to id71 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f442, $f443, $f444, $f445, $f446, $f447, $f448, $f449}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f442 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f442 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f443 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f443 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f444 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f445 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f445 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f446 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f446 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f447 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f447 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f448 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f448 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f449 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f449 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f442, $f28 -> $f443), id58: ($f150 -> $f442, $f151 -> $f443, $f152 -> $f444, $f153 -> $f445, $f154 -> $f446, $f155 -> $f447), [AppliedId(id31: ($f68 -> $f449, $f69 -> $f448, $f70 -> $f447)), AppliedId(id16: ($f29 -> $f446, $f30 -> $f448)), AppliedId(id16: ($f29 -> $f445, $f30 -> $f449))])
[entry::chc] get {$f442: Node, $f443: Int, $f447: Int, $f448: Int, $f445: Node, $f444: Int, $f449: Int, $f446: Node}
[entry::chc] calling merge to id71
[entry::chc] eclassSlots {$f442, $f449, $f448, $f447, $f446, $f445, $f444, $f443}
[entry::chc] result varTypes {$f443: Int, $f445: Node, $f442: Node, $f446: Node, $f449: Int, $f448: Int, $f447: Int, $f444: Int}
[slotted_egraphs::egraph::union] Call move_to id71: ($f442 -> $f244, $f443 -> $f245), id60: ($f164 -> $f244, $f165 -> $f245)
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f419, $f172, $f441, $f437, $f378, $f400, $f164, $f175, $f396, $f418, $f440, $f381, $f436, $f377, $f399, $f421, $f174, $f417, $f439, $f380, $f177, $f376, $f398, $f420, $f173, $f416, $f438, $f379, $f401, $f165, $f176, $f397}
[entry::chc] result varTypes {$f165: Int, $f381: Int, $f397: Node, $f416: Int, $f164: Node, $f173: Node, $f400: Int, $f174: Node, $f396: Int, $f401: Int, $f420: Int, $f398: Node, $f440: Int, $f379: Int, $f439: Int, $f436: Int, $f175: Int, $f441: Int, $f438: Node, $f437: Node, $f418: Node, $f177: Int, $f176: Int, $f380: Int, $f376: Int, $f417: Node, $f421: Int, $f419: Int, $f378: Node, $f172: Int, $f399: Int, $f377: Node}
[slotted_egraphs::egraph::add] remove from id71 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[slotted_egraphs::egraph::union] adding New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))]) to self.pending
[slotted_egraphs::egraph::add] remove from id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[slotted_egraphs::egraph::add] add to id60 New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id16: ($f29 -> $3, $f30 -> $6))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f456, $f457, $f458, $f459, $f460, $f461}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f456 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f457 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f457 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f458 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f458 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f459 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f459 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f460 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f460 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f461 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f461 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
[entry::chc] get {$f456: Int, $f459: Int, $f460: Int, $f461: Int, $f165: Int, $f457: Node, $f164: Node, $f458: Node}
[entry::chc] calling merge to id60
[entry::chc] eclassSlots {$f419, $f172, $f441, $f437, $f378, $f459, $f400, $f164, $f175, $f396, $f418, $f440, $f381, $f436, $f377, $f458, $f399, $f421, $f174, $f417, $f439, $f380, $f461, $f177, $f376, $f457, $f398, $f420, $f173, $f416, $f438, $f379, $f460, $f401, $f165, $f176, $f456, $f397}
[entry::chc] result varTypes {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node}
[slotted_egraphs::egraph::add] remove from id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[entry::chc] get {$f29: Node, $f30: Int}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Int, $f29: Node}
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc] calling make on Compose([AppliedId(id43: ($f100 -> $f462, $f101 -> $f463, $f102 -> $f464)), AppliedId(id36: ($f77 -> $f462, $f78 -> $f463, $f79 -> $f464)), AppliedId(id50: ($f126 -> $f462, $f127 -> $f463, $f128 -> $f464))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f462, $f463, $f464}
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f462 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f462 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f462 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f463 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f463 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f463 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f464 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f464 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f464 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id43: ($f100 -> $f462, $f101 -> $f463, $f102 -> $f464)), AppliedId(id36: ($f77 -> $f462, $f78 -> $f463, $f79 -> $f464)), AppliedId(id50: ($f126 -> $f462, $f127 -> $f463, $f128 -> $f464))])
[entry::chc] get {$f464: Node, $f463: Node, $f462: Int}
[slotted_egraphs::egraph::add] classes insert id72
[slotted_egraphs::egraph::add] add to id72 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] remove from id72 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] add to id72 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f462, $f463, $f464}
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f462 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f462 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f462 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f463 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f463 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f463 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f464 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f464 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f464 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id43: ($f100 -> $f462, $f101 -> $f463, $f102 -> $f464)), AppliedId(id36: ($f77 -> $f462, $f78 -> $f463, $f79 -> $f464)), AppliedId(id50: ($f126 -> $f462, $f127 -> $f463, $f128 -> $f464))])
[entry::chc] get {$f462: Int, $f463: Node, $f464: Node}
[entry::chc] calling merge to id72
[entry::chc] eclassSlots {$f463, $f462, $f464}
[entry::chc] result varTypes {$f464: Node, $f462: Int, $f463: Node}
[slotted_egraphs::egraph::union] Call move_to id72: ($f462 -> $f257, $f463 -> $f258, $f464 -> $f259), id13: ($f24 -> $f257, $f25 -> $f258, $f26 -> $f259)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f24: Int, $f26: Node, $f25: Node}
[slotted_egraphs::egraph::add] remove from id72 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[entry::chc] get {$f24: Int, $f26: Node, $f25: Node}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f24: Int, $f26: Node, $f25: Node}
[entry::chc] calling make on Compose([AppliedId(id43: ($f100 -> $f465, $f101 -> $f466, $f102 -> $f467)), AppliedId(id50: ($f126 -> $f465, $f127 -> $f466, $f128 -> $f467)), AppliedId(id36: ($f77 -> $f465, $f78 -> $f466, $f79 -> $f467))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f465, $f466, $f467}
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f465 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f465 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f465 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f466 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f466 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f466 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f467 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f467 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f467 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id43: ($f100 -> $f465, $f101 -> $f466, $f102 -> $f467)), AppliedId(id50: ($f126 -> $f465, $f127 -> $f466, $f128 -> $f467)), AppliedId(id36: ($f77 -> $f465, $f78 -> $f466, $f79 -> $f467))])
[entry::chc] get {$f466: Node, $f467: Node, $f465: Int}
[slotted_egraphs::egraph::add] classes insert id73
[slotted_egraphs::egraph::add] add to id73 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] remove from id73 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] add to id73 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f465, $f466, $f467}
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f465 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f465 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f465 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f466 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f466 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f466 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f467 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f467 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f467 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id43: ($f100 -> $f465, $f101 -> $f466, $f102 -> $f467)), AppliedId(id50: ($f126 -> $f465, $f127 -> $f466, $f128 -> $f467)), AppliedId(id36: ($f77 -> $f465, $f78 -> $f466, $f79 -> $f467))])
[entry::chc] get {$f467: Node, $f466: Node, $f465: Int}
[entry::chc] calling merge to id73
[entry::chc] eclassSlots {$f466, $f465, $f467}
[entry::chc] result varTypes {$f465: Int, $f467: Node, $f466: Node}
[slotted_egraphs::egraph::union] Call move_to id73: ($f465 -> $f257, $f466 -> $f258, $f467 -> $f259), id13: ($f24 -> $f257, $f25 -> $f258, $f26 -> $f259)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f26: Node, $f25: Node, $f24: Int}
[slotted_egraphs::egraph::add] remove from id73 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[entry::chc] get {$f24: Int, $f25: Node, $f26: Node}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f24: Int, $f26: Node}
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $f468, $f78 -> $f469, $f79 -> $f470)), AppliedId(id50: ($f126 -> $f468, $f127 -> $f469, $f128 -> $f470)), AppliedId(id43: ($f100 -> $f468, $f101 -> $f469, $f102 -> $f470))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f468, $f469, $f470}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f468 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f468 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f468 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f470 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f470 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f470 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f468, $f78 -> $f469, $f79 -> $f470)), AppliedId(id50: ($f126 -> $f468, $f127 -> $f469, $f128 -> $f470)), AppliedId(id43: ($f100 -> $f468, $f101 -> $f469, $f102 -> $f470))])
[entry::chc] get {$f470: Node, $f469: Node, $f468: Int}
[slotted_egraphs::egraph::add] classes insert id74
[slotted_egraphs::egraph::add] add to id74 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] remove from id74 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] add to id74 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f468, $f469, $f470}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f468 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f468 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f468 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f470 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f470 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f470 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f468, $f78 -> $f469, $f79 -> $f470)), AppliedId(id50: ($f126 -> $f468, $f127 -> $f469, $f128 -> $f470)), AppliedId(id43: ($f100 -> $f468, $f101 -> $f469, $f102 -> $f470))])
[entry::chc] get {$f469: Node, $f470: Node, $f468: Int}
[entry::chc] calling merge to id74
[entry::chc] eclassSlots {$f469, $f468, $f470}
[entry::chc] result varTypes {$f469: Node, $f470: Node, $f468: Int}
[slotted_egraphs::egraph::union] Call move_to id74: ($f468 -> $f257, $f469 -> $f258, $f470 -> $f259), id13: ($f24 -> $f257, $f25 -> $f258, $f26 -> $f259)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f26: Node, $f24: Int, $f25: Node}
[slotted_egraphs::egraph::add] remove from id74 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[entry::chc] get {$f24: Int, $f26: Node, $f25: Node}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f26: Node, $f24: Int}
[entry::chc] calling make on Compose([AppliedId(id50: ($f126 -> $f471, $f127 -> $f472, $f128 -> $f473)), AppliedId(id36: ($f77 -> $f471, $f78 -> $f472, $f79 -> $f473)), AppliedId(id43: ($f100 -> $f471, $f101 -> $f472, $f102 -> $f473))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f471, $f472, $f473}
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f473 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f473 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f473 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id50: ($f126 -> $f471, $f127 -> $f472, $f128 -> $f473)), AppliedId(id36: ($f77 -> $f471, $f78 -> $f472, $f79 -> $f473)), AppliedId(id43: ($f100 -> $f471, $f101 -> $f472, $f102 -> $f473))])
[entry::chc] get {$f471: Int, $f472: Node, $f473: Node}
[slotted_egraphs::egraph::add] classes insert id75
[slotted_egraphs::egraph::add] add to id75 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] remove from id75 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] add to id75 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f471, $f472, $f473}
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f473 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f473 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f473 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id50: ($f126 -> $f471, $f127 -> $f472, $f128 -> $f473)), AppliedId(id36: ($f77 -> $f471, $f78 -> $f472, $f79 -> $f473)), AppliedId(id43: ($f100 -> $f471, $f101 -> $f472, $f102 -> $f473))])
[entry::chc] get {$f471: Int, $f473: Node, $f472: Node}
[entry::chc] calling merge to id75
[entry::chc] eclassSlots {$f472, $f471, $f473}
[entry::chc] result varTypes {$f472: Node, $f473: Node, $f471: Int}
[slotted_egraphs::egraph::union] Call move_to id75: ($f471 -> $f257, $f472 -> $f258, $f473 -> $f259), id13: ($f24 -> $f257, $f25 -> $f258, $f26 -> $f259)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f26: Node, $f24: Int}
[slotted_egraphs::egraph::add] remove from id75 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[entry::chc] get {$f26: Node, $f24: Int, $f25: Node}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f26: Node, $f24: Int}
[entry::chc] calling make on Compose([AppliedId(id50: ($f126 -> $f474, $f127 -> $f475, $f128 -> $f476)), AppliedId(id43: ($f100 -> $f474, $f101 -> $f475, $f102 -> $f476)), AppliedId(id36: ($f77 -> $f474, $f78 -> $f475, $f79 -> $f476))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f474, $f475, $f476}
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f474 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f474 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f474 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f475 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f475 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f475 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f476 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f476 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f476 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id50: ($f126 -> $f474, $f127 -> $f475, $f128 -> $f476)), AppliedId(id43: ($f100 -> $f474, $f101 -> $f475, $f102 -> $f476)), AppliedId(id36: ($f77 -> $f474, $f78 -> $f475, $f79 -> $f476))])
[entry::chc] get {$f476: Node, $f474: Int, $f475: Node}
[slotted_egraphs::egraph::add] classes insert id76
[slotted_egraphs::egraph::add] add to id76 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] remove from id76 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] add to id76 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f474, $f475, $f476}
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f474 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f474 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f474 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f475 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f475 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f475 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f476 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f476 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f476 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id50: ($f126 -> $f474, $f127 -> $f475, $f128 -> $f476)), AppliedId(id43: ($f100 -> $f474, $f101 -> $f475, $f102 -> $f476)), AppliedId(id36: ($f77 -> $f474, $f78 -> $f475, $f79 -> $f476))])
[entry::chc] get {$f474: Int, $f475: Node, $f476: Node}
[entry::chc] calling merge to id76
[entry::chc] eclassSlots {$f474, $f476, $f475}
[entry::chc] result varTypes {$f475: Node, $f476: Node, $f474: Int}
[slotted_egraphs::egraph::union] Call move_to id76: ($f474 -> $f257, $f475 -> $f258, $f476 -> $f259), id13: ($f24 -> $f257, $f25 -> $f258, $f26 -> $f259)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f26: Node, $f24: Int}
[slotted_egraphs::egraph::add] remove from id76 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[entry::chc] get {$f24: Int, $f26: Node, $f25: Node}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f26, $f25, $f24}
[entry::chc] result varTypes {$f25: Node, $f26: Node, $f24: Int}
[entry::chc] calling make on Compose([AppliedId(id60: ($f164 -> $f477, $f165 -> $f478)), AppliedId(id55: ($f145 -> $f477, $f146 -> $f478))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f477, $f478}
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f477 to varTypes
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f477 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f478 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f478 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id60: ($f164 -> $f477, $f165 -> $f478)), AppliedId(id55: ($f145 -> $f477, $f146 -> $f478))])
[entry::chc] get {$f478: Int, $f477: Node}
[slotted_egraphs::egraph::add] classes insert id77
[slotted_egraphs::egraph::add] add to id77 Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[slotted_egraphs::egraph::add] remove from id77 Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[slotted_egraphs::egraph::add] add to id77 Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f477, $f478}
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f477 to varTypes
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f477 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f478 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f478 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id60: ($f164 -> $f477, $f165 -> $f478)), AppliedId(id55: ($f145 -> $f477, $f146 -> $f478))])
[entry::chc] get {$f477: Node, $f478: Int}
[entry::chc] calling merge to id77
[entry::chc] eclassSlots {$f477, $f478}
[entry::chc] result varTypes {$f478: Int, $f477: Node}
[slotted_egraphs::egraph::union] Call move_to id77: ($f477 -> $f260, $f478 -> $f261), id16: ($f29 -> $f260, $f30 -> $f261)
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Int, $f29: Node}
[slotted_egraphs::egraph::add] remove from id77 Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id16 Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[slotted_egraphs::egraph::add] add to id16 Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id60: ($f164 -> $0, $f165 -> $1)), AppliedId(id55: ($f145 -> $0, $f146 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[entry::chc] get {$f30: Int, $f29: Node}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f29, $f30}
[entry::chc] result varTypes {$f30: Int, $f29: Node}
[entry::chc] calling make on Compose([AppliedId(id30: ($f65 -> $f479, $f66 -> $f480, $f67 -> $f481)), AppliedId(id27: ($f57 -> $f479, $f58 -> $f480, $f59 -> $f481))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f479, $f480, $f481}
[entry::chc] childId : id30, mapToS : $f65
[entry::chc] adding $f479 to varTypes
[entry::chc] childId : id27, mapToS : $f57
[entry::chc] adding $f479 to varTypes
[entry::chc] childId : id30, mapToS : $f66
[entry::chc] adding $f480 to varTypes
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] adding $f480 to varTypes
[entry::chc] childId : id30, mapToS : $f67
[entry::chc] adding $f481 to varTypes
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] adding $f481 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id30: ($f65 -> $f479, $f66 -> $f480, $f67 -> $f481)), AppliedId(id27: ($f57 -> $f479, $f58 -> $f480, $f59 -> $f481))])
[entry::chc] get {$f479: Int, $f480: Int, $f481: Int}
[slotted_egraphs::egraph::add] classes insert id78
[slotted_egraphs::egraph::add] add to id78 Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[slotted_egraphs::egraph::add] remove from id78 Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[slotted_egraphs::egraph::add] add to id78 Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f479, $f480, $f481}
[entry::chc] childId : id30, mapToS : $f65
[entry::chc] adding $f479 to varTypes
[entry::chc] childId : id27, mapToS : $f57
[entry::chc] adding $f479 to varTypes
[entry::chc] childId : id30, mapToS : $f66
[entry::chc] adding $f480 to varTypes
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] adding $f480 to varTypes
[entry::chc] childId : id30, mapToS : $f67
[entry::chc] adding $f481 to varTypes
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] adding $f481 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id30: ($f65 -> $f479, $f66 -> $f480, $f67 -> $f481)), AppliedId(id27: ($f57 -> $f479, $f58 -> $f480, $f59 -> $f481))])
[entry::chc] get {$f480: Int, $f481: Int, $f479: Int}
[entry::chc] calling merge to id78
[entry::chc] eclassSlots {$f480, $f479, $f481}
[entry::chc] result varTypes {$f481: Int, $f479: Int, $f480: Int}
[slotted_egraphs::egraph::union] Call move_to id78: ($f479 -> $f262, $f480 -> $f263, $f481 -> $f264), id31: ($f68 -> $f262, $f69 -> $f263, $f70 -> $f264)
[entry::chc] calling merge to id31
[entry::chc] eclassSlots {$f70, $f69, $f68}
[entry::chc] result varTypes {$f68: Int, $f69: Int, $f70: Int}
[slotted_egraphs::egraph::add] remove from id78 Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id31 Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2)), AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f68, $f69, $f70}
[entry::chc] childId : id30, mapToS : $f65
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id27, mapToS : $f57
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id30, mapToS : $f66
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id30, mapToS : $f67
[entry::chc] adding $f70 to varTypes
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] adding $f70 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[entry::chc] get {$f69: Int, $f68: Int, $f70: Int}
[entry::chc] calling merge to id31
[entry::chc] eclassSlots {$f70, $f69, $f68}
[entry::chc] result varTypes {$f70: Int, $f68: Int, $f69: Int}
[entry::chc::rewrite] define found [{"cond": id10: ($f18 -> $f291, $f19 -> $f292, $f20 -> $f293), "star_1_1": id16: ($f29 -> $f294, $f30 -> $f292), "star_1_0": id13: ($f24 -> $f291, $f25 -> $f295, $f26 -> $f294), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f295, $f30 -> $f293)}, {"syntax": id12: ($f21 -> $f310, $f22 -> $f311, $f23 -> $f312), "cond": id47: ($f113 -> $f310, $f114 -> $f311, $f115 -> $f313, $f116 -> $f314, $f117 -> $f315, $f118 -> $f316), "star_1_0": id13: ($f24 -> $f310, $f25 -> $f311, $f26 -> $f312)}, {"cond": id58: ($f150 -> $f329, $f151 -> $f330, $f152 -> $f331, $f153 -> $f332, $f154 -> $f333, $f155 -> $f334), "star_1_1": id16: ($f29 -> $f333, $f30 -> $f335), "star_1_0": id16: ($f29 -> $f332, $f30 -> $f336), "syntax": id15: ($f27 -> $f329, $f28 -> $f330), "star_1_2": id31: ($f68 -> $f336, $f69 -> $f335, $f70 -> $f334)}]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f31: Int,
        $f35: Int,
        $f32: Node,
        $f34: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f33: [
            0,
            1,
        ],
        $f31: [
            0,
        ],
        $f35: [
            2,
        ],
        $f32: [
            0,
            2,
        ],
        $f34: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id79
[slotted_egraphs::egraph::add] add to id79 True
[slotted_egraphs::egraph::add] remove from id79 True
[slotted_egraphs::egraph::add] add to id79 True
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[entry::chc] calling merge to id79
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f31: Int, $f35: Int, $f32: Node, $f34: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_0
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc] calling make on New(id20: ($f41 -> $f482, $f42 -> $f485, $f43 -> $f486), id79: (), [AppliedId(id13: ($f24 -> $f482, $f25 -> $f483, $f26 -> $f484)), AppliedId(id16: ($f29 -> $f483, $f30 -> $f485)), AppliedId(id16: ($f29 -> $f484, $f30 -> $f486))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f482, $f483, $f484, $f485, $f486}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f482 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f482 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f483 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f483 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f484 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f484 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f485 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f485 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f486 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f486 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f482, $f42 -> $f485, $f43 -> $f486), id79: (), [AppliedId(id13: ($f24 -> $f482, $f25 -> $f483, $f26 -> $f484)), AppliedId(id16: ($f29 -> $f483, $f30 -> $f485)), AppliedId(id16: ($f29 -> $f484, $f30 -> $f486))])
[entry::chc] get {$f482: Int, $f484: Node, $f483: Node, $f485: Int, $f486: Int}
[slotted_egraphs::egraph::add] classes insert id80
[slotted_egraphs::egraph::add] add to id80 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] remove from id80 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id80 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f482, $f483, $f484, $f485, $f486}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f482 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f482 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f483 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f483 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f484 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f484 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f485 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f485 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f486 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f486 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f482, $f42 -> $f485, $f43 -> $f486), id79: (), [AppliedId(id13: ($f24 -> $f482, $f25 -> $f483, $f26 -> $f484)), AppliedId(id16: ($f29 -> $f483, $f30 -> $f485)), AppliedId(id16: ($f29 -> $f484, $f30 -> $f486))])
[entry::chc] get {$f486: Int, $f483: Node, $f485: Int, $f482: Int, $f484: Node}
[entry::chc] calling merge to id80
[entry::chc] eclassSlots {$f483, $f482, $f486, $f485, $f484}
[entry::chc] result varTypes {$f485: Int, $f486: Int, $f484: Node, $f482: Int, $f483: Node}
[slotted_egraphs::parse] from (interface define_from_id17_0 (pred <(int $0) (int $3) (int $4)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("define_from_id17_0"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, Ident("2"), RParen]
[entry::chc] calling make on PredName("define_from_id17_0")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id17_0")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id81
[slotted_egraphs::egraph::add] add to id81 PredName("define_from_id17_0")
[slotted_egraphs::egraph::add] remove from id81 PredName("define_from_id17_0")
[slotted_egraphs::egraph::add] add to id81 PredName("define_from_id17_0")
[entry::chc] calling make on PredName("define_from_id17_0")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id17_0")
[entry::chc] get {}
[entry::chc] calling merge to id81
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id81 <-> define_from_id17_0
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $0) (int $3) (int $4))
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[entry::chc] calling make on Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f487, $f488, $f489}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] aggregateVarType for Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
[entry::chc] get {$f489: Int, $f487: Int, $f488: Int}
[slotted_egraphs::egraph::add] classes insert id82
[slotted_egraphs::egraph::add] add to id82 Interface(id81: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[slotted_egraphs::egraph::add] remove from id82 Interface(id81: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[slotted_egraphs::egraph::add] add to id82 Interface(id81: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[entry::chc] calling make on Interface(id81: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f487, $f488, $f489}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] aggregateVarType for Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
[entry::chc] get {$f487: Int, $f488: Int, $f489: Int}
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487}
[entry::chc] result varTypes {$f488: Int, $f487: Int, $f489: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id82 <-> (interface define_from_id17_0 (pred (int $0) (int $3) (int $4)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id80: ($f482 -> $0, $f485 -> $3, $f486 -> $4), id82: ($f487 -> $0, $f488 -> $3, $f489 -> $4)
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487}
[entry::chc] result varTypes {$f487: Int, $f488: Int, $f489: Int}
[slotted_egraphs::egraph::add] remove from id80 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f487, $f488, $f489, $f492, $f493}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f492 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f492 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f493 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f493 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
[entry::chc] get {$f487: Int, $f492: Node, $f493: Node, $f489: Int, $f488: Int}
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487, $f492, $f493}
[entry::chc] result varTypes {$f493: Node, $f488: Int, $f492: Node, $f489: Int, $f487: Int}
[entry::chc] calling make on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f494, $f495, $f496}
[entry::chc] childId : id82, mapToS : $f487
[entry::chc] adding $f494 to varTypes
[entry::chc] childId : id82, mapToS : $f488
[entry::chc] adding $f495 to varTypes
[entry::chc] childId : id82, mapToS : $f489
[entry::chc] adding $f496 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] get {$f496: Int, $f495: Int, $f494: Int}
[slotted_egraphs::egraph::add] classes insert id83
[slotted_egraphs::egraph::add] add to id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[slotted_egraphs::egraph::add] remove from id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[slotted_egraphs::egraph::add] add to id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f494, $f495, $f496}
[entry::chc] childId : id82, mapToS : $f487
[entry::chc] adding $f494 to varTypes
[entry::chc] childId : id82, mapToS : $f488
[entry::chc] adding $f495 to varTypes
[entry::chc] childId : id82, mapToS : $f489
[entry::chc] adding $f496 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] get {$f494: Int, $f495: Int, $f496: Int}
[entry::chc] calling merge to id83
[entry::chc] eclassSlots {$f495, $f494, $f496}
[entry::chc] result varTypes {$f496: Int, $f494: Int, $f495: Int}
[entry::chc::rewrite] define new id83: ($f494 -> $0, $f495 -> $3, $f496 -> $4)
[entry::chc::rewrite] root eclass id50 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
    ]
[entry::chc::rewrite] appId.slots {$f126, $f127, $f128}
[entry::chc::rewrite] mergeVarTypes = {
        $f128: Node,
        $f127: Node,
        $f126: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f126: [
            0,
        ],
        $f127: [
            0,
        ],
        $f128: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f126
[entry::chc::rewrite] var = $f127
[entry::chc::rewrite] var = $f128
[entry::chc::rewrite] from id50 children after sort [id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id50 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f128: Node, $f127: Node, $f126: Int}
[entry::chc::rewrite] map ($0 -> $f126, $1 -> $f127, $2 -> $f128)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id50_1
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f497)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f497}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f497 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f497)])
[entry::chc] get {$f497: Int}
[slotted_egraphs::egraph::add] classes insert id84
[slotted_egraphs::egraph::add] add to id84 PredSyntax([id1: ($f0 -> $0)])
[slotted_egraphs::egraph::add] remove from id84 PredSyntax([id1: ($f0 -> $0)])
[slotted_egraphs::egraph::add] add to id84 PredSyntax([id1: ($f0 -> $0)])
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f497}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f497 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f497)])
[entry::chc] get {$f497: Int}
[entry::chc] calling merge to id84
[entry::chc] eclassSlots {$f497}
[entry::chc] result varTypes {$f497: Int}
[entry::chc] calling make on New(id84: ($f497 -> $f498), id79: (), [AppliedId(id13: ($f24 -> $f498, $f25 -> $f499, $f26 -> $f500))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f498, $f499, $f500}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f498 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f498 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f499 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f500 to varTypes
[entry::chc] aggregateVarType for New(id84: ($f497 -> $f498), id79: (), [AppliedId(id13: ($f24 -> $f498, $f25 -> $f499, $f26 -> $f500))])
[entry::chc] get {$f498: Int, $f499: Node, $f500: Node}
[slotted_egraphs::egraph::add] classes insert id85
[slotted_egraphs::egraph::add] add to id85 New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] remove from id85 New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] add to id85 New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] calling make on New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f498, $f499, $f500}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f498 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f498 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f499 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f500 to varTypes
[entry::chc] aggregateVarType for New(id84: ($f497 -> $f498), id79: (), [AppliedId(id13: ($f24 -> $f498, $f25 -> $f499, $f26 -> $f500))])
[entry::chc] get {$f500: Node, $f499: Node, $f498: Int}
[entry::chc] calling merge to id85
[entry::chc] eclassSlots {$f498, $f500, $f499}
[entry::chc] result varTypes {$f499: Node, $f498: Int, $f500: Node}
[slotted_egraphs::parse] from (interface define_from_id50_1 (pred <(int $0)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("define_from_id50_1"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, Ident("2"), RParen]
[entry::chc] calling make on PredName("define_from_id50_1")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id50_1")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id86
[slotted_egraphs::egraph::add] add to id86 PredName("define_from_id50_1")
[slotted_egraphs::egraph::add] remove from id86 PredName("define_from_id50_1")
[slotted_egraphs::egraph::add] add to id86 PredName("define_from_id50_1")
[entry::chc] calling make on PredName("define_from_id50_1")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id50_1")
[entry::chc] get {}
[entry::chc] calling merge to id86
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id86 <-> define_from_id50_1
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] add_syn_expr: id84 <-> (pred (int $0))
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[entry::chc] calling make on Interface(id86: (), id84: ($f497 -> $f501), id42: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f501}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f501 to varTypes
[entry::chc] aggregateVarType for Interface(id86: (), id84: ($f497 -> $f501), id42: ())
[entry::chc] get {$f501: Int}
[slotted_egraphs::egraph::add] classes insert id87
[slotted_egraphs::egraph::add] add to id87 Interface(id86: (), id84: ($f497 -> $0), id42: ())
[slotted_egraphs::egraph::add] remove from id87 Interface(id86: (), id84: ($f497 -> $0), id42: ())
[slotted_egraphs::egraph::add] add to id87 Interface(id86: (), id84: ($f497 -> $0), id42: ())
[entry::chc] calling make on Interface(id86: (), id84: ($f497 -> $0), id42: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f501}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f501 to varTypes
[entry::chc] aggregateVarType for Interface(id86: (), id84: ($f497 -> $f501), id42: ())
[entry::chc] get {$f501: Int}
[entry::chc] calling merge to id87
[entry::chc] eclassSlots {$f501}
[entry::chc] result varTypes {$f501: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id87 <-> (interface define_from_id50_1 (pred (int $0)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id85: ($f498 -> $0), id87: ($f501 -> $0)
[entry::chc] calling merge to id87
[entry::chc] eclassSlots {$f501}
[entry::chc] result varTypes {$f501: Int}
[slotted_egraphs::egraph::add] remove from id85 New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] add to id87 New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::union] adding New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id87 New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[slotted_egraphs::egraph::add] add to id87 New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] calling make on New(id84: ($f497 -> $0), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f501, $f504, $f505}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f501 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f501 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f504 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f505 to varTypes
[entry::chc] aggregateVarType for New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505))])
[entry::chc] get {$f505: Node, $f504: Node, $f501: Int}
[entry::chc] calling merge to id87
[entry::chc] eclassSlots {$f501, $f505, $f504}
[entry::chc] result varTypes {$f504: Node, $f505: Node, $f501: Int}
[entry::chc] calling make on Compose([AppliedId(id87: ($f501 -> $f506))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f506}
[entry::chc] childId : id87, mapToS : $f501
[entry::chc] adding $f506 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id87: ($f501 -> $f506))])
[entry::chc] get {$f506: Int}
[slotted_egraphs::egraph::add] classes insert id88
[slotted_egraphs::egraph::add] add to id88 Compose([AppliedId(id87: ($f501 -> $0))])
[slotted_egraphs::egraph::add] remove from id88 Compose([AppliedId(id87: ($f501 -> $0))])
[slotted_egraphs::egraph::add] add to id88 Compose([AppliedId(id87: ($f501 -> $0))])
[entry::chc] calling make on Compose([AppliedId(id87: ($f501 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f506}
[entry::chc] childId : id87, mapToS : $f501
[entry::chc] adding $f506 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id87: ($f501 -> $f506))])
[entry::chc] get {$f506: Int}
[entry::chc] calling merge to id88
[entry::chc] eclassSlots {$f506}
[entry::chc] result varTypes {$f506: Int}
[entry::chc::rewrite] define new id88: ($f506 -> $0)
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f173, $f30 -> $f176),
        id16: ($f29 -> $f174, $f30 -> $f177),
        id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175),
    ]
[entry::chc::rewrite] appId.slots {$f173, $f176}
[entry::chc::rewrite] appId.slots {$f174, $f177}
[entry::chc::rewrite] appId.slots {$f175, $f176, $f177}
[entry::chc::rewrite] mergeVarTypes = {
        $f176: Int,
        $f177: Int,
        $f174: Node,
        $f173: Node,
        $f175: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f176: [
            0,
            2,
        ],
        $f174: [
            1,
        ],
        $f175: [
            2,
        ],
        $f177: [
            1,
            2,
        ],
        $f173: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f176
[entry::chc::rewrite] var = $f174
[entry::chc::rewrite] var = $f175
[entry::chc::rewrite] var = $f177
[entry::chc::rewrite] var = $f173
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f173, $f30 -> $f176)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f173, $f30 -> $f176),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f176: Int, $f177: Int, $f174: Node, $f173: Node, $f175: Int}
[entry::chc::rewrite] map ($0 -> $f173, $1 -> $f176)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_2
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc] calling make on New(id84: ($f497 -> $f508), id79: (), [AppliedId(id16: ($f29 -> $f507, $f30 -> $f508))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f507, $f508}
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f507 to varTypes
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f508 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f508 to varTypes
[entry::chc] aggregateVarType for New(id84: ($f497 -> $f508), id79: (), [AppliedId(id16: ($f29 -> $f507, $f30 -> $f508))])
[entry::chc] get {$f508: Int, $f507: Node}
[slotted_egraphs::egraph::add] classes insert id89
[slotted_egraphs::egraph::add] add to id89 New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[slotted_egraphs::egraph::add] remove from id89 New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[slotted_egraphs::egraph::add] add to id89 New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[entry::chc] calling make on New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f507, $f508}
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f507 to varTypes
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f508 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f508 to varTypes
[entry::chc] aggregateVarType for New(id84: ($f497 -> $f508), id79: (), [AppliedId(id16: ($f29 -> $f507, $f30 -> $f508))])
[entry::chc] get {$f507: Node, $f508: Int}
[entry::chc] calling merge to id89
[entry::chc] eclassSlots {$f507, $f508}
[entry::chc] result varTypes {$f507: Node, $f508: Int}
[slotted_egraphs::parse] from (interface define_from_id60_2 (pred <(int $1)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("define_from_id60_2"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen]
[entry::chc] calling make on PredName("define_from_id60_2")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id60_2")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id90
[slotted_egraphs::egraph::add] add to id90 PredName("define_from_id60_2")
[slotted_egraphs::egraph::add] remove from id90 PredName("define_from_id60_2")
[slotted_egraphs::egraph::add] add to id90 PredName("define_from_id60_2")
[entry::chc] calling make on PredName("define_from_id60_2")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id60_2")
[entry::chc] get {}
[entry::chc] calling merge to id90
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id90 <-> define_from_id60_2
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $1)
[slotted_egraphs::egraph::add] add_syn_expr: id84 <-> (pred (int $1))
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[entry::chc] calling make on Interface(id90: (), id84: ($f497 -> $f509), id42: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f509}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f509 to varTypes
[entry::chc] aggregateVarType for Interface(id90: (), id84: ($f497 -> $f509), id42: ())
[entry::chc] get {$f509: Int}
[slotted_egraphs::egraph::add] classes insert id91
[slotted_egraphs::egraph::add] add to id91 Interface(id90: (), id84: ($f497 -> $0), id42: ())
[slotted_egraphs::egraph::add] remove from id91 Interface(id90: (), id84: ($f497 -> $0), id42: ())
[slotted_egraphs::egraph::add] add to id91 Interface(id90: (), id84: ($f497 -> $0), id42: ())
[entry::chc] calling make on Interface(id90: (), id84: ($f497 -> $0), id42: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f509}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f509 to varTypes
[entry::chc] aggregateVarType for Interface(id90: (), id84: ($f497 -> $f509), id42: ())
[entry::chc] get {$f509: Int}
[entry::chc] calling merge to id91
[entry::chc] eclassSlots {$f509}
[entry::chc] result varTypes {$f509: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id91 <-> (interface define_from_id60_2 (pred (int $1)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id89: ($f508 -> $1), id91: ($f509 -> $1)
[entry::chc] calling merge to id91
[entry::chc] eclassSlots {$f509}
[entry::chc] result varTypes {$f509: Int}
[slotted_egraphs::egraph::add] remove from id89 New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[slotted_egraphs::egraph::add] add to id91 New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[slotted_egraphs::egraph::union] adding New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))]) to self.pending
[slotted_egraphs::egraph::add] remove from id91 New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[slotted_egraphs::egraph::add] add to id91 New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[entry::chc] calling make on New(id84: ($f497 -> $0), id79: (), [AppliedId(id16: ($f29 -> $1, $f30 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f509, $f511}
[entry::chc] childId : id84, mapToS : $f497
[entry::chc] adding $f509 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f509 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f511 to varTypes
[entry::chc] aggregateVarType for New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f511, $f30 -> $f509))])
[entry::chc] get {$f511: Node, $f509: Int}
[entry::chc] calling merge to id91
[entry::chc] eclassSlots {$f509, $f511}
[entry::chc] result varTypes {$f511: Node, $f509: Int}
[entry::chc] calling make on Compose([AppliedId(id91: ($f509 -> $f512))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f512}
[entry::chc] childId : id91, mapToS : $f509
[entry::chc] adding $f512 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id91: ($f509 -> $f512))])
[entry::chc] get {$f512: Int}
[slotted_egraphs::egraph::add] classes insert id92
[slotted_egraphs::egraph::add] add to id92 Compose([AppliedId(id91: ($f509 -> $0))])
[slotted_egraphs::egraph::add] remove from id92 Compose([AppliedId(id91: ($f509 -> $0))])
[slotted_egraphs::egraph::add] add to id92 Compose([AppliedId(id91: ($f509 -> $0))])
[entry::chc] calling make on Compose([AppliedId(id91: ($f509 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f512}
[entry::chc] childId : id91, mapToS : $f509
[entry::chc] adding $f512 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id91: ($f509 -> $f512))])
[entry::chc] get {$f512: Int}
[entry::chc] calling merge to id92
[entry::chc] eclassSlots {$f512}
[entry::chc] result varTypes {$f512: Int}
[entry::chc::rewrite] define new id92: ($f512 -> $1)
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f174, $f30 -> $f177)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f174, $f30 -> $f177),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f176: Int, $f177: Int, $f174: Node, $f173: Node, $f175: Int}
[entry::chc::rewrite] map ($0 -> $f174, $1 -> $f177)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f517, $f116 -> $f518, $f117 -> $f519, $f118 -> $f520), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f525, $f116 -> $f526, $f117 -> $f527, $f118 -> $f528), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f532, $f92 -> $f533, $f93 -> $f534), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f538, $f92 -> $f539, $f93 -> $f540), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id53: ($f141 -> $f29, $f142 -> $f30), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f547, $f153 -> $f548, $f154 -> $f549, $f155 -> $f550), [AppliedId(id16: ($f29 -> $f548, $f30 -> $f551)), AppliedId(id16: ($f29 -> $f549, $f30 -> $f552)), AppliedId(id31: ($f68 -> $f551, $f69 -> $f552, $f70 -> $f550))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f559, $f153 -> $f560, $f154 -> $f561, $f155 -> $f562), [AppliedId(id16: ($f29 -> $f560, $f30 -> $f563)), AppliedId(id31: ($f68 -> $f563, $f69 -> $f564, $f70 -> $f562)), AppliedId(id16: ($f29 -> $f561, $f30 -> $f564))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f571, $f153 -> $f572, $f154 -> $f573, $f155 -> $f574), [AppliedId(id31: ($f68 -> $f575, $f69 -> $f576, $f70 -> $f574)), AppliedId(id16: ($f29 -> $f572, $f30 -> $f575)), AppliedId(id16: ($f29 -> $f573, $f30 -> $f576))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f583, $f153 -> $f584, $f154 -> $f585, $f155 -> $f586), [AppliedId(id31: ($f68 -> $f587, $f69 -> $f588, $f70 -> $f586)), AppliedId(id16: ($f29 -> $f585, $f30 -> $f588)), AppliedId(id16: ($f29 -> $f584, $f30 -> $f587))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f595, $f153 -> $f596, $f154 -> $f597, $f155 -> $f598), [AppliedId(id16: ($f29 -> $f597, $f30 -> $f599)), AppliedId(id16: ($f29 -> $f596, $f30 -> $f600)), AppliedId(id31: ($f68 -> $f600, $f69 -> $f599, $f70 -> $f598))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f607, $f153 -> $f608, $f154 -> $f609, $f155 -> $f610), [AppliedId(id16: ($f29 -> $f609, $f30 -> $f611)), AppliedId(id31: ($f68 -> $f612, $f69 -> $f611, $f70 -> $f610)), AppliedId(id16: ($f29 -> $f608, $f30 -> $f612))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id24: ($f51 -> $f68, $f52 -> $f69, $f53 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id29: ($f62 -> $f68, $f63 -> $f69, $f64 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f742, $f92 -> $f743, $f93 -> $f744), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f749, $f116 -> $f750, $f117 -> $f751, $f118 -> $f752), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f749, $f116 -> $f750, $f117 -> $f751, $f118 -> $f752) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f766, $f153 -> $f767, $f154 -> $f768, $f155 -> $f769), [AppliedId(id16: ($f29 -> $f767, $f30 -> $f770)), AppliedId(id16: ($f29 -> $f768, $f30 -> $f771)), AppliedId(id31: ($f68 -> $f770, $f69 -> $f771, $f70 -> $f769))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f766, $f153 -> $f767, $f154 -> $f768, $f155 -> $f769) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f767, $f30 -> $f770) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f768, $f30 -> $f771) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f770, $f69 -> $f771, $f70 -> $f769) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f778, $f153 -> $f779, $f154 -> $f780, $f155 -> $f781), [AppliedId(id16: ($f29 -> $f779, $f30 -> $f782)), AppliedId(id31: ($f68 -> $f782, $f69 -> $f783, $f70 -> $f781)), AppliedId(id16: ($f29 -> $f780, $f30 -> $f783))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f778, $f153 -> $f779, $f154 -> $f780, $f155 -> $f781) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f779, $f30 -> $f782) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f782, $f69 -> $f783, $f70 -> $f781) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f780, $f30 -> $f783) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f790, $f153 -> $f791, $f154 -> $f792, $f155 -> $f793), [AppliedId(id31: ($f68 -> $f794, $f69 -> $f795, $f70 -> $f793)), AppliedId(id16: ($f29 -> $f791, $f30 -> $f794)), AppliedId(id16: ($f29 -> $f792, $f30 -> $f795))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f790, $f153 -> $f791, $f154 -> $f792, $f155 -> $f793) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f794, $f69 -> $f795, $f70 -> $f793) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f791, $f30 -> $f794) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f792, $f30 -> $f795) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f802, $f153 -> $f803, $f154 -> $f804, $f155 -> $f805), [AppliedId(id31: ($f68 -> $f806, $f69 -> $f807, $f70 -> $f805)), AppliedId(id16: ($f29 -> $f804, $f30 -> $f807)), AppliedId(id16: ($f29 -> $f803, $f30 -> $f806))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f802, $f153 -> $f803, $f154 -> $f804, $f155 -> $f805) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f806, $f69 -> $f807, $f70 -> $f805) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f804, $f30 -> $f807) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f803, $f30 -> $f806) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f814, $f153 -> $f815, $f154 -> $f816, $f155 -> $f817), [AppliedId(id16: ($f29 -> $f816, $f30 -> $f818)), AppliedId(id16: ($f29 -> $f815, $f30 -> $f819)), AppliedId(id31: ($f68 -> $f819, $f69 -> $f818, $f70 -> $f817))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f814, $f153 -> $f815, $f154 -> $f816, $f155 -> $f817) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f816, $f30 -> $f818) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f815, $f30 -> $f819) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f819, $f69 -> $f818, $f70 -> $f817) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f826, $f153 -> $f827, $f154 -> $f828, $f155 -> $f829), [AppliedId(id16: ($f29 -> $f828, $f30 -> $f830)), AppliedId(id31: ($f68 -> $f831, $f69 -> $f830, $f70 -> $f829)), AppliedId(id16: ($f29 -> $f827, $f30 -> $f831))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f826, $f153 -> $f827, $f154 -> $f828, $f155 -> $f829) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f828, $f30 -> $f830) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f831, $f69 -> $f830, $f70 -> $f829) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f827, $f30 -> $f831) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f882, $f26 -> $f883)), AppliedId(id16: ($f29 -> $f882, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f883, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f882, $f26 -> $f883) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f882, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f883, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f891, $f26 -> $f892))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f891, $f26 -> $f892) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f897, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f897, $f30 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id87: ($f501 -> $f506) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id91: ($f509 -> $f512) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f1067, $f92 -> $f1068, $f93 -> $f1069), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f1074, $f116 -> $f1075, $f117 -> $f1076, $f118 -> $f1077), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f1074, $f116 -> $f1075, $f117 -> $f1076, $f118 -> $f1077) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1091, $f153 -> $f1092, $f154 -> $f1093, $f155 -> $f1094), [AppliedId(id16: ($f29 -> $f1092, $f30 -> $f1095)), AppliedId(id16: ($f29 -> $f1093, $f30 -> $f1096)), AppliedId(id31: ($f68 -> $f1095, $f69 -> $f1096, $f70 -> $f1094))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1091, $f153 -> $f1092, $f154 -> $f1093, $f155 -> $f1094) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1092, $f30 -> $f1095) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1093, $f30 -> $f1096) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f1095, $f69 -> $f1096, $f70 -> $f1094) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1103, $f153 -> $f1104, $f154 -> $f1105, $f155 -> $f1106), [AppliedId(id16: ($f29 -> $f1104, $f30 -> $f1107)), AppliedId(id31: ($f68 -> $f1107, $f69 -> $f1108, $f70 -> $f1106)), AppliedId(id16: ($f29 -> $f1105, $f30 -> $f1108))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1103, $f153 -> $f1104, $f154 -> $f1105, $f155 -> $f1106) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1104, $f30 -> $f1107) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f1107, $f69 -> $f1108, $f70 -> $f1106) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1105, $f30 -> $f1108) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1115, $f153 -> $f1116, $f154 -> $f1117, $f155 -> $f1118), [AppliedId(id31: ($f68 -> $f1119, $f69 -> $f1120, $f70 -> $f1118)), AppliedId(id16: ($f29 -> $f1116, $f30 -> $f1119)), AppliedId(id16: ($f29 -> $f1117, $f30 -> $f1120))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1115, $f153 -> $f1116, $f154 -> $f1117, $f155 -> $f1118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f1119, $f69 -> $f1120, $f70 -> $f1118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1116, $f30 -> $f1119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1117, $f30 -> $f1120) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1127, $f153 -> $f1128, $f154 -> $f1129, $f155 -> $f1130), [AppliedId(id31: ($f68 -> $f1131, $f69 -> $f1132, $f70 -> $f1130)), AppliedId(id16: ($f29 -> $f1129, $f30 -> $f1132)), AppliedId(id16: ($f29 -> $f1128, $f30 -> $f1131))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1127, $f153 -> $f1128, $f154 -> $f1129, $f155 -> $f1130) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f1131, $f69 -> $f1132, $f70 -> $f1130) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1129, $f30 -> $f1132) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1128, $f30 -> $f1131) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1139, $f153 -> $f1140, $f154 -> $f1141, $f155 -> $f1142), [AppliedId(id16: ($f29 -> $f1141, $f30 -> $f1143)), AppliedId(id16: ($f29 -> $f1140, $f30 -> $f1144)), AppliedId(id31: ($f68 -> $f1144, $f69 -> $f1143, $f70 -> $f1142))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1139, $f153 -> $f1140, $f154 -> $f1141, $f155 -> $f1142) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1141, $f30 -> $f1143) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1140, $f30 -> $f1144) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f1144, $f69 -> $f1143, $f70 -> $f1142) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1151, $f153 -> $f1152, $f154 -> $f1153, $f155 -> $f1154), [AppliedId(id16: ($f29 -> $f1153, $f30 -> $f1155)), AppliedId(id31: ($f68 -> $f1156, $f69 -> $f1155, $f70 -> $f1154)), AppliedId(id16: ($f29 -> $f1152, $f30 -> $f1156))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1151, $f153 -> $f1152, $f154 -> $f1153, $f155 -> $f1154) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1153, $f30 -> $f1155) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f1156, $f69 -> $f1155, $f70 -> $f1154) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1152, $f30 -> $f1156) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1207, $f26 -> $f1208)), AppliedId(id16: ($f29 -> $f1207, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1208, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f1207, $f26 -> $f1208) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1207, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1208, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f1216, $f26 -> $f1217))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f1216, $f26 -> $f1217) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f1222, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1222, $f30 -> $f509) to subst
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc] calling make on New(id20: ($f41 -> $f1227, $f42 -> $f1225, $f43 -> $f1229), id79: (), [AppliedId(id16: ($f29 -> $f1226, $f30 -> $f1225)), AppliedId(id13: ($f24 -> $f1227, $f25 -> $f1226, $f26 -> $f1228)), AppliedId(id16: ($f29 -> $f1228, $f30 -> $f1229))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1225, $f1226, $f1227, $f1228, $f1229}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1225 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1225 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1226 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1226 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1227 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1227 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1228 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1228 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1229 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1229 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1227, $f42 -> $f1225, $f43 -> $f1229), id79: (), [AppliedId(id16: ($f29 -> $f1226, $f30 -> $f1225)), AppliedId(id13: ($f24 -> $f1227, $f25 -> $f1226, $f26 -> $f1228)), AppliedId(id16: ($f29 -> $f1228, $f30 -> $f1229))])
[entry::chc] get {$f1226: Node, $f1229: Int, $f1227: Int, $f1225: Int, $f1228: Node}
[slotted_egraphs::egraph::add] classes insert id93
[slotted_egraphs::egraph::add] add to id93 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] remove from id93 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id93 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1225, $f1226, $f1227, $f1228, $f1229}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1225 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1225 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1226 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1226 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1227 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1227 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1228 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1228 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1229 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1229 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1227, $f42 -> $f1225, $f43 -> $f1229), id79: (), [AppliedId(id16: ($f29 -> $f1226, $f30 -> $f1225)), AppliedId(id13: ($f24 -> $f1227, $f25 -> $f1226, $f26 -> $f1228)), AppliedId(id16: ($f29 -> $f1228, $f30 -> $f1229))])
[entry::chc] get {$f1228: Node, $f1225: Int, $f1226: Node, $f1229: Int, $f1227: Int}
[entry::chc] calling merge to id93
[entry::chc] eclassSlots {$f1228, $f1227, $f1226, $f1225, $f1229}
[entry::chc] result varTypes {$f1229: Int, $f1226: Node, $f1227: Int, $f1225: Int, $f1228: Node}
[slotted_egraphs::egraph::union] Call move_to id93: ($f1225 -> $f884, $f1227 -> $f886, $f1229 -> $f888), id82: ($f487 -> $f886, $f488 -> $f884, $f489 -> $f888)
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487, $f492, $f493}
[entry::chc] result varTypes {$f493: Node, $f489: Int, $f487: Int, $f492: Node, $f488: Int}
[slotted_egraphs::egraph::add] remove from id93 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f487, $f488, $f489, $f1232, $f1233}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1232 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1232 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1233 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1233 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
[entry::chc] get {$f1233: Node, $f488: Int, $f489: Int, $f1232: Node, $f487: Int}
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487, $f1233, $f493, $f492, $f1232}
[entry::chc] result varTypes {$f487: Int, $f489: Int, $f492: Node, $f493: Node, $f1232: Node, $f1233: Node, $f488: Int}
[slotted_egraphs::egraph::add] remove from id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[slotted_egraphs::egraph::add] add to id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f494, $f495, $f496}
[entry::chc] childId : id82, mapToS : $f487
[entry::chc] adding $f494 to varTypes
[entry::chc] childId : id82, mapToS : $f488
[entry::chc] adding $f495 to varTypes
[entry::chc] childId : id82, mapToS : $f489
[entry::chc] adding $f496 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] get {$f496: Int, $f494: Int, $f495: Int}
[entry::chc] calling merge to id83
[entry::chc] eclassSlots {$f495, $f494, $f496}
[entry::chc] result varTypes {$f494: Int, $f496: Int, $f495: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f1236, $f42 -> $f1234, $f43 -> $f1238), id79: (), [AppliedId(id16: ($f29 -> $f1235, $f30 -> $f1234)), AppliedId(id16: ($f29 -> $f1237, $f30 -> $f1238)), AppliedId(id13: ($f24 -> $f1236, $f25 -> $f1235, $f26 -> $f1237))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1234, $f1235, $f1236, $f1237, $f1238}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1234 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1234 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1235 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1235 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1236 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1236 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1237 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1237 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1238 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1238 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1236, $f42 -> $f1234, $f43 -> $f1238), id79: (), [AppliedId(id16: ($f29 -> $f1235, $f30 -> $f1234)), AppliedId(id16: ($f29 -> $f1237, $f30 -> $f1238)), AppliedId(id13: ($f24 -> $f1236, $f25 -> $f1235, $f26 -> $f1237))])
[entry::chc] get {$f1236: Int, $f1235: Node, $f1237: Node, $f1238: Int, $f1234: Int}
[slotted_egraphs::egraph::add] classes insert id94
[slotted_egraphs::egraph::add] add to id94 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] remove from id94 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id94 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1234, $f1235, $f1236, $f1237, $f1238}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1234 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1234 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1235 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1235 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1236 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1236 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1237 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1237 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1238 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1238 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1236, $f42 -> $f1234, $f43 -> $f1238), id79: (), [AppliedId(id16: ($f29 -> $f1235, $f30 -> $f1234)), AppliedId(id16: ($f29 -> $f1237, $f30 -> $f1238)), AppliedId(id13: ($f24 -> $f1236, $f25 -> $f1235, $f26 -> $f1237))])
[entry::chc] get {$f1237: Node, $f1236: Int, $f1238: Int, $f1235: Node, $f1234: Int}
[entry::chc] calling merge to id94
[entry::chc] eclassSlots {$f1234, $f1238, $f1237, $f1236, $f1235}
[entry::chc] result varTypes {$f1237: Node, $f1235: Node, $f1236: Int, $f1238: Int, $f1234: Int}
[slotted_egraphs::egraph::union] Call move_to id94: ($f1234 -> $f884, $f1236 -> $f886, $f1238 -> $f888), id82: ($f487 -> $f886, $f488 -> $f884, $f489 -> $f888)
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487, $f1233, $f493, $f492, $f1232}
[entry::chc] result varTypes {$f493: Node, $f492: Node, $f1233: Node, $f488: Int, $f489: Int, $f487: Int, $f1232: Node}
[slotted_egraphs::egraph::add] remove from id94 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))]) to self.pending
[slotted_egraphs::egraph::add] remove from id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f487, $f488, $f489, $f1241, $f1242}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1241 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1241 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1242 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1242 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
[entry::chc] get {$f1241: Node, $f1242: Node, $f487: Int, $f489: Int, $f488: Int}
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487, $f1233, $f493, $f492, $f1242, $f1232, $f1241}
[entry::chc] result varTypes {$f492: Node, $f489: Int, $f1242: Node, $f1233: Node, $f1232: Node, $f488: Int, $f1241: Node, $f493: Node, $f487: Int}
[slotted_egraphs::egraph::add] remove from id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[slotted_egraphs::egraph::add] add to id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f494, $f495, $f496}
[entry::chc] childId : id82, mapToS : $f487
[entry::chc] adding $f494 to varTypes
[entry::chc] childId : id82, mapToS : $f488
[entry::chc] adding $f495 to varTypes
[entry::chc] childId : id82, mapToS : $f489
[entry::chc] adding $f496 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] get {$f494: Int, $f496: Int, $f495: Int}
[entry::chc] calling merge to id83
[entry::chc] eclassSlots {$f495, $f494, $f496}
[entry::chc] result varTypes {$f495: Int, $f496: Int, $f494: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f1245, $f42 -> $f1243, $f43 -> $f1247), id79: (), [AppliedId(id13: ($f24 -> $f1245, $f25 -> $f1244, $f26 -> $f1246)), AppliedId(id16: ($f29 -> $f1246, $f30 -> $f1247)), AppliedId(id16: ($f29 -> $f1244, $f30 -> $f1243))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1243, $f1244, $f1245, $f1246, $f1247}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1243 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1243 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1244 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1244 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1245 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1245 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1246 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1246 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1247 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1247 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1245, $f42 -> $f1243, $f43 -> $f1247), id79: (), [AppliedId(id13: ($f24 -> $f1245, $f25 -> $f1244, $f26 -> $f1246)), AppliedId(id16: ($f29 -> $f1246, $f30 -> $f1247)), AppliedId(id16: ($f29 -> $f1244, $f30 -> $f1243))])
[entry::chc] get {$f1243: Int, $f1246: Node, $f1245: Int, $f1244: Node, $f1247: Int}
[slotted_egraphs::egraph::add] classes insert id95
[slotted_egraphs::egraph::add] add to id95 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[slotted_egraphs::egraph::add] remove from id95 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id95 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1243, $f1244, $f1245, $f1246, $f1247}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1243 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1243 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1244 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1244 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1245 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1245 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1246 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1246 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1247 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1247 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1245, $f42 -> $f1243, $f43 -> $f1247), id79: (), [AppliedId(id13: ($f24 -> $f1245, $f25 -> $f1244, $f26 -> $f1246)), AppliedId(id16: ($f29 -> $f1246, $f30 -> $f1247)), AppliedId(id16: ($f29 -> $f1244, $f30 -> $f1243))])
[entry::chc] get {$f1246: Node, $f1245: Int, $f1243: Int, $f1247: Int, $f1244: Node}
[entry::chc] calling merge to id95
[entry::chc] eclassSlots {$f1246, $f1245, $f1244, $f1243, $f1247}
[entry::chc] result varTypes {$f1245: Int, $f1246: Node, $f1244: Node, $f1243: Int, $f1247: Int}
[slotted_egraphs::egraph::union] Call move_to id95: ($f1243 -> $f884, $f1245 -> $f886, $f1247 -> $f888), id82: ($f487 -> $f886, $f488 -> $f884, $f489 -> $f888)
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f488, $f487, $f1233, $f493, $f492, $f1242, $f1232, $f1241}
[entry::chc] result varTypes {$f487: Int, $f488: Int, $f492: Node, $f1233: Node, $f1241: Node, $f489: Int, $f1232: Node, $f1242: Node, $f493: Node}
[slotted_egraphs::egraph::add] remove from id95 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id16: ($f29 -> $3, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f487, $f488, $f489, $f1250, $f1251}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1250 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1250 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1251 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1251 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
[entry::chc] get {$f489: Int, $f1250: Node, $f488: Int, $f487: Int, $f1251: Node}
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f1251, $f488, $f487, $f1250, $f1233, $f493, $f492, $f1242, $f1232, $f1241}
[entry::chc] result varTypes {$f488: Int, $f1233: Node, $f489: Int, $f1251: Node, $f1232: Node, $f493: Node, $f492: Node, $f1241: Node, $f1250: Node, $f487: Int, $f1242: Node}
[slotted_egraphs::egraph::add] remove from id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[slotted_egraphs::egraph::add] add to id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f494, $f495, $f496}
[entry::chc] childId : id82, mapToS : $f487
[entry::chc] adding $f494 to varTypes
[entry::chc] childId : id82, mapToS : $f488
[entry::chc] adding $f495 to varTypes
[entry::chc] childId : id82, mapToS : $f489
[entry::chc] adding $f496 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] get {$f496: Int, $f494: Int, $f495: Int}
[entry::chc] calling merge to id83
[entry::chc] eclassSlots {$f495, $f494, $f496}
[entry::chc] result varTypes {$f494: Int, $f495: Int, $f496: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f1254, $f42 -> $f1252, $f43 -> $f1256), id79: (), [AppliedId(id16: ($f29 -> $f1255, $f30 -> $f1256)), AppliedId(id13: ($f24 -> $f1254, $f25 -> $f1253, $f26 -> $f1255)), AppliedId(id16: ($f29 -> $f1253, $f30 -> $f1252))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1252, $f1253, $f1254, $f1255, $f1256}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1252 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1252 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1253 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1253 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1254 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1254 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1255 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1255 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1256 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1256 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1254, $f42 -> $f1252, $f43 -> $f1256), id79: (), [AppliedId(id16: ($f29 -> $f1255, $f30 -> $f1256)), AppliedId(id13: ($f24 -> $f1254, $f25 -> $f1253, $f26 -> $f1255)), AppliedId(id16: ($f29 -> $f1253, $f30 -> $f1252))])
[entry::chc] get {$f1252: Int, $f1253: Node, $f1254: Int, $f1255: Node, $f1256: Int}
[slotted_egraphs::egraph::add] classes insert id96
[slotted_egraphs::egraph::add] add to id96 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] remove from id96 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id96 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1252, $f1253, $f1254, $f1255, $f1256}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1252 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1252 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1253 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1253 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1254 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1254 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1255 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1255 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1256 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1256 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1254, $f42 -> $f1252, $f43 -> $f1256), id79: (), [AppliedId(id16: ($f29 -> $f1255, $f30 -> $f1256)), AppliedId(id13: ($f24 -> $f1254, $f25 -> $f1253, $f26 -> $f1255)), AppliedId(id16: ($f29 -> $f1253, $f30 -> $f1252))])
[entry::chc] get {$f1256: Int, $f1254: Int, $f1252: Int, $f1255: Node, $f1253: Node}
[entry::chc] calling merge to id96
[entry::chc] eclassSlots {$f1252, $f1256, $f1255, $f1254, $f1253}
[entry::chc] result varTypes {$f1255: Node, $f1252: Int, $f1253: Node, $f1256: Int, $f1254: Int}
[slotted_egraphs::egraph::union] Call move_to id96: ($f1252 -> $f884, $f1254 -> $f886, $f1256 -> $f888), id82: ($f487 -> $f886, $f488 -> $f884, $f489 -> $f888)
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f1251, $f488, $f487, $f1250, $f1233, $f493, $f492, $f1242, $f1232, $f1241}
[entry::chc] result varTypes {$f488: Int, $f1241: Node, $f489: Int, $f1251: Node, $f493: Node, $f1233: Node, $f1242: Node, $f487: Int, $f1250: Node, $f492: Node, $f1232: Node}
[slotted_egraphs::egraph::add] remove from id96 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f487, $f488, $f489, $f1259, $f1260}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1259 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1259 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1260 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1260 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
[entry::chc] get {$f1259: Node, $f488: Int, $f487: Int, $f489: Int, $f1260: Node}
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f1251, $f488, $f487, $f1250, $f1260, $f1259, $f1233, $f493, $f492, $f1242, $f1232, $f1241}
[entry::chc] result varTypes {$f487: Int, $f492: Node, $f1251: Node, $f1242: Node, $f1259: Node, $f493: Node, $f1241: Node, $f489: Int, $f1250: Node, $f1232: Node, $f1233: Node, $f1260: Node, $f488: Int}
[slotted_egraphs::egraph::add] remove from id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[slotted_egraphs::egraph::add] add to id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f494, $f495, $f496}
[entry::chc] childId : id82, mapToS : $f487
[entry::chc] adding $f494 to varTypes
[entry::chc] childId : id82, mapToS : $f488
[entry::chc] adding $f495 to varTypes
[entry::chc] childId : id82, mapToS : $f489
[entry::chc] adding $f496 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] get {$f496: Int, $f494: Int, $f495: Int}
[entry::chc] calling merge to id83
[entry::chc] eclassSlots {$f495, $f494, $f496}
[entry::chc] result varTypes {$f496: Int, $f494: Int, $f495: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f1263, $f42 -> $f1261, $f43 -> $f1265), id79: (), [AppliedId(id16: ($f29 -> $f1264, $f30 -> $f1265)), AppliedId(id16: ($f29 -> $f1262, $f30 -> $f1261)), AppliedId(id13: ($f24 -> $f1263, $f25 -> $f1262, $f26 -> $f1264))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1261, $f1262, $f1263, $f1264, $f1265}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1261 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1261 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1262 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1262 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1263 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1263 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1264 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1264 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1265 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1265 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1263, $f42 -> $f1261, $f43 -> $f1265), id79: (), [AppliedId(id16: ($f29 -> $f1264, $f30 -> $f1265)), AppliedId(id16: ($f29 -> $f1262, $f30 -> $f1261)), AppliedId(id13: ($f24 -> $f1263, $f25 -> $f1262, $f26 -> $f1264))])
[entry::chc] get {$f1261: Int, $f1263: Int, $f1264: Node, $f1265: Int, $f1262: Node}
[slotted_egraphs::egraph::add] classes insert id97
[slotted_egraphs::egraph::add] add to id97 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] remove from id97 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id97 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1261, $f1262, $f1263, $f1264, $f1265}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f1261 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1261 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1262 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1262 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f1263 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f1263 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1264 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1264 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f1265 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f1265 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f1263, $f42 -> $f1261, $f43 -> $f1265), id79: (), [AppliedId(id16: ($f29 -> $f1264, $f30 -> $f1265)), AppliedId(id16: ($f29 -> $f1262, $f30 -> $f1261)), AppliedId(id13: ($f24 -> $f1263, $f25 -> $f1262, $f26 -> $f1264))])
[entry::chc] get {$f1263: Int, $f1264: Node, $f1265: Int, $f1262: Node, $f1261: Int}
[entry::chc] calling merge to id97
[entry::chc] eclassSlots {$f1263, $f1262, $f1261, $f1265, $f1264}
[entry::chc] result varTypes {$f1264: Node, $f1263: Int, $f1265: Int, $f1261: Int, $f1262: Node}
[slotted_egraphs::egraph::union] Call move_to id97: ($f1261 -> $f884, $f1263 -> $f886, $f1265 -> $f888), id82: ($f487 -> $f886, $f488 -> $f884, $f489 -> $f888)
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f1251, $f488, $f487, $f1250, $f1260, $f1259, $f1233, $f493, $f492, $f1242, $f1232, $f1241}
[entry::chc] result varTypes {$f489: Int, $f1233: Node, $f487: Int, $f493: Node, $f1232: Node, $f1242: Node, $f1259: Node, $f1241: Node, $f1251: Node, $f488: Int, $f492: Node, $f1250: Node, $f1260: Node}
[slotted_egraphs::egraph::add] remove from id97 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))]) to self.pending
[slotted_egraphs::egraph::add] remove from id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id82 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f487, $f488, $f489, $f1268, $f1269}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f487 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f488 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f489 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1268 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f1268 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f1269 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f1269 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
[entry::chc] get {$f1269: Node, $f487: Int, $f488: Int, $f489: Int, $f1268: Node}
[entry::chc] calling merge to id82
[entry::chc] eclassSlots {$f489, $f487, $f1250, $f1259, $f1268, $f1233, $f492, $f1242, $f1251, $f488, $f1260, $f1269, $f493, $f1232, $f1241}
[entry::chc] result varTypes {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int}
[slotted_egraphs::egraph::add] remove from id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[slotted_egraphs::egraph::add] add to id83 Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id82: ($f487 -> $0, $f488 -> $1, $f489 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f494, $f495, $f496}
[entry::chc] childId : id82, mapToS : $f487
[entry::chc] adding $f494 to varTypes
[entry::chc] childId : id82, mapToS : $f488
[entry::chc] adding $f495 to varTypes
[entry::chc] childId : id82, mapToS : $f489
[entry::chc] adding $f496 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[entry::chc] get {$f495: Int, $f494: Int, $f496: Int}
[entry::chc] calling merge to id83
[entry::chc] eclassSlots {$f495, $f494, $f496}
[entry::chc] result varTypes {$f494: Int, $f495: Int, $f496: Int}
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc::rewrite] define found [{"cond": id10: ($f18 -> $f1034, $f19 -> $f1035, $f20 -> $f1036), "star_1_1": id16: ($f29 -> $f1037, $f30 -> $f1035), "star_1_0": id13: ($f24 -> $f1034, $f25 -> $f1038, $f26 -> $f1037), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1038, $f30 -> $f1036)}, {"cond": id10: ($f18 -> $f1039, $f19 -> $f1040, $f20 -> $f1041), "star_1_1": id13: ($f24 -> $f1039, $f25 -> $f1042, $f26 -> $f1043), "star_1_0": id16: ($f29 -> $f1042, $f30 -> $f1041), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1043, $f30 -> $f1040)}, {"cond": id10: ($f18 -> $f1044, $f19 -> $f1045, $f20 -> $f1046), "star_1_1": id16: ($f29 -> $f1047, $f30 -> $f1045), "star_1_0": id16: ($f29 -> $f1048, $f30 -> $f1046), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f1044, $f25 -> $f1048, $f26 -> $f1047)}, {"cond": id10: ($f18 -> $f1049, $f19 -> $f1050, $f20 -> $f1051), "star_1_1": id13: ($f24 -> $f1049, $f25 -> $f1052, $f26 -> $f1053), "star_1_0": id16: ($f29 -> $f1053, $f30 -> $f1050), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1052, $f30 -> $f1051)}, {"cond": id10: ($f18 -> $f1054, $f19 -> $f1055, $f20 -> $f1056), "star_1_1": id16: ($f29 -> $f1057, $f30 -> $f1056), "star_1_0": id16: ($f29 -> $f1058, $f30 -> $f1055), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f1054, $f25 -> $f1057, $f26 -> $f1058)}, {"cond": id10: ($f18 -> $f1059, $f19 -> $f1060, $f20 -> $f1061), "star_1_1": id16: ($f29 -> $f1062, $f30 -> $f1061), "star_1_0": id13: ($f24 -> $f1059, $f25 -> $f1062, $f26 -> $f1063), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1063, $f30 -> $f1060)}, {"syntax": id12: ($f21 -> $f1078, $f22 -> $f1079, $f23 -> $f1080), "cond": id47: ($f113 -> $f1078, $f114 -> $f1079, $f115 -> $f1081, $f116 -> $f1082, $f117 -> $f1083, $f118 -> $f1084), "star_1_0": id13: ($f24 -> $f1078, $f25 -> $f1079, $f26 -> $f1080)}, {"cond": id58: ($f150 -> $f1157, $f151 -> $f1158, $f152 -> $f1159, $f153 -> $f1160, $f154 -> $f1161, $f155 -> $f1162), "star_1_1": id16: ($f29 -> $f1161, $f30 -> $f1163), "star_1_0": id16: ($f29 -> $f1160, $f30 -> $f1164), "syntax": id15: ($f27 -> $f1157, $f28 -> $f1158), "star_1_2": id31: ($f68 -> $f1164, $f69 -> $f1163, $f70 -> $f1162)}, {"cond": id58: ($f150 -> $f1165, $f151 -> $f1166, $f152 -> $f1167, $f153 -> $f1168, $f154 -> $f1169, $f155 -> $f1170), "star_1_1": id31: ($f68 -> $f1171, $f69 -> $f1172, $f70 -> $f1170), "star_1_0": id16: ($f29 -> $f1168, $f30 -> $f1171), "syntax": id15: ($f27 -> $f1165, $f28 -> $f1166), "star_1_2": id16: ($f29 -> $f1169, $f30 -> $f1172)}, {"cond": id58: ($f150 -> $f1173, $f151 -> $f1174, $f152 -> $f1175, $f153 -> $f1176, $f154 -> $f1177, $f155 -> $f1178), "star_1_1": id16: ($f29 -> $f1176, $f30 -> $f1179), "star_1_0": id31: ($f68 -> $f1179, $f69 -> $f1180, $f70 -> $f1178), "syntax": id15: ($f27 -> $f1173, $f28 -> $f1174), "star_1_2": id16: ($f29 -> $f1177, $f30 -> $f1180)}, {"cond": id58: ($f150 -> $f1181, $f151 -> $f1182, $f152 -> $f1183, $f153 -> $f1184, $f154 -> $f1185, $f155 -> $f1186), "star_1_1": id16: ($f29 -> $f1185, $f30 -> $f1187), "star_1_0": id31: ($f68 -> $f1188, $f69 -> $f1187, $f70 -> $f1186), "syntax": id15: ($f27 -> $f1181, $f28 -> $f1182), "star_1_2": id16: ($f29 -> $f1184, $f30 -> $f1188)}, {"cond": id58: ($f150 -> $f1189, $f151 -> $f1190, $f152 -> $f1191, $f153 -> $f1192, $f154 -> $f1193, $f155 -> $f1194), "star_1_1": id16: ($f29 -> $f1192, $f30 -> $f1195), "star_1_0": id16: ($f29 -> $f1193, $f30 -> $f1196), "syntax": id15: ($f27 -> $f1189, $f28 -> $f1190), "star_1_2": id31: ($f68 -> $f1195, $f69 -> $f1196, $f70 -> $f1194)}, {"cond": id58: ($f150 -> $f1197, $f151 -> $f1198, $f152 -> $f1199, $f153 -> $f1200, $f154 -> $f1201, $f155 -> $f1202), "star_1_1": id31: ($f68 -> $f1204, $f69 -> $f1203, $f70 -> $f1202), "star_1_0": id16: ($f29 -> $f1201, $f30 -> $f1203), "syntax": id15: ($f27 -> $f1197, $f28 -> $f1198), "star_1_2": id16: ($f29 -> $f1200, $f30 -> $f1204)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f1210, $f30 -> $f1209), "star_1_0": id13: ($f24 -> $f1211, $f25 -> $f1210, $f26 -> $f1212), "syntax": id20: ($f41 -> $f1211, $f42 -> $f1209, $f43 -> $f1213), "star_1_2": id16: ($f29 -> $f1212, $f30 -> $f1213)}, {"syntax": id84: ($f497 -> $f1218), "cond": id79: (), "star_1_0": id13: ($f24 -> $f1218, $f25 -> $f1219, $f26 -> $f1220)}, {"syntax": id84: ($f497 -> $f1223), "cond": id79: (), "star_1_0": id16: ($f29 -> $f1224, $f30 -> $f1223)}]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f32: Node,
        $f31: Int,
        $f34: Int,
        $f35: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f34: [
            1,
        ],
        $f31: [
            0,
        ],
        $f32: [
            0,
            2,
        ],
        $f33: [
            0,
            1,
        ],
        $f35: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f32: Node, $f31: Int, $f34: Int, $f35: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f31: Int,
        $f35: Int,
        $f33: Node,
        $f32: Node,
        $f34: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f32: [
            0,
            1,
        ],
        $f35: [
            0,
        ],
        $f31: [
            1,
        ],
        $f33: [
            1,
            2,
        ],
        $f34: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f31: Int, $f35: Int, $f33: Node, $f32: Node, $f34: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f33: Node,
        $f31: Int,
        $f32: Node,
        $f35: Int,
        $f34: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f35: [
            0,
        ],
        $f31: [
            2,
        ],
        $f32: [
            0,
            2,
        ],
        $f33: [
            1,
            2,
        ],
        $f34: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f33: Node, $f31: Int, $f32: Node, $f35: Int, $f34: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f31: Int,
        $f35: Int,
        $f34: Int,
        $f32: Node,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f33: [
            0,
            1,
        ],
        $f35: [
            2,
        ],
        $f31: [
            1,
        ],
        $f34: [
            0,
        ],
        $f32: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f31: Int, $f35: Int, $f34: Int, $f32: Node, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f31: Int,
        $f32: Node,
        $f34: Int,
        $f33: Node,
        $f35: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f34: [
            0,
        ],
        $f35: [
            1,
        ],
        $f31: [
            2,
        ],
        $f33: [
            0,
            2,
        ],
        $f32: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f31: Int, $f32: Node, $f34: Int, $f33: Node, $f35: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f33: Node,
        $f35: Int,
        $f31: Int,
        $f32: Node,
        $f34: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f34: [
            2,
        ],
        $f32: [
            0,
            1,
        ],
        $f33: [
            0,
            2,
        ],
        $f31: [
            0,
        ],
        $f35: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f33: Node, $f35: Int, $f31: Int, $f32: Node, $f34: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id50 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
    ]
[entry::chc::rewrite] appId.slots {$f126, $f127, $f128}
[entry::chc::rewrite] mergeVarTypes = {
        $f128: Node,
        $f127: Node,
        $f126: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f126: [
            0,
        ],
        $f127: [
            0,
        ],
        $f128: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f126
[entry::chc::rewrite] var = $f127
[entry::chc::rewrite] var = $f128
[entry::chc::rewrite] from id50 children after sort [id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id50 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f128: Node, $f127: Node, $f126: Int}
[entry::chc::rewrite] map ($0 -> $f126, $1 -> $f127, $2 -> $f128)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id50_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f173, $f30 -> $f176),
        id16: ($f29 -> $f174, $f30 -> $f177),
        id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175),
    ]
[entry::chc::rewrite] appId.slots {$f173, $f176}
[entry::chc::rewrite] appId.slots {$f174, $f177}
[entry::chc::rewrite] appId.slots {$f175, $f176, $f177}
[entry::chc::rewrite] mergeVarTypes = {
        $f175: Int,
        $f177: Int,
        $f174: Node,
        $f176: Int,
        $f173: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f176: [
            0,
            2,
        ],
        $f174: [
            1,
        ],
        $f173: [
            0,
        ],
        $f177: [
            1,
            2,
        ],
        $f175: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f176
[entry::chc::rewrite] var = $f174
[entry::chc::rewrite] var = $f173
[entry::chc::rewrite] var = $f177
[entry::chc::rewrite] var = $f175
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f173, $f30 -> $f176)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f173, $f30 -> $f176),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f175: Int, $f177: Int, $f174: Node, $f176: Int, $f173: Node}
[entry::chc::rewrite] map ($0 -> $f173, $1 -> $f176)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f174, $f30 -> $f177)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f174, $f30 -> $f177),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f175: Int, $f177: Int, $f174: Node, $f176: Int, $f173: Node}
[entry::chc::rewrite] map ($0 -> $f174, $1 -> $f177)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f417, $f30 -> $f420),
        id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419),
        id16: ($f29 -> $f418, $f30 -> $f421),
    ]
[entry::chc::rewrite] appId.slots {$f417, $f420}
[entry::chc::rewrite] appId.slots {$f419, $f420, $f421}
[entry::chc::rewrite] appId.slots {$f418, $f421}
[entry::chc::rewrite] mergeVarTypes = {
        $f419: Int,
        $f417: Node,
        $f418: Node,
        $f421: Int,
        $f420: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f420: [
            0,
            1,
        ],
        $f419: [
            1,
        ],
        $f418: [
            2,
        ],
        $f421: [
            1,
            2,
        ],
        $f417: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f420
[entry::chc::rewrite] var = $f419
[entry::chc::rewrite] var = $f418
[entry::chc::rewrite] var = $f421
[entry::chc::rewrite] var = $f417
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f417, $f30 -> $f420)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f417, $f30 -> $f420),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f419: Int, $f417: Node, $f418: Node, $f421: Int, $f420: Int}
[entry::chc::rewrite] map ($0 -> $f417, $1 -> $f420)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f418, $f30 -> $f421)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f418, $f30 -> $f421),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f419: Int, $f417: Node, $f418: Node, $f421: Int, $f420: Int}
[entry::chc::rewrite] map ($0 -> $f418, $1 -> $f421)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439),
        id16: ($f29 -> $f437, $f30 -> $f440),
        id16: ($f29 -> $f438, $f30 -> $f441),
    ]
[entry::chc::rewrite] appId.slots {$f439, $f440, $f441}
[entry::chc::rewrite] appId.slots {$f437, $f440}
[entry::chc::rewrite] appId.slots {$f438, $f441}
[entry::chc::rewrite] mergeVarTypes = {
        $f438: Node,
        $f439: Int,
        $f440: Int,
        $f441: Int,
        $f437: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f441: [
            0,
            2,
        ],
        $f437: [
            1,
        ],
        $f438: [
            2,
        ],
        $f439: [
            0,
        ],
        $f440: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f441
[entry::chc::rewrite] var = $f437
[entry::chc::rewrite] var = $f438
[entry::chc::rewrite] var = $f439
[entry::chc::rewrite] var = $f440
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f438, $f30 -> $f441)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f438, $f30 -> $f441),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f438: Node, $f439: Int, $f440: Int, $f441: Int, $f437: Node}
[entry::chc::rewrite] map ($0 -> $f438, $1 -> $f441)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f437, $f30 -> $f440)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f437, $f30 -> $f440),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f438: Node, $f439: Int, $f440: Int, $f441: Int, $f437: Node}
[entry::chc::rewrite] map ($0 -> $f437, $1 -> $f440)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459),
        id16: ($f29 -> $f458, $f30 -> $f461),
        id16: ($f29 -> $f457, $f30 -> $f460),
    ]
[entry::chc::rewrite] appId.slots {$f459, $f460, $f461}
[entry::chc::rewrite] appId.slots {$f458, $f461}
[entry::chc::rewrite] appId.slots {$f457, $f460}
[entry::chc::rewrite] mergeVarTypes = {
        $f461: Int,
        $f460: Int,
        $f459: Int,
        $f458: Node,
        $f457: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f459: [
            0,
        ],
        $f457: [
            2,
        ],
        $f458: [
            1,
        ],
        $f460: [
            0,
            2,
        ],
        $f461: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f459
[entry::chc::rewrite] var = $f457
[entry::chc::rewrite] var = $f458
[entry::chc::rewrite] var = $f460
[entry::chc::rewrite] var = $f461
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f457, $f30 -> $f460)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f457, $f30 -> $f460),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f461: Int, $f460: Int, $f459: Int, $f458: Node, $f457: Node}
[entry::chc::rewrite] map ($0 -> $f457, $1 -> $f460)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f458, $f30 -> $f461)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f458, $f30 -> $f461),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f461: Int, $f460: Int, $f459: Int, $f458: Node, $f457: Node}
[entry::chc::rewrite] map ($0 -> $f458, $1 -> $f461)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f378, $f30 -> $f380),
        id16: ($f29 -> $f377, $f30 -> $f381),
        id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379),
    ]
[entry::chc::rewrite] appId.slots {$f378, $f380}
[entry::chc::rewrite] appId.slots {$f377, $f381}
[entry::chc::rewrite] appId.slots {$f379, $f380, $f381}
[entry::chc::rewrite] mergeVarTypes = {
        $f380: Int,
        $f378: Node,
        $f377: Node,
        $f379: Int,
        $f381: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f381: [
            1,
            2,
        ],
        $f378: [
            0,
        ],
        $f380: [
            0,
            2,
        ],
        $f377: [
            1,
        ],
        $f379: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f381
[entry::chc::rewrite] var = $f378
[entry::chc::rewrite] var = $f380
[entry::chc::rewrite] var = $f377
[entry::chc::rewrite] var = $f379
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f377, $f30 -> $f381)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f377, $f30 -> $f381),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f380: Int, $f378: Node, $f377: Node, $f379: Int, $f381: Int}
[entry::chc::rewrite] map ($0 -> $f377, $1 -> $f381)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f378, $f30 -> $f380)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f378, $f30 -> $f380),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f380: Int, $f378: Node, $f377: Node, $f379: Int, $f381: Int}
[entry::chc::rewrite] map ($0 -> $f378, $1 -> $f380)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f398, $f30 -> $f400),
        id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399),
        id16: ($f29 -> $f397, $f30 -> $f401),
    ]
[entry::chc::rewrite] appId.slots {$f398, $f400}
[entry::chc::rewrite] appId.slots {$f399, $f400, $f401}
[entry::chc::rewrite] appId.slots {$f397, $f401}
[entry::chc::rewrite] mergeVarTypes = {
        $f400: Int,
        $f397: Node,
        $f398: Node,
        $f401: Int,
        $f399: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f400: [
            0,
            1,
        ],
        $f399: [
            1,
        ],
        $f397: [
            2,
        ],
        $f401: [
            1,
            2,
        ],
        $f398: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f400
[entry::chc::rewrite] var = $f399
[entry::chc::rewrite] var = $f397
[entry::chc::rewrite] var = $f401
[entry::chc::rewrite] var = $f398
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f397, $f30 -> $f401)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f397, $f30 -> $f401),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f400: Int, $f397: Node, $f398: Node, $f401: Int, $f399: Int}
[entry::chc::rewrite] map ($0 -> $f397, $1 -> $f401)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f398, $f30 -> $f400)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f398, $f30 -> $f400),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f400: Int, $f397: Node, $f398: Node, $f401: Int, $f399: Int}
[entry::chc::rewrite] map ($0 -> $f398, $1 -> $f400)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
        id16: ($f29 -> $f492, $f30 -> $f488),
        id16: ($f29 -> $f493, $f30 -> $f489),
    ]
[entry::chc::rewrite] appId.slots {$f487, $f492, $f493}
[entry::chc::rewrite] appId.slots {$f488, $f492}
[entry::chc::rewrite] appId.slots {$f489, $f493}
[entry::chc::rewrite] mergeVarTypes = {
        $f493: Node,
        $f492: Node,
        $f487: Int,
        $f488: Int,
        $f489: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f492: [
            0,
            1,
        ],
        $f493: [
            0,
            2,
        ],
        $f487: [
            0,
        ],
        $f488: [
            1,
        ],
        $f489: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f492
[entry::chc::rewrite] var = $f493
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493), id16: ($f29 -> $f492, $f30 -> $f488), id16: ($f29 -> $f493, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
            ),
            AppliedId(
                id16: ($f29 -> $f492, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f493, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f493: Node, $f492: Node, $f487: Int, $f488: Int, $f489: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f492, $2 -> $f493, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id87 
    CHCData { predNames: {"define_from_id50_1"}, varTypes: {$f504: Node, $f505: Node, $f501: Int} }
    ($f501):>> Interface(id86: (), id84: ($f497 -> $f501), id42: ())
     - New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505))])
     - Interface(id86: (), id84: ($f497 -> $f501), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
    ]
[entry::chc::rewrite] appId.slots {$f501, $f504, $f505}
[entry::chc::rewrite] mergeVarTypes = {
        $f501: Int,
        $f504: Node,
        $f505: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f504: [
            0,
        ],
        $f501: [
            0,
        ],
        $f505: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f504
[entry::chc::rewrite] var = $f501
[entry::chc::rewrite] var = $f505
[entry::chc::rewrite] from id87 children after sort [id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id87 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f501: Int, $f504: Node, $f505: Node}
[entry::chc::rewrite] map ($0 -> $f501, $1 -> $f504, $2 -> $f505)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id87_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id91 
    CHCData { predNames: {"define_from_id60_2"}, varTypes: {$f511: Node, $f509: Int} }
    ($f509):>> Interface(id90: (), id84: ($f497 -> $f509), id42: ())
     - New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f511, $f30 -> $f509))])
     - Interface(id90: (), id84: ($f497 -> $f509), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f511, $f30 -> $f509),
    ]
[entry::chc::rewrite] appId.slots {$f509, $f511}
[entry::chc::rewrite] mergeVarTypes = {
        $f511: Node,
        $f509: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f509: [
            0,
        ],
        $f511: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f509
[entry::chc::rewrite] var = $f511
[entry::chc::rewrite] from id91 children after sort [id16: ($f29 -> $f511, $f30 -> $f509)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id91 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f511, $f30 -> $f509),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f511: Node, $f509: Int}
[entry::chc::rewrite] map ($0 -> $f511, $1 -> $f509)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id91_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f1274, $f116 -> $f1275, $f117 -> $f1276, $f118 -> $f1277), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f1282, $f116 -> $f1283, $f117 -> $f1284, $f118 -> $f1285), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f1289, $f92 -> $f1290, $f93 -> $f1291), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f1295, $f92 -> $f1296, $f93 -> $f1297), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id53: ($f141 -> $f29, $f142 -> $f30), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f1304, $f153 -> $f1305, $f154 -> $f1306, $f155 -> $f1307), [AppliedId(id16: ($f29 -> $f1305, $f30 -> $f1308)), AppliedId(id16: ($f29 -> $f1306, $f30 -> $f1309)), AppliedId(id31: ($f68 -> $f1308, $f69 -> $f1309, $f70 -> $f1307))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f1316, $f153 -> $f1317, $f154 -> $f1318, $f155 -> $f1319), [AppliedId(id16: ($f29 -> $f1317, $f30 -> $f1320)), AppliedId(id31: ($f68 -> $f1320, $f69 -> $f1321, $f70 -> $f1319)), AppliedId(id16: ($f29 -> $f1318, $f30 -> $f1321))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f1328, $f153 -> $f1329, $f154 -> $f1330, $f155 -> $f1331), [AppliedId(id31: ($f68 -> $f1332, $f69 -> $f1333, $f70 -> $f1331)), AppliedId(id16: ($f29 -> $f1329, $f30 -> $f1332)), AppliedId(id16: ($f29 -> $f1330, $f30 -> $f1333))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f1340, $f153 -> $f1341, $f154 -> $f1342, $f155 -> $f1343), [AppliedId(id31: ($f68 -> $f1344, $f69 -> $f1345, $f70 -> $f1343)), AppliedId(id16: ($f29 -> $f1342, $f30 -> $f1345)), AppliedId(id16: ($f29 -> $f1341, $f30 -> $f1344))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f1352, $f153 -> $f1353, $f154 -> $f1354, $f155 -> $f1355), [AppliedId(id16: ($f29 -> $f1354, $f30 -> $f1356)), AppliedId(id16: ($f29 -> $f1353, $f30 -> $f1357)), AppliedId(id31: ($f68 -> $f1357, $f69 -> $f1356, $f70 -> $f1355))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f1364, $f153 -> $f1365, $f154 -> $f1366, $f155 -> $f1367), [AppliedId(id16: ($f29 -> $f1366, $f30 -> $f1368)), AppliedId(id31: ($f68 -> $f1369, $f69 -> $f1368, $f70 -> $f1367)), AppliedId(id16: ($f29 -> $f1365, $f30 -> $f1369))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id24: ($f51 -> $f68, $f52 -> $f69, $f53 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id29: ($f62 -> $f68, $f63 -> $f69, $f64 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f1519, $f92 -> $f1520, $f93 -> $f1521), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f1526, $f116 -> $f1527, $f117 -> $f1528, $f118 -> $f1529), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f1526, $f116 -> $f1527, $f117 -> $f1528, $f118 -> $f1529) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1543, $f153 -> $f1544, $f154 -> $f1545, $f155 -> $f1546), [AppliedId(id16: ($f29 -> $f1544, $f30 -> $f1547)), AppliedId(id16: ($f29 -> $f1545, $f30 -> $f1548)), AppliedId(id31: ($f68 -> $f1547, $f69 -> $f1548, $f70 -> $f1546))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1543, $f153 -> $f1544, $f154 -> $f1545, $f155 -> $f1546) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1544, $f30 -> $f1547) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1545, $f30 -> $f1548) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f1547, $f69 -> $f1548, $f70 -> $f1546) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1555, $f153 -> $f1556, $f154 -> $f1557, $f155 -> $f1558), [AppliedId(id16: ($f29 -> $f1556, $f30 -> $f1559)), AppliedId(id31: ($f68 -> $f1559, $f69 -> $f1560, $f70 -> $f1558)), AppliedId(id16: ($f29 -> $f1557, $f30 -> $f1560))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1555, $f153 -> $f1556, $f154 -> $f1557, $f155 -> $f1558) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1556, $f30 -> $f1559) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f1559, $f69 -> $f1560, $f70 -> $f1558) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1557, $f30 -> $f1560) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1567, $f153 -> $f1568, $f154 -> $f1569, $f155 -> $f1570), [AppliedId(id31: ($f68 -> $f1571, $f69 -> $f1572, $f70 -> $f1570)), AppliedId(id16: ($f29 -> $f1568, $f30 -> $f1571)), AppliedId(id16: ($f29 -> $f1569, $f30 -> $f1572))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1567, $f153 -> $f1568, $f154 -> $f1569, $f155 -> $f1570) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f1571, $f69 -> $f1572, $f70 -> $f1570) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1568, $f30 -> $f1571) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1569, $f30 -> $f1572) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1579, $f153 -> $f1580, $f154 -> $f1581, $f155 -> $f1582), [AppliedId(id31: ($f68 -> $f1583, $f69 -> $f1584, $f70 -> $f1582)), AppliedId(id16: ($f29 -> $f1581, $f30 -> $f1584)), AppliedId(id16: ($f29 -> $f1580, $f30 -> $f1583))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1579, $f153 -> $f1580, $f154 -> $f1581, $f155 -> $f1582) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f1583, $f69 -> $f1584, $f70 -> $f1582) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1581, $f30 -> $f1584) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1580, $f30 -> $f1583) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1591, $f153 -> $f1592, $f154 -> $f1593, $f155 -> $f1594), [AppliedId(id16: ($f29 -> $f1593, $f30 -> $f1595)), AppliedId(id16: ($f29 -> $f1592, $f30 -> $f1596)), AppliedId(id31: ($f68 -> $f1596, $f69 -> $f1595, $f70 -> $f1594))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1591, $f153 -> $f1592, $f154 -> $f1593, $f155 -> $f1594) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1593, $f30 -> $f1595) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1592, $f30 -> $f1596) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f1596, $f69 -> $f1595, $f70 -> $f1594) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1603, $f153 -> $f1604, $f154 -> $f1605, $f155 -> $f1606), [AppliedId(id16: ($f29 -> $f1605, $f30 -> $f1607)), AppliedId(id31: ($f68 -> $f1608, $f69 -> $f1607, $f70 -> $f1606)), AppliedId(id16: ($f29 -> $f1604, $f30 -> $f1608))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1603, $f153 -> $f1604, $f154 -> $f1605, $f155 -> $f1606) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1605, $f30 -> $f1607) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f1608, $f69 -> $f1607, $f70 -> $f1606) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1604, $f30 -> $f1608) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1659, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1660, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1660, $f26 -> $f1659))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1659, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1660, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f1660, $f26 -> $f1659) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1663, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1664, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1663, $f26 -> $f1664))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1663, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1664, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f1663, $f26 -> $f1664) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1667, $f26 -> $f1668)), AppliedId(id16: ($f29 -> $f1668, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1667, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f1667, $f26 -> $f1668) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1668, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1667, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1671, $f26 -> $f1672)), AppliedId(id16: ($f29 -> $f1671, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1672, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f1671, $f26 -> $f1672) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1671, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1672, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1675, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1676, $f26 -> $f1675)), AppliedId(id16: ($f29 -> $f1676, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1675, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f1676, $f26 -> $f1675) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1676, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1679, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1679, $f26 -> $f1680)), AppliedId(id16: ($f29 -> $f1680, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1679, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f1679, $f26 -> $f1680) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1680, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f1713, $f26 -> $f1714))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f1713, $f26 -> $f1714) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f1719, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1719, $f30 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id87: ($f501 -> $f506) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id91: ($f509 -> $f512) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f1909, $f92 -> $f1910, $f93 -> $f1911), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f1916, $f116 -> $f1917, $f117 -> $f1918, $f118 -> $f1919), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f1916, $f116 -> $f1917, $f117 -> $f1918, $f118 -> $f1919) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1933, $f153 -> $f1934, $f154 -> $f1935, $f155 -> $f1936), [AppliedId(id16: ($f29 -> $f1934, $f30 -> $f1937)), AppliedId(id16: ($f29 -> $f1935, $f30 -> $f1938)), AppliedId(id31: ($f68 -> $f1937, $f69 -> $f1938, $f70 -> $f1936))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1933, $f153 -> $f1934, $f154 -> $f1935, $f155 -> $f1936) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1934, $f30 -> $f1937) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1935, $f30 -> $f1938) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f1937, $f69 -> $f1938, $f70 -> $f1936) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1945, $f153 -> $f1946, $f154 -> $f1947, $f155 -> $f1948), [AppliedId(id16: ($f29 -> $f1946, $f30 -> $f1949)), AppliedId(id31: ($f68 -> $f1949, $f69 -> $f1950, $f70 -> $f1948)), AppliedId(id16: ($f29 -> $f1947, $f30 -> $f1950))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1945, $f153 -> $f1946, $f154 -> $f1947, $f155 -> $f1948) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1946, $f30 -> $f1949) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f1949, $f69 -> $f1950, $f70 -> $f1948) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1947, $f30 -> $f1950) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1957, $f153 -> $f1958, $f154 -> $f1959, $f155 -> $f1960), [AppliedId(id31: ($f68 -> $f1961, $f69 -> $f1962, $f70 -> $f1960)), AppliedId(id16: ($f29 -> $f1958, $f30 -> $f1961)), AppliedId(id16: ($f29 -> $f1959, $f30 -> $f1962))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1957, $f153 -> $f1958, $f154 -> $f1959, $f155 -> $f1960) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f1961, $f69 -> $f1962, $f70 -> $f1960) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1958, $f30 -> $f1961) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1959, $f30 -> $f1962) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1969, $f153 -> $f1970, $f154 -> $f1971, $f155 -> $f1972), [AppliedId(id31: ($f68 -> $f1973, $f69 -> $f1974, $f70 -> $f1972)), AppliedId(id16: ($f29 -> $f1971, $f30 -> $f1974)), AppliedId(id16: ($f29 -> $f1970, $f30 -> $f1973))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1969, $f153 -> $f1970, $f154 -> $f1971, $f155 -> $f1972) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f1973, $f69 -> $f1974, $f70 -> $f1972) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1971, $f30 -> $f1974) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1970, $f30 -> $f1973) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1981, $f153 -> $f1982, $f154 -> $f1983, $f155 -> $f1984), [AppliedId(id16: ($f29 -> $f1983, $f30 -> $f1985)), AppliedId(id16: ($f29 -> $f1982, $f30 -> $f1986)), AppliedId(id31: ($f68 -> $f1986, $f69 -> $f1985, $f70 -> $f1984))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1981, $f153 -> $f1982, $f154 -> $f1983, $f155 -> $f1984) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1983, $f30 -> $f1985) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f1982, $f30 -> $f1986) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f1986, $f69 -> $f1985, $f70 -> $f1984) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1993, $f153 -> $f1994, $f154 -> $f1995, $f155 -> $f1996), [AppliedId(id16: ($f29 -> $f1995, $f30 -> $f1997)), AppliedId(id31: ($f68 -> $f1998, $f69 -> $f1997, $f70 -> $f1996)), AppliedId(id16: ($f29 -> $f1994, $f30 -> $f1998))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f1993, $f153 -> $f1994, $f154 -> $f1995, $f155 -> $f1996) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f1995, $f30 -> $f1997) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f1998, $f69 -> $f1997, $f70 -> $f1996) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f1994, $f30 -> $f1998) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2049, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f2050, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2050, $f26 -> $f2049))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2049, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2050, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f2050, $f26 -> $f2049) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2053, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f2054, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2053, $f26 -> $f2054))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2053, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2054, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f2053, $f26 -> $f2054) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f2057, $f26 -> $f2058)), AppliedId(id16: ($f29 -> $f2058, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f2057, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f2057, $f26 -> $f2058) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2058, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2057, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f2061, $f26 -> $f2062)), AppliedId(id16: ($f29 -> $f2061, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f2062, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f2061, $f26 -> $f2062) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2061, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2062, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2065, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2066, $f26 -> $f2065)), AppliedId(id16: ($f29 -> $f2066, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2065, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f2066, $f26 -> $f2065) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2066, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2069, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2069, $f26 -> $f2070)), AppliedId(id16: ($f29 -> $f2070, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2069, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f2069, $f26 -> $f2070) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2070, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f2103, $f26 -> $f2104))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f2103, $f26 -> $f2104) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f2109, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2109, $f30 -> $f509) to subst
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc::rewrite] define found [{"cond": id10: ($f18 -> $f1876, $f19 -> $f1877, $f20 -> $f1878), "star_1_1": id16: ($f29 -> $f1879, $f30 -> $f1877), "star_1_0": id13: ($f24 -> $f1876, $f25 -> $f1880, $f26 -> $f1879), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1880, $f30 -> $f1878)}, {"cond": id10: ($f18 -> $f1881, $f19 -> $f1882, $f20 -> $f1883), "star_1_1": id13: ($f24 -> $f1881, $f25 -> $f1884, $f26 -> $f1885), "star_1_0": id16: ($f29 -> $f1884, $f30 -> $f1883), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1885, $f30 -> $f1882)}, {"cond": id10: ($f18 -> $f1886, $f19 -> $f1887, $f20 -> $f1888), "star_1_1": id16: ($f29 -> $f1889, $f30 -> $f1887), "star_1_0": id16: ($f29 -> $f1890, $f30 -> $f1888), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f1886, $f25 -> $f1890, $f26 -> $f1889)}, {"cond": id10: ($f18 -> $f1891, $f19 -> $f1892, $f20 -> $f1893), "star_1_1": id13: ($f24 -> $f1891, $f25 -> $f1894, $f26 -> $f1895), "star_1_0": id16: ($f29 -> $f1895, $f30 -> $f1892), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1894, $f30 -> $f1893)}, {"cond": id10: ($f18 -> $f1896, $f19 -> $f1897, $f20 -> $f1898), "star_1_1": id16: ($f29 -> $f1899, $f30 -> $f1898), "star_1_0": id16: ($f29 -> $f1900, $f30 -> $f1897), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f1896, $f25 -> $f1899, $f26 -> $f1900)}, {"cond": id10: ($f18 -> $f1901, $f19 -> $f1902, $f20 -> $f1903), "star_1_1": id16: ($f29 -> $f1904, $f30 -> $f1903), "star_1_0": id13: ($f24 -> $f1901, $f25 -> $f1904, $f26 -> $f1905), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f1905, $f30 -> $f1902)}, {"syntax": id12: ($f21 -> $f1920, $f22 -> $f1921, $f23 -> $f1922), "cond": id47: ($f113 -> $f1920, $f114 -> $f1921, $f115 -> $f1923, $f116 -> $f1924, $f117 -> $f1925, $f118 -> $f1926), "star_1_0": id13: ($f24 -> $f1920, $f25 -> $f1921, $f26 -> $f1922)}, {"cond": id58: ($f150 -> $f1999, $f151 -> $f2000, $f152 -> $f2001, $f153 -> $f2002, $f154 -> $f2003, $f155 -> $f2004), "star_1_1": id16: ($f29 -> $f2003, $f30 -> $f2005), "star_1_0": id16: ($f29 -> $f2002, $f30 -> $f2006), "syntax": id15: ($f27 -> $f1999, $f28 -> $f2000), "star_1_2": id31: ($f68 -> $f2006, $f69 -> $f2005, $f70 -> $f2004)}, {"cond": id58: ($f150 -> $f2007, $f151 -> $f2008, $f152 -> $f2009, $f153 -> $f2010, $f154 -> $f2011, $f155 -> $f2012), "star_1_1": id31: ($f68 -> $f2013, $f69 -> $f2014, $f70 -> $f2012), "star_1_0": id16: ($f29 -> $f2010, $f30 -> $f2013), "syntax": id15: ($f27 -> $f2007, $f28 -> $f2008), "star_1_2": id16: ($f29 -> $f2011, $f30 -> $f2014)}, {"cond": id58: ($f150 -> $f2015, $f151 -> $f2016, $f152 -> $f2017, $f153 -> $f2018, $f154 -> $f2019, $f155 -> $f2020), "star_1_1": id16: ($f29 -> $f2018, $f30 -> $f2021), "star_1_0": id31: ($f68 -> $f2021, $f69 -> $f2022, $f70 -> $f2020), "syntax": id15: ($f27 -> $f2015, $f28 -> $f2016), "star_1_2": id16: ($f29 -> $f2019, $f30 -> $f2022)}, {"cond": id58: ($f150 -> $f2023, $f151 -> $f2024, $f152 -> $f2025, $f153 -> $f2026, $f154 -> $f2027, $f155 -> $f2028), "star_1_1": id16: ($f29 -> $f2027, $f30 -> $f2029), "star_1_0": id31: ($f68 -> $f2030, $f69 -> $f2029, $f70 -> $f2028), "syntax": id15: ($f27 -> $f2023, $f28 -> $f2024), "star_1_2": id16: ($f29 -> $f2026, $f30 -> $f2030)}, {"cond": id58: ($f150 -> $f2031, $f151 -> $f2032, $f152 -> $f2033, $f153 -> $f2034, $f154 -> $f2035, $f155 -> $f2036), "star_1_1": id16: ($f29 -> $f2034, $f30 -> $f2037), "star_1_0": id16: ($f29 -> $f2035, $f30 -> $f2038), "syntax": id15: ($f27 -> $f2031, $f28 -> $f2032), "star_1_2": id31: ($f68 -> $f2037, $f69 -> $f2038, $f70 -> $f2036)}, {"cond": id58: ($f150 -> $f2039, $f151 -> $f2040, $f152 -> $f2041, $f153 -> $f2042, $f154 -> $f2043, $f155 -> $f2044), "star_1_1": id31: ($f68 -> $f2046, $f69 -> $f2045, $f70 -> $f2044), "star_1_0": id16: ($f29 -> $f2043, $f30 -> $f2045), "syntax": id15: ($f27 -> $f2039, $f28 -> $f2040), "star_1_2": id16: ($f29 -> $f2042, $f30 -> $f2046)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2072, $f30 -> $f2071), "star_1_0": id16: ($f29 -> $f2074, $f30 -> $f2073), "syntax": id20: ($f41 -> $f2075, $f42 -> $f2071, $f43 -> $f2073), "star_1_2": id13: ($f24 -> $f2075, $f25 -> $f2072, $f26 -> $f2074)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2077, $f30 -> $f2076), "star_1_0": id16: ($f29 -> $f2079, $f30 -> $f2078), "syntax": id20: ($f41 -> $f2080, $f42 -> $f2078, $f43 -> $f2076), "star_1_2": id13: ($f24 -> $f2080, $f25 -> $f2079, $f26 -> $f2077)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2082, $f30 -> $f2081), "star_1_0": id13: ($f24 -> $f2083, $f25 -> $f2084, $f26 -> $f2082), "syntax": id20: ($f41 -> $f2083, $f42 -> $f2085, $f43 -> $f2081), "star_1_2": id16: ($f29 -> $f2084, $f30 -> $f2085)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2087, $f30 -> $f2086), "star_1_0": id13: ($f24 -> $f2088, $f25 -> $f2087, $f26 -> $f2089), "syntax": id20: ($f41 -> $f2088, $f42 -> $f2086, $f43 -> $f2090), "star_1_2": id16: ($f29 -> $f2089, $f30 -> $f2090)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f2091, $f25 -> $f2093, $f26 -> $f2092), "star_1_0": id16: ($f29 -> $f2092, $f30 -> $f2094), "syntax": id20: ($f41 -> $f2091, $f42 -> $f2095, $f43 -> $f2094), "star_1_2": id16: ($f29 -> $f2093, $f30 -> $f2095)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f2096, $f25 -> $f2097, $f26 -> $f2098), "star_1_0": id16: ($f29 -> $f2097, $f30 -> $f2099), "syntax": id20: ($f41 -> $f2096, $f42 -> $f2099, $f43 -> $f2100), "star_1_2": id16: ($f29 -> $f2098, $f30 -> $f2100)}, {"syntax": id84: ($f497 -> $f2105), "cond": id79: (), "star_1_0": id13: ($f24 -> $f2105, $f25 -> $f2106, $f26 -> $f2107)}, {"syntax": id84: ($f497 -> $f2110), "cond": id79: (), "star_1_0": id16: ($f29 -> $f2111, $f30 -> $f2110)}]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f32: Node,
        $f33: Node,
        $f34: Int,
        $f35: Int,
        $f31: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f35: [
            2,
        ],
        $f32: [
            0,
            2,
        ],
        $f31: [
            0,
        ],
        $f34: [
            1,
        ],
        $f33: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f32: Node, $f33: Node, $f34: Int, $f35: Int, $f31: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f35: Int,
        $f32: Node,
        $f34: Int,
        $f31: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f35: [
            0,
        ],
        $f32: [
            0,
            1,
        ],
        $f34: [
            2,
        ],
        $f33: [
            1,
            2,
        ],
        $f31: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f35: Int, $f32: Node, $f34: Int, $f31: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f34: Int,
        $f32: Node,
        $f31: Int,
        $f33: Node,
        $f35: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f31: [
            2,
        ],
        $f34: [
            1,
        ],
        $f35: [
            0,
        ],
        $f32: [
            0,
            2,
        ],
        $f33: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f34: Int, $f32: Node, $f31: Int, $f33: Node, $f35: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f35: Int,
        $f32: Node,
        $f34: Int,
        $f31: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f32: [
            1,
            2,
        ],
        $f33: [
            0,
            1,
        ],
        $f34: [
            0,
        ],
        $f31: [
            1,
        ],
        $f35: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f35: Int, $f32: Node, $f34: Int, $f31: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f35: Int,
        $f33: Node,
        $f32: Node,
        $f31: Int,
        $f34: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f34: [
            0,
        ],
        $f33: [
            0,
            2,
        ],
        $f31: [
            2,
        ],
        $f32: [
            1,
            2,
        ],
        $f35: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f35: Int, $f33: Node, $f32: Node, $f31: Int, $f34: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f31: Int,
        $f33: Node,
        $f34: Int,
        $f32: Node,
        $f35: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f33: [
            0,
            2,
        ],
        $f31: [
            0,
        ],
        $f34: [
            2,
        ],
        $f32: [
            0,
            1,
        ],
        $f35: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f31: Int, $f33: Node, $f34: Int, $f32: Node, $f35: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id50 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
    ]
[entry::chc::rewrite] appId.slots {$f126, $f127, $f128}
[entry::chc::rewrite] mergeVarTypes = {
        $f126: Int,
        $f128: Node,
        $f127: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f126: [
            0,
        ],
        $f127: [
            0,
        ],
        $f128: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f126
[entry::chc::rewrite] var = $f127
[entry::chc::rewrite] var = $f128
[entry::chc::rewrite] from id50 children after sort [id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id50 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f126: Int, $f128: Node, $f127: Node}
[entry::chc::rewrite] map ($0 -> $f126, $1 -> $f127, $2 -> $f128)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id50_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f173, $f30 -> $f176),
        id16: ($f29 -> $f174, $f30 -> $f177),
        id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175),
    ]
[entry::chc::rewrite] appId.slots {$f173, $f176}
[entry::chc::rewrite] appId.slots {$f174, $f177}
[entry::chc::rewrite] appId.slots {$f175, $f176, $f177}
[entry::chc::rewrite] mergeVarTypes = {
        $f175: Int,
        $f177: Int,
        $f176: Int,
        $f174: Node,
        $f173: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f175: [
            2,
        ],
        $f177: [
            1,
            2,
        ],
        $f173: [
            0,
        ],
        $f176: [
            0,
            2,
        ],
        $f174: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f175
[entry::chc::rewrite] var = $f177
[entry::chc::rewrite] var = $f173
[entry::chc::rewrite] var = $f176
[entry::chc::rewrite] var = $f174
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f174, $f30 -> $f177)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f174, $f30 -> $f177),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f175: Int, $f177: Int, $f176: Int, $f174: Node, $f173: Node}
[entry::chc::rewrite] map ($0 -> $f174, $1 -> $f177)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f173, $f30 -> $f176)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f173, $f30 -> $f176),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f175: Int, $f177: Int, $f176: Int, $f174: Node, $f173: Node}
[entry::chc::rewrite] map ($0 -> $f173, $1 -> $f176)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f417, $f30 -> $f420),
        id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419),
        id16: ($f29 -> $f418, $f30 -> $f421),
    ]
[entry::chc::rewrite] appId.slots {$f417, $f420}
[entry::chc::rewrite] appId.slots {$f419, $f420, $f421}
[entry::chc::rewrite] appId.slots {$f418, $f421}
[entry::chc::rewrite] mergeVarTypes = {
        $f421: Int,
        $f420: Int,
        $f418: Node,
        $f417: Node,
        $f419: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f420: [
            0,
            1,
        ],
        $f417: [
            0,
        ],
        $f421: [
            1,
            2,
        ],
        $f419: [
            1,
        ],
        $f418: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f420
[entry::chc::rewrite] var = $f417
[entry::chc::rewrite] var = $f421
[entry::chc::rewrite] var = $f419
[entry::chc::rewrite] var = $f418
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f417, $f30 -> $f420)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f417, $f30 -> $f420),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f421: Int, $f420: Int, $f418: Node, $f417: Node, $f419: Int}
[entry::chc::rewrite] map ($0 -> $f417, $1 -> $f420)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f418, $f30 -> $f421)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f418, $f30 -> $f421),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f421: Int, $f420: Int, $f418: Node, $f417: Node, $f419: Int}
[entry::chc::rewrite] map ($0 -> $f418, $1 -> $f421)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439),
        id16: ($f29 -> $f437, $f30 -> $f440),
        id16: ($f29 -> $f438, $f30 -> $f441),
    ]
[entry::chc::rewrite] appId.slots {$f439, $f440, $f441}
[entry::chc::rewrite] appId.slots {$f437, $f440}
[entry::chc::rewrite] appId.slots {$f438, $f441}
[entry::chc::rewrite] mergeVarTypes = {
        $f438: Node,
        $f440: Int,
        $f437: Node,
        $f441: Int,
        $f439: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f437: [
            1,
        ],
        $f440: [
            0,
            1,
        ],
        $f438: [
            2,
        ],
        $f439: [
            0,
        ],
        $f441: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f437
[entry::chc::rewrite] var = $f440
[entry::chc::rewrite] var = $f438
[entry::chc::rewrite] var = $f439
[entry::chc::rewrite] var = $f441
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f438, $f30 -> $f441)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f438, $f30 -> $f441),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f438: Node, $f440: Int, $f437: Node, $f441: Int, $f439: Int}
[entry::chc::rewrite] map ($0 -> $f438, $1 -> $f441)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f437, $f30 -> $f440)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f437, $f30 -> $f440),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f438: Node, $f440: Int, $f437: Node, $f441: Int, $f439: Int}
[entry::chc::rewrite] map ($0 -> $f437, $1 -> $f440)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459),
        id16: ($f29 -> $f458, $f30 -> $f461),
        id16: ($f29 -> $f457, $f30 -> $f460),
    ]
[entry::chc::rewrite] appId.slots {$f459, $f460, $f461}
[entry::chc::rewrite] appId.slots {$f458, $f461}
[entry::chc::rewrite] appId.slots {$f457, $f460}
[entry::chc::rewrite] mergeVarTypes = {
        $f461: Int,
        $f458: Node,
        $f460: Int,
        $f459: Int,
        $f457: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f457: [
            2,
        ],
        $f459: [
            0,
        ],
        $f461: [
            0,
            1,
        ],
        $f460: [
            0,
            2,
        ],
        $f458: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f457
[entry::chc::rewrite] var = $f459
[entry::chc::rewrite] var = $f461
[entry::chc::rewrite] var = $f460
[entry::chc::rewrite] var = $f458
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f458, $f30 -> $f461)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f458, $f30 -> $f461),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f461: Int, $f458: Node, $f460: Int, $f459: Int, $f457: Node}
[entry::chc::rewrite] map ($0 -> $f458, $1 -> $f461)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f457, $f30 -> $f460)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f457, $f30 -> $f460),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f461: Int, $f458: Node, $f460: Int, $f459: Int, $f457: Node}
[entry::chc::rewrite] map ($0 -> $f457, $1 -> $f460)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f378, $f30 -> $f380),
        id16: ($f29 -> $f377, $f30 -> $f381),
        id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379),
    ]
[entry::chc::rewrite] appId.slots {$f378, $f380}
[entry::chc::rewrite] appId.slots {$f377, $f381}
[entry::chc::rewrite] appId.slots {$f379, $f380, $f381}
[entry::chc::rewrite] mergeVarTypes = {
        $f378: Node,
        $f377: Node,
        $f379: Int,
        $f380: Int,
        $f381: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f381: [
            1,
            2,
        ],
        $f379: [
            2,
        ],
        $f377: [
            1,
        ],
        $f380: [
            0,
            2,
        ],
        $f378: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f381
[entry::chc::rewrite] var = $f379
[entry::chc::rewrite] var = $f377
[entry::chc::rewrite] var = $f380
[entry::chc::rewrite] var = $f378
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f377, $f30 -> $f381)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f377, $f30 -> $f381),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f378: Node, $f377: Node, $f379: Int, $f380: Int, $f381: Int}
[entry::chc::rewrite] map ($0 -> $f377, $1 -> $f381)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f378, $f30 -> $f380)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f378, $f30 -> $f380),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f378: Node, $f377: Node, $f379: Int, $f380: Int, $f381: Int}
[entry::chc::rewrite] map ($0 -> $f378, $1 -> $f380)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f398, $f30 -> $f400),
        id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399),
        id16: ($f29 -> $f397, $f30 -> $f401),
    ]
[entry::chc::rewrite] appId.slots {$f398, $f400}
[entry::chc::rewrite] appId.slots {$f399, $f400, $f401}
[entry::chc::rewrite] appId.slots {$f397, $f401}
[entry::chc::rewrite] mergeVarTypes = {
        $f397: Node,
        $f399: Int,
        $f400: Int,
        $f401: Int,
        $f398: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f397: [
            2,
        ],
        $f400: [
            0,
            1,
        ],
        $f401: [
            1,
            2,
        ],
        $f399: [
            1,
        ],
        $f398: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f397
[entry::chc::rewrite] var = $f400
[entry::chc::rewrite] var = $f401
[entry::chc::rewrite] var = $f399
[entry::chc::rewrite] var = $f398
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f398, $f30 -> $f400)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f398, $f30 -> $f400),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f397: Node, $f399: Int, $f400: Int, $f401: Int, $f398: Node}
[entry::chc::rewrite] map ($0 -> $f398, $1 -> $f400)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f397, $f30 -> $f401)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f397, $f30 -> $f401),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f397: Node, $f399: Int, $f400: Int, $f401: Int, $f398: Node}
[entry::chc::rewrite] map ($0 -> $f397, $1 -> $f401)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1268, $f30 -> $f489),
        id16: ($f29 -> $f1269, $f30 -> $f488),
        id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268),
    ]
[entry::chc::rewrite] appId.slots {$f489, $f1268}
[entry::chc::rewrite] appId.slots {$f488, $f1269}
[entry::chc::rewrite] appId.slots {$f487, $f1268, $f1269}
[entry::chc::rewrite] mergeVarTypes = {
        $f489: Int,
        $f487: Int,
        $f1268: Node,
        $f488: Int,
        $f1269: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1269: [
            1,
            2,
        ],
        $f488: [
            1,
        ],
        $f489: [
            0,
        ],
        $f1268: [
            0,
            2,
        ],
        $f487: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f1269
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f1268
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268), id16: ($f29 -> $f1268, $f30 -> $f489), id16: ($f29 -> $f1269, $f30 -> $f488)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268),
            ),
            AppliedId(
                id16: ($f29 -> $f1268, $f30 -> $f489),
            ),
            AppliedId(
                id16: ($f29 -> $f1269, $f30 -> $f488),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f489: Int, $f487: Int, $f1268: Node, $f488: Int, $f1269: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1269, $2 -> $f1268, $3 -> $f489, $4 -> $f488)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_3
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc] calling make on New(id20: ($f41 -> $f2112, $f42 -> $f2115, $f43 -> $f2116), id79: (), [AppliedId(id13: ($f24 -> $f2112, $f25 -> $f2113, $f26 -> $f2114)), AppliedId(id16: ($f29 -> $f2114, $f30 -> $f2115)), AppliedId(id16: ($f29 -> $f2113, $f30 -> $f2116))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f2112, $f2113, $f2114, $f2115, $f2116}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2112 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2112 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f2113 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2113 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f2114 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2114 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2115 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2115 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2116 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2116 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2112, $f42 -> $f2115, $f43 -> $f2116), id79: (), [AppliedId(id13: ($f24 -> $f2112, $f25 -> $f2113, $f26 -> $f2114)), AppliedId(id16: ($f29 -> $f2114, $f30 -> $f2115)), AppliedId(id16: ($f29 -> $f2113, $f30 -> $f2116))])
[entry::chc] get {$f2115: Int, $f2113: Node, $f2114: Node, $f2112: Int, $f2116: Int}
[slotted_egraphs::egraph::add] classes insert id98
[slotted_egraphs::egraph::add] add to id98 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[slotted_egraphs::egraph::add] remove from id98 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id98 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2112, $f2113, $f2114, $f2115, $f2116}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2112 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2112 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f2113 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2113 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f2114 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2114 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2115 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2115 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2116 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2116 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2112, $f42 -> $f2115, $f43 -> $f2116), id79: (), [AppliedId(id13: ($f24 -> $f2112, $f25 -> $f2113, $f26 -> $f2114)), AppliedId(id16: ($f29 -> $f2114, $f30 -> $f2115)), AppliedId(id16: ($f29 -> $f2113, $f30 -> $f2116))])
[entry::chc] get {$f2115: Int, $f2114: Node, $f2112: Int, $f2113: Node, $f2116: Int}
[entry::chc] calling merge to id98
[entry::chc] eclassSlots {$f2114, $f2113, $f2112, $f2116, $f2115}
[entry::chc] result varTypes {$f2114: Node, $f2112: Int, $f2116: Int, $f2115: Int, $f2113: Node}
[slotted_egraphs::parse] from (interface define_from_id82_3 (pred <(int $0) (int $3) (int $4)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("define_from_id82_3"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, Ident("2"), RParen]
[entry::chc] calling make on PredName("define_from_id82_3")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id82_3")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id99
[slotted_egraphs::egraph::add] add to id99 PredName("define_from_id82_3")
[slotted_egraphs::egraph::add] remove from id99 PredName("define_from_id82_3")
[slotted_egraphs::egraph::add] add to id99 PredName("define_from_id82_3")
[entry::chc] calling make on PredName("define_from_id82_3")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("define_from_id82_3")
[entry::chc] get {}
[entry::chc] calling merge to id99
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id99 <-> define_from_id82_3
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $0) (int $3) (int $4))
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[entry::chc] calling make on Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f2117, $f2118, $f2119}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] aggregateVarType for Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
[entry::chc] get {$f2118: Int, $f2119: Int, $f2117: Int}
[slotted_egraphs::egraph::add] classes insert id100
[slotted_egraphs::egraph::add] add to id100 Interface(id99: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[slotted_egraphs::egraph::add] remove from id100 Interface(id99: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[slotted_egraphs::egraph::add] add to id100 Interface(id99: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[entry::chc] calling make on Interface(id99: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id42: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2117, $f2118, $f2119}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] aggregateVarType for Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
[entry::chc] get {$f2119: Int, $f2117: Int, $f2118: Int}
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2117, $f2119, $f2118}
[entry::chc] result varTypes {$f2119: Int, $f2118: Int, $f2117: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id100 <-> (interface define_from_id82_3 (pred (int $0) (int $3) (int $4)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call move_to id98: ($f2112 -> $0, $f2115 -> $3, $f2116 -> $4), id100: ($f2117 -> $0, $f2118 -> $3, $f2119 -> $4)
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2117, $f2119, $f2118}
[entry::chc] result varTypes {$f2119: Int, $f2117: Int, $f2118: Int}
[slotted_egraphs::egraph::add] remove from id98 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2117, $f2118, $f2119, $f2122, $f2123}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f2122 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2122 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f2123 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2123 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
[entry::chc] get {$f2123: Node, $f2117: Int, $f2122: Node, $f2118: Int, $f2119: Int}
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2119, $f2118, $f2117, $f2122, $f2123}
[entry::chc] result varTypes {$f2119: Int, $f2122: Node, $f2123: Node, $f2117: Int, $f2118: Int}
[entry::chc] calling make on Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f2124, $f2125, $f2126}
[entry::chc] childId : id100, mapToS : $f2117
[entry::chc] adding $f2124 to varTypes
[entry::chc] childId : id100, mapToS : $f2118
[entry::chc] adding $f2125 to varTypes
[entry::chc] childId : id100, mapToS : $f2119
[entry::chc] adding $f2126 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] get {$f2126: Int, $f2125: Int, $f2124: Int}
[slotted_egraphs::egraph::add] classes insert id101
[slotted_egraphs::egraph::add] add to id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[slotted_egraphs::egraph::add] remove from id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[slotted_egraphs::egraph::add] add to id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2124, $f2125, $f2126}
[entry::chc] childId : id100, mapToS : $f2117
[entry::chc] adding $f2124 to varTypes
[entry::chc] childId : id100, mapToS : $f2118
[entry::chc] adding $f2125 to varTypes
[entry::chc] childId : id100, mapToS : $f2119
[entry::chc] adding $f2126 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] get {$f2125: Int, $f2126: Int, $f2124: Int}
[entry::chc] calling merge to id101
[entry::chc] eclassSlots {$f2126, $f2125, $f2124}
[entry::chc] result varTypes {$f2124: Int, $f2125: Int, $f2126: Int}
[entry::chc::rewrite] define new id101: ($f2124 -> $0, $f2125 -> $3, $f2126 -> $4)
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1241, $f30 -> $f488),
        id16: ($f29 -> $f1242, $f30 -> $f489),
        id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242),
    ]
[entry::chc::rewrite] appId.slots {$f488, $f1241}
[entry::chc::rewrite] appId.slots {$f489, $f1242}
[entry::chc::rewrite] appId.slots {$f487, $f1241, $f1242}
[entry::chc::rewrite] mergeVarTypes = {
        $f488: Int,
        $f487: Int,
        $f489: Int,
        $f1242: Node,
        $f1241: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1241: [
            0,
            2,
        ],
        $f488: [
            0,
        ],
        $f1242: [
            1,
            2,
        ],
        $f489: [
            1,
        ],
        $f487: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f1241
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1242
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242), id16: ($f29 -> $f1241, $f30 -> $f488), id16: ($f29 -> $f1242, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242),
            ),
            AppliedId(
                id16: ($f29 -> $f1241, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1242, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f488: Int, $f487: Int, $f489: Int, $f1242: Node, $f1241: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1241, $2 -> $f1242, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251),
        id16: ($f29 -> $f1251, $f30 -> $f489),
        id16: ($f29 -> $f1250, $f30 -> $f488),
    ]
[entry::chc::rewrite] appId.slots {$f487, $f1250, $f1251}
[entry::chc::rewrite] appId.slots {$f489, $f1251}
[entry::chc::rewrite] appId.slots {$f488, $f1250}
[entry::chc::rewrite] mergeVarTypes = {
        $f487: Int,
        $f489: Int,
        $f1250: Node,
        $f1251: Node,
        $f488: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1250: [
            0,
            2,
        ],
        $f488: [
            2,
        ],
        $f1251: [
            0,
            1,
        ],
        $f489: [
            1,
        ],
        $f487: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f1250
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1251
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251), id16: ($f29 -> $f1250, $f30 -> $f488), id16: ($f29 -> $f1251, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251),
            ),
            AppliedId(
                id16: ($f29 -> $f1250, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1251, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f487: Int, $f489: Int, $f1250: Node, $f1251: Node, $f488: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1250, $2 -> $f1251, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
        id16: ($f29 -> $f492, $f30 -> $f488),
        id16: ($f29 -> $f493, $f30 -> $f489),
    ]
[entry::chc::rewrite] appId.slots {$f487, $f492, $f493}
[entry::chc::rewrite] appId.slots {$f488, $f492}
[entry::chc::rewrite] appId.slots {$f489, $f493}
[entry::chc::rewrite] mergeVarTypes = {
        $f489: Int,
        $f493: Node,
        $f487: Int,
        $f492: Node,
        $f488: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f487: [
            0,
        ],
        $f492: [
            0,
            1,
        ],
        $f493: [
            0,
            2,
        ],
        $f489: [
            2,
        ],
        $f488: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f492
[entry::chc::rewrite] var = $f493
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493), id16: ($f29 -> $f492, $f30 -> $f488), id16: ($f29 -> $f493, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
            ),
            AppliedId(
                id16: ($f29 -> $f492, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f493, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f489: Int, $f493: Node, $f487: Int, $f492: Node, $f488: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f492, $2 -> $f493, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1259, $f30 -> $f489),
        id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259),
        id16: ($f29 -> $f1260, $f30 -> $f488),
    ]
[entry::chc::rewrite] appId.slots {$f489, $f1259}
[entry::chc::rewrite] appId.slots {$f487, $f1259, $f1260}
[entry::chc::rewrite] appId.slots {$f488, $f1260}
[entry::chc::rewrite] mergeVarTypes = {
        $f487: Int,
        $f488: Int,
        $f1259: Node,
        $f489: Int,
        $f1260: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1260: [
            1,
            2,
        ],
        $f488: [
            2,
        ],
        $f1259: [
            0,
            1,
        ],
        $f489: [
            0,
        ],
        $f487: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f1260
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1259
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259), id16: ($f29 -> $f1259, $f30 -> $f489), id16: ($f29 -> $f1260, $f30 -> $f488)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259),
            ),
            AppliedId(
                id16: ($f29 -> $f1259, $f30 -> $f489),
            ),
            AppliedId(
                id16: ($f29 -> $f1260, $f30 -> $f488),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f487: Int, $f488: Int, $f1259: Node, $f489: Int, $f1260: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1260, $2 -> $f1259, $3 -> $f489, $4 -> $f488)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1232, $f30 -> $f488),
        id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233),
        id16: ($f29 -> $f1233, $f30 -> $f489),
    ]
[entry::chc::rewrite] appId.slots {$f488, $f1232}
[entry::chc::rewrite] appId.slots {$f487, $f1232, $f1233}
[entry::chc::rewrite] appId.slots {$f489, $f1233}
[entry::chc::rewrite] mergeVarTypes = {
        $f488: Int,
        $f1232: Node,
        $f1233: Node,
        $f487: Int,
        $f489: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1233: [
            1,
            2,
        ],
        $f1232: [
            0,
            1,
        ],
        $f488: [
            0,
        ],
        $f487: [
            1,
        ],
        $f489: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f1233
[entry::chc::rewrite] var = $f1232
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233), id16: ($f29 -> $f1232, $f30 -> $f488), id16: ($f29 -> $f1233, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233),
            ),
            AppliedId(
                id16: ($f29 -> $f1232, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1233, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f488: Int, $f1232: Node, $f1233: Node, $f487: Int, $f489: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1232, $2 -> $f1233, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id87 
    CHCData { predNames: {"define_from_id50_1"}, varTypes: {$f504: Node, $f505: Node, $f501: Int} }
    ($f501):>> Interface(id86: (), id84: ($f497 -> $f501), id42: ())
     - New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505))])
     - Interface(id86: (), id84: ($f497 -> $f501), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
    ]
[entry::chc::rewrite] appId.slots {$f501, $f504, $f505}
[entry::chc::rewrite] mergeVarTypes = {
        $f505: Node,
        $f501: Int,
        $f504: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f504: [
            0,
        ],
        $f505: [
            0,
        ],
        $f501: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f504
[entry::chc::rewrite] var = $f505
[entry::chc::rewrite] var = $f501
[entry::chc::rewrite] from id87 children after sort [id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id87 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f505: Node, $f501: Int, $f504: Node}
[entry::chc::rewrite] map ($0 -> $f501, $1 -> $f504, $2 -> $f505)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id87_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id91 
    CHCData { predNames: {"define_from_id60_2"}, varTypes: {$f511: Node, $f509: Int} }
    ($f509):>> Interface(id90: (), id84: ($f497 -> $f509), id42: ())
     - New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f511, $f30 -> $f509))])
     - Interface(id90: (), id84: ($f497 -> $f509), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f511, $f30 -> $f509),
    ]
[entry::chc::rewrite] appId.slots {$f509, $f511}
[entry::chc::rewrite] mergeVarTypes = {
        $f511: Node,
        $f509: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f511: [
            0,
        ],
        $f509: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f511
[entry::chc::rewrite] var = $f509
[entry::chc::rewrite] from id91 children after sort [id16: ($f29 -> $f511, $f30 -> $f509)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id91 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f511, $f30 -> $f509),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f511: Node, $f509: Int}
[entry::chc::rewrite] map ($0 -> $f511, $1 -> $f509)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id91_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f2131, $f116 -> $f2132, $f117 -> $f2133, $f118 -> $f2134), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f2139, $f116 -> $f2140, $f117 -> $f2141, $f118 -> $f2142), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f2146, $f92 -> $f2147, $f93 -> $f2148), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f2152, $f92 -> $f2153, $f93 -> $f2154), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id53: ($f141 -> $f29, $f142 -> $f30), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f2161, $f153 -> $f2162, $f154 -> $f2163, $f155 -> $f2164), [AppliedId(id16: ($f29 -> $f2162, $f30 -> $f2165)), AppliedId(id16: ($f29 -> $f2163, $f30 -> $f2166)), AppliedId(id31: ($f68 -> $f2165, $f69 -> $f2166, $f70 -> $f2164))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f2173, $f153 -> $f2174, $f154 -> $f2175, $f155 -> $f2176), [AppliedId(id16: ($f29 -> $f2174, $f30 -> $f2177)), AppliedId(id31: ($f68 -> $f2177, $f69 -> $f2178, $f70 -> $f2176)), AppliedId(id16: ($f29 -> $f2175, $f30 -> $f2178))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f2185, $f153 -> $f2186, $f154 -> $f2187, $f155 -> $f2188), [AppliedId(id31: ($f68 -> $f2189, $f69 -> $f2190, $f70 -> $f2188)), AppliedId(id16: ($f29 -> $f2186, $f30 -> $f2189)), AppliedId(id16: ($f29 -> $f2187, $f30 -> $f2190))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f2197, $f153 -> $f2198, $f154 -> $f2199, $f155 -> $f2200), [AppliedId(id31: ($f68 -> $f2201, $f69 -> $f2202, $f70 -> $f2200)), AppliedId(id16: ($f29 -> $f2199, $f30 -> $f2202)), AppliedId(id16: ($f29 -> $f2198, $f30 -> $f2201))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f2209, $f153 -> $f2210, $f154 -> $f2211, $f155 -> $f2212), [AppliedId(id16: ($f29 -> $f2211, $f30 -> $f2213)), AppliedId(id16: ($f29 -> $f2210, $f30 -> $f2214)), AppliedId(id31: ($f68 -> $f2214, $f69 -> $f2213, $f70 -> $f2212))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f2221, $f153 -> $f2222, $f154 -> $f2223, $f155 -> $f2224), [AppliedId(id16: ($f29 -> $f2223, $f30 -> $f2225)), AppliedId(id31: ($f68 -> $f2226, $f69 -> $f2225, $f70 -> $f2224)), AppliedId(id16: ($f29 -> $f2222, $f30 -> $f2226))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id24: ($f51 -> $f68, $f52 -> $f69, $f53 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id29: ($f62 -> $f68, $f63 -> $f69, $f64 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f2380, $f92 -> $f2381, $f93 -> $f2382), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f2387, $f116 -> $f2388, $f117 -> $f2389, $f118 -> $f2390), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f2387, $f116 -> $f2388, $f117 -> $f2389, $f118 -> $f2390) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2404, $f153 -> $f2405, $f154 -> $f2406, $f155 -> $f2407), [AppliedId(id16: ($f29 -> $f2405, $f30 -> $f2408)), AppliedId(id16: ($f29 -> $f2406, $f30 -> $f2409)), AppliedId(id31: ($f68 -> $f2408, $f69 -> $f2409, $f70 -> $f2407))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2404, $f153 -> $f2405, $f154 -> $f2406, $f155 -> $f2407) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2405, $f30 -> $f2408) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2406, $f30 -> $f2409) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f2408, $f69 -> $f2409, $f70 -> $f2407) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2416, $f153 -> $f2417, $f154 -> $f2418, $f155 -> $f2419), [AppliedId(id16: ($f29 -> $f2417, $f30 -> $f2420)), AppliedId(id31: ($f68 -> $f2420, $f69 -> $f2421, $f70 -> $f2419)), AppliedId(id16: ($f29 -> $f2418, $f30 -> $f2421))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2416, $f153 -> $f2417, $f154 -> $f2418, $f155 -> $f2419) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2417, $f30 -> $f2420) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f2420, $f69 -> $f2421, $f70 -> $f2419) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2418, $f30 -> $f2421) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2428, $f153 -> $f2429, $f154 -> $f2430, $f155 -> $f2431), [AppliedId(id31: ($f68 -> $f2432, $f69 -> $f2433, $f70 -> $f2431)), AppliedId(id16: ($f29 -> $f2429, $f30 -> $f2432)), AppliedId(id16: ($f29 -> $f2430, $f30 -> $f2433))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2428, $f153 -> $f2429, $f154 -> $f2430, $f155 -> $f2431) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f2432, $f69 -> $f2433, $f70 -> $f2431) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2429, $f30 -> $f2432) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2430, $f30 -> $f2433) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2440, $f153 -> $f2441, $f154 -> $f2442, $f155 -> $f2443), [AppliedId(id31: ($f68 -> $f2444, $f69 -> $f2445, $f70 -> $f2443)), AppliedId(id16: ($f29 -> $f2442, $f30 -> $f2445)), AppliedId(id16: ($f29 -> $f2441, $f30 -> $f2444))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2440, $f153 -> $f2441, $f154 -> $f2442, $f155 -> $f2443) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f2444, $f69 -> $f2445, $f70 -> $f2443) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2442, $f30 -> $f2445) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2441, $f30 -> $f2444) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2452, $f153 -> $f2453, $f154 -> $f2454, $f155 -> $f2455), [AppliedId(id16: ($f29 -> $f2454, $f30 -> $f2456)), AppliedId(id16: ($f29 -> $f2453, $f30 -> $f2457)), AppliedId(id31: ($f68 -> $f2457, $f69 -> $f2456, $f70 -> $f2455))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2452, $f153 -> $f2453, $f154 -> $f2454, $f155 -> $f2455) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2454, $f30 -> $f2456) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2453, $f30 -> $f2457) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f2457, $f69 -> $f2456, $f70 -> $f2455) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2464, $f153 -> $f2465, $f154 -> $f2466, $f155 -> $f2467), [AppliedId(id16: ($f29 -> $f2466, $f30 -> $f2468)), AppliedId(id31: ($f68 -> $f2469, $f69 -> $f2468, $f70 -> $f2467)), AppliedId(id16: ($f29 -> $f2465, $f30 -> $f2469))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2464, $f153 -> $f2465, $f154 -> $f2466, $f155 -> $f2467) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2466, $f30 -> $f2468) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f2469, $f69 -> $f2468, $f70 -> $f2467) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2465, $f30 -> $f2469) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2520, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f2521, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2521, $f26 -> $f2520))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2520, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2521, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f2521, $f26 -> $f2520) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2524, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f2525, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2524, $f26 -> $f2525))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2524, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2525, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f2524, $f26 -> $f2525) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f2528, $f26 -> $f2529)), AppliedId(id16: ($f29 -> $f2529, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f2528, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f2528, $f26 -> $f2529) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2529, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2528, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f2532, $f26 -> $f2533)), AppliedId(id16: ($f29 -> $f2532, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f2533, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f2532, $f26 -> $f2533) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2532, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2533, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2536, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2537, $f26 -> $f2536)), AppliedId(id16: ($f29 -> $f2537, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2536, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f2537, $f26 -> $f2536) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2537, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2540, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2540, $f26 -> $f2541)), AppliedId(id16: ($f29 -> $f2541, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2540, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f2540, $f26 -> $f2541) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2541, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f2574, $f26 -> $f2575))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f2574, $f26 -> $f2575) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f2580, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2580, $f30 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2585, $f26 -> $f2586)), AppliedId(id16: ($f29 -> $f2586, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2585, $f30 -> $f2119))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f2117, $f25 -> $f2585, $f26 -> $f2586) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2586, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2585, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id87: ($f501 -> $f506) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id91: ($f509 -> $f512) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f2786, $f92 -> $f2787, $f93 -> $f2788), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f2793, $f116 -> $f2794, $f117 -> $f2795, $f118 -> $f2796), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f2793, $f116 -> $f2794, $f117 -> $f2795, $f118 -> $f2796) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2810, $f153 -> $f2811, $f154 -> $f2812, $f155 -> $f2813), [AppliedId(id16: ($f29 -> $f2811, $f30 -> $f2814)), AppliedId(id16: ($f29 -> $f2812, $f30 -> $f2815)), AppliedId(id31: ($f68 -> $f2814, $f69 -> $f2815, $f70 -> $f2813))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2810, $f153 -> $f2811, $f154 -> $f2812, $f155 -> $f2813) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2811, $f30 -> $f2814) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2812, $f30 -> $f2815) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f2814, $f69 -> $f2815, $f70 -> $f2813) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2822, $f153 -> $f2823, $f154 -> $f2824, $f155 -> $f2825), [AppliedId(id16: ($f29 -> $f2823, $f30 -> $f2826)), AppliedId(id31: ($f68 -> $f2826, $f69 -> $f2827, $f70 -> $f2825)), AppliedId(id16: ($f29 -> $f2824, $f30 -> $f2827))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2822, $f153 -> $f2823, $f154 -> $f2824, $f155 -> $f2825) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2823, $f30 -> $f2826) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f2826, $f69 -> $f2827, $f70 -> $f2825) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2824, $f30 -> $f2827) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2834, $f153 -> $f2835, $f154 -> $f2836, $f155 -> $f2837), [AppliedId(id31: ($f68 -> $f2838, $f69 -> $f2839, $f70 -> $f2837)), AppliedId(id16: ($f29 -> $f2835, $f30 -> $f2838)), AppliedId(id16: ($f29 -> $f2836, $f30 -> $f2839))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2834, $f153 -> $f2835, $f154 -> $f2836, $f155 -> $f2837) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f2838, $f69 -> $f2839, $f70 -> $f2837) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2835, $f30 -> $f2838) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2836, $f30 -> $f2839) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2846, $f153 -> $f2847, $f154 -> $f2848, $f155 -> $f2849), [AppliedId(id31: ($f68 -> $f2850, $f69 -> $f2851, $f70 -> $f2849)), AppliedId(id16: ($f29 -> $f2848, $f30 -> $f2851)), AppliedId(id16: ($f29 -> $f2847, $f30 -> $f2850))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2846, $f153 -> $f2847, $f154 -> $f2848, $f155 -> $f2849) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f2850, $f69 -> $f2851, $f70 -> $f2849) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2848, $f30 -> $f2851) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2847, $f30 -> $f2850) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2858, $f153 -> $f2859, $f154 -> $f2860, $f155 -> $f2861), [AppliedId(id16: ($f29 -> $f2860, $f30 -> $f2862)), AppliedId(id16: ($f29 -> $f2859, $f30 -> $f2863)), AppliedId(id31: ($f68 -> $f2863, $f69 -> $f2862, $f70 -> $f2861))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2858, $f153 -> $f2859, $f154 -> $f2860, $f155 -> $f2861) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2860, $f30 -> $f2862) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2859, $f30 -> $f2863) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f2863, $f69 -> $f2862, $f70 -> $f2861) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2870, $f153 -> $f2871, $f154 -> $f2872, $f155 -> $f2873), [AppliedId(id16: ($f29 -> $f2872, $f30 -> $f2874)), AppliedId(id31: ($f68 -> $f2875, $f69 -> $f2874, $f70 -> $f2873)), AppliedId(id16: ($f29 -> $f2871, $f30 -> $f2875))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f2870, $f153 -> $f2871, $f154 -> $f2872, $f155 -> $f2873) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2872, $f30 -> $f2874) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f2875, $f69 -> $f2874, $f70 -> $f2873) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2871, $f30 -> $f2875) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2926, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f2927, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2927, $f26 -> $f2926))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2926, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2927, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f2927, $f26 -> $f2926) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2930, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f2931, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2930, $f26 -> $f2931))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2930, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2931, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f2930, $f26 -> $f2931) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f2934, $f26 -> $f2935)), AppliedId(id16: ($f29 -> $f2935, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f2934, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f2934, $f26 -> $f2935) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2935, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2934, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f2938, $f26 -> $f2939)), AppliedId(id16: ($f29 -> $f2938, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f2939, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f2938, $f26 -> $f2939) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2938, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2939, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2942, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2943, $f26 -> $f2942)), AppliedId(id16: ($f29 -> $f2943, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2942, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f2943, $f26 -> $f2942) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2943, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f2946, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f2946, $f26 -> $f2947)), AppliedId(id16: ($f29 -> $f2947, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2946, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f2946, $f26 -> $f2947) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2947, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f2980, $f26 -> $f2981))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f2980, $f26 -> $f2981) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f2986, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f2986, $f30 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2991, $f26 -> $f2992)), AppliedId(id16: ($f29 -> $f2992, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2991, $f30 -> $f2119))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f2117, $f25 -> $f2991, $f26 -> $f2992) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f2992, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f2991, $f30 -> $f2119) to subst
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc] calling make on New(id20: ($f41 -> $f3000, $f42 -> $f2998, $f43 -> $f3002), id79: (), [AppliedId(id16: ($f29 -> $f2999, $f30 -> $f2998)), AppliedId(id13: ($f24 -> $f3000, $f25 -> $f3001, $f26 -> $f2999)), AppliedId(id16: ($f29 -> $f3001, $f30 -> $f3002))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f2998, $f2999, $f3000, $f3001, $f3002}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2998 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2998 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2999 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f2999 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3000 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3000 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3001 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3001 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3002 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3002 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3000, $f42 -> $f2998, $f43 -> $f3002), id79: (), [AppliedId(id16: ($f29 -> $f2999, $f30 -> $f2998)), AppliedId(id13: ($f24 -> $f3000, $f25 -> $f3001, $f26 -> $f2999)), AppliedId(id16: ($f29 -> $f3001, $f30 -> $f3002))])
[entry::chc] get {$f3001: Node, $f2999: Node, $f3002: Int, $f2998: Int, $f3000: Int}
[slotted_egraphs::egraph::add] classes insert id102
[slotted_egraphs::egraph::add] add to id102 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] remove from id102 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id102 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2998, $f2999, $f3000, $f3001, $f3002}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2998 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2998 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f2999 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f2999 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3000 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3000 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3001 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3001 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3002 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3002 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3000, $f42 -> $f2998, $f43 -> $f3002), id79: (), [AppliedId(id16: ($f29 -> $f2999, $f30 -> $f2998)), AppliedId(id13: ($f24 -> $f3000, $f25 -> $f3001, $f26 -> $f2999)), AppliedId(id16: ($f29 -> $f3001, $f30 -> $f3002))])
[entry::chc] get {$f3002: Int, $f2998: Int, $f2999: Node, $f3000: Int, $f3001: Node}
[entry::chc] calling merge to id102
[entry::chc] eclassSlots {$f3000, $f2999, $f2998, $f3002, $f3001}
[entry::chc] result varTypes {$f2999: Node, $f2998: Int, $f3000: Int, $f3001: Node, $f3002: Int}
[slotted_egraphs::egraph::union] Call move_to id102: ($f2998 -> $f2587, $f3000 -> $f2589, $f3002 -> $f2591), id100: ($f2117 -> $f2589, $f2118 -> $f2587, $f2119 -> $f2591)
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2119, $f2118, $f2117, $f2122, $f2123}
[entry::chc] result varTypes {$f2122: Node, $f2119: Int, $f2118: Int, $f2117: Int, $f2123: Node}
[slotted_egraphs::egraph::add] remove from id102 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))]) to self.pending
[slotted_egraphs::egraph::add] remove from id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3)), AppliedId(id16: ($f29 -> $4, $f30 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2117, $f2118, $f2119, $f3005, $f3006}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3005 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3005 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3006 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3006 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
[entry::chc] get {$f2117: Int, $f3006: Node, $f2119: Int, $f3005: Node, $f2118: Int}
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2119, $f2118, $f2117, $f3006, $f3005, $f2123, $f2122}
[entry::chc] result varTypes {$f2119: Int, $f2123: Node, $f2118: Int, $f3006: Node, $f3005: Node, $f2117: Int, $f2122: Node}
[slotted_egraphs::egraph::add] remove from id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[slotted_egraphs::egraph::add] add to id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2124, $f2125, $f2126}
[entry::chc] childId : id100, mapToS : $f2117
[entry::chc] adding $f2124 to varTypes
[entry::chc] childId : id100, mapToS : $f2118
[entry::chc] adding $f2125 to varTypes
[entry::chc] childId : id100, mapToS : $f2119
[entry::chc] adding $f2126 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] get {$f2124: Int, $f2125: Int, $f2126: Int}
[entry::chc] calling merge to id101
[entry::chc] eclassSlots {$f2126, $f2125, $f2124}
[entry::chc] result varTypes {$f2125: Int, $f2126: Int, $f2124: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f3009, $f42 -> $f3007, $f43 -> $f3011), id79: (), [AppliedId(id16: ($f29 -> $f3008, $f30 -> $f3007)), AppliedId(id16: ($f29 -> $f3010, $f30 -> $f3011)), AppliedId(id13: ($f24 -> $f3009, $f25 -> $f3010, $f26 -> $f3008))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3007, $f3008, $f3009, $f3010, $f3011}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3007 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3007 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3008 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3008 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3009 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3009 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3010 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3010 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3011 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3011 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3009, $f42 -> $f3007, $f43 -> $f3011), id79: (), [AppliedId(id16: ($f29 -> $f3008, $f30 -> $f3007)), AppliedId(id16: ($f29 -> $f3010, $f30 -> $f3011)), AppliedId(id13: ($f24 -> $f3009, $f25 -> $f3010, $f26 -> $f3008))])
[entry::chc] get {$f3007: Int, $f3009: Int, $f3010: Node, $f3008: Node, $f3011: Int}
[slotted_egraphs::egraph::add] classes insert id103
[slotted_egraphs::egraph::add] add to id103 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] remove from id103 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id103 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3007, $f3008, $f3009, $f3010, $f3011}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3007 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3007 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3008 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3008 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3009 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3009 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3010 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3010 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3011 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3011 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3009, $f42 -> $f3007, $f43 -> $f3011), id79: (), [AppliedId(id16: ($f29 -> $f3008, $f30 -> $f3007)), AppliedId(id16: ($f29 -> $f3010, $f30 -> $f3011)), AppliedId(id13: ($f24 -> $f3009, $f25 -> $f3010, $f26 -> $f3008))])
[entry::chc] get {$f3011: Int, $f3008: Node, $f3009: Int, $f3010: Node, $f3007: Int}
[entry::chc] calling merge to id103
[entry::chc] eclassSlots {$f3011, $f3010, $f3009, $f3008, $f3007}
[entry::chc] result varTypes {$f3009: Int, $f3011: Int, $f3010: Node, $f3007: Int, $f3008: Node}
[slotted_egraphs::egraph::union] Call move_to id103: ($f3007 -> $f2587, $f3009 -> $f2589, $f3011 -> $f2591), id100: ($f2117 -> $f2589, $f2118 -> $f2587, $f2119 -> $f2591)
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2119, $f2118, $f2117, $f3006, $f3005, $f2123, $f2122}
[entry::chc] result varTypes {$f3006: Node, $f2119: Int, $f2118: Int, $f2122: Node, $f2117: Int, $f3005: Node, $f2123: Node}
[slotted_egraphs::egraph::add] remove from id103 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))]) to self.pending
[slotted_egraphs::egraph::add] remove from id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $1)), AppliedId(id16: ($f29 -> $4, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $4, $f26 -> $3))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2117, $f2118, $f2119, $f3014, $f3015}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3014 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3014 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3015 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3015 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
[entry::chc] get {$f3015: Node, $f2117: Int, $f2118: Int, $f2119: Int, $f3014: Node}
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2119, $f2118, $f2117, $f3006, $f3005, $f2123, $f2122, $f3014, $f3015}
[entry::chc] result varTypes {$f3015: Node, $f3005: Node, $f3006: Node, $f2123: Node, $f2122: Node, $f3014: Node, $f2118: Int, $f2119: Int, $f2117: Int}
[slotted_egraphs::egraph::add] remove from id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[slotted_egraphs::egraph::add] add to id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2124, $f2125, $f2126}
[entry::chc] childId : id100, mapToS : $f2117
[entry::chc] adding $f2124 to varTypes
[entry::chc] childId : id100, mapToS : $f2118
[entry::chc] adding $f2125 to varTypes
[entry::chc] childId : id100, mapToS : $f2119
[entry::chc] adding $f2126 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] get {$f2126: Int, $f2125: Int, $f2124: Int}
[entry::chc] calling merge to id101
[entry::chc] eclassSlots {$f2126, $f2125, $f2124}
[entry::chc] result varTypes {$f2126: Int, $f2125: Int, $f2124: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f3018, $f42 -> $f3016, $f43 -> $f3020), id79: (), [AppliedId(id13: ($f24 -> $f3018, $f25 -> $f3019, $f26 -> $f3017)), AppliedId(id16: ($f29 -> $f3019, $f30 -> $f3020)), AppliedId(id16: ($f29 -> $f3017, $f30 -> $f3016))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3016, $f3017, $f3018, $f3019, $f3020}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3016 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3016 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3017 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3017 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3018 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3018 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3019 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3019 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3020 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3020 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3018, $f42 -> $f3016, $f43 -> $f3020), id79: (), [AppliedId(id13: ($f24 -> $f3018, $f25 -> $f3019, $f26 -> $f3017)), AppliedId(id16: ($f29 -> $f3019, $f30 -> $f3020)), AppliedId(id16: ($f29 -> $f3017, $f30 -> $f3016))])
[entry::chc] get {$f3017: Node, $f3018: Int, $f3019: Node, $f3020: Int, $f3016: Int}
[slotted_egraphs::egraph::add] classes insert id104
[slotted_egraphs::egraph::add] add to id104 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] remove from id104 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id104 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3016, $f3017, $f3018, $f3019, $f3020}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3016 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3016 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3017 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3017 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3018 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3018 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3019 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3019 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3020 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3020 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3018, $f42 -> $f3016, $f43 -> $f3020), id79: (), [AppliedId(id13: ($f24 -> $f3018, $f25 -> $f3019, $f26 -> $f3017)), AppliedId(id16: ($f29 -> $f3019, $f30 -> $f3020)), AppliedId(id16: ($f29 -> $f3017, $f30 -> $f3016))])
[entry::chc] get {$f3017: Node, $f3019: Node, $f3016: Int, $f3020: Int, $f3018: Int}
[entry::chc] calling merge to id104
[entry::chc] eclassSlots {$f3018, $f3017, $f3016, $f3020, $f3019}
[entry::chc] result varTypes {$f3018: Int, $f3019: Node, $f3020: Int, $f3017: Node, $f3016: Int}
[slotted_egraphs::egraph::union] Call move_to id104: ($f3016 -> $f2587, $f3018 -> $f2589, $f3020 -> $f2591), id100: ($f2117 -> $f2589, $f2118 -> $f2587, $f2119 -> $f2591)
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f2119, $f2118, $f2117, $f3006, $f3005, $f2123, $f2122, $f3014, $f3015}
[entry::chc] result varTypes {$f2123: Node, $f3005: Node, $f2122: Node, $f2119: Int, $f2118: Int, $f3015: Node, $f3014: Node, $f2117: Int, $f3006: Node}
[slotted_egraphs::egraph::add] remove from id104 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2117, $f2118, $f2119, $f3023, $f3024}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3023 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3023 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3024 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3024 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
[entry::chc] get {$f2117: Int, $f2119: Int, $f2118: Int, $f3024: Node, $f3023: Node}
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f3015, $f3023, $f2119, $f2118, $f2117, $f3006, $f3005, $f2123, $f2122, $f3014, $f3024}
[entry::chc] result varTypes {$f2122: Node, $f3014: Node, $f3015: Node, $f3024: Node, $f2123: Node, $f3005: Node, $f2119: Int, $f3023: Node, $f2118: Int, $f2117: Int, $f3006: Node}
[slotted_egraphs::egraph::add] remove from id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[slotted_egraphs::egraph::add] add to id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2124, $f2125, $f2126}
[entry::chc] childId : id100, mapToS : $f2117
[entry::chc] adding $f2124 to varTypes
[entry::chc] childId : id100, mapToS : $f2118
[entry::chc] adding $f2125 to varTypes
[entry::chc] childId : id100, mapToS : $f2119
[entry::chc] adding $f2126 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] get {$f2125: Int, $f2126: Int, $f2124: Int}
[entry::chc] calling merge to id101
[entry::chc] eclassSlots {$f2126, $f2125, $f2124}
[entry::chc] result varTypes {$f2126: Int, $f2125: Int, $f2124: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f3027, $f42 -> $f3025, $f43 -> $f3029), id79: (), [AppliedId(id16: ($f29 -> $f3028, $f30 -> $f3029)), AppliedId(id13: ($f24 -> $f3027, $f25 -> $f3028, $f26 -> $f3026)), AppliedId(id16: ($f29 -> $f3026, $f30 -> $f3025))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3025, $f3026, $f3027, $f3028, $f3029}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3025 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3025 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3026 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3026 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3027 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3027 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3028 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3028 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3029 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3029 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3027, $f42 -> $f3025, $f43 -> $f3029), id79: (), [AppliedId(id16: ($f29 -> $f3028, $f30 -> $f3029)), AppliedId(id13: ($f24 -> $f3027, $f25 -> $f3028, $f26 -> $f3026)), AppliedId(id16: ($f29 -> $f3026, $f30 -> $f3025))])
[entry::chc] get {$f3025: Int, $f3027: Int, $f3028: Node, $f3026: Node, $f3029: Int}
[slotted_egraphs::egraph::add] classes insert id105
[slotted_egraphs::egraph::add] add to id105 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] remove from id105 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id105 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3025, $f3026, $f3027, $f3028, $f3029}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3025 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3025 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3026 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3026 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3027 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3027 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3028 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3028 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3029 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3029 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3027, $f42 -> $f3025, $f43 -> $f3029), id79: (), [AppliedId(id16: ($f29 -> $f3028, $f30 -> $f3029)), AppliedId(id13: ($f24 -> $f3027, $f25 -> $f3028, $f26 -> $f3026)), AppliedId(id16: ($f29 -> $f3026, $f30 -> $f3025))])
[entry::chc] get {$f3026: Node, $f3029: Int, $f3028: Node, $f3027: Int, $f3025: Int}
[entry::chc] calling merge to id105
[entry::chc] eclassSlots {$f3029, $f3028, $f3027, $f3026, $f3025}
[entry::chc] result varTypes {$f3029: Int, $f3025: Int, $f3027: Int, $f3028: Node, $f3026: Node}
[slotted_egraphs::egraph::union] Call move_to id105: ($f3025 -> $f2587, $f3027 -> $f2589, $f3029 -> $f2591), id100: ($f2117 -> $f2589, $f2118 -> $f2587, $f2119 -> $f2591)
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f3015, $f3023, $f2119, $f2118, $f2117, $f3006, $f3005, $f2123, $f2122, $f3014, $f3024}
[entry::chc] result varTypes {$f2117: Int, $f2118: Int, $f2122: Node, $f3024: Node, $f3005: Node, $f3006: Node, $f2123: Node, $f3023: Node, $f3014: Node, $f2119: Int, $f3015: Node}
[slotted_egraphs::egraph::add] remove from id105 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2117, $f2118, $f2119, $f3032, $f3033}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3032 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3032 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3033 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3033 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
[entry::chc] get {$f2118: Int, $f2117: Int, $f3032: Node, $f2119: Int, $f3033: Node}
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f3015, $f3023, $f2119, $f2118, $f2117, $f3032, $f3033, $f3006, $f3005, $f2123, $f2122, $f3014, $f3024}
[entry::chc] result varTypes {$f3033: Node, $f3005: Node, $f3024: Node, $f3014: Node, $f2123: Node, $f3032: Node, $f3015: Node, $f2117: Int, $f2118: Int, $f2122: Node, $f3006: Node, $f3023: Node, $f2119: Int}
[slotted_egraphs::egraph::add] remove from id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[slotted_egraphs::egraph::add] add to id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2124, $f2125, $f2126}
[entry::chc] childId : id100, mapToS : $f2117
[entry::chc] adding $f2124 to varTypes
[entry::chc] childId : id100, mapToS : $f2118
[entry::chc] adding $f2125 to varTypes
[entry::chc] childId : id100, mapToS : $f2119
[entry::chc] adding $f2126 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] get {$f2125: Int, $f2126: Int, $f2124: Int}
[entry::chc] calling merge to id101
[entry::chc] eclassSlots {$f2126, $f2125, $f2124}
[entry::chc] result varTypes {$f2126: Int, $f2125: Int, $f2124: Int}
[entry::chc] calling make on New(id20: ($f41 -> $f3036, $f42 -> $f3034, $f43 -> $f3038), id79: (), [AppliedId(id16: ($f29 -> $f3037, $f30 -> $f3038)), AppliedId(id16: ($f29 -> $f3035, $f30 -> $f3034)), AppliedId(id13: ($f24 -> $f3036, $f25 -> $f3037, $f26 -> $f3035))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3034, $f3035, $f3036, $f3037, $f3038}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3034 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3034 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3035 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3035 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3036 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3036 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3037 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3037 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3038 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3038 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3036, $f42 -> $f3034, $f43 -> $f3038), id79: (), [AppliedId(id16: ($f29 -> $f3037, $f30 -> $f3038)), AppliedId(id16: ($f29 -> $f3035, $f30 -> $f3034)), AppliedId(id13: ($f24 -> $f3036, $f25 -> $f3037, $f26 -> $f3035))])
[entry::chc] get {$f3034: Int, $f3037: Node, $f3035: Node, $f3038: Int, $f3036: Int}
[slotted_egraphs::egraph::add] classes insert id106
[slotted_egraphs::egraph::add] add to id106 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] remove from id106 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id106 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3034, $f3035, $f3036, $f3037, $f3038}
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f3034 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3034 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3035 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3035 to varTypes
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f3036 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f3036 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3037 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3037 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f3038 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f3038 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f3036, $f42 -> $f3034, $f43 -> $f3038), id79: (), [AppliedId(id16: ($f29 -> $f3037, $f30 -> $f3038)), AppliedId(id16: ($f29 -> $f3035, $f30 -> $f3034)), AppliedId(id13: ($f24 -> $f3036, $f25 -> $f3037, $f26 -> $f3035))])
[entry::chc] get {$f3036: Int, $f3037: Node, $f3035: Node, $f3038: Int, $f3034: Int}
[entry::chc] calling merge to id106
[entry::chc] eclassSlots {$f3035, $f3034, $f3038, $f3037, $f3036}
[entry::chc] result varTypes {$f3037: Node, $f3036: Int, $f3035: Node, $f3034: Int, $f3038: Int}
[slotted_egraphs::egraph::union] Call move_to id106: ($f3034 -> $f2587, $f3036 -> $f2589, $f3038 -> $f2591), id100: ($f2117 -> $f2589, $f2118 -> $f2587, $f2119 -> $f2591)
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f3015, $f3023, $f2119, $f2118, $f2117, $f3032, $f3033, $f3006, $f3005, $f2123, $f2122, $f3014, $f3024}
[entry::chc] result varTypes {$f2119: Int, $f3033: Node, $f2118: Int, $f3015: Node, $f3005: Node, $f2117: Int, $f3032: Node, $f3014: Node, $f3024: Node, $f2122: Node, $f3023: Node, $f2123: Node, $f3006: Node}
[slotted_egraphs::egraph::add] remove from id106 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::union] adding New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))]) to self.pending
[slotted_egraphs::egraph::add] remove from id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[slotted_egraphs::egraph::add] add to id100 New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id79: (), [AppliedId(id16: ($f29 -> $3, $f30 -> $2)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2117, $f2118, $f2119, $f3041, $f3042}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f2117 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2118 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f2119 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3041 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f3041 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f3042 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f3042 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
[entry::chc] get {$f3041: Node, $f2119: Int, $f2117: Int, $f3042: Node, $f2118: Int}
[entry::chc] calling merge to id100
[entry::chc] eclassSlots {$f3023, $f2118, $f3032, $f3041, $f3006, $f2123, $f3015, $f3024, $f2119, $f3033, $f2117, $f3042, $f3005, $f2122, $f3014}
[entry::chc] result varTypes {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node}
[slotted_egraphs::egraph::add] remove from id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[slotted_egraphs::egraph::add] add to id101 Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id100: ($f2117 -> $0, $f2118 -> $1, $f2119 -> $2))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f2124, $f2125, $f2126}
[entry::chc] childId : id100, mapToS : $f2117
[entry::chc] adding $f2124 to varTypes
[entry::chc] childId : id100, mapToS : $f2118
[entry::chc] adding $f2125 to varTypes
[entry::chc] childId : id100, mapToS : $f2119
[entry::chc] adding $f2126 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[entry::chc] get {$f2125: Int, $f2124: Int, $f2126: Int}
[entry::chc] calling merge to id101
[entry::chc] eclassSlots {$f2126, $f2125, $f2124}
[entry::chc] result varTypes {$f2126: Int, $f2125: Int, $f2124: Int}
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc::rewrite] define found [{"cond": id10: ($f18 -> $f2753, $f19 -> $f2754, $f20 -> $f2755), "star_1_1": id16: ($f29 -> $f2756, $f30 -> $f2754), "star_1_0": id13: ($f24 -> $f2753, $f25 -> $f2757, $f26 -> $f2756), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f2757, $f30 -> $f2755)}, {"cond": id10: ($f18 -> $f2758, $f19 -> $f2759, $f20 -> $f2760), "star_1_1": id13: ($f24 -> $f2758, $f25 -> $f2761, $f26 -> $f2762), "star_1_0": id16: ($f29 -> $f2761, $f30 -> $f2760), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f2762, $f30 -> $f2759)}, {"cond": id10: ($f18 -> $f2763, $f19 -> $f2764, $f20 -> $f2765), "star_1_1": id16: ($f29 -> $f2766, $f30 -> $f2764), "star_1_0": id16: ($f29 -> $f2767, $f30 -> $f2765), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f2763, $f25 -> $f2767, $f26 -> $f2766)}, {"cond": id10: ($f18 -> $f2768, $f19 -> $f2769, $f20 -> $f2770), "star_1_1": id13: ($f24 -> $f2768, $f25 -> $f2771, $f26 -> $f2772), "star_1_0": id16: ($f29 -> $f2772, $f30 -> $f2769), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f2771, $f30 -> $f2770)}, {"cond": id10: ($f18 -> $f2773, $f19 -> $f2774, $f20 -> $f2775), "star_1_1": id16: ($f29 -> $f2776, $f30 -> $f2775), "star_1_0": id16: ($f29 -> $f2777, $f30 -> $f2774), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f2773, $f25 -> $f2776, $f26 -> $f2777)}, {"cond": id10: ($f18 -> $f2778, $f19 -> $f2779, $f20 -> $f2780), "star_1_1": id16: ($f29 -> $f2781, $f30 -> $f2780), "star_1_0": id13: ($f24 -> $f2778, $f25 -> $f2781, $f26 -> $f2782), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f2782, $f30 -> $f2779)}, {"syntax": id12: ($f21 -> $f2797, $f22 -> $f2798, $f23 -> $f2799), "cond": id47: ($f113 -> $f2797, $f114 -> $f2798, $f115 -> $f2800, $f116 -> $f2801, $f117 -> $f2802, $f118 -> $f2803), "star_1_0": id13: ($f24 -> $f2797, $f25 -> $f2798, $f26 -> $f2799)}, {"cond": id58: ($f150 -> $f2876, $f151 -> $f2877, $f152 -> $f2878, $f153 -> $f2879, $f154 -> $f2880, $f155 -> $f2881), "star_1_1": id16: ($f29 -> $f2880, $f30 -> $f2882), "star_1_0": id16: ($f29 -> $f2879, $f30 -> $f2883), "syntax": id15: ($f27 -> $f2876, $f28 -> $f2877), "star_1_2": id31: ($f68 -> $f2883, $f69 -> $f2882, $f70 -> $f2881)}, {"cond": id58: ($f150 -> $f2884, $f151 -> $f2885, $f152 -> $f2886, $f153 -> $f2887, $f154 -> $f2888, $f155 -> $f2889), "star_1_1": id31: ($f68 -> $f2890, $f69 -> $f2891, $f70 -> $f2889), "star_1_0": id16: ($f29 -> $f2887, $f30 -> $f2890), "syntax": id15: ($f27 -> $f2884, $f28 -> $f2885), "star_1_2": id16: ($f29 -> $f2888, $f30 -> $f2891)}, {"cond": id58: ($f150 -> $f2892, $f151 -> $f2893, $f152 -> $f2894, $f153 -> $f2895, $f154 -> $f2896, $f155 -> $f2897), "star_1_1": id16: ($f29 -> $f2895, $f30 -> $f2898), "star_1_0": id31: ($f68 -> $f2898, $f69 -> $f2899, $f70 -> $f2897), "syntax": id15: ($f27 -> $f2892, $f28 -> $f2893), "star_1_2": id16: ($f29 -> $f2896, $f30 -> $f2899)}, {"cond": id58: ($f150 -> $f2900, $f151 -> $f2901, $f152 -> $f2902, $f153 -> $f2903, $f154 -> $f2904, $f155 -> $f2905), "star_1_1": id16: ($f29 -> $f2904, $f30 -> $f2906), "star_1_0": id31: ($f68 -> $f2907, $f69 -> $f2906, $f70 -> $f2905), "syntax": id15: ($f27 -> $f2900, $f28 -> $f2901), "star_1_2": id16: ($f29 -> $f2903, $f30 -> $f2907)}, {"cond": id58: ($f150 -> $f2908, $f151 -> $f2909, $f152 -> $f2910, $f153 -> $f2911, $f154 -> $f2912, $f155 -> $f2913), "star_1_1": id16: ($f29 -> $f2911, $f30 -> $f2914), "star_1_0": id16: ($f29 -> $f2912, $f30 -> $f2915), "syntax": id15: ($f27 -> $f2908, $f28 -> $f2909), "star_1_2": id31: ($f68 -> $f2914, $f69 -> $f2915, $f70 -> $f2913)}, {"cond": id58: ($f150 -> $f2916, $f151 -> $f2917, $f152 -> $f2918, $f153 -> $f2919, $f154 -> $f2920, $f155 -> $f2921), "star_1_1": id31: ($f68 -> $f2923, $f69 -> $f2922, $f70 -> $f2921), "star_1_0": id16: ($f29 -> $f2920, $f30 -> $f2922), "syntax": id15: ($f27 -> $f2916, $f28 -> $f2917), "star_1_2": id16: ($f29 -> $f2919, $f30 -> $f2923)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2949, $f30 -> $f2948), "star_1_0": id16: ($f29 -> $f2951, $f30 -> $f2950), "syntax": id20: ($f41 -> $f2952, $f42 -> $f2948, $f43 -> $f2950), "star_1_2": id13: ($f24 -> $f2952, $f25 -> $f2949, $f26 -> $f2951)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2954, $f30 -> $f2953), "star_1_0": id16: ($f29 -> $f2956, $f30 -> $f2955), "syntax": id20: ($f41 -> $f2957, $f42 -> $f2955, $f43 -> $f2953), "star_1_2": id13: ($f24 -> $f2957, $f25 -> $f2956, $f26 -> $f2954)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2959, $f30 -> $f2958), "star_1_0": id13: ($f24 -> $f2960, $f25 -> $f2961, $f26 -> $f2959), "syntax": id20: ($f41 -> $f2960, $f42 -> $f2962, $f43 -> $f2958), "star_1_2": id16: ($f29 -> $f2961, $f30 -> $f2962)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2964, $f30 -> $f2963), "star_1_0": id13: ($f24 -> $f2965, $f25 -> $f2964, $f26 -> $f2966), "syntax": id20: ($f41 -> $f2965, $f42 -> $f2963, $f43 -> $f2967), "star_1_2": id16: ($f29 -> $f2966, $f30 -> $f2967)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f2968, $f25 -> $f2970, $f26 -> $f2969), "star_1_0": id16: ($f29 -> $f2969, $f30 -> $f2971), "syntax": id20: ($f41 -> $f2968, $f42 -> $f2972, $f43 -> $f2971), "star_1_2": id16: ($f29 -> $f2970, $f30 -> $f2972)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f2973, $f25 -> $f2974, $f26 -> $f2975), "star_1_0": id16: ($f29 -> $f2974, $f30 -> $f2976), "syntax": id20: ($f41 -> $f2973, $f42 -> $f2976, $f43 -> $f2977), "star_1_2": id16: ($f29 -> $f2975, $f30 -> $f2977)}, {"syntax": id84: ($f497 -> $f2982), "cond": id79: (), "star_1_0": id13: ($f24 -> $f2982, $f25 -> $f2983, $f26 -> $f2984)}, {"syntax": id84: ($f497 -> $f2987), "cond": id79: (), "star_1_0": id16: ($f29 -> $f2988, $f30 -> $f2987)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f2994, $f30 -> $f2993), "star_1_0": id13: ($f24 -> $f2995, $f25 -> $f2996, $f26 -> $f2994), "syntax": id20: ($f41 -> $f2995, $f42 -> $f2993, $f43 -> $f2997), "star_1_2": id16: ($f29 -> $f2996, $f30 -> $f2997)}]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f33: Node,
        $f31: Int,
        $f32: Node,
        $f34: Int,
        $f35: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f34: [
            1,
        ],
        $f33: [
            0,
            1,
        ],
        $f32: [
            0,
            2,
        ],
        $f31: [
            0,
        ],
        $f35: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f33: Node, $f31: Int, $f32: Node, $f34: Int, $f35: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f32: Node,
        $f35: Int,
        $f34: Int,
        $f31: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f35: [
            0,
        ],
        $f34: [
            2,
        ],
        $f31: [
            1,
        ],
        $f32: [
            0,
            1,
        ],
        $f33: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f32: Node, $f35: Int, $f34: Int, $f31: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f35: Int,
        $f34: Int,
        $f32: Node,
        $f33: Node,
        $f31: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f32: [
            0,
            2,
        ],
        $f35: [
            0,
        ],
        $f33: [
            1,
            2,
        ],
        $f34: [
            1,
        ],
        $f31: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f35: Int, $f34: Int, $f32: Node, $f33: Node, $f31: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f32: Node,
        $f34: Int,
        $f35: Int,
        $f31: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f31: [
            1,
        ],
        $f34: [
            0,
        ],
        $f32: [
            1,
            2,
        ],
        $f35: [
            2,
        ],
        $f33: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f32: Node, $f34: Int, $f35: Int, $f31: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f35: Int,
        $f34: Int,
        $f32: Node,
        $f31: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f34: [
            0,
        ],
        $f35: [
            1,
        ],
        $f33: [
            0,
            2,
        ],
        $f32: [
            1,
            2,
        ],
        $f31: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f35: Int, $f34: Int, $f32: Node, $f31: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f31: Int,
        $f35: Int,
        $f32: Node,
        $f34: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f32: [
            0,
            1,
        ],
        $f33: [
            0,
            2,
        ],
        $f31: [
            0,
        ],
        $f35: [
            1,
        ],
        $f34: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f31: Int, $f35: Int, $f32: Node, $f34: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id50 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
    ]
[entry::chc::rewrite] appId.slots {$f126, $f127, $f128}
[entry::chc::rewrite] mergeVarTypes = {
        $f128: Node,
        $f126: Int,
        $f127: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f127: [
            0,
        ],
        $f128: [
            0,
        ],
        $f126: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f127
[entry::chc::rewrite] var = $f128
[entry::chc::rewrite] var = $f126
[entry::chc::rewrite] from id50 children after sort [id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id50 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f128: Node, $f126: Int, $f127: Node}
[entry::chc::rewrite] map ($0 -> $f126, $1 -> $f127, $2 -> $f128)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id50_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f173, $f30 -> $f176),
        id16: ($f29 -> $f174, $f30 -> $f177),
        id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175),
    ]
[entry::chc::rewrite] appId.slots {$f173, $f176}
[entry::chc::rewrite] appId.slots {$f174, $f177}
[entry::chc::rewrite] appId.slots {$f175, $f176, $f177}
[entry::chc::rewrite] mergeVarTypes = {
        $f177: Int,
        $f173: Node,
        $f176: Int,
        $f174: Node,
        $f175: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f175: [
            2,
        ],
        $f174: [
            1,
        ],
        $f173: [
            0,
        ],
        $f177: [
            1,
            2,
        ],
        $f176: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f175
[entry::chc::rewrite] var = $f174
[entry::chc::rewrite] var = $f173
[entry::chc::rewrite] var = $f177
[entry::chc::rewrite] var = $f176
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f173, $f30 -> $f176)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f173, $f30 -> $f176),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f177: Int, $f173: Node, $f176: Int, $f174: Node, $f175: Int}
[entry::chc::rewrite] map ($0 -> $f173, $1 -> $f176)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f174, $f30 -> $f177)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f174, $f30 -> $f177),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f177: Int, $f173: Node, $f176: Int, $f174: Node, $f175: Int}
[entry::chc::rewrite] map ($0 -> $f174, $1 -> $f177)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f417, $f30 -> $f420),
        id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419),
        id16: ($f29 -> $f418, $f30 -> $f421),
    ]
[entry::chc::rewrite] appId.slots {$f417, $f420}
[entry::chc::rewrite] appId.slots {$f419, $f420, $f421}
[entry::chc::rewrite] appId.slots {$f418, $f421}
[entry::chc::rewrite] mergeVarTypes = {
        $f418: Node,
        $f417: Node,
        $f420: Int,
        $f419: Int,
        $f421: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f421: [
            1,
            2,
        ],
        $f418: [
            2,
        ],
        $f419: [
            1,
        ],
        $f420: [
            0,
            1,
        ],
        $f417: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f421
[entry::chc::rewrite] var = $f418
[entry::chc::rewrite] var = $f419
[entry::chc::rewrite] var = $f420
[entry::chc::rewrite] var = $f417
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f417, $f30 -> $f420)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f417, $f30 -> $f420),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f418: Node, $f417: Node, $f420: Int, $f419: Int, $f421: Int}
[entry::chc::rewrite] map ($0 -> $f417, $1 -> $f420)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f418, $f30 -> $f421)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f418, $f30 -> $f421),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f418: Node, $f417: Node, $f420: Int, $f419: Int, $f421: Int}
[entry::chc::rewrite] map ($0 -> $f418, $1 -> $f421)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439),
        id16: ($f29 -> $f437, $f30 -> $f440),
        id16: ($f29 -> $f438, $f30 -> $f441),
    ]
[entry::chc::rewrite] appId.slots {$f439, $f440, $f441}
[entry::chc::rewrite] appId.slots {$f437, $f440}
[entry::chc::rewrite] appId.slots {$f438, $f441}
[entry::chc::rewrite] mergeVarTypes = {
        $f440: Int,
        $f439: Int,
        $f437: Node,
        $f441: Int,
        $f438: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f441: [
            0,
            2,
        ],
        $f439: [
            0,
        ],
        $f438: [
            2,
        ],
        $f440: [
            0,
            1,
        ],
        $f437: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f441
[entry::chc::rewrite] var = $f439
[entry::chc::rewrite] var = $f438
[entry::chc::rewrite] var = $f440
[entry::chc::rewrite] var = $f437
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f437, $f30 -> $f440)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f437, $f30 -> $f440),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f440: Int, $f439: Int, $f437: Node, $f441: Int, $f438: Node}
[entry::chc::rewrite] map ($0 -> $f437, $1 -> $f440)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f438, $f30 -> $f441)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f438, $f30 -> $f441),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f440: Int, $f439: Int, $f437: Node, $f441: Int, $f438: Node}
[entry::chc::rewrite] map ($0 -> $f438, $1 -> $f441)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459),
        id16: ($f29 -> $f458, $f30 -> $f461),
        id16: ($f29 -> $f457, $f30 -> $f460),
    ]
[entry::chc::rewrite] appId.slots {$f459, $f460, $f461}
[entry::chc::rewrite] appId.slots {$f458, $f461}
[entry::chc::rewrite] appId.slots {$f457, $f460}
[entry::chc::rewrite] mergeVarTypes = {
        $f457: Node,
        $f461: Int,
        $f458: Node,
        $f459: Int,
        $f460: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f461: [
            0,
            1,
        ],
        $f457: [
            2,
        ],
        $f458: [
            1,
        ],
        $f459: [
            0,
        ],
        $f460: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f461
[entry::chc::rewrite] var = $f457
[entry::chc::rewrite] var = $f458
[entry::chc::rewrite] var = $f459
[entry::chc::rewrite] var = $f460
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f458, $f30 -> $f461)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f458, $f30 -> $f461),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f457: Node, $f461: Int, $f458: Node, $f459: Int, $f460: Int}
[entry::chc::rewrite] map ($0 -> $f458, $1 -> $f461)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f457, $f30 -> $f460)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f457, $f30 -> $f460),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f457: Node, $f461: Int, $f458: Node, $f459: Int, $f460: Int}
[entry::chc::rewrite] map ($0 -> $f457, $1 -> $f460)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f378, $f30 -> $f380),
        id16: ($f29 -> $f377, $f30 -> $f381),
        id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379),
    ]
[entry::chc::rewrite] appId.slots {$f378, $f380}
[entry::chc::rewrite] appId.slots {$f377, $f381}
[entry::chc::rewrite] appId.slots {$f379, $f380, $f381}
[entry::chc::rewrite] mergeVarTypes = {
        $f380: Int,
        $f379: Int,
        $f377: Node,
        $f378: Node,
        $f381: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f380: [
            0,
            2,
        ],
        $f378: [
            0,
        ],
        $f377: [
            1,
        ],
        $f381: [
            1,
            2,
        ],
        $f379: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f380
[entry::chc::rewrite] var = $f378
[entry::chc::rewrite] var = $f377
[entry::chc::rewrite] var = $f381
[entry::chc::rewrite] var = $f379
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f377, $f30 -> $f381)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f377, $f30 -> $f381),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f380: Int, $f379: Int, $f377: Node, $f378: Node, $f381: Int}
[entry::chc::rewrite] map ($0 -> $f377, $1 -> $f381)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f378, $f30 -> $f380)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f378, $f30 -> $f380),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f380: Int, $f379: Int, $f377: Node, $f378: Node, $f381: Int}
[entry::chc::rewrite] map ($0 -> $f378, $1 -> $f380)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f398, $f30 -> $f400),
        id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399),
        id16: ($f29 -> $f397, $f30 -> $f401),
    ]
[entry::chc::rewrite] appId.slots {$f398, $f400}
[entry::chc::rewrite] appId.slots {$f399, $f400, $f401}
[entry::chc::rewrite] appId.slots {$f397, $f401}
[entry::chc::rewrite] mergeVarTypes = {
        $f398: Node,
        $f400: Int,
        $f399: Int,
        $f401: Int,
        $f397: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f398: [
            0,
        ],
        $f401: [
            1,
            2,
        ],
        $f400: [
            0,
            1,
        ],
        $f397: [
            2,
        ],
        $f399: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f398
[entry::chc::rewrite] var = $f401
[entry::chc::rewrite] var = $f400
[entry::chc::rewrite] var = $f397
[entry::chc::rewrite] var = $f399
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f398, $f30 -> $f400)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f398, $f30 -> $f400),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f398: Node, $f400: Int, $f399: Int, $f401: Int, $f397: Node}
[entry::chc::rewrite] map ($0 -> $f398, $1 -> $f400)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f397, $f30 -> $f401)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f397, $f30 -> $f401),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f398: Node, $f400: Int, $f399: Int, $f401: Int, $f397: Node}
[entry::chc::rewrite] map ($0 -> $f397, $1 -> $f401)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1268, $f30 -> $f489),
        id16: ($f29 -> $f1269, $f30 -> $f488),
        id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268),
    ]
[entry::chc::rewrite] appId.slots {$f489, $f1268}
[entry::chc::rewrite] appId.slots {$f488, $f1269}
[entry::chc::rewrite] appId.slots {$f487, $f1268, $f1269}
[entry::chc::rewrite] mergeVarTypes = {
        $f1269: Node,
        $f1268: Node,
        $f487: Int,
        $f489: Int,
        $f488: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f489: [
            0,
        ],
        $f487: [
            2,
        ],
        $f488: [
            1,
        ],
        $f1268: [
            0,
            2,
        ],
        $f1269: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1268
[entry::chc::rewrite] var = $f1269
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268), id16: ($f29 -> $f1268, $f30 -> $f489), id16: ($f29 -> $f1269, $f30 -> $f488)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268),
            ),
            AppliedId(
                id16: ($f29 -> $f1268, $f30 -> $f489),
            ),
            AppliedId(
                id16: ($f29 -> $f1269, $f30 -> $f488),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f1269: Node, $f1268: Node, $f487: Int, $f489: Int, $f488: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1269, $2 -> $f1268, $3 -> $f489, $4 -> $f488)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1241, $f30 -> $f488),
        id16: ($f29 -> $f1242, $f30 -> $f489),
        id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242),
    ]
[entry::chc::rewrite] appId.slots {$f488, $f1241}
[entry::chc::rewrite] appId.slots {$f489, $f1242}
[entry::chc::rewrite] appId.slots {$f487, $f1241, $f1242}
[entry::chc::rewrite] mergeVarTypes = {
        $f488: Int,
        $f489: Int,
        $f1242: Node,
        $f487: Int,
        $f1241: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f487: [
            2,
        ],
        $f488: [
            0,
        ],
        $f1241: [
            0,
            2,
        ],
        $f1242: [
            1,
            2,
        ],
        $f489: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1241
[entry::chc::rewrite] var = $f1242
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242), id16: ($f29 -> $f1241, $f30 -> $f488), id16: ($f29 -> $f1242, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242),
            ),
            AppliedId(
                id16: ($f29 -> $f1241, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1242, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f488: Int, $f489: Int, $f1242: Node, $f487: Int, $f1241: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1241, $2 -> $f1242, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251),
        id16: ($f29 -> $f1251, $f30 -> $f489),
        id16: ($f29 -> $f1250, $f30 -> $f488),
    ]
[entry::chc::rewrite] appId.slots {$f487, $f1250, $f1251}
[entry::chc::rewrite] appId.slots {$f489, $f1251}
[entry::chc::rewrite] appId.slots {$f488, $f1250}
[entry::chc::rewrite] mergeVarTypes = {
        $f489: Int,
        $f1250: Node,
        $f1251: Node,
        $f488: Int,
        $f487: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1251: [
            0,
            1,
        ],
        $f1250: [
            0,
            2,
        ],
        $f488: [
            2,
        ],
        $f489: [
            1,
        ],
        $f487: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f1251
[entry::chc::rewrite] var = $f1250
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251), id16: ($f29 -> $f1250, $f30 -> $f488), id16: ($f29 -> $f1251, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251),
            ),
            AppliedId(
                id16: ($f29 -> $f1250, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1251, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f489: Int, $f1250: Node, $f1251: Node, $f488: Int, $f487: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1250, $2 -> $f1251, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
        id16: ($f29 -> $f492, $f30 -> $f488),
        id16: ($f29 -> $f493, $f30 -> $f489),
    ]
[entry::chc::rewrite] appId.slots {$f487, $f492, $f493}
[entry::chc::rewrite] appId.slots {$f488, $f492}
[entry::chc::rewrite] appId.slots {$f489, $f493}
[entry::chc::rewrite] mergeVarTypes = {
        $f492: Node,
        $f488: Int,
        $f489: Int,
        $f493: Node,
        $f487: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f487: [
            0,
        ],
        $f492: [
            0,
            1,
        ],
        $f488: [
            1,
        ],
        $f493: [
            0,
            2,
        ],
        $f489: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f492
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f493
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493), id16: ($f29 -> $f492, $f30 -> $f488), id16: ($f29 -> $f493, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
            ),
            AppliedId(
                id16: ($f29 -> $f492, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f493, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f492: Node, $f488: Int, $f489: Int, $f493: Node, $f487: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f492, $2 -> $f493, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1259, $f30 -> $f489),
        id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259),
        id16: ($f29 -> $f1260, $f30 -> $f488),
    ]
[entry::chc::rewrite] appId.slots {$f489, $f1259}
[entry::chc::rewrite] appId.slots {$f487, $f1259, $f1260}
[entry::chc::rewrite] appId.slots {$f488, $f1260}
[entry::chc::rewrite] mergeVarTypes = {
        $f488: Int,
        $f487: Int,
        $f489: Int,
        $f1260: Node,
        $f1259: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1260: [
            1,
            2,
        ],
        $f1259: [
            0,
            1,
        ],
        $f487: [
            1,
        ],
        $f488: [
            2,
        ],
        $f489: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f1260
[entry::chc::rewrite] var = $f1259
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259), id16: ($f29 -> $f1259, $f30 -> $f489), id16: ($f29 -> $f1260, $f30 -> $f488)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259),
            ),
            AppliedId(
                id16: ($f29 -> $f1259, $f30 -> $f489),
            ),
            AppliedId(
                id16: ($f29 -> $f1260, $f30 -> $f488),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f488: Int, $f487: Int, $f489: Int, $f1260: Node, $f1259: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1260, $2 -> $f1259, $3 -> $f489, $4 -> $f488)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1232, $f30 -> $f488),
        id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233),
        id16: ($f29 -> $f1233, $f30 -> $f489),
    ]
[entry::chc::rewrite] appId.slots {$f488, $f1232}
[entry::chc::rewrite] appId.slots {$f487, $f1232, $f1233}
[entry::chc::rewrite] appId.slots {$f489, $f1233}
[entry::chc::rewrite] mergeVarTypes = {
        $f489: Int,
        $f1233: Node,
        $f488: Int,
        $f487: Int,
        $f1232: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1232: [
            0,
            1,
        ],
        $f489: [
            2,
        ],
        $f487: [
            1,
        ],
        $f1233: [
            1,
            2,
        ],
        $f488: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f1232
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f1233
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233), id16: ($f29 -> $f1232, $f30 -> $f488), id16: ($f29 -> $f1233, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233),
            ),
            AppliedId(
                id16: ($f29 -> $f1232, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1233, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f489: Int, $f1233: Node, $f488: Int, $f487: Int, $f1232: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1232, $2 -> $f1233, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id87 
    CHCData { predNames: {"define_from_id50_1"}, varTypes: {$f504: Node, $f505: Node, $f501: Int} }
    ($f501):>> Interface(id86: (), id84: ($f497 -> $f501), id42: ())
     - New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505))])
     - Interface(id86: (), id84: ($f497 -> $f501), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
    ]
[entry::chc::rewrite] appId.slots {$f501, $f504, $f505}
[entry::chc::rewrite] mergeVarTypes = {
        $f505: Node,
        $f501: Int,
        $f504: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f504: [
            0,
        ],
        $f501: [
            0,
        ],
        $f505: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f504
[entry::chc::rewrite] var = $f501
[entry::chc::rewrite] var = $f505
[entry::chc::rewrite] from id87 children after sort [id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id87 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f505: Node, $f501: Int, $f504: Node}
[entry::chc::rewrite] map ($0 -> $f501, $1 -> $f504, $2 -> $f505)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id87_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id91 
    CHCData { predNames: {"define_from_id60_2"}, varTypes: {$f511: Node, $f509: Int} }
    ($f509):>> Interface(id90: (), id84: ($f497 -> $f509), id42: ())
     - New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f511, $f30 -> $f509))])
     - Interface(id90: (), id84: ($f497 -> $f509), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f511, $f30 -> $f509),
    ]
[entry::chc::rewrite] appId.slots {$f509, $f511}
[entry::chc::rewrite] mergeVarTypes = {
        $f511: Node,
        $f509: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f509: [
            0,
        ],
        $f511: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f509
[entry::chc::rewrite] var = $f511
[entry::chc::rewrite] from id91 children after sort [id16: ($f29 -> $f511, $f30 -> $f509)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id91 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f511, $f30 -> $f509),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f511: Node, $f509: Int}
[entry::chc::rewrite] map ($0 -> $f511, $1 -> $f509)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id91_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id100 
    CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
    ($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
     - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123),
        id16: ($f29 -> $f2123, $f30 -> $f2118),
        id16: ($f29 -> $f2122, $f30 -> $f2119),
    ]
[entry::chc::rewrite] appId.slots {$f2117, $f2122, $f2123}
[entry::chc::rewrite] appId.slots {$f2118, $f2123}
[entry::chc::rewrite] appId.slots {$f2119, $f2122}
[entry::chc::rewrite] mergeVarTypes = {
        $f2117: Int,
        $f2123: Node,
        $f2118: Int,
        $f2122: Node,
        $f2119: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f2122: [
            0,
            2,
        ],
        $f2118: [
            1,
        ],
        $f2119: [
            2,
        ],
        $f2117: [
            0,
        ],
        $f2123: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f2122
[entry::chc::rewrite] var = $f2118
[entry::chc::rewrite] var = $f2119
[entry::chc::rewrite] var = $f2117
[entry::chc::rewrite] var = $f2123
[entry::chc::rewrite] from id100 children after sort [id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123), id16: ($f29 -> $f2122, $f30 -> $f2119), id16: ($f29 -> $f2123, $f30 -> $f2118)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id100 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123),
            ),
            AppliedId(
                id16: ($f29 -> $f2122, $f30 -> $f2119),
            ),
            AppliedId(
                id16: ($f29 -> $f2123, $f30 -> $f2118),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f2117: Int, $f2123: Node, $f2118: Int, $f2122: Node, $f2119: Int}
[entry::chc::rewrite] map ($0 -> $f2117, $1 -> $f2122, $2 -> $f2123, $3 -> $f2119, $4 -> $f2118)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id100_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f3047, $f116 -> $f3048, $f117 -> $f3049, $f118 -> $f3050), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id47: ($f113 -> $f24, $f114 -> $f25, $f115 -> $f3055, $f116 -> $f3056, $f117 -> $f3057, $f118 -> $f3058), [AppliedId(id13: ($f24 -> $f24, $f25 -> $f25, $f26 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id34: ($f72 -> $f25, $f73 -> $f26), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f3062, $f92 -> $f3063, $f93 -> $f3064), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26), id40: ($f88 -> $f24, $f89 -> $f25, $f90 -> $f26, $f91 -> $f3068, $f92 -> $f3069, $f93 -> $f3070), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id53: ($f141 -> $f29, $f142 -> $f30), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f3077, $f153 -> $f3078, $f154 -> $f3079, $f155 -> $f3080), [AppliedId(id16: ($f29 -> $f3078, $f30 -> $f3081)), AppliedId(id16: ($f29 -> $f3079, $f30 -> $f3082)), AppliedId(id31: ($f68 -> $f3081, $f69 -> $f3082, $f70 -> $f3080))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f3089, $f153 -> $f3090, $f154 -> $f3091, $f155 -> $f3092), [AppliedId(id16: ($f29 -> $f3090, $f30 -> $f3093)), AppliedId(id31: ($f68 -> $f3093, $f69 -> $f3094, $f70 -> $f3092)), AppliedId(id16: ($f29 -> $f3091, $f30 -> $f3094))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f3101, $f153 -> $f3102, $f154 -> $f3103, $f155 -> $f3104), [AppliedId(id31: ($f68 -> $f3105, $f69 -> $f3106, $f70 -> $f3104)), AppliedId(id16: ($f29 -> $f3102, $f30 -> $f3105)), AppliedId(id16: ($f29 -> $f3103, $f30 -> $f3106))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f3113, $f153 -> $f3114, $f154 -> $f3115, $f155 -> $f3116), [AppliedId(id31: ($f68 -> $f3117, $f69 -> $f3118, $f70 -> $f3116)), AppliedId(id16: ($f29 -> $f3115, $f30 -> $f3118)), AppliedId(id16: ($f29 -> $f3114, $f30 -> $f3117))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f3125, $f153 -> $f3126, $f154 -> $f3127, $f155 -> $f3128), [AppliedId(id16: ($f29 -> $f3127, $f30 -> $f3129)), AppliedId(id16: ($f29 -> $f3126, $f30 -> $f3130)), AppliedId(id31: ($f68 -> $f3130, $f69 -> $f3129, $f70 -> $f3128))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f29, $f28 -> $f30), id58: ($f150 -> $f29, $f151 -> $f30, $f152 -> $f3137, $f153 -> $f3138, $f154 -> $f3139, $f155 -> $f3140), [AppliedId(id16: ($f29 -> $f3139, $f30 -> $f3141)), AppliedId(id31: ($f68 -> $f3142, $f69 -> $f3141, $f70 -> $f3140)), AppliedId(id16: ($f29 -> $f3138, $f30 -> $f3142))])
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id15: ($f27 -> $f29, $f28 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id24: ($f51 -> $f68, $f52 -> $f69, $f53 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70), id29: ($f62 -> $f68, $f63 -> $f69, $f64 -> $f70), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f3316, $f92 -> $f3317, $f93 -> $f3318), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f3323, $f116 -> $f3324, $f117 -> $f3325, $f118 -> $f3326), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f3323, $f116 -> $f3324, $f117 -> $f3325, $f118 -> $f3326) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3340, $f153 -> $f3341, $f154 -> $f3342, $f155 -> $f3343), [AppliedId(id16: ($f29 -> $f3341, $f30 -> $f3344)), AppliedId(id16: ($f29 -> $f3342, $f30 -> $f3345)), AppliedId(id31: ($f68 -> $f3344, $f69 -> $f3345, $f70 -> $f3343))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3340, $f153 -> $f3341, $f154 -> $f3342, $f155 -> $f3343) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3341, $f30 -> $f3344) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3342, $f30 -> $f3345) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f3344, $f69 -> $f3345, $f70 -> $f3343) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3352, $f153 -> $f3353, $f154 -> $f3354, $f155 -> $f3355), [AppliedId(id16: ($f29 -> $f3353, $f30 -> $f3356)), AppliedId(id31: ($f68 -> $f3356, $f69 -> $f3357, $f70 -> $f3355)), AppliedId(id16: ($f29 -> $f3354, $f30 -> $f3357))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3352, $f153 -> $f3353, $f154 -> $f3354, $f155 -> $f3355) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3353, $f30 -> $f3356) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f3356, $f69 -> $f3357, $f70 -> $f3355) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3354, $f30 -> $f3357) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3364, $f153 -> $f3365, $f154 -> $f3366, $f155 -> $f3367), [AppliedId(id31: ($f68 -> $f3368, $f69 -> $f3369, $f70 -> $f3367)), AppliedId(id16: ($f29 -> $f3365, $f30 -> $f3368)), AppliedId(id16: ($f29 -> $f3366, $f30 -> $f3369))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3364, $f153 -> $f3365, $f154 -> $f3366, $f155 -> $f3367) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f3368, $f69 -> $f3369, $f70 -> $f3367) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3365, $f30 -> $f3368) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3366, $f30 -> $f3369) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3376, $f153 -> $f3377, $f154 -> $f3378, $f155 -> $f3379), [AppliedId(id31: ($f68 -> $f3380, $f69 -> $f3381, $f70 -> $f3379)), AppliedId(id16: ($f29 -> $f3378, $f30 -> $f3381)), AppliedId(id16: ($f29 -> $f3377, $f30 -> $f3380))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3376, $f153 -> $f3377, $f154 -> $f3378, $f155 -> $f3379) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f3380, $f69 -> $f3381, $f70 -> $f3379) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3378, $f30 -> $f3381) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3377, $f30 -> $f3380) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3388, $f153 -> $f3389, $f154 -> $f3390, $f155 -> $f3391), [AppliedId(id16: ($f29 -> $f3390, $f30 -> $f3392)), AppliedId(id16: ($f29 -> $f3389, $f30 -> $f3393)), AppliedId(id31: ($f68 -> $f3393, $f69 -> $f3392, $f70 -> $f3391))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3388, $f153 -> $f3389, $f154 -> $f3390, $f155 -> $f3391) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3390, $f30 -> $f3392) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3389, $f30 -> $f3393) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f3393, $f69 -> $f3392, $f70 -> $f3391) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3400, $f153 -> $f3401, $f154 -> $f3402, $f155 -> $f3403), [AppliedId(id16: ($f29 -> $f3402, $f30 -> $f3404)), AppliedId(id31: ($f68 -> $f3405, $f69 -> $f3404, $f70 -> $f3403)), AppliedId(id16: ($f29 -> $f3401, $f30 -> $f3405))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3400, $f153 -> $f3401, $f154 -> $f3402, $f155 -> $f3403) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3402, $f30 -> $f3404) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f3405, $f69 -> $f3404, $f70 -> $f3403) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3401, $f30 -> $f3405) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3456, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f3457, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3457, $f26 -> $f3456))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3456, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3457, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f3457, $f26 -> $f3456) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3460, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f3461, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3460, $f26 -> $f3461))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3460, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3461, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f3460, $f26 -> $f3461) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f3464, $f26 -> $f3465)), AppliedId(id16: ($f29 -> $f3465, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f3464, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f3464, $f26 -> $f3465) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3465, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3464, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f3468, $f26 -> $f3469)), AppliedId(id16: ($f29 -> $f3468, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f3469, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f3468, $f26 -> $f3469) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3468, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3469, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3472, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3473, $f26 -> $f3472)), AppliedId(id16: ($f29 -> $f3473, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3472, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f3473, $f26 -> $f3472) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3473, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3476, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3476, $f26 -> $f3477)), AppliedId(id16: ($f29 -> $f3477, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3476, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f3476, $f26 -> $f3477) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3477, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f3510, $f26 -> $f3511))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f3510, $f26 -> $f3511) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f3516, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3516, $f30 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3521, $f26 -> $f3522)), AppliedId(id16: ($f29 -> $f3521, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3522, $f30 -> $f2118))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f2117, $f25 -> $f3521, $f26 -> $f3522) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3521, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3522, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3525, $f26 -> $f3526)), AppliedId(id16: ($f29 -> $f3526, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3525, $f30 -> $f2119))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f2117, $f25 -> $f3525, $f26 -> $f3526) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3526, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3525, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3529, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3529, $f26 -> $f3530)), AppliedId(id16: ($f29 -> $f3530, $f30 -> $f2118))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3529, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f2117, $f25 -> $f3529, $f26 -> $f3530) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3530, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3533, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3534, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3533, $f26 -> $f3534))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3533, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3534, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f2117, $f25 -> $f3533, $f26 -> $f3534) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3537, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3538, $f26 -> $f3537)), AppliedId(id16: ($f29 -> $f3538, $f30 -> $f2119))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3537, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f2117, $f25 -> $f3538, $f26 -> $f3537) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3538, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3541, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3542, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3542, $f26 -> $f3541))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3541, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3542, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f2117, $f25 -> $f3542, $f26 -> $f3541) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id60: ($f164 -> $f29, $f165 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id55: ($f145 -> $f29, $f146 -> $f30) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id87: ($f501 -> $f506))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id87: ($f501 -> $f506) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id91: ($f509 -> $f512))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id91: ($f509 -> $f512) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126) to subst
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id5: () to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f32, $f30 -> $f35) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f33, $f30 -> $f34) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f3787, $f92 -> $f3788, $f93 -> $f3789), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f3794, $f116 -> $f3795, $f117 -> $f3796, $f118 -> $f3797), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f3794, $f116 -> $f3795, $f117 -> $f3796, $f118 -> $f3797) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3811, $f153 -> $f3812, $f154 -> $f3813, $f155 -> $f3814), [AppliedId(id16: ($f29 -> $f3812, $f30 -> $f3815)), AppliedId(id16: ($f29 -> $f3813, $f30 -> $f3816)), AppliedId(id31: ($f68 -> $f3815, $f69 -> $f3816, $f70 -> $f3814))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3811, $f153 -> $f3812, $f154 -> $f3813, $f155 -> $f3814) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3812, $f30 -> $f3815) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3813, $f30 -> $f3816) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f3815, $f69 -> $f3816, $f70 -> $f3814) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3823, $f153 -> $f3824, $f154 -> $f3825, $f155 -> $f3826), [AppliedId(id16: ($f29 -> $f3824, $f30 -> $f3827)), AppliedId(id31: ($f68 -> $f3827, $f69 -> $f3828, $f70 -> $f3826)), AppliedId(id16: ($f29 -> $f3825, $f30 -> $f3828))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3823, $f153 -> $f3824, $f154 -> $f3825, $f155 -> $f3826) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3824, $f30 -> $f3827) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f3827, $f69 -> $f3828, $f70 -> $f3826) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3825, $f30 -> $f3828) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3835, $f153 -> $f3836, $f154 -> $f3837, $f155 -> $f3838), [AppliedId(id31: ($f68 -> $f3839, $f69 -> $f3840, $f70 -> $f3838)), AppliedId(id16: ($f29 -> $f3836, $f30 -> $f3839)), AppliedId(id16: ($f29 -> $f3837, $f30 -> $f3840))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3835, $f153 -> $f3836, $f154 -> $f3837, $f155 -> $f3838) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f3839, $f69 -> $f3840, $f70 -> $f3838) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3836, $f30 -> $f3839) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3837, $f30 -> $f3840) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3847, $f153 -> $f3848, $f154 -> $f3849, $f155 -> $f3850), [AppliedId(id31: ($f68 -> $f3851, $f69 -> $f3852, $f70 -> $f3850)), AppliedId(id16: ($f29 -> $f3849, $f30 -> $f3852)), AppliedId(id16: ($f29 -> $f3848, $f30 -> $f3851))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3847, $f153 -> $f3848, $f154 -> $f3849, $f155 -> $f3850) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f68 -> $f3851, $f69 -> $f3852, $f70 -> $f3850) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3849, $f30 -> $f3852) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3848, $f30 -> $f3851) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3859, $f153 -> $f3860, $f154 -> $f3861, $f155 -> $f3862), [AppliedId(id16: ($f29 -> $f3861, $f30 -> $f3863)), AppliedId(id16: ($f29 -> $f3860, $f30 -> $f3864)), AppliedId(id31: ($f68 -> $f3864, $f69 -> $f3863, $f70 -> $f3862))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3859, $f153 -> $f3860, $f154 -> $f3861, $f155 -> $f3862) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3861, $f30 -> $f3863) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3860, $f30 -> $f3864) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id31: ($f68 -> $f3864, $f69 -> $f3863, $f70 -> $f3862) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3871, $f153 -> $f3872, $f154 -> $f3873, $f155 -> $f3874), [AppliedId(id16: ($f29 -> $f3873, $f30 -> $f3875)), AppliedId(id31: ($f68 -> $f3876, $f69 -> $f3875, $f70 -> $f3874)), AppliedId(id16: ($f29 -> $f3872, $f30 -> $f3876))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id15: ($f27 -> $f164, $f28 -> $f165) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f3871, $f153 -> $f3872, $f154 -> $f3873, $f155 -> $f3874) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3873, $f30 -> $f3875) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f68 -> $f3876, $f69 -> $f3875, $f70 -> $f3874) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3872, $f30 -> $f3876) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3927, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f3928, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3928, $f26 -> $f3927))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3927, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3928, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f3928, $f26 -> $f3927) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3931, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f3932, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3931, $f26 -> $f3932))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3931, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3932, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f487, $f25 -> $f3931, $f26 -> $f3932) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f3935, $f26 -> $f3936)), AppliedId(id16: ($f29 -> $f3936, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f3935, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f3935, $f26 -> $f3936) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3936, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3935, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f3939, $f26 -> $f3940)), AppliedId(id16: ($f29 -> $f3939, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f3940, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f487, $f25 -> $f3939, $f26 -> $f3940) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3939, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3940, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3943, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3944, $f26 -> $f3943)), AppliedId(id16: ($f29 -> $f3944, $f30 -> $f488))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3943, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f3944, $f26 -> $f3943) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3944, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f3947, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f3947, $f26 -> $f3948)), AppliedId(id16: ($f29 -> $f3948, $f30 -> $f489))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3947, $f30 -> $f488) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f487, $f25 -> $f3947, $f26 -> $f3948) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3948, $f30 -> $f489) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f3981, $f26 -> $f3982))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f501) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f501, $f25 -> $f3981, $f26 -> $f3982) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f3987, $f30 -> $f509))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id84: ($f497 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f3987, $f30 -> $f509) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3992, $f26 -> $f3993)), AppliedId(id16: ($f29 -> $f3992, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3993, $f30 -> $f2118))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f2117, $f25 -> $f3992, $f26 -> $f3993) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3992, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3993, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3996, $f26 -> $f3997)), AppliedId(id16: ($f29 -> $f3997, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3996, $f30 -> $f2119))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id13: ($f24 -> $f2117, $f25 -> $f3996, $f26 -> $f3997) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f3997, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f3996, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f4000, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f4000, $f26 -> $f4001)), AppliedId(id16: ($f29 -> $f4001, $f30 -> $f2118))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f4000, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f2117, $f25 -> $f4000, $f26 -> $f4001) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f4001, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f4004, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f4005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f4004, $f26 -> $f4005))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f4004, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f4005, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f2117, $f25 -> $f4004, $f26 -> $f4005) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f4008, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f4009, $f26 -> $f4008)), AppliedId(id16: ($f29 -> $f4009, $f30 -> $f2119))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f4008, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id13: ($f24 -> $f2117, $f25 -> $f4009, $f26 -> $f4008) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id16: ($f29 -> $f4009, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f4012, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f4013, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f4013, $f26 -> $f4012))])
[slotted_egraphs::rewrite::ematch] insert syntax -> id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert cond -> id79: () to subst
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f29 -> $f4012, $f30 -> $f2118) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f29 -> $f4013, $f30 -> $f2119) to subst
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id13: ($f24 -> $f2117, $f25 -> $f4013, $f26 -> $f4012) to subst
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[entry::chc::rewrite] define found [{"cond": id10: ($f18 -> $f3754, $f19 -> $f3755, $f20 -> $f3756), "star_1_1": id16: ($f29 -> $f3757, $f30 -> $f3755), "star_1_0": id13: ($f24 -> $f3754, $f25 -> $f3758, $f26 -> $f3757), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f3758, $f30 -> $f3756)}, {"cond": id10: ($f18 -> $f3759, $f19 -> $f3760, $f20 -> $f3761), "star_1_1": id13: ($f24 -> $f3759, $f25 -> $f3762, $f26 -> $f3763), "star_1_0": id16: ($f29 -> $f3762, $f30 -> $f3761), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f3763, $f30 -> $f3760)}, {"cond": id10: ($f18 -> $f3764, $f19 -> $f3765, $f20 -> $f3766), "star_1_1": id16: ($f29 -> $f3767, $f30 -> $f3765), "star_1_0": id16: ($f29 -> $f3768, $f30 -> $f3766), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f3764, $f25 -> $f3768, $f26 -> $f3767)}, {"cond": id10: ($f18 -> $f3769, $f19 -> $f3770, $f20 -> $f3771), "star_1_1": id13: ($f24 -> $f3769, $f25 -> $f3772, $f26 -> $f3773), "star_1_0": id16: ($f29 -> $f3773, $f30 -> $f3770), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f3772, $f30 -> $f3771)}, {"cond": id10: ($f18 -> $f3774, $f19 -> $f3775, $f20 -> $f3776), "star_1_1": id16: ($f29 -> $f3777, $f30 -> $f3776), "star_1_0": id16: ($f29 -> $f3778, $f30 -> $f3775), "syntax": id5: (), "star_1_2": id13: ($f24 -> $f3774, $f25 -> $f3777, $f26 -> $f3778)}, {"cond": id10: ($f18 -> $f3779, $f19 -> $f3780, $f20 -> $f3781), "star_1_1": id16: ($f29 -> $f3782, $f30 -> $f3781), "star_1_0": id13: ($f24 -> $f3779, $f25 -> $f3782, $f26 -> $f3783), "syntax": id5: (), "star_1_2": id16: ($f29 -> $f3783, $f30 -> $f3780)}, {"syntax": id12: ($f21 -> $f3798, $f22 -> $f3799, $f23 -> $f3800), "cond": id47: ($f113 -> $f3798, $f114 -> $f3799, $f115 -> $f3801, $f116 -> $f3802, $f117 -> $f3803, $f118 -> $f3804), "star_1_0": id13: ($f24 -> $f3798, $f25 -> $f3799, $f26 -> $f3800)}, {"cond": id58: ($f150 -> $f3877, $f151 -> $f3878, $f152 -> $f3879, $f153 -> $f3880, $f154 -> $f3881, $f155 -> $f3882), "star_1_1": id16: ($f29 -> $f3881, $f30 -> $f3883), "star_1_0": id16: ($f29 -> $f3880, $f30 -> $f3884), "syntax": id15: ($f27 -> $f3877, $f28 -> $f3878), "star_1_2": id31: ($f68 -> $f3884, $f69 -> $f3883, $f70 -> $f3882)}, {"cond": id58: ($f150 -> $f3885, $f151 -> $f3886, $f152 -> $f3887, $f153 -> $f3888, $f154 -> $f3889, $f155 -> $f3890), "star_1_1": id31: ($f68 -> $f3891, $f69 -> $f3892, $f70 -> $f3890), "star_1_0": id16: ($f29 -> $f3888, $f30 -> $f3891), "syntax": id15: ($f27 -> $f3885, $f28 -> $f3886), "star_1_2": id16: ($f29 -> $f3889, $f30 -> $f3892)}, {"cond": id58: ($f150 -> $f3893, $f151 -> $f3894, $f152 -> $f3895, $f153 -> $f3896, $f154 -> $f3897, $f155 -> $f3898), "star_1_1": id16: ($f29 -> $f3896, $f30 -> $f3899), "star_1_0": id31: ($f68 -> $f3899, $f69 -> $f3900, $f70 -> $f3898), "syntax": id15: ($f27 -> $f3893, $f28 -> $f3894), "star_1_2": id16: ($f29 -> $f3897, $f30 -> $f3900)}, {"cond": id58: ($f150 -> $f3901, $f151 -> $f3902, $f152 -> $f3903, $f153 -> $f3904, $f154 -> $f3905, $f155 -> $f3906), "star_1_1": id16: ($f29 -> $f3905, $f30 -> $f3907), "star_1_0": id31: ($f68 -> $f3908, $f69 -> $f3907, $f70 -> $f3906), "syntax": id15: ($f27 -> $f3901, $f28 -> $f3902), "star_1_2": id16: ($f29 -> $f3904, $f30 -> $f3908)}, {"cond": id58: ($f150 -> $f3909, $f151 -> $f3910, $f152 -> $f3911, $f153 -> $f3912, $f154 -> $f3913, $f155 -> $f3914), "star_1_1": id16: ($f29 -> $f3912, $f30 -> $f3915), "star_1_0": id16: ($f29 -> $f3913, $f30 -> $f3916), "syntax": id15: ($f27 -> $f3909, $f28 -> $f3910), "star_1_2": id31: ($f68 -> $f3915, $f69 -> $f3916, $f70 -> $f3914)}, {"cond": id58: ($f150 -> $f3917, $f151 -> $f3918, $f152 -> $f3919, $f153 -> $f3920, $f154 -> $f3921, $f155 -> $f3922), "star_1_1": id31: ($f68 -> $f3924, $f69 -> $f3923, $f70 -> $f3922), "star_1_0": id16: ($f29 -> $f3921, $f30 -> $f3923), "syntax": id15: ($f27 -> $f3917, $f28 -> $f3918), "star_1_2": id16: ($f29 -> $f3920, $f30 -> $f3924)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f3950, $f30 -> $f3949), "star_1_0": id16: ($f29 -> $f3952, $f30 -> $f3951), "syntax": id20: ($f41 -> $f3953, $f42 -> $f3949, $f43 -> $f3951), "star_1_2": id13: ($f24 -> $f3953, $f25 -> $f3950, $f26 -> $f3952)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f3955, $f30 -> $f3954), "star_1_0": id16: ($f29 -> $f3957, $f30 -> $f3956), "syntax": id20: ($f41 -> $f3958, $f42 -> $f3956, $f43 -> $f3954), "star_1_2": id13: ($f24 -> $f3958, $f25 -> $f3957, $f26 -> $f3955)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f3960, $f30 -> $f3959), "star_1_0": id13: ($f24 -> $f3961, $f25 -> $f3962, $f26 -> $f3960), "syntax": id20: ($f41 -> $f3961, $f42 -> $f3963, $f43 -> $f3959), "star_1_2": id16: ($f29 -> $f3962, $f30 -> $f3963)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f3965, $f30 -> $f3964), "star_1_0": id13: ($f24 -> $f3966, $f25 -> $f3965, $f26 -> $f3967), "syntax": id20: ($f41 -> $f3966, $f42 -> $f3964, $f43 -> $f3968), "star_1_2": id16: ($f29 -> $f3967, $f30 -> $f3968)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f3969, $f25 -> $f3971, $f26 -> $f3970), "star_1_0": id16: ($f29 -> $f3970, $f30 -> $f3972), "syntax": id20: ($f41 -> $f3969, $f42 -> $f3973, $f43 -> $f3972), "star_1_2": id16: ($f29 -> $f3971, $f30 -> $f3973)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f3974, $f25 -> $f3975, $f26 -> $f3976), "star_1_0": id16: ($f29 -> $f3975, $f30 -> $f3977), "syntax": id20: ($f41 -> $f3974, $f42 -> $f3977, $f43 -> $f3978), "star_1_2": id16: ($f29 -> $f3976, $f30 -> $f3978)}, {"syntax": id84: ($f497 -> $f3983), "cond": id79: (), "star_1_0": id13: ($f24 -> $f3983, $f25 -> $f3984, $f26 -> $f3985)}, {"syntax": id84: ($f497 -> $f3988), "cond": id79: (), "star_1_0": id16: ($f29 -> $f3989, $f30 -> $f3988)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f4015, $f30 -> $f4014), "star_1_0": id13: ($f24 -> $f4016, $f25 -> $f4015, $f26 -> $f4017), "syntax": id20: ($f41 -> $f4016, $f42 -> $f4018, $f43 -> $f4014), "star_1_2": id16: ($f29 -> $f4017, $f30 -> $f4018)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f4020, $f30 -> $f4019), "star_1_0": id13: ($f24 -> $f4021, $f25 -> $f4022, $f26 -> $f4020), "syntax": id20: ($f41 -> $f4021, $f42 -> $f4019, $f43 -> $f4023), "star_1_2": id16: ($f29 -> $f4022, $f30 -> $f4023)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f4024, $f25 -> $f4025, $f26 -> $f4026), "star_1_0": id16: ($f29 -> $f4025, $f30 -> $f4027), "syntax": id20: ($f41 -> $f4024, $f42 -> $f4028, $f43 -> $f4027), "star_1_2": id16: ($f29 -> $f4026, $f30 -> $f4028)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f4030, $f30 -> $f4029), "star_1_0": id16: ($f29 -> $f4032, $f30 -> $f4031), "syntax": id20: ($f41 -> $f4033, $f42 -> $f4029, $f43 -> $f4031), "star_1_2": id13: ($f24 -> $f4033, $f25 -> $f4032, $f26 -> $f4030)}, {"cond": id79: (), "star_1_1": id13: ($f24 -> $f4034, $f25 -> $f4036, $f26 -> $f4035), "star_1_0": id16: ($f29 -> $f4035, $f30 -> $f4037), "syntax": id20: ($f41 -> $f4034, $f42 -> $f4037, $f43 -> $f4038), "star_1_2": id16: ($f29 -> $f4036, $f30 -> $f4038)}, {"cond": id79: (), "star_1_1": id16: ($f29 -> $f4040, $f30 -> $f4039), "star_1_0": id16: ($f29 -> $f4042, $f30 -> $f4041), "syntax": id20: ($f41 -> $f4043, $f42 -> $f4041, $f43 -> $f4039), "star_1_2": id13: ($f24 -> $f4043, $f25 -> $f4040, $f26 -> $f4042)}]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f34: Int,
        $f32: Node,
        $f35: Int,
        $f31: Int,
        $f33: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f32: [
            0,
            2,
        ],
        $f35: [
            2,
        ],
        $f33: [
            0,
            1,
        ],
        $f31: [
            0,
        ],
        $f34: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f34: Int, $f32: Node, $f35: Int, $f31: Int, $f33: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f33: Node,
        $f32: Node,
        $f31: Int,
        $f34: Int,
        $f35: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f32: [
            0,
            1,
        ],
        $f34: [
            2,
        ],
        $f31: [
            1,
        ],
        $f33: [
            1,
            2,
        ],
        $f35: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f33: Node, $f32: Node, $f31: Int, $f34: Int, $f35: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f35: Int,
        $f31: Int,
        $f32: Node,
        $f33: Node,
        $f34: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f33: [
            1,
            2,
        ],
        $f35: [
            0,
        ],
        $f32: [
            0,
            2,
        ],
        $f34: [
            1,
        ],
        $f31: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f35: Int, $f31: Int, $f32: Node, $f33: Node, $f34: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] mergeVarTypes = {
        $f33: Node,
        $f31: Int,
        $f34: Int,
        $f35: Int,
        $f32: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f33: [
            0,
            1,
        ],
        $f34: [
            0,
        ],
        $f31: [
            1,
        ],
        $f32: [
            1,
            2,
        ],
        $f35: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f33: Node, $f31: Int, $f34: Int, $f35: Int, $f32: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f33, $f30 -> $f34),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
    ]
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] mergeVarTypes = {
        $f33: Node,
        $f31: Int,
        $f34: Int,
        $f32: Node,
        $f35: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f33: [
            0,
            2,
        ],
        $f34: [
            0,
        ],
        $f32: [
            1,
            2,
        ],
        $f35: [
            1,
        ],
        $f31: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f33: Node, $f31: Int, $f34: Int, $f32: Node, $f35: Int}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id17 
    CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
        id16: ($f29 -> $f32, $f30 -> $f35),
        id16: ($f29 -> $f33, $f30 -> $f34),
    ]
[entry::chc::rewrite] appId.slots {$f31, $f32, $f33}
[entry::chc::rewrite] appId.slots {$f32, $f35}
[entry::chc::rewrite] appId.slots {$f33, $f34}
[entry::chc::rewrite] mergeVarTypes = {
        $f33: Node,
        $f34: Int,
        $f31: Int,
        $f35: Int,
        $f32: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f33: [
            0,
            2,
        ],
        $f31: [
            0,
        ],
        $f32: [
            0,
            1,
        ],
        $f35: [
            1,
        ],
        $f34: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f33
[entry::chc::rewrite] var = $f31
[entry::chc::rewrite] var = $f32
[entry::chc::rewrite] var = $f35
[entry::chc::rewrite] var = $f34
[entry::chc::rewrite] from id17 children after sort [id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33), id16: ($f29 -> $f32, $f30 -> $f35), id16: ($f29 -> $f33, $f30 -> $f34)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id17 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33),
            ),
            AppliedId(
                id16: ($f29 -> $f32, $f30 -> $f35),
            ),
            AppliedId(
                id16: ($f29 -> $f33, $f30 -> $f34),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f33: Node, $f34: Int, $f31: Int, $f35: Int, $f32: Node}
[entry::chc::rewrite] map ($0 -> $f31, $1 -> $f32, $2 -> $f33, $3 -> $f35, $4 -> $f34)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id17_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id50 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
    ]
[entry::chc::rewrite] appId.slots {$f126, $f127, $f128}
[entry::chc::rewrite] mergeVarTypes = {
        $f126: Int,
        $f128: Node,
        $f127: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f126: [
            0,
        ],
        $f127: [
            0,
        ],
        $f128: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f126
[entry::chc::rewrite] var = $f127
[entry::chc::rewrite] var = $f128
[entry::chc::rewrite] from id50 children after sort [id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id50 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f126: Int, $f128: Node, $f127: Node}
[entry::chc::rewrite] map ($0 -> $f126, $1 -> $f127, $2 -> $f128)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id50_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f173, $f30 -> $f176),
        id16: ($f29 -> $f174, $f30 -> $f177),
        id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175),
    ]
[entry::chc::rewrite] appId.slots {$f173, $f176}
[entry::chc::rewrite] appId.slots {$f174, $f177}
[entry::chc::rewrite] appId.slots {$f175, $f176, $f177}
[entry::chc::rewrite] mergeVarTypes = {
        $f177: Int,
        $f173: Node,
        $f175: Int,
        $f174: Node,
        $f176: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f177: [
            1,
            2,
        ],
        $f176: [
            0,
            2,
        ],
        $f174: [
            1,
        ],
        $f175: [
            2,
        ],
        $f173: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f177
[entry::chc::rewrite] var = $f176
[entry::chc::rewrite] var = $f174
[entry::chc::rewrite] var = $f175
[entry::chc::rewrite] var = $f173
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f174, $f30 -> $f177)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f174, $f30 -> $f177),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f177: Int, $f173: Node, $f175: Int, $f174: Node, $f176: Int}
[entry::chc::rewrite] map ($0 -> $f174, $1 -> $f177)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f173, $f30 -> $f176)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f173, $f30 -> $f176),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f177: Int, $f173: Node, $f175: Int, $f174: Node, $f176: Int}
[entry::chc::rewrite] map ($0 -> $f173, $1 -> $f176)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f417, $f30 -> $f420),
        id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419),
        id16: ($f29 -> $f418, $f30 -> $f421),
    ]
[entry::chc::rewrite] appId.slots {$f417, $f420}
[entry::chc::rewrite] appId.slots {$f419, $f420, $f421}
[entry::chc::rewrite] appId.slots {$f418, $f421}
[entry::chc::rewrite] mergeVarTypes = {
        $f417: Node,
        $f420: Int,
        $f419: Int,
        $f421: Int,
        $f418: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f417: [
            0,
        ],
        $f421: [
            1,
            2,
        ],
        $f419: [
            1,
        ],
        $f418: [
            2,
        ],
        $f420: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f417
[entry::chc::rewrite] var = $f421
[entry::chc::rewrite] var = $f419
[entry::chc::rewrite] var = $f418
[entry::chc::rewrite] var = $f420
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f418, $f30 -> $f421)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f418, $f30 -> $f421),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f417: Node, $f420: Int, $f419: Int, $f421: Int, $f418: Node}
[entry::chc::rewrite] map ($0 -> $f418, $1 -> $f421)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f417, $f30 -> $f420)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f417, $f30 -> $f420),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f417: Node, $f420: Int, $f419: Int, $f421: Int, $f418: Node}
[entry::chc::rewrite] map ($0 -> $f417, $1 -> $f420)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439),
        id16: ($f29 -> $f437, $f30 -> $f440),
        id16: ($f29 -> $f438, $f30 -> $f441),
    ]
[entry::chc::rewrite] appId.slots {$f439, $f440, $f441}
[entry::chc::rewrite] appId.slots {$f437, $f440}
[entry::chc::rewrite] appId.slots {$f438, $f441}
[entry::chc::rewrite] mergeVarTypes = {
        $f440: Int,
        $f437: Node,
        $f439: Int,
        $f441: Int,
        $f438: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f440: [
            0,
            1,
        ],
        $f438: [
            2,
        ],
        $f437: [
            1,
        ],
        $f441: [
            0,
            2,
        ],
        $f439: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f440
[entry::chc::rewrite] var = $f438
[entry::chc::rewrite] var = $f437
[entry::chc::rewrite] var = $f441
[entry::chc::rewrite] var = $f439
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f437, $f30 -> $f440)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f437, $f30 -> $f440),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f440: Int, $f437: Node, $f439: Int, $f441: Int, $f438: Node}
[entry::chc::rewrite] map ($0 -> $f437, $1 -> $f440)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f438, $f30 -> $f441)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f438, $f30 -> $f441),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f440: Int, $f437: Node, $f439: Int, $f441: Int, $f438: Node}
[entry::chc::rewrite] map ($0 -> $f438, $1 -> $f441)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459),
        id16: ($f29 -> $f458, $f30 -> $f461),
        id16: ($f29 -> $f457, $f30 -> $f460),
    ]
[entry::chc::rewrite] appId.slots {$f459, $f460, $f461}
[entry::chc::rewrite] appId.slots {$f458, $f461}
[entry::chc::rewrite] appId.slots {$f457, $f460}
[entry::chc::rewrite] mergeVarTypes = {
        $f461: Int,
        $f457: Node,
        $f458: Node,
        $f459: Int,
        $f460: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f458: [
            1,
        ],
        $f460: [
            0,
            2,
        ],
        $f457: [
            2,
        ],
        $f459: [
            0,
        ],
        $f461: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f458
[entry::chc::rewrite] var = $f460
[entry::chc::rewrite] var = $f457
[entry::chc::rewrite] var = $f459
[entry::chc::rewrite] var = $f461
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f458, $f30 -> $f461)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f458, $f30 -> $f461),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f461: Int, $f457: Node, $f458: Node, $f459: Int, $f460: Int}
[entry::chc::rewrite] map ($0 -> $f458, $1 -> $f461)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f457, $f30 -> $f460)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f457, $f30 -> $f460),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f461: Int, $f457: Node, $f458: Node, $f459: Int, $f460: Int}
[entry::chc::rewrite] map ($0 -> $f457, $1 -> $f460)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f378, $f30 -> $f380),
        id16: ($f29 -> $f377, $f30 -> $f381),
        id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379),
    ]
[entry::chc::rewrite] appId.slots {$f378, $f380}
[entry::chc::rewrite] appId.slots {$f377, $f381}
[entry::chc::rewrite] appId.slots {$f379, $f380, $f381}
[entry::chc::rewrite] mergeVarTypes = {
        $f378: Node,
        $f380: Int,
        $f381: Int,
        $f377: Node,
        $f379: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f380: [
            0,
            2,
        ],
        $f377: [
            1,
        ],
        $f381: [
            1,
            2,
        ],
        $f378: [
            0,
        ],
        $f379: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f380
[entry::chc::rewrite] var = $f377
[entry::chc::rewrite] var = $f381
[entry::chc::rewrite] var = $f378
[entry::chc::rewrite] var = $f379
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f377, $f30 -> $f381)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f377, $f30 -> $f381),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f378: Node, $f380: Int, $f381: Int, $f377: Node, $f379: Int}
[entry::chc::rewrite] map ($0 -> $f377, $1 -> $f381)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f378, $f30 -> $f380)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f378, $f30 -> $f380),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f378: Node, $f380: Int, $f381: Int, $f377: Node, $f379: Int}
[entry::chc::rewrite] map ($0 -> $f378, $1 -> $f380)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id60 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f398, $f30 -> $f400),
        id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399),
        id16: ($f29 -> $f397, $f30 -> $f401),
    ]
[entry::chc::rewrite] appId.slots {$f398, $f400}
[entry::chc::rewrite] appId.slots {$f399, $f400, $f401}
[entry::chc::rewrite] appId.slots {$f397, $f401}
[entry::chc::rewrite] mergeVarTypes = {
        $f400: Int,
        $f397: Node,
        $f399: Int,
        $f398: Node,
        $f401: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f398: [
            0,
        ],
        $f400: [
            0,
            1,
        ],
        $f399: [
            1,
        ],
        $f401: [
            1,
            2,
        ],
        $f397: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f398
[entry::chc::rewrite] var = $f400
[entry::chc::rewrite] var = $f399
[entry::chc::rewrite] var = $f401
[entry::chc::rewrite] var = $f397
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f398, $f30 -> $f400)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f398, $f30 -> $f400),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f400: Int, $f397: Node, $f399: Int, $f398: Node, $f401: Int}
[entry::chc::rewrite] map ($0 -> $f398, $1 -> $f400)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] from id60 children after sort [id16: ($f29 -> $f397, $f30 -> $f401)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id60 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f397, $f30 -> $f401),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f400: Int, $f397: Node, $f399: Int, $f398: Node, $f401: Int}
[entry::chc::rewrite] map ($0 -> $f397, $1 -> $f401)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id60_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1268, $f30 -> $f489),
        id16: ($f29 -> $f1269, $f30 -> $f488),
        id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268),
    ]
[entry::chc::rewrite] appId.slots {$f489, $f1268}
[entry::chc::rewrite] appId.slots {$f488, $f1269}
[entry::chc::rewrite] appId.slots {$f487, $f1268, $f1269}
[entry::chc::rewrite] mergeVarTypes = {
        $f489: Int,
        $f487: Int,
        $f488: Int,
        $f1268: Node,
        $f1269: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f489: [
            0,
        ],
        $f1268: [
            0,
            2,
        ],
        $f488: [
            1,
        ],
        $f1269: [
            1,
            2,
        ],
        $f487: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f1268
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1269
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268), id16: ($f29 -> $f1268, $f30 -> $f489), id16: ($f29 -> $f1269, $f30 -> $f488)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268),
            ),
            AppliedId(
                id16: ($f29 -> $f1268, $f30 -> $f489),
            ),
            AppliedId(
                id16: ($f29 -> $f1269, $f30 -> $f488),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f489: Int, $f487: Int, $f488: Int, $f1268: Node, $f1269: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1269, $2 -> $f1268, $3 -> $f489, $4 -> $f488)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1241, $f30 -> $f488),
        id16: ($f29 -> $f1242, $f30 -> $f489),
        id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242),
    ]
[entry::chc::rewrite] appId.slots {$f488, $f1241}
[entry::chc::rewrite] appId.slots {$f489, $f1242}
[entry::chc::rewrite] appId.slots {$f487, $f1241, $f1242}
[entry::chc::rewrite] mergeVarTypes = {
        $f487: Int,
        $f489: Int,
        $f488: Int,
        $f1242: Node,
        $f1241: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f489: [
            1,
        ],
        $f1241: [
            0,
            2,
        ],
        $f488: [
            0,
        ],
        $f1242: [
            1,
            2,
        ],
        $f487: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f1241
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1242
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242), id16: ($f29 -> $f1241, $f30 -> $f488), id16: ($f29 -> $f1242, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242),
            ),
            AppliedId(
                id16: ($f29 -> $f1241, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1242, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f487: Int, $f489: Int, $f488: Int, $f1242: Node, $f1241: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1241, $2 -> $f1242, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251),
        id16: ($f29 -> $f1251, $f30 -> $f489),
        id16: ($f29 -> $f1250, $f30 -> $f488),
    ]
[entry::chc::rewrite] appId.slots {$f487, $f1250, $f1251}
[entry::chc::rewrite] appId.slots {$f489, $f1251}
[entry::chc::rewrite] appId.slots {$f488, $f1250}
[entry::chc::rewrite] mergeVarTypes = {
        $f1250: Node,
        $f1251: Node,
        $f489: Int,
        $f488: Int,
        $f487: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f1250: [
            0,
            2,
        ],
        $f489: [
            1,
        ],
        $f487: [
            0,
        ],
        $f488: [
            2,
        ],
        $f1251: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f1250
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1251
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251), id16: ($f29 -> $f1250, $f30 -> $f488), id16: ($f29 -> $f1251, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251),
            ),
            AppliedId(
                id16: ($f29 -> $f1250, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1251, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f1250: Node, $f1251: Node, $f489: Int, $f488: Int, $f487: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1250, $2 -> $f1251, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
        id16: ($f29 -> $f492, $f30 -> $f488),
        id16: ($f29 -> $f493, $f30 -> $f489),
    ]
[entry::chc::rewrite] appId.slots {$f487, $f492, $f493}
[entry::chc::rewrite] appId.slots {$f488, $f492}
[entry::chc::rewrite] appId.slots {$f489, $f493}
[entry::chc::rewrite] mergeVarTypes = {
        $f492: Node,
        $f493: Node,
        $f488: Int,
        $f489: Int,
        $f487: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f489: [
            2,
        ],
        $f488: [
            1,
        ],
        $f487: [
            0,
        ],
        $f492: [
            0,
            1,
        ],
        $f493: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f492
[entry::chc::rewrite] var = $f493
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493), id16: ($f29 -> $f492, $f30 -> $f488), id16: ($f29 -> $f493, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493),
            ),
            AppliedId(
                id16: ($f29 -> $f492, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f493, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f492: Node, $f493: Node, $f488: Int, $f489: Int, $f487: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f492, $2 -> $f493, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1259, $f30 -> $f489),
        id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259),
        id16: ($f29 -> $f1260, $f30 -> $f488),
    ]
[entry::chc::rewrite] appId.slots {$f489, $f1259}
[entry::chc::rewrite] appId.slots {$f487, $f1259, $f1260}
[entry::chc::rewrite] appId.slots {$f488, $f1260}
[entry::chc::rewrite] mergeVarTypes = {
        $f1259: Node,
        $f1260: Node,
        $f487: Int,
        $f489: Int,
        $f488: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f487: [
            1,
        ],
        $f1259: [
            0,
            1,
        ],
        $f489: [
            0,
        ],
        $f1260: [
            1,
            2,
        ],
        $f488: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f1259
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f1260
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259), id16: ($f29 -> $f1259, $f30 -> $f489), id16: ($f29 -> $f1260, $f30 -> $f488)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259),
            ),
            AppliedId(
                id16: ($f29 -> $f1259, $f30 -> $f489),
            ),
            AppliedId(
                id16: ($f29 -> $f1260, $f30 -> $f488),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f1259: Node, $f1260: Node, $f487: Int, $f489: Int, $f488: Int}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1260, $2 -> $f1259, $3 -> $f489, $4 -> $f488)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id82 
    CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
    ($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
     - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])
     - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f1232, $f30 -> $f488),
        id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233),
        id16: ($f29 -> $f1233, $f30 -> $f489),
    ]
[entry::chc::rewrite] appId.slots {$f488, $f1232}
[entry::chc::rewrite] appId.slots {$f487, $f1232, $f1233}
[entry::chc::rewrite] appId.slots {$f489, $f1233}
[entry::chc::rewrite] mergeVarTypes = {
        $f488: Int,
        $f1233: Node,
        $f489: Int,
        $f487: Int,
        $f1232: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f489: [
            2,
        ],
        $f487: [
            1,
        ],
        $f1232: [
            0,
            1,
        ],
        $f488: [
            0,
        ],
        $f1233: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f489
[entry::chc::rewrite] var = $f487
[entry::chc::rewrite] var = $f1232
[entry::chc::rewrite] var = $f488
[entry::chc::rewrite] var = $f1233
[entry::chc::rewrite] from id82 children after sort [id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233), id16: ($f29 -> $f1232, $f30 -> $f488), id16: ($f29 -> $f1233, $f30 -> $f489)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id82 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233),
            ),
            AppliedId(
                id16: ($f29 -> $f1232, $f30 -> $f488),
            ),
            AppliedId(
                id16: ($f29 -> $f1233, $f30 -> $f489),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f488: Int, $f1233: Node, $f489: Int, $f487: Int, $f1232: Node}
[entry::chc::rewrite] map ($0 -> $f487, $1 -> $f1232, $2 -> $f1233, $3 -> $f488, $4 -> $f489)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id82_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id87 
    CHCData { predNames: {"define_from_id50_1"}, varTypes: {$f504: Node, $f505: Node, $f501: Int} }
    ($f501):>> Interface(id86: (), id84: ($f497 -> $f501), id42: ())
     - New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505))])
     - Interface(id86: (), id84: ($f497 -> $f501), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
    ]
[entry::chc::rewrite] appId.slots {$f501, $f504, $f505}
[entry::chc::rewrite] mergeVarTypes = {
        $f501: Int,
        $f504: Node,
        $f505: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f501: [
            0,
        ],
        $f504: [
            0,
        ],
        $f505: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f501
[entry::chc::rewrite] var = $f504
[entry::chc::rewrite] var = $f505
[entry::chc::rewrite] from id87 children after sort [id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id87 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f501: Int, $f504: Node, $f505: Node}
[entry::chc::rewrite] map ($0 -> $f501, $1 -> $f504, $2 -> $f505)
[entry::chc::rewrite] sorted basicVars [$0]
[entry::chc::rewrite] define_from_id87_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
    }
[slotted_egraphs::parse] from (new (pred <(int $0)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id91 
    CHCData { predNames: {"define_from_id60_2"}, varTypes: {$f511: Node, $f509: Int} }
    ($f509):>> Interface(id90: (), id84: ($f497 -> $f509), id42: ())
     - New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f511, $f30 -> $f509))])
     - Interface(id90: (), id84: ($f497 -> $f509), id42: ())
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f511, $f30 -> $f509),
    ]
[entry::chc::rewrite] appId.slots {$f509, $f511}
[entry::chc::rewrite] mergeVarTypes = {
        $f509: Int,
        $f511: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f509: [
            0,
        ],
        $f511: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f509
[entry::chc::rewrite] var = $f511
[entry::chc::rewrite] from id91 children after sort [id16: ($f29 -> $f511, $f30 -> $f509)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id91 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id16: ($f29 -> $f511, $f30 -> $f509),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f509: Int, $f511: Node}
[entry::chc::rewrite] map ($0 -> $f511, $1 -> $f509)
[entry::chc::rewrite] sorted basicVars [$1]
[entry::chc::rewrite] define_from_id91_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $1)>) (true) <?x0 >)"
[entry::chc::rewrite] newSubst {
        "x0": id16: ($f29 -> $0, $f30 -> $1),
    }
[slotted_egraphs::parse] from (new (pred <(int $1)>) (true) <?x0 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id100 
    CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
    ($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
     - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024),
        id16: ($f29 -> $f3023, $f30 -> $f2119),
        id16: ($f29 -> $f3024, $f30 -> $f2118),
    ]
[entry::chc::rewrite] appId.slots {$f2117, $f3023, $f3024}
[entry::chc::rewrite] appId.slots {$f2119, $f3023}
[entry::chc::rewrite] appId.slots {$f2118, $f3024}
[entry::chc::rewrite] mergeVarTypes = {
        $f2117: Int,
        $f2119: Int,
        $f3023: Node,
        $f2118: Int,
        $f3024: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f2117: [
            0,
        ],
        $f3024: [
            0,
            2,
        ],
        $f3023: [
            0,
            1,
        ],
        $f2119: [
            1,
        ],
        $f2118: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f2117
[entry::chc::rewrite] var = $f3024
[entry::chc::rewrite] var = $f3023
[entry::chc::rewrite] var = $f2119
[entry::chc::rewrite] var = $f2118
[entry::chc::rewrite] from id100 children after sort [id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024), id16: ($f29 -> $f3023, $f30 -> $f2119), id16: ($f29 -> $f3024, $f30 -> $f2118)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id100 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024),
            ),
            AppliedId(
                id16: ($f29 -> $f3023, $f30 -> $f2119),
            ),
            AppliedId(
                id16: ($f29 -> $f3024, $f30 -> $f2118),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f2117: Int, $f2119: Int, $f3023: Node, $f2118: Int, $f3024: Node}
[entry::chc::rewrite] map ($0 -> $f2117, $1 -> $f3023, $2 -> $f3024, $3 -> $f2119, $4 -> $f2118)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id100_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id100 
    CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
    ($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
     - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
    
[entry::chc::rewrite] childAppIds [
        id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123),
        id16: ($f29 -> $f2123, $f30 -> $f2118),
        id16: ($f29 -> $f2122, $f30 -> $f2119),
    ]
[entry::chc::rewrite] appId.slots {$f2117, $f2122, $f2123}
[entry::chc::rewrite] appId.slots {$f2118, $f2123}
[entry::chc::rewrite] appId.slots {$f2119, $f2122}
[entry::chc::rewrite] mergeVarTypes = {
        $f2123: Node,
        $f2119: Int,
        $f2117: Int,
        $f2122: Node,
        $f2118: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f2123: [
            0,
            1,
        ],
        $f2118: [
            1,
        ],
        $f2119: [
            2,
        ],
        $f2122: [
            0,
            2,
        ],
        $f2117: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f2123
[entry::chc::rewrite] var = $f2118
[entry::chc::rewrite] var = $f2119
[entry::chc::rewrite] var = $f2122
[entry::chc::rewrite] var = $f2117
[entry::chc::rewrite] from id100 children after sort [id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123), id16: ($f29 -> $f2122, $f30 -> $f2119), id16: ($f29 -> $f2123, $f30 -> $f2118)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id100 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123),
            ),
            AppliedId(
                id16: ($f29 -> $f2122, $f30 -> $f2119),
            ),
            AppliedId(
                id16: ($f29 -> $f2123, $f30 -> $f2118),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f2123: Node, $f2119: Int, $f2117: Int, $f2122: Node, $f2118: Int}
[entry::chc::rewrite] map ($0 -> $f2117, $1 -> $f2122, $2 -> $f2123, $3 -> $f2119, $4 -> $f2118)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id100_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id100 
    CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
    ($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
     - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f3032, $f30 -> $f2119),
        id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033),
        id16: ($f29 -> $f3033, $f30 -> $f2118),
    ]
[entry::chc::rewrite] appId.slots {$f2119, $f3032}
[entry::chc::rewrite] appId.slots {$f2117, $f3032, $f3033}
[entry::chc::rewrite] appId.slots {$f2118, $f3033}
[entry::chc::rewrite] mergeVarTypes = {
        $f2118: Int,
        $f2119: Int,
        $f3032: Node,
        $f3033: Node,
        $f2117: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f2119: [
            0,
        ],
        $f2118: [
            2,
        ],
        $f2117: [
            1,
        ],
        $f3032: [
            0,
            1,
        ],
        $f3033: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f2119
[entry::chc::rewrite] var = $f2118
[entry::chc::rewrite] var = $f2117
[entry::chc::rewrite] var = $f3032
[entry::chc::rewrite] var = $f3033
[entry::chc::rewrite] from id100 children after sort [id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033), id16: ($f29 -> $f3032, $f30 -> $f2119), id16: ($f29 -> $f3033, $f30 -> $f2118)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id100 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033),
            ),
            AppliedId(
                id16: ($f29 -> $f3032, $f30 -> $f2119),
            ),
            AppliedId(
                id16: ($f29 -> $f3033, $f30 -> $f2118),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f2118: Int, $f2119: Int, $f3032: Node, $f3033: Node, $f2117: Int}
[entry::chc::rewrite] map ($0 -> $f2117, $1 -> $f3032, $2 -> $f3033, $3 -> $f2119, $4 -> $f2118)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id100_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id100 
    CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
    ($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
     - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f3041, $f30 -> $f2119),
        id16: ($f29 -> $f3042, $f30 -> $f2118),
        id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042),
    ]
[entry::chc::rewrite] appId.slots {$f2119, $f3041}
[entry::chc::rewrite] appId.slots {$f2118, $f3042}
[entry::chc::rewrite] appId.slots {$f2117, $f3041, $f3042}
[entry::chc::rewrite] mergeVarTypes = {
        $f2119: Int,
        $f3041: Node,
        $f2117: Int,
        $f2118: Int,
        $f3042: Node,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f3042: [
            1,
            2,
        ],
        $f3041: [
            0,
            2,
        ],
        $f2117: [
            2,
        ],
        $f2118: [
            1,
        ],
        $f2119: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f3042
[entry::chc::rewrite] var = $f3041
[entry::chc::rewrite] var = $f2117
[entry::chc::rewrite] var = $f2118
[entry::chc::rewrite] var = $f2119
[entry::chc::rewrite] from id100 children after sort [id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042), id16: ($f29 -> $f3041, $f30 -> $f2119), id16: ($f29 -> $f3042, $f30 -> $f2118)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id100 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042),
            ),
            AppliedId(
                id16: ($f29 -> $f3041, $f30 -> $f2119),
            ),
            AppliedId(
                id16: ($f29 -> $f3042, $f30 -> $f2118),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f2119: Int, $f3041: Node, $f2117: Int, $f2118: Int, $f3042: Node}
[entry::chc::rewrite] map ($0 -> $f2117, $1 -> $f3041, $2 -> $f3042, $3 -> $f2119, $4 -> $f2118)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id100_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $1, $f30 -> $3),
        "x2": id16: ($f29 -> $2, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id100 
    CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
    ($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
     - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f3005, $f30 -> $f2118),
        id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005),
        id16: ($f29 -> $f3006, $f30 -> $f2119),
    ]
[entry::chc::rewrite] appId.slots {$f2118, $f3005}
[entry::chc::rewrite] appId.slots {$f2117, $f3005, $f3006}
[entry::chc::rewrite] appId.slots {$f2119, $f3006}
[entry::chc::rewrite] mergeVarTypes = {
        $f3006: Node,
        $f3005: Node,
        $f2118: Int,
        $f2119: Int,
        $f2117: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f2117: [
            1,
        ],
        $f3005: [
            0,
            1,
        ],
        $f3006: [
            1,
            2,
        ],
        $f2119: [
            2,
        ],
        $f2118: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f2117
[entry::chc::rewrite] var = $f3005
[entry::chc::rewrite] var = $f3006
[entry::chc::rewrite] var = $f2119
[entry::chc::rewrite] var = $f2118
[entry::chc::rewrite] from id100 children after sort [id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005), id16: ($f29 -> $f3005, $f30 -> $f2118), id16: ($f29 -> $f3006, $f30 -> $f2119)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id100 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005),
            ),
            AppliedId(
                id16: ($f29 -> $f3005, $f30 -> $f2118),
            ),
            AppliedId(
                id16: ($f29 -> $f3006, $f30 -> $f2119),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f3006: Node, $f3005: Node, $f2118: Int, $f2119: Int, $f2117: Int}
[entry::chc::rewrite] map ($0 -> $f2117, $1 -> $f3006, $2 -> $f3005, $3 -> $f2118, $4 -> $f2119)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id100_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::rewrite] root eclass id100 
    CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
    ($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
     - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
     - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
    
[entry::chc::rewrite] childAppIds [
        id16: ($f29 -> $f3014, $f30 -> $f2118),
        id16: ($f29 -> $f3015, $f30 -> $f2119),
        id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014),
    ]
[entry::chc::rewrite] appId.slots {$f2118, $f3014}
[entry::chc::rewrite] appId.slots {$f2119, $f3015}
[entry::chc::rewrite] appId.slots {$f2117, $f3014, $f3015}
[entry::chc::rewrite] mergeVarTypes = {
        $f2118: Int,
        $f3015: Node,
        $f2117: Int,
        $f3014: Node,
        $f2119: Int,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f3014: [
            0,
            2,
        ],
        $f3015: [
            1,
            2,
        ],
        $f2117: [
            2,
        ],
        $f2118: [
            0,
        ],
        $f2119: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f3014
[entry::chc::rewrite] var = $f3015
[entry::chc::rewrite] var = $f2117
[entry::chc::rewrite] var = $f2118
[entry::chc::rewrite] var = $f2119
[entry::chc::rewrite] from id100 children after sort [id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014), id16: ($f29 -> $f3014, $f30 -> $f2118), id16: ($f29 -> $f3015, $f30 -> $f2119)]
[slotted_egraphs::parse] from (pred <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("pred"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::egraph::add] add_syn_expr: id79 <-> true
[entry::chc::rewrite] dummyEnode root id100 shape New(
        id5: (),
        id79: (),
        [
            AppliedId(
                id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014),
            ),
            AppliedId(
                id16: ($f29 -> $f3014, $f30 -> $f2118),
            ),
            AppliedId(
                id16: ($f29 -> $f3015, $f30 -> $f2119),
            ),
        ],
    )
[entry::chc::rewrite] mergeVarTypes {$f2118: Int, $f3015: Node, $f2117: Int, $f3014: Node, $f2119: Int}
[entry::chc::rewrite] map ($0 -> $f2117, $1 -> $f3015, $2 -> $f3014, $3 -> $f2118, $4 -> $f2119)
[entry::chc::rewrite] sorted basicVars [$0, $3, $4]
[entry::chc::rewrite] define_from_id100_4
[entry::chc::rewrite] newENodeStr "(new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)"
[entry::chc::rewrite] newSubst {
        "x0": id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2),
        "x1": id16: ($f29 -> $2, $f30 -> $3),
        "x2": id16: ($f29 -> $1, $f30 -> $4),
    }
[slotted_egraphs::parse] from (new (pred <(int $0) (int $3) (int $4)>) (true) <?x0 ?x1 ?x2 >)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, PVar("x0"), PVar("x1"), PVar("x2"), RVecBracket, RParen]
[entry::chc::tst] report Report { iterations: 5, stop_reason: Saturated, egraph_nodes: 107, egraph_classes: 107, total_time: 6.644544397 }
[entry::chc::tst] egraph after run

 == Egraph ==
CHCData { predNames: {}, varTypes: {} }
id0():>> PredName("root")
 - PredName("root")

CHCData { predNames: {}, varTypes: {$f0: Int} }
id1($f0):>> Int($f0)
 - Int($f0)

CHCData { predNames: {}, varTypes: {$f1: Node} }
id2($f1):>> Node($f1)
 - Node($f1)

CHCData { predNames: {}, varTypes: {$f3: Node, $f6: Int, $f4: Node, $f5: Int, $f2: Int} }
id3($f2, $f3, $f4, $f5, $f6):>> PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
 - PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])

CHCData { predNames: {"root"}, varTypes: {$f10: Int, $f8: Node, $f9: Node, $f11: Int, $f7: Int} }
id4($f7, $f8, $f9, $f10, $f11):>> Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])

CHCData { predNames: {}, varTypes: {} }
id5():>> PredSyntax([])
 - PredSyntax([])

CHCData { predNames: {}, varTypes: {} }
id6():>> Number(0)
 - Number(0)

CHCData { predNames: {}, varTypes: {$f12: Int} }
id7($f12):>> Geq(id1: ($f0 -> $f12), id6: ())
 - Geq(id1: ($f0 -> $f12), id6: ())

CHCData { predNames: {}, varTypes: {$f14: Int, $f13: Int} }
id8($f13, $f14):>> Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
 - Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))

CHCData { predNames: {}, varTypes: {$f15: Int, $f17: Int, $f16: Int} }
id9($f15, $f16, $f17):>> Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
 - Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))

CHCData { predNames: {}, varTypes: {$f20: Int, $f19: Int, $f18: Int} }
id10($f18, $f19, $f20):>> And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
 - And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])

CHCData { predNames: {}, varTypes: {} }
id11():>> PredName("leafDrop")
 - PredName("leafDrop")

CHCData { predNames: {}, varTypes: {$f23: Node, $f22: Node, $f21: Int} }
id12($f21, $f22, $f23):>> PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
 - PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])

CHCData { predNames: {"leafDrop"}, varTypes: {$f25: Node, $f26: Node, $f24: Int} }
id13($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
 - Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
 - Compose([AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
 - Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])
 - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
 - Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26))])
 - Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
 - Compose([AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26)), AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26))])

CHCData { predNames: {}, varTypes: {} }
id14():>> PredName("minLeaf")
 - PredName("minLeaf")

CHCData { predNames: {}, varTypes: {$f28: Int, $f27: Node} }
id15($f27, $f28):>> PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
 - PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Int, $f29: Node} }
id16($f29, $f30):>> Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
 - Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
 - Compose([AppliedId(id60: ($f164 -> $f29, $f165 -> $f30)), AppliedId(id55: ($f145 -> $f29, $f146 -> $f30))])
 - Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))

CHCData { predNames: {}, varTypes: {$f35: Int, $f31: Int, $f34: Int, $f33: Node, $f32: Node} }
id17($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id16: ($f29 -> $f32, $f30 -> $f35)), AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])

CHCData { predNames: {}, varTypes: {} }
id19():>> PredName("min")
 - PredName("min")

CHCData { predNames: {}, varTypes: {$f43: Int, $f42: Int, $f41: Int} }
id20($f41, $f42, $f43):>> PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
 - PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])

CHCData { predNames: {}, varTypes: {$f47: Int, $f48: Int} }
id22($f47, $f48):>> Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
 - Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))

CHCData { predNames: {}, varTypes: {$f50: Int, $f49: Int} }
id23($f49, $f50):>> Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
 - Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))

CHCData { predNames: {}, varTypes: {$f52: Int, $f53: Int, $f51: Int} }
id24($f51, $f52, $f53):>> And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
 - And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])

CHCData { predNames: {}, varTypes: {} }
id26():>> Number(1)
 - Number(1)

CHCData { predNames: {"min"}, varTypes: {$f58: Int, $f59: Int, $f57: Int} }
id27($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
 - New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
 - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())

CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
id28($f60, $f61):>> Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
 - Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))

CHCData { predNames: {}, varTypes: {$f63: Int, $f62: Int, $f64: Int} }
id29($f62, $f63, $f64):>> And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
 - And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])

CHCData { predNames: {}, varTypes: {$f66: Int, $f65: Int, $f67: Int} }
id30($f65, $f66, $f67):>> New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
 - New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])

CHCData { predNames: {"min"}, varTypes: {$f70: Int, $f68: Int, $f69: Int} }
id31($f68, $f69, $f70):>> Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
 - Compose([AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70)), AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70))])
 - Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
 - Init(id19: (), id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70))

CHCData { predNames: {}, varTypes: {} }
id32():>> Leaf
 - Leaf

CHCData { predNames: {}, varTypes: {$f71: Node} }
id33($f71):>> Eq(id2: ($f1 -> $f71), id32: ())
 - Eq(id2: ($f1 -> $f71), id32: ())

CHCData { predNames: {}, varTypes: {$f73: Node, $f72: Node} }
id34($f72, $f73):>> And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
 - And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])

CHCData { predNames: {"leafDrop"}, varTypes: {$f77: Int, $f79: Node, $f78: Node} }
id36($f77, $f78, $f79):>> Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
 - New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
 - Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())

CHCData { predNames: {}, varTypes: {$f80: Int} }
id37($f80):>> Leq(id1: ($f0 -> $f80), id6: ())
 - Leq(id1: ($f0 -> $f80), id6: ())

CHCData { predNames: {}, varTypes: {$f81: Node, $f83: Int, $f82: Node} }
id38($f81, $f82, $f83):>> BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
 - BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))

CHCData { predNames: {}, varTypes: {$f85: Node, $f84: Node, $f87: Int, $f86: Node} }
id39($f84, $f85, $f86, $f87):>> Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
 - Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))

CHCData { predNames: {}, varTypes: {$f90: Node, $f93: Int, $f88: Int, $f89: Node, $f91: Node, $f92: Node} }
id40($f88, $f89, $f90, $f91, $f92, $f93):>> And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
 - And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])

CHCData { predNames: {}, varTypes: {} }
id42():>> Number(2)
 - Number(2)

CHCData { predNames: {"leafDrop"}, varTypes: {$f102: Node, $f100: Int, $f108: Int, $f107: Node, $f106: Node, $f101: Node} }
id43($f100, $f101, $f102):>> Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
 - Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
 - New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f106, $f92 -> $f107, $f93 -> $f108), [])

CHCData { predNames: {}, varTypes: {$f109: Int} }
id44($f109):>> Geq(id1: ($f0 -> $f109), id26: ())
 - Geq(id1: ($f0 -> $f109), id26: ())

CHCData { predNames: {}, varTypes: {$f110: Int} }
id45($f110):>> Minus(id1: ($f0 -> $f110), id26: ())
 - Minus(id1: ($f0 -> $f110), id26: ())

CHCData { predNames: {}, varTypes: {$f111: Int, $f112: Int} }
id46($f111, $f112):>> Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
 - Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))

CHCData { predNames: {}, varTypes: {$f113: Int, $f114: Node, $f117: Int, $f118: Int, $f115: Node, $f116: Node} }
id47($f113, $f114, $f115, $f116, $f117, $f118):>> And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
 - And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])

CHCData { predNames: {}, varTypes: {} }
id49():>> Number(3)
 - Number(3)

CHCData { predNames: {"leafDrop"}, varTypes: {$f126: Int, $f133: Node, $f127: Node, $f134: Node, $f128: Node, $f136: Int, $f135: Int} }
id50($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
 - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
 - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])

CHCData { predNames: {}, varTypes: {$f140: Int} }
id52($f140):>> Eq(id1: ($f0 -> $f140), id6: ())
 - Eq(id1: ($f0 -> $f140), id6: ())

CHCData { predNames: {}, varTypes: {$f142: Int, $f141: Node} }
id53($f141, $f142):>> And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
 - And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f146: Int, $f145: Node} }
id55($f145, $f146):>> Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
 - Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
 - New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])

CHCData { predNames: {}, varTypes: {$f147: Int} }
id56($f147):>> Add(id1: ($f0 -> $f147), id26: ())
 - Add(id1: ($f0 -> $f147), id26: ())

CHCData { predNames: {}, varTypes: {$f148: Int, $f149: Int} }
id57($f148, $f149):>> Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
 - Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))

CHCData { predNames: {}, varTypes: {$f152: Int, $f150: Node, $f153: Node, $f154: Node, $f151: Int, $f155: Int} }
id58($f150, $f151, $f152, $f153, $f154, $f155):>> And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
 - And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f174: Node, $f441: Int, $f379: Int, $f417: Node, $f176: Int, $f460: Int, $f459: Int, $f439: Int, $f398: Node, $f401: Int, $f380: Int, $f172: Int, $f457: Node, $f416: Int, $f173: Node, $f419: Int, $f456: Int, $f165: Int, $f175: Int, $f377: Node, $f164: Node, $f378: Node, $f396: Int, $f421: Int, $f177: Int, $f397: Node, $f440: Int, $f381: Int, $f400: Int, $f458: Node, $f418: Node, $f436: Int, $f399: Int, $f461: Int, $f437: Node, $f376: Int, $f420: Int, $f438: Node} }
id60($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f376, $f153 -> $f377, $f154 -> $f378, $f155 -> $f379), [AppliedId(id16: ($f29 -> $f378, $f30 -> $f380)), AppliedId(id16: ($f29 -> $f377, $f30 -> $f381)), AppliedId(id31: ($f68 -> $f381, $f69 -> $f380, $f70 -> $f379))])
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f416, $f153 -> $f417, $f154 -> $f418, $f155 -> $f419), [AppliedId(id16: ($f29 -> $f417, $f30 -> $f420)), AppliedId(id31: ($f68 -> $f420, $f69 -> $f421, $f70 -> $f419)), AppliedId(id16: ($f29 -> $f418, $f30 -> $f421))])
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f456, $f153 -> $f457, $f154 -> $f458, $f155 -> $f459), [AppliedId(id31: ($f68 -> $f460, $f69 -> $f461, $f70 -> $f459)), AppliedId(id16: ($f29 -> $f458, $f30 -> $f461)), AppliedId(id16: ($f29 -> $f457, $f30 -> $f460))])
 - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f396, $f153 -> $f397, $f154 -> $f398, $f155 -> $f399), [AppliedId(id16: ($f29 -> $f398, $f30 -> $f400)), AppliedId(id31: ($f68 -> $f401, $f69 -> $f400, $f70 -> $f399)), AppliedId(id16: ($f29 -> $f397, $f30 -> $f401))])
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f436, $f153 -> $f437, $f154 -> $f438, $f155 -> $f439), [AppliedId(id31: ($f68 -> $f440, $f69 -> $f441, $f70 -> $f439)), AppliedId(id16: ($f29 -> $f437, $f30 -> $f440)), AppliedId(id16: ($f29 -> $f438, $f30 -> $f441))])

CHCData { predNames: {}, varTypes: {} }
id79():>> True
 - True

CHCData { predNames: {}, varTypes: {} }
id81():>> PredName("define_from_id17_0")
 - PredName("define_from_id17_0")

CHCData { predNames: {"define_from_id17_0"}, varTypes: {$f487: Int, $f1251: Node, $f1233: Node, $f488: Int, $f1269: Node, $f1250: Node, $f493: Node, $f1242: Node, $f1259: Node, $f492: Node, $f1268: Node, $f1232: Node, $f1241: Node, $f1260: Node, $f489: Int} }
id82($f487, $f488, $f489):>> Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
 - Interface(id81: (), id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id42: ())
 - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1232, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1232, $f26 -> $f1233)), AppliedId(id16: ($f29 -> $f1233, $f30 -> $f489))])
 - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1268, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1269, $f30 -> $f488)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1269, $f26 -> $f1268))])
 - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f1250, $f26 -> $f1251)), AppliedId(id16: ($f29 -> $f1251, $f30 -> $f489)), AppliedId(id16: ($f29 -> $f1250, $f30 -> $f488))])
 - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1241, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f1242, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1241, $f26 -> $f1242))])
 - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id13: ($f24 -> $f487, $f25 -> $f492, $f26 -> $f493)), AppliedId(id16: ($f29 -> $f492, $f30 -> $f488)), AppliedId(id16: ($f29 -> $f493, $f30 -> $f489))])
 - New(id20: ($f41 -> $f487, $f42 -> $f488, $f43 -> $f489), id79: (), [AppliedId(id16: ($f29 -> $f1259, $f30 -> $f489)), AppliedId(id13: ($f24 -> $f487, $f25 -> $f1260, $f26 -> $f1259)), AppliedId(id16: ($f29 -> $f1260, $f30 -> $f488))])

CHCData { predNames: {}, varTypes: {$f494: Int, $f495: Int, $f496: Int} }
id83($f494, $f495, $f496):>> Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])
 - Compose([AppliedId(id82: ($f487 -> $f494, $f488 -> $f495, $f489 -> $f496))])

CHCData { predNames: {}, varTypes: {$f497: Int} }
id84($f497):>> PredSyntax([id1: ($f0 -> $f497)])
 - PredSyntax([id1: ($f0 -> $f497)])

CHCData { predNames: {}, varTypes: {} }
id86():>> PredName("define_from_id50_1")
 - PredName("define_from_id50_1")

CHCData { predNames: {"define_from_id50_1"}, varTypes: {$f504: Node, $f505: Node, $f501: Int} }
id87($f501):>> Interface(id86: (), id84: ($f497 -> $f501), id42: ())
 - New(id84: ($f497 -> $f501), id79: (), [AppliedId(id13: ($f24 -> $f501, $f25 -> $f504, $f26 -> $f505))])
 - Interface(id86: (), id84: ($f497 -> $f501), id42: ())

CHCData { predNames: {}, varTypes: {$f506: Int} }
id88($f506):>> Compose([AppliedId(id87: ($f501 -> $f506))])
 - Compose([AppliedId(id87: ($f501 -> $f506))])

CHCData { predNames: {}, varTypes: {} }
id90():>> PredName("define_from_id60_2")
 - PredName("define_from_id60_2")

CHCData { predNames: {"define_from_id60_2"}, varTypes: {$f511: Node, $f509: Int} }
id91($f509):>> Interface(id90: (), id84: ($f497 -> $f509), id42: ())
 - New(id84: ($f497 -> $f509), id79: (), [AppliedId(id16: ($f29 -> $f511, $f30 -> $f509))])
 - Interface(id90: (), id84: ($f497 -> $f509), id42: ())

CHCData { predNames: {}, varTypes: {$f512: Int} }
id92($f512):>> Compose([AppliedId(id91: ($f509 -> $f512))])
 - Compose([AppliedId(id91: ($f509 -> $f512))])

CHCData { predNames: {}, varTypes: {} }
id99():>> PredName("define_from_id82_3")
 - PredName("define_from_id82_3")

CHCData { predNames: {"define_from_id82_3"}, varTypes: {$f3024: Node, $f3023: Node, $f2123: Node, $f2119: Int, $f3041: Node, $f3015: Node, $f3005: Node, $f3032: Node, $f2122: Node, $f2118: Int, $f3042: Node, $f2117: Int, $f3014: Node, $f3006: Node, $f3033: Node} }
id100($f2117, $f2118, $f2119):>> Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())
 - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f2122, $f26 -> $f2123)), AppliedId(id16: ($f29 -> $f2123, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f2122, $f30 -> $f2119))])
 - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3032, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3032, $f26 -> $f3033)), AppliedId(id16: ($f29 -> $f3033, $f30 -> $f2118))])
 - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3023, $f26 -> $f3024)), AppliedId(id16: ($f29 -> $f3023, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3024, $f30 -> $f2118))])
 - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3041, $f30 -> $f2119)), AppliedId(id16: ($f29 -> $f3042, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3041, $f26 -> $f3042))])
 - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3005, $f30 -> $f2118)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3006, $f26 -> $f3005)), AppliedId(id16: ($f29 -> $f3006, $f30 -> $f2119))])
 - New(id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id79: (), [AppliedId(id16: ($f29 -> $f3014, $f30 -> $f2118)), AppliedId(id16: ($f29 -> $f3015, $f30 -> $f2119)), AppliedId(id13: ($f24 -> $f2117, $f25 -> $f3015, $f26 -> $f3014))])
 - Interface(id99: (), id20: ($f41 -> $f2117, $f42 -> $f2118, $f43 -> $f2119), id42: ())

CHCData { predNames: {}, varTypes: {$f2126: Int, $f2125: Int, $f2124: Int} }
id101($f2124, $f2125, $f2126):>> Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
 - Compose([AppliedId(id100: ($f2117 -> $f2124, $f2118 -> $f2125, $f2119 -> $f2126))])
test chc::tst::tst2 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 72 filtered out; finished in 6.94s


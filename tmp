   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
warning: unused `std::result::Result` that must be used
   --> src/egraph/mod.rs:313:13
    |
313 |             write!(f, "\n{:?}", i);
    |             ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
    = note: this warning originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `std::result::Result` that must be used
   --> src/egraph/mod.rs:314:13
    |
314 |             c.dumpEClass(f);
    |             ^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
314 |             let _ = c.dumpEClass(f);
    |             +++++++

warning: `slotted-egraphs` (lib) generated 2 warnings (2 duplicates)
warning: `slotted-egraphs` (lib test) generated 2 warnings
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.99s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
[slotted_egraphs::parse] from (init root (pred <(int $0) (node $1) (node $2) (int $3) (int $4)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("root"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 root
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $2)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $3)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $4)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (node $1) (node $2) (int $3) (int $4))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init root (pred (int $0) (node $1) (node $2) (int $3) (int $4)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("root")
[slotted_egraphs::egraph::add] ret (PredName("root"), ())
[entry::chc] calling make on PredName("root")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("root")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id0
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("root")
     - PredName("root")
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredName("root")
[entry::chc] calling make on PredName("root")
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("root")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> root
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[entry::chc] calling make on Int($f0)
[slotted_egraphs::egraph::add] classes insert id1
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[slotted_egraphs::egraph::rebuild] from update_analysis Int($0)
[entry::chc] calling make on Int($0)
[entry::chc] exists in egraph
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($1)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $1))
[entry::chc] calling make on Node($f1)
[slotted_egraphs::egraph::add] classes insert id2
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f1: Node} }
    ($f1):>> Node($f1)
     - Node($f1)
    
[slotted_egraphs::egraph::rebuild] from update_analysis Node($0)
[entry::chc] calling make on Node($0)
[entry::chc] exists in egraph
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($2)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $2)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($3)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($4)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)]), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $3, $4 -> $4))
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] slots: {$f2, $f3, $f4, $f5, $f6}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f2 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f3 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f4 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] get {$f2: Int, $f4: Node, $f3: Node, $f5: Int, $f6: Int}
[slotted_egraphs::egraph::add] classes insert id3
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f4: Node, $f3: Node, $f5: Int, $f6: Int} }
    ($f2, $f3, $f4, $f5, $f6):>> PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
     - PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2), id1: ($f0 -> $3), id1: ($f0 -> $4)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f2, $f3, $f4, $f5, $f6}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f2 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f3 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f4 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
[entry::chc] get {$f3: Node, $f2: Int, $f4: Node, $f5: Int, $f6: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred (int $0) (node $1) (node $2) (int $3) (int $4))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[slotted_egraphs::egraph::add] ret (Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4)), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $3, $4 -> $4))
[entry::chc] calling make on Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] slots: {$f7, $f8, $f9, $f10, $f11}
[entry::chc] childId : id3, mapToS : $f2
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id3, mapToS : $f4
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id3, mapToS : $f5
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id3, mapToS : $f6
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] get {$f11: Int, $f8: Node, $f7: Int, $f9: Node, $f10: Int}
[slotted_egraphs::egraph::add] classes insert id4
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"root"}, varTypes: {$f11: Int, $f8: Node, $f7: Int, $f9: Node, $f10: Int} }
    ($f7, $f8, $f9, $f10, $f11):>> Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
     - Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[entry::chc] calling make on Init(id0: (), id3: ($f2 -> $0, $f3 -> $1, $f4 -> $2, $f5 -> $3, $f6 -> $4))
[entry::chc] exists in egraph
[entry::chc] slots: {$f7, $f8, $f9, $f10, $f11}
[entry::chc] childId : id3, mapToS : $f2
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id3, mapToS : $f4
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id3, mapToS : $f5
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id3, mapToS : $f6
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
[entry::chc] get {$f10: Int, $f8: Node, $f7: Int, $f9: Node, $f11: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (init root (pred (int $0) (node $1) (node $2) (int $3) (int $4)))
[slotted_egraphs::parse] from (compose <(new (pred <>) (and <(geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))>) <(init leafDrop (pred <(int $0) (node $1) (node $2)>)) (init minLeaf (pred <(node $2) (int $3)>)) (init minLeaf (pred <(node $1) (int $4)>))>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($0), RParen, RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 pred
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($0), RParen, RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($0), RParen, RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($0), RParen, RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $0) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("int"), Slot($3), RParen, LParen, Ident("int"), Slot($0), RParen, RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $3)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($0), RParen, RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (int $3) (int $0))
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $4)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (+ (int $3) (int $0)) (int $4))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($1), RParen, LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (node $1) (node $2))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (int $0) (node $1) (node $2)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($2), RParen, LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $2)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $3)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $2) (int $3))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $2) (int $3)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($1), RParen, LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $4)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $1) (int $4))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $1) (int $4)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new pred (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))) (init leafDrop (pred (int $0) (node $1) (node $2))) (init minLeaf (pred (node $2) (int $3))) (init minLeaf (pred (node $1) (int $4))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new pred (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))) (init leafDrop (pred (int $0) (node $1) (node $2))) (init minLeaf (pred (node $2) (int $3))) (init minLeaf (pred (node $1) (int $4)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([])
[slotted_egraphs::egraph::add] ret (PredSyntax([]), ())
[entry::chc] calling make on PredSyntax([])
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredSyntax([])
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id5
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredSyntax([])
     - PredSyntax([])
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredSyntax([])
[entry::chc] calling make on PredSyntax([])
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredSyntax([])
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> pred
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[entry::chc] calling make on Number(0)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id6
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[slotted_egraphs::egraph::rebuild] from update_analysis Number(0)
[entry::chc] calling make on Number(0)
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $0), id6: ())
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id6: ()), ($0 -> $0))
[entry::chc] calling make on Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] slots: {$f12}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f12 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] get {$f12: Int}
[slotted_egraphs::egraph::add] classes insert id7
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f12: Int} }
    ($f12):>> Geq(id1: ($f0 -> $f12), id6: ())
     - Geq(id1: ($f0 -> $f12), id6: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Geq(id1: ($f0 -> $0), id6: ())
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id6: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f12}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f12 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f12), id6: ())
[entry::chc] get {$f12: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> (geq (int $0) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($3)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id1: ($f0 -> $3), id1: ($f0 -> $0))
[slotted_egraphs::egraph::add] ret (Add(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $3, $1 -> $0))
[entry::chc] calling make on Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] slots: {$f13, $f14}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] get {$f14: Int, $f13: Int}
[slotted_egraphs::egraph::add] classes insert id8
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f14: Int, $f13: Int} }
    ($f13, $f14):>> Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
     - Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Add(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] exists in egraph
[entry::chc] slots: {$f13, $f14}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
[entry::chc] get {$f13: Int, $f14: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (+ (int $3) (int $0))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($4)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id8: ($f13 -> $0, $f14 -> $3), id1: ($f0 -> $4))
[slotted_egraphs::egraph::add] ret (Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2)), ($0 -> $0, $1 -> $3, $2 -> $4))
[entry::chc] calling make on Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] slots: {$f15, $f16, $f17}
[entry::chc] childId : id8, mapToS : $f13
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id8, mapToS : $f14
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f17 to varTypes
[entry::chc] aggregateVarType for Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] get {$f17: Int, $f16: Int, $f15: Int}
[slotted_egraphs::egraph::add] classes insert id9
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f17: Int, $f16: Int, $f15: Int} }
    ($f15, $f16, $f17):>> Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
     - Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[entry::chc] calling make on Less(id8: ($f13 -> $0, $f14 -> $1), id1: ($f0 -> $2))
[entry::chc] exists in egraph
[entry::chc] slots: {$f15, $f16, $f17}
[entry::chc] childId : id8, mapToS : $f13
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id8, mapToS : $f14
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f17 to varTypes
[entry::chc] aggregateVarType for Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
[entry::chc] get {$f17: Int, $f15: Int, $f16: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (lt (+ (int $3) (int $0)) (int $4))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $3, $f17 -> $4)])
[slotted_egraphs::egraph::add] ret (And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)]), ($0 -> $0, $1 -> $3, $2 -> $4))
[entry::chc] calling make on And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] slots: {$f18, $f19, $f20}
[entry::chc] childId : id7, mapToS : $f12
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f15
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f16
[entry::chc] adding $f19 to varTypes
[entry::chc] childId : id9, mapToS : $f17
[entry::chc] adding $f20 to varTypes
[entry::chc] aggregateVarType for And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] get {$f19: Int, $f18: Int, $f20: Int}
[slotted_egraphs::egraph::add] classes insert id10
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f19: Int, $f18: Int, $f20: Int} }
    ($f18, $f19, $f20):>> And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
     - And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[entry::chc] calling make on And([id7: ($f12 -> $0), id9: ($f15 -> $0, $f16 -> $1, $f17 -> $2)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f18, $f19, $f20}
[entry::chc] childId : id7, mapToS : $f12
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f15
[entry::chc] adding $f18 to varTypes
[entry::chc] childId : id9, mapToS : $f16
[entry::chc] adding $f19 to varTypes
[entry::chc] childId : id9, mapToS : $f17
[entry::chc] adding $f20 to varTypes
[entry::chc] aggregateVarType for And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
[entry::chc] get {$f20: Int, $f19: Int, $f18: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[entry::chc] calling make on PredName("leafDrop")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("leafDrop")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id11
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("leafDrop")
     - PredName("leafDrop")
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredName("leafDrop")
[entry::chc] calling make on PredName("leafDrop")
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("leafDrop")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($1)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($2)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $0, $1 -> $1, $2 -> $2))
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] slots: {$f21, $f22, $f23}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f21 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f23 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] get {$f22: Node, $f23: Node, $f21: Int}
[slotted_egraphs::egraph::add] classes insert id12
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f22: Node, $f23: Node, $f21: Int} }
    ($f21, $f22, $f23):>> PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
     - PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f21, $f22, $f23}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f21 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f23 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
[entry::chc] get {$f21: Int, $f22: Node, $f23: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $0) (node $1) (node $2))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[slotted_egraphs::egraph::add] ret (Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2)), ($0 -> $0, $1 -> $1, $2 -> $2))
[entry::chc] calling make on Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] get {$f26: Node, $f24: Int, $f25: Node}
[slotted_egraphs::egraph::add] classes insert id13
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f26: Node, $f24: Int, $f25: Node} }
    ($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
     - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[entry::chc] calling make on Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2))
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
[entry::chc] get {$f25: Node, $f24: Int, $f26: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $0) (node $1) (node $2)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id14
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredName("minLeaf")
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($2)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $2)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($3)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $3)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $2), id1: ($f0 -> $3)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $2, $1 -> $3))
[entry::chc] calling make on PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] slots: {$f27, $f28}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f28 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] get {$f27: Node, $f28: Int}
[slotted_egraphs::egraph::add] classes insert id15
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f27: Node, $f28: Int} }
    ($f27, $f28):>> PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
     - PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[entry::chc] calling make on PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f27, $f28}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f27 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f28 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
[entry::chc] get {$f27: Node, $f28: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $2) (int $3))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $2, $f28 -> $3))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $2, $1 -> $3))
[entry::chc] calling make on Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] get {$f29: Node, $f30: Int}
[slotted_egraphs::egraph::add] classes insert id16
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f29: Node, $f30: Int} }
    ($f29, $f30):>> Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
     - Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[entry::chc] calling make on Init(id14: (), id15: ($f27 -> $0, $f28 -> $1))
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
[entry::chc] get {$f29: Node, $f30: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $2) (int $3)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($1)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($4)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $4)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $1), id1: ($f0 -> $4)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $1, $1 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $1) (int $4))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $1, $f28 -> $4))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $1, $1 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $1) (int $4)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id5: (), id10: ($f18 -> $0, $f19 -> $3, $f20 -> $4), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2)), AppliedId(id16: ($f29 -> $2, $f30 -> $3)), AppliedId(id16: ($f29 -> $1, $f30 -> $4))])
[slotted_egraphs::egraph::add] ret (New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))]), ($0 -> $0, $1 -> $3, $2 -> $4, $3 -> $1, $4 -> $2))
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f31: Int, $f34: Int, $f33: Node, $f32: Node, $f35: Int}
[slotted_egraphs::egraph::add] classes insert id17
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f31: Int, $f34: Int, $f33: Node, $f32: Node, $f35: Int} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f32: Node, $f35: Int, $f34: Int, $f31: Int, $f33: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (new pred (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))) (init leafDrop (pred (int $0) (node $1) (node $2))) (init minLeaf (pred (node $2) (int $3))) (init minLeaf (pred (node $1) (int $4))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))]), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $3, $4 -> $4))
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] slots: {$f36, $f37, $f38, $f39, $f40}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] get {$f36: Int, $f37: Node, $f39: Int, $f38: Node, $f40: Int}
[slotted_egraphs::egraph::add] classes insert id18
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f36: Int, $f37: Node, $f39: Int, $f38: Node, $f40: Int} }
    ($f36, $f37, $f38, $f39, $f40):>> Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
     - Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f36, $f37, $f38, $f39, $f40}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
[entry::chc] get {$f40: Int, $f37: Node, $f36: Int, $f38: Node, $f39: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (compose (new pred (and (geq (int $0) 0) (lt (+ (int $3) (int $0)) (int $4))) (init leafDrop (pred (int $0) (node $1) (node $2))) (init minLeaf (pred (node $2) (int $3))) (init minLeaf (pred (node $1) (int $4)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id18: ($f36 -> $0, $f37 -> $1, $f38 -> $2, $f39 -> $3, $f40 -> $4)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f36: Int, $f37: Node, $f39: Int, $f38: Node, $f40: Int} }
    ($f36, $f37, $f38, $f39, $f40):>> Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
     - Compose([AppliedId(id17: ($f31 -> $f36, $f32 -> $f37, $f33 -> $f38, $f34 -> $f39, $f35 -> $f40))])
    
[slotted_egraphs::egraph::union] r: id4: ($f7 -> $0, $f8 -> $1, $f9 -> $2, $f10 -> $3, $f11 -> $4)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"root"}, varTypes: {$f11: Int, $f8: Node, $f7: Int, $f9: Node, $f10: Int} }
    ($f7, $f8, $f9, $f10, $f11):>> Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
     - Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
    
[slotted_egraphs::egraph::union] Call move_to id18: ($f36 -> $0, $f37 -> $1, $f38 -> $2, $f39 -> $3, $f40 -> $4), id4: ($f7 -> $0, $f8 -> $1, $f9 -> $2, $f10 -> $3, $f11 -> $4)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f36: Int, $f37: Node, $f39: Int, $f38: Node, $f40: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"root"}, varTypes: {$f11: Int, $f8: Node, $f7: Int, $f9: Node, $f10: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"root"}, varTypes: {$f37: Node, $f11: Int, $f7: Int, $f10: Int, $f38: Node, $f40: Int, $f36: Int, $f8: Node, $f39: Int, $f9: Node} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"root"}, varTypes: {$f37: Node, $f11: Int, $f7: Int, $f10: Int, $f38: Node, $f40: Int, $f36: Int, $f8: Node, $f39: Int, $f9: Node} }
    ($f7, $f8, $f9, $f10, $f11):>> Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
     - Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
     - Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] calling make on Compose([AppliedId(id17: ($f31 -> $0, $f32 -> $1, $f33 -> $2, $f34 -> $3, $f35 -> $4))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f7, $f8, $f9, $f10, $f11}
[entry::chc] childId : id17, mapToS : $f31
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id17, mapToS : $f32
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id17, mapToS : $f33
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id17, mapToS : $f34
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id17, mapToS : $f35
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])
[entry::chc] get {$f7: Int, $f10: Int, $f11: Int, $f9: Node, $f8: Node}
[slotted_egraphs::parse] from (init min (pred <(int $5) (int $6) (int $7)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 min
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init min (pred (int $5) (int $6) (int $7)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("min")
[slotted_egraphs::egraph::add] ret (PredName("min"), ())
[entry::chc] calling make on PredName("min")
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id19
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredName("min")
[entry::chc] calling make on PredName("min")
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $5), id1: ($f0 -> $6), id1: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
[entry::chc] slots: {$f41, $f42, $f43}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f43 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
[entry::chc] get {$f42: Int, $f43: Int, $f41: Int}
[slotted_egraphs::egraph::add] classes insert id20
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f42: Int, $f43: Int, $f41: Int} }
    ($f41, $f42, $f43):>> PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
     - PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[entry::chc] calling make on PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f41, $f42, $f43}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f43 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
[entry::chc] get {$f41: Int, $f42: Int, $f43: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id19: (), id20: ($f41 -> $5, $f42 -> $6, $f43 -> $7))
[slotted_egraphs::egraph::add] ret (Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2)), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
[entry::chc] slots: {$f44, $f45, $f46}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f46 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
[entry::chc] get {$f46: Int, $f44: Int, $f45: Int}
[slotted_egraphs::egraph::add] classes insert id21
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"min"}, varTypes: {$f46: Int, $f44: Int, $f45: Int} }
    ($f44, $f45, $f46):>> Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
     - Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] exists in egraph
[entry::chc] slots: {$f44, $f45, $f46}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f46 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
[entry::chc] get {$f44: Int, $f45: Int, $f46: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id21 <-> (init min (pred (int $5) (int $6) (int $7)))
[slotted_egraphs::parse] from (new (pred <(int $5) (int $6) (int $7)>) (and <(lt (int $5) (int $6)) (eq (int $7) (int $5))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (int $5) (int $6))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $7) (int $5))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $5), id1: ($f0 -> $6), id1: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id1: ($f0 -> $5), id1: ($f0 -> $6))
[slotted_egraphs::egraph::add] ret (Less(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $5, $1 -> $6))
[entry::chc] calling make on Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
[entry::chc] slots: {$f47, $f48}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f48 to varTypes
[entry::chc] aggregateVarType for Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
[entry::chc] get {$f48: Int, $f47: Int}
[slotted_egraphs::egraph::add] classes insert id22
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f48: Int, $f47: Int} }
    ($f47, $f48):>> Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
     - Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Less(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] exists in egraph
[entry::chc] slots: {$f47, $f48}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f48 to varTypes
[entry::chc] aggregateVarType for Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
[entry::chc] get {$f48: Int, $f47: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (lt (int $5) (int $6))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $7), id1: ($f0 -> $5))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $7, $1 -> $5))
[entry::chc] calling make on Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
[entry::chc] slots: {$f49, $f50}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f49 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f50 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
[entry::chc] get {$f49: Int, $f50: Int}
[slotted_egraphs::egraph::add] classes insert id23
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f49: Int, $f50: Int} }
    ($f49, $f50):>> Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
     - Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] exists in egraph
[entry::chc] slots: {$f49, $f50}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f49 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f50 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
[entry::chc] get {$f49: Int, $f50: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $5))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id22: ($f47 -> $5, $f48 -> $6), id23: ($f49 -> $5, $f50 -> $7)])
[slotted_egraphs::egraph::add] ret (And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
[entry::chc] slots: {$f51, $f52, $f53}
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id22, mapToS : $f48
[entry::chc] adding $f52 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f53 to varTypes
[entry::chc] aggregateVarType for And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
[entry::chc] get {$f53: Int, $f52: Int, $f51: Int}
[slotted_egraphs::egraph::add] classes insert id24
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f53: Int, $f52: Int, $f51: Int} }
    ($f51, $f52, $f53):>> And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
     - And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)])
[entry::chc] calling make on And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f51, $f52, $f53}
[entry::chc] childId : id22, mapToS : $f47
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f51 to varTypes
[entry::chc] childId : id22, mapToS : $f48
[entry::chc] adding $f52 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f53 to varTypes
[entry::chc] aggregateVarType for And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
[entry::chc] get {$f53: Int, $f51: Int, $f52: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id20: ($f41 -> $5, $f42 -> $6, $f43 -> $7), id24: ($f51 -> $5, $f52 -> $6, $f53 -> $7), [])
[slotted_egraphs::egraph::add] ret (New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), []), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
[entry::chc] slots: {$f54, $f55, $f56}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id24, mapToS : $f52
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id24, mapToS : $f53
[entry::chc] adding $f56 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
[entry::chc] get {$f54: Int, $f55: Int, $f56: Int}
[slotted_egraphs::egraph::add] classes insert id25
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f54: Int, $f55: Int, $f56: Int} }
    ($f54, $f55, $f56):>> New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
     - New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f54, $f55, $f56}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id24, mapToS : $f52
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id24, mapToS : $f53
[entry::chc] adding $f56 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
[entry::chc] get {$f56: Int, $f54: Int, $f55: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id25 <-> (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::parse] from (interface min (pred <(int $5) (int $6) (int $7)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 min
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface min (pred (int $5) (int $6) (int $7)) 1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("min")
[slotted_egraphs::egraph::add] ret (PredName("min"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $5), id1: ($f0 -> $6), id1: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[entry::chc] calling make on Number(1)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id26
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[slotted_egraphs::egraph::rebuild] from update_analysis Number(1)
[entry::chc] calling make on Number(1)
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id19: (), id20: ($f41 -> $5, $f42 -> $6, $f43 -> $7), id26: ())
[slotted_egraphs::egraph::add] ret (Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ()), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
[entry::chc] slots: {$f57, $f58, $f59}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
[entry::chc] get {$f58: Int, $f59: Int, $f57: Int}
[slotted_egraphs::egraph::add] classes insert id27
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"min"}, varTypes: {$f58: Int, $f59: Int, $f57: Int} }
    ($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
     - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ())
[entry::chc] calling make on Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f57, $f58, $f59}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
[entry::chc] get {$f57: Int, $f58: Int, $f59: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (interface min (pred (int $5) (int $6) (int $7)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id25: ($f54 -> $5, $f55 -> $6, $f56 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f54: Int, $f55: Int, $f56: Int} }
    ($f54, $f55, $f56):>> New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
     - New(id20: ($f41 -> $f54, $f42 -> $f55, $f43 -> $f56), id24: ($f51 -> $f54, $f52 -> $f55, $f53 -> $f56), [])
    
[slotted_egraphs::egraph::union] r: id27: ($f57 -> $5, $f58 -> $6, $f59 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"min"}, varTypes: {$f58: Int, $f59: Int, $f57: Int} }
    ($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
     - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
    
[slotted_egraphs::egraph::union] Call move_to id25: ($f54 -> $5, $f55 -> $6, $f56 -> $7), id27: ($f57 -> $5, $f58 -> $6, $f59 -> $7)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f54: Int, $f55: Int, $f56: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"min"}, varTypes: {$f58: Int, $f59: Int, $f57: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"min"}, varTypes: {$f54: Int, $f55: Int, $f58: Int, $f59: Int, $f57: Int, $f56: Int} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"min"}, varTypes: {$f54: Int, $f55: Int, $f58: Int, $f59: Int, $f57: Int, $f56: Int} }
    ($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
     - New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
     - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f57, $f58, $f59}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id24, mapToS : $f51
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id24, mapToS : $f52
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f59 to varTypes
[entry::chc] childId : id24, mapToS : $f53
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
[entry::chc] get {$f59: Int, $f58: Int, $f57: Int}
[slotted_egraphs::parse] from (new (pred <(int $5) (int $6) (int $7)>) (and <(lt (int $5) (int $6)) (eq (int $7) (int $5))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (int $5) (int $6))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $7) (int $5))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $5), id1: ($f0 -> $6), id1: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id1: ($f0 -> $5), id1: ($f0 -> $6))
[slotted_egraphs::egraph::add] ret (Less(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $5, $1 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (lt (int $5) (int $6))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $7), id1: ($f0 -> $5))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $7, $1 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $5))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id22: ($f47 -> $5, $f48 -> $6), id23: ($f49 -> $5, $f50 -> $7)])
[slotted_egraphs::egraph::add] ret (And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id20: ($f41 -> $5, $f42 -> $6, $f43 -> $7), id24: ($f51 -> $5, $f52 -> $6, $f53 -> $7), [])
[slotted_egraphs::egraph::add] ret (New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), []), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::parse] from (interface min (pred <(int $5) (int $6) (int $7)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 min
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface min (pred (int $5) (int $6) (int $7)) 1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("min")
[slotted_egraphs::egraph::add] ret (PredName("min"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $5), id1: ($f0 -> $6), id1: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id19: (), id20: ($f41 -> $5, $f42 -> $6, $f43 -> $7), id26: ())
[slotted_egraphs::egraph::add] ret (Interface(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id26: ()), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (interface min (pred (int $5) (int $6) (int $7)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id27: ($f57 -> $5, $f58 -> $6, $f59 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"min"}, varTypes: {$f54: Int, $f55: Int, $f58: Int, $f59: Int, $f57: Int, $f56: Int} }
    ($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
     - New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
     - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
    
[slotted_egraphs::egraph::union] r: id27: ($f57 -> $5, $f58 -> $6, $f59 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"min"}, varTypes: {$f54: Int, $f55: Int, $f58: Int, $f59: Int, $f57: Int, $f56: Int} }
    ($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
     - New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
     - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
    
[slotted_egraphs::parse] from (compose <(new (pred <(int $5) (int $6) (int $7)>) (and <(lt (int $5) (int $6)) (eq (int $7) (int $5))>) <>) (new (pred <(int $5) (int $6) (int $7)>) (and <(geq (int $5) (int $6)) (eq (int $7) (int $6))>) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (int $5) (int $6))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($5), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $7) (int $5))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $5) (int $6))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($7), RParen, LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $7) (int $6))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (geq (int $5) (int $6)) (eq (int $7) (int $6)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $5) (int $6) (int $7)) (and (geq (int $5) (int $6)) (eq (int $7) (int $6))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))) (new (pred (int $5) (int $6) (int $7)) (and (geq (int $5) (int $6)) (eq (int $7) (int $6)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $5), id1: ($f0 -> $6), id1: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id1: ($f0 -> $5), id1: ($f0 -> $6))
[slotted_egraphs::egraph::add] ret (Less(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $5, $1 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (lt (int $5) (int $6))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $7), id1: ($f0 -> $5))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $7, $1 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $5))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id22: ($f47 -> $5, $f48 -> $6), id23: ($f49 -> $5, $f50 -> $7)])
[slotted_egraphs::egraph::add] ret (And([id22: ($f47 -> $0, $f48 -> $1), id23: ($f49 -> $0, $f50 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id20: ($f41 -> $5, $f42 -> $6, $f43 -> $7), id24: ($f51 -> $5, $f52 -> $6, $f53 -> $7), [])
[slotted_egraphs::egraph::add] ret (New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id24: ($f51 -> $0, $f52 -> $1, $f53 -> $2), []), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5))))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $5), id1: ($f0 -> $6), id1: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $5), id1: ($f0 -> $6))
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $5, $1 -> $6))
[entry::chc] calling make on Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
[entry::chc] get {$f60: Int, $f61: Int}
[slotted_egraphs::egraph::add] classes insert id28
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
     - Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id1: ($f0 -> $1))
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
[entry::chc] get {$f60: Int, $f61: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id28 <-> (geq (int $5) (int $6))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $7), id1: ($f0 -> $6))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $7, $1 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> (eq (int $7) (int $6))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id28: ($f60 -> $5, $f61 -> $6), id23: ($f49 -> $6, $f50 -> $7)])
[slotted_egraphs::egraph::add] ret (And([id28: ($f60 -> $0, $f61 -> $1), id23: ($f49 -> $1, $f50 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
[entry::chc] slots: {$f62, $f63, $f64}
[entry::chc] childId : id28, mapToS : $f60
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id28, mapToS : $f61
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f64 to varTypes
[entry::chc] aggregateVarType for And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
[entry::chc] get {$f64: Int, $f63: Int, $f62: Int}
[slotted_egraphs::egraph::add] classes insert id29
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f64: Int, $f63: Int, $f62: Int} }
    ($f62, $f63, $f64):>> And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
     - And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id28: ($f60 -> $0, $f61 -> $1), id23: ($f49 -> $1, $f50 -> $2)])
[entry::chc] calling make on And([id28: ($f60 -> $0, $f61 -> $1), id23: ($f49 -> $1, $f50 -> $2)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f62, $f63, $f64}
[entry::chc] childId : id28, mapToS : $f60
[entry::chc] adding $f62 to varTypes
[entry::chc] childId : id28, mapToS : $f61
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f49
[entry::chc] adding $f63 to varTypes
[entry::chc] childId : id23, mapToS : $f50
[entry::chc] adding $f64 to varTypes
[entry::chc] aggregateVarType for And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
[entry::chc] get {$f63: Int, $f64: Int, $f62: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id29 <-> (and (geq (int $5) (int $6)) (eq (int $7) (int $6)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id20: ($f41 -> $5, $f42 -> $6, $f43 -> $7), id29: ($f62 -> $5, $f63 -> $6, $f64 -> $7), [])
[slotted_egraphs::egraph::add] ret (New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id29: ($f62 -> $0, $f63 -> $1, $f64 -> $2), []), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[entry::chc] slots: {$f65, $f66, $f67}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id29, mapToS : $f62
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id29, mapToS : $f63
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f67 to varTypes
[entry::chc] childId : id29, mapToS : $f64
[entry::chc] adding $f67 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[entry::chc] get {$f65: Int, $f66: Int, $f67: Int}
[slotted_egraphs::egraph::add] classes insert id30
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f65: Int, $f66: Int, $f67: Int} }
    ($f65, $f66, $f67):>> New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
     - New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id29: ($f62 -> $0, $f63 -> $1, $f64 -> $2), [])
[entry::chc] calling make on New(id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2), id29: ($f62 -> $0, $f63 -> $1, $f64 -> $2), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f65, $f66, $f67}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id29, mapToS : $f62
[entry::chc] adding $f65 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id29, mapToS : $f63
[entry::chc] adding $f66 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f67 to varTypes
[entry::chc] childId : id29, mapToS : $f64
[entry::chc] adding $f67 to varTypes
[entry::chc] aggregateVarType for New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
[entry::chc] get {$f65: Int, $f66: Int, $f67: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id30 <-> (new (pred (int $5) (int $6) (int $7)) (and (geq (int $5) (int $6)) (eq (int $7) (int $6))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id27: ($f57 -> $5, $f58 -> $6, $f59 -> $7)), AppliedId(id30: ($f65 -> $5, $f66 -> $6, $f67 -> $7))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2)), AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2))]), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[entry::chc] slots: {$f68, $f69, $f70}
[entry::chc] childId : id27, mapToS : $f57
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id30, mapToS : $f65
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id30, mapToS : $f66
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] adding $f70 to varTypes
[entry::chc] childId : id30, mapToS : $f67
[entry::chc] adding $f70 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[entry::chc] get {$f70: Int, $f68: Int, $f69: Int}
[slotted_egraphs::egraph::add] classes insert id31
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f70: Int, $f68: Int, $f69: Int} }
    ($f68, $f69, $f70):>> Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
     - Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2)), AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id27: ($f57 -> $0, $f58 -> $1, $f59 -> $2)), AppliedId(id30: ($f65 -> $0, $f66 -> $1, $f67 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f68, $f69, $f70}
[entry::chc] childId : id27, mapToS : $f57
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id30, mapToS : $f65
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id27, mapToS : $f58
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id30, mapToS : $f66
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id27, mapToS : $f59
[entry::chc] adding $f70 to varTypes
[entry::chc] childId : id30, mapToS : $f67
[entry::chc] adding $f70 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
[entry::chc] get {$f70: Int, $f69: Int, $f68: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> (compose (new (pred (int $5) (int $6) (int $7)) (and (lt (int $5) (int $6)) (eq (int $7) (int $5)))) (new (pred (int $5) (int $6) (int $7)) (and (geq (int $5) (int $6)) (eq (int $7) (int $6)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id21: ($f44 -> $5, $f45 -> $6, $f46 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"min"}, varTypes: {$f46: Int, $f44: Int, $f45: Int} }
    ($f44, $f45, $f46):>> Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
     - Init(id19: (), id20: ($f41 -> $f44, $f42 -> $f45, $f43 -> $f46))
    
[slotted_egraphs::egraph::union] r: id31: ($f68 -> $5, $f69 -> $6, $f70 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f70: Int, $f68: Int, $f69: Int} }
    ($f68, $f69, $f70):>> Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
     - Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
    
[slotted_egraphs::egraph::union] Call move_to id21: ($f44 -> $5, $f45 -> $6, $f46 -> $7), id31: ($f68 -> $5, $f69 -> $6, $f70 -> $7)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {"min"}, varTypes: {$f46: Int, $f44: Int, $f45: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f70: Int, $f68: Int, $f69: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"min"}, varTypes: {$f69: Int, $f44: Int, $f70: Int, $f68: Int, $f46: Int, $f45: Int} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"min"}, varTypes: {$f69: Int, $f44: Int, $f70: Int, $f68: Int, $f46: Int, $f45: Int} }
    ($f68, $f69, $f70):>> Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
     - Init(id19: (), id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70))
     - Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] calling make on Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2))
[entry::chc] exists in egraph
[entry::chc] slots: {$f68, $f69, $f70}
[entry::chc] childId : id20, mapToS : $f41
[entry::chc] adding $f68 to varTypes
[entry::chc] childId : id20, mapToS : $f42
[entry::chc] adding $f69 to varTypes
[entry::chc] childId : id20, mapToS : $f43
[entry::chc] adding $f70 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70))
[entry::chc] get {$f68: Int, $f70: Int, $f69: Int}
[slotted_egraphs::parse] from (init leafDrop (pred <(int $8) (node $9) (node $10)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id11: (), id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10))
[slotted_egraphs::egraph::add] ret (Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2)), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::parse] from (new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (leaf)) (eq (node $10) (leaf))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $9) leaf)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $10) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $9) leaf) (eq (node $10) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[entry::chc] calling make on Leaf
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id32
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[slotted_egraphs::egraph::rebuild] from update_analysis Leaf
[entry::chc] calling make on Leaf
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $9), id32: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id32: ()), ($0 -> $9))
[entry::chc] calling make on Eq(id2: ($f1 -> $f71), id32: ())
[entry::chc] slots: {$f71}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f71 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f71), id32: ())
[entry::chc] get {$f71: Node}
[slotted_egraphs::egraph::add] classes insert id33
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f71: Node} }
    ($f71):>> Eq(id2: ($f1 -> $f71), id32: ())
     - Eq(id2: ($f1 -> $f71), id32: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Eq(id2: ($f1 -> $0), id32: ())
[entry::chc] calling make on Eq(id2: ($f1 -> $0), id32: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f71}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f71 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f71), id32: ())
[entry::chc] get {$f71: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $9) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $10), id32: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id32: ()), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $10) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id33: ($f71 -> $9), id33: ($f71 -> $10)])
[slotted_egraphs::egraph::add] ret (And([id33: ($f71 -> $0), id33: ($f71 -> $1)]), ($0 -> $9, $1 -> $10))
[entry::chc] calling make on And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
[entry::chc] slots: {$f72, $f73}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f72 to varTypes
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f73 to varTypes
[entry::chc] aggregateVarType for And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
[entry::chc] get {$f72: Node, $f73: Node}
[slotted_egraphs::egraph::add] classes insert id34
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f72: Node, $f73: Node} }
    ($f72, $f73):>> And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
     - And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id33: ($f71 -> $0), id33: ($f71 -> $1)])
[entry::chc] calling make on And([id33: ($f71 -> $0), id33: ($f71 -> $1)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f72, $f73}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f72 to varTypes
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f73 to varTypes
[entry::chc] aggregateVarType for And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
[entry::chc] get {$f73: Node, $f72: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id34 <-> (and (eq (node $9) leaf) (eq (node $10) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id34: ($f72 -> $9, $f73 -> $10), [])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), []), ($0 -> $8, $1 -> $9, $2 -> $10))
[entry::chc] calling make on New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] slots: {$f74, $f75, $f76}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id34, mapToS : $f72
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id34, mapToS : $f73
[entry::chc] adding $f76 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] get {$f74: Int, $f75: Node, $f76: Node}
[slotted_egraphs::egraph::add] classes insert id35
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f74: Int, $f75: Node, $f76: Node} }
    ($f74, $f75, $f76):>> New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
     - New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f74, $f75, $f76}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id34, mapToS : $f72
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id34, mapToS : $f73
[entry::chc] adding $f76 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
[entry::chc] get {$f74: Int, $f75: Node, $f76: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id35 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf)))
[slotted_egraphs::parse] from (interface leafDrop (pred <(int $8) (node $9) (node $10)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface leafDrop (pred (int $8) (node $9) (node $10)) 1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id11: (), id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id26: ())
[slotted_egraphs::egraph::add] ret (Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id26: ()), ($0 -> $8, $1 -> $9, $2 -> $10))
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
[entry::chc] slots: {$f77, $f78, $f79}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
[entry::chc] get {$f79: Node, $f77: Int, $f78: Node}
[slotted_egraphs::egraph::add] classes insert id36
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f79: Node, $f77: Int, $f78: Node} }
    ($f77, $f78, $f79):>> Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
     - Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id26: ())
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id26: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f77, $f78, $f79}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
[entry::chc] get {$f78: Node, $f79: Node, $f77: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (interface leafDrop (pred (int $8) (node $9) (node $10)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id35: ($f74 -> $8, $f75 -> $9, $f76 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f74: Int, $f75: Node, $f76: Node} }
    ($f74, $f75, $f76):>> New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
     - New(id12: ($f21 -> $f74, $f22 -> $f75, $f23 -> $f76), id34: ($f72 -> $f75, $f73 -> $f76), [])
    
[slotted_egraphs::egraph::union] r: id36: ($f77 -> $8, $f78 -> $9, $f79 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f79: Node, $f77: Int, $f78: Node} }
    ($f77, $f78, $f79):>> Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
     - Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
    
[slotted_egraphs::egraph::union] Call move_to id35: ($f74 -> $8, $f75 -> $9, $f76 -> $10), id36: ($f77 -> $8, $f78 -> $9, $f79 -> $10)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f74: Int, $f75: Node, $f76: Node} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f79: Node, $f77: Int, $f78: Node} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f74: Int, $f76: Node, $f79: Node, $f77: Int, $f75: Node, $f78: Node} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f74: Int, $f76: Node, $f79: Node, $f77: Int, $f75: Node, $f78: Node} }
    ($f77, $f78, $f79):>> Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
     - Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
     - New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f77, $f78, $f79}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id34, mapToS : $f72
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f79 to varTypes
[entry::chc] childId : id34, mapToS : $f73
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
[entry::chc] get {$f77: Int, $f78: Node, $f79: Node}
[slotted_egraphs::parse] from (new (pred <(int $8) (node $9) (node $10)>) (and <(leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (leq (int $8) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $13)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($11)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $11)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($12)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $12)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $13) (node $11) (node $12))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $9) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $13)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($11)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $11)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($12)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $12)
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $13) (node $11) (node $12))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $10) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Leq(id1: ($f0 -> $8), id6: ())
[slotted_egraphs::egraph::add] ret (Leq(id1: ($f0 -> $0), id6: ()), ($0 -> $8))
[entry::chc] calling make on Leq(id1: ($f0 -> $f80), id6: ())
[entry::chc] slots: {$f80}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f80 to varTypes
[entry::chc] aggregateVarType for Leq(id1: ($f0 -> $f80), id6: ())
[entry::chc] get {$f80: Int}
[slotted_egraphs::egraph::add] classes insert id37
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f80: Int} }
    ($f80):>> Leq(id1: ($f0 -> $f80), id6: ())
     - Leq(id1: ($f0 -> $f80), id6: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Leq(id1: ($f0 -> $0), id6: ())
[entry::chc] calling make on Leq(id1: ($f0 -> $0), id6: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f80}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f80 to varTypes
[entry::chc] aggregateVarType for Leq(id1: ($f0 -> $f80), id6: ())
[entry::chc] get {$f80: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (leq (int $8) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($13)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($11)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $11))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($12)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $12))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $13), id2: ($f1 -> $11), id2: ($f1 -> $12))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $13, $1 -> $11, $2 -> $12))
[entry::chc] calling make on BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
[entry::chc] slots: {$f81, $f82, $f83}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f81 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f83 to varTypes
[entry::chc] aggregateVarType for BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
[entry::chc] get {$f82: Node, $f83: Int, $f81: Node}
[slotted_egraphs::egraph::add] classes insert id38
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f82: Node, $f83: Int, $f81: Node} }
    ($f81, $f82, $f83):>> BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
     - BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
    
[slotted_egraphs::egraph::rebuild] from update_analysis BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[entry::chc] calling make on BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2))
[entry::chc] exists in egraph
[entry::chc] slots: {$f81, $f82, $f83}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f81 to varTypes
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f83 to varTypes
[entry::chc] aggregateVarType for BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
[entry::chc] get {$f81: Node, $f82: Node, $f83: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $9), id38: ($f81 -> $11, $f82 -> $12, $f83 -> $13))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3)), ($0 -> $9, $1 -> $11, $2 -> $12, $3 -> $13))
[entry::chc] calling make on Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
[entry::chc] slots: {$f84, $f85, $f86, $f87}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id38, mapToS : $f81
[entry::chc] adding $f85 to varTypes
[entry::chc] childId : id38, mapToS : $f82
[entry::chc] adding $f86 to varTypes
[entry::chc] childId : id38, mapToS : $f83
[entry::chc] adding $f87 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
[entry::chc] get {$f85: Node, $f86: Node, $f87: Int, $f84: Node}
[slotted_egraphs::egraph::add] classes insert id39
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f85: Node, $f86: Node, $f87: Int, $f84: Node} }
    ($f84, $f85, $f86, $f87):>> Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
     - Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3))
[entry::chc] calling make on Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3))
[entry::chc] exists in egraph
[entry::chc] slots: {$f84, $f85, $f86, $f87}
[entry::chc] childId : id2, mapToS : $f1
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id38, mapToS : $f81
[entry::chc] adding $f85 to varTypes
[entry::chc] childId : id38, mapToS : $f82
[entry::chc] adding $f86 to varTypes
[entry::chc] childId : id38, mapToS : $f83
[entry::chc] adding $f87 to varTypes
[entry::chc] aggregateVarType for Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
[entry::chc] get {$f86: Node, $f87: Int, $f85: Node, $f84: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($13)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($11)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $11))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($12)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $12))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $13), id2: ($f1 -> $11), id2: ($f1 -> $12))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $13, $1 -> $11, $2 -> $12))
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $10), id38: ($f81 -> $11, $f82 -> $12, $f83 -> $13))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3)), ($0 -> $10, $1 -> $11, $2 -> $12, $3 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $10) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id37: ($f80 -> $8), id39: ($f84 -> $9, $f85 -> $11, $f86 -> $12, $f87 -> $13), id39: ($f84 -> $10, $f85 -> $11, $f86 -> $12, $f87 -> $13)])
[slotted_egraphs::egraph::add] ret (And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)]), ($0 -> $8, $1 -> $9, $2 -> $11, $3 -> $12, $4 -> $13, $5 -> $10))
[entry::chc] calling make on And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
[entry::chc] slots: {$f88, $f89, $f90, $f91, $f92, $f93}
[entry::chc] childId : id37, mapToS : $f80
[entry::chc] adding $f88 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f89 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f90 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] aggregateVarType for And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
[entry::chc] get {$f91: Node, $f89: Node, $f92: Node, $f93: Int, $f88: Int, $f90: Node}
[slotted_egraphs::egraph::add] classes insert id40
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f91: Node, $f89: Node, $f92: Node, $f93: Int, $f88: Int, $f90: Node} }
    ($f88, $f89, $f90, $f91, $f92, $f93):>> And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
     - And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)])
[entry::chc] calling make on And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f88, $f89, $f90, $f91, $f92, $f93}
[entry::chc] childId : id37, mapToS : $f80
[entry::chc] adding $f88 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f89 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f90 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f91 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f92 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f93 to varTypes
[entry::chc] aggregateVarType for And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
[entry::chc] get {$f92: Node, $f90: Node, $f93: Int, $f89: Node, $f88: Int, $f91: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id40: ($f88 -> $8, $f89 -> $9, $f90 -> $10, $f91 -> $11, $f92 -> $12, $f93 -> $13), [])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), []), ($0 -> $8, $1 -> $9, $2 -> $10, $3 -> $11, $4 -> $12, $5 -> $13))
[entry::chc] calling make on New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
[entry::chc] slots: {$f94, $f95, $f96, $f97, $f98, $f99}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id40, mapToS : $f88
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id40, mapToS : $f89
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f90
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f91
[entry::chc] adding $f97 to varTypes
[entry::chc] childId : id40, mapToS : $f92
[entry::chc] adding $f98 to varTypes
[entry::chc] childId : id40, mapToS : $f93
[entry::chc] adding $f99 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
[entry::chc] get {$f97: Node, $f98: Node, $f96: Node, $f95: Node, $f99: Int, $f94: Int}
[slotted_egraphs::egraph::add] classes insert id41
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f97: Node, $f98: Node, $f96: Node, $f95: Node, $f99: Int, $f94: Int} }
    ($f94, $f95, $f96, $f97, $f98, $f99):>> New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
     - New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f94, $f95, $f96, $f97, $f98, $f99}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id40, mapToS : $f88
[entry::chc] adding $f94 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id40, mapToS : $f89
[entry::chc] adding $f95 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f90
[entry::chc] adding $f96 to varTypes
[entry::chc] childId : id40, mapToS : $f91
[entry::chc] adding $f97 to varTypes
[entry::chc] childId : id40, mapToS : $f92
[entry::chc] adding $f98 to varTypes
[entry::chc] childId : id40, mapToS : $f93
[entry::chc] adding $f99 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
[entry::chc] get {$f98: Node, $f95: Node, $f94: Int, $f99: Int, $f97: Node, $f96: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id41 <-> (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))))
[slotted_egraphs::parse] from (interface leafDrop (pred <(int $8) (node $9) (node $10)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 2
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface leafDrop (pred (int $8) (node $9) (node $10)) 2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(2)
[slotted_egraphs::egraph::add] ret (Number(2), ())
[entry::chc] calling make on Number(2)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id42
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[slotted_egraphs::egraph::rebuild] from update_analysis Number(2)
[entry::chc] calling make on Number(2)
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id11: (), id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id42: ())
[slotted_egraphs::egraph::add] ret (Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id42: ()), ($0 -> $8, $1 -> $9, $2 -> $10))
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
[entry::chc] slots: {$f100, $f101, $f102}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f102 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
[entry::chc] get {$f100: Int, $f101: Node, $f102: Node}
[slotted_egraphs::egraph::add] classes insert id43
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f100: Int, $f101: Node, $f102: Node} }
    ($f100, $f101, $f102):>> Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
     - Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id42: ())
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id42: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f100, $f101, $f102}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f102 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
[entry::chc] get {$f101: Node, $f100: Int, $f102: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id43 <-> (interface leafDrop (pred (int $8) (node $9) (node $10)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id41: ($f94 -> $8, $f95 -> $9, $f96 -> $10, $f97 -> $11, $f98 -> $12, $f99 -> $13)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f97: Node, $f98: Node, $f96: Node, $f95: Node, $f99: Int, $f94: Int} }
    ($f94, $f95, $f96, $f97, $f98, $f99):>> New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
     - New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
    
[slotted_egraphs::egraph::union] r: id43: ($f100 -> $8, $f101 -> $9, $f102 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f100: Int, $f101: Node, $f102: Node} }
    ($f100, $f101, $f102):>> Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
     - Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id41: ($f94 -> $8, $f95 -> $9, $f96 -> $10, $f97 -> $11, $f98 -> $12, $f99 -> $13)
[slotted_egraphs::egraph::rebuild] cap {$8, $9, $10}
[slotted_egraphs::egraph::rebuild] origcap {$f94, $f95, $f96}
[slotted_egraphs::egraph::rebuild] new cap {$f94, $f95, $f96}
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id41: ($f94 -> $8, $f95 -> $9, $f96 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f97: Node, $f98: Node, $f96: Node, $f95: Node, $f99: Int, $f94: Int} }
    ($f94, $f95, $f96):>> New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
     - New(id12: ($f21 -> $f94, $f22 -> $f95, $f23 -> $f96), id40: ($f88 -> $f94, $f89 -> $f95, $f90 -> $f96, $f91 -> $f97, $f92 -> $f98, $f93 -> $f99), [])
    
[slotted_egraphs::egraph::union] r: id43: ($f100 -> $8, $f101 -> $9, $f102 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f100: Int, $f101: Node, $f102: Node} }
    ($f100, $f101, $f102):>> Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
     - Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
    
[slotted_egraphs::egraph::union] Call move_to id41: ($f94 -> $8, $f95 -> $9, $f96 -> $10), id43: ($f100 -> $8, $f101 -> $9, $f102 -> $10)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f97: Node, $f98: Node, $f96: Node, $f95: Node, $f99: Int, $f94: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f100: Int, $f101: Node, $f102: Node} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f94: Int, $f96: Node, $f95: Node, $f101: Node, $f97: Node, $f102: Node, $f100: Int, $f99: Int, $f98: Node} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f94: Int, $f96: Node, $f95: Node, $f101: Node, $f97: Node, $f102: Node, $f100: Int, $f99: Int, $f98: Node} }
    ($f100, $f101, $f102):>> Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
     - Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
     - New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f103, $f92 -> $f104, $f93 -> $f105), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f100, $f101, $f102, $f103, $f104, $f105}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id40, mapToS : $f88
[entry::chc] adding $f100 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id40, mapToS : $f89
[entry::chc] adding $f101 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f102 to varTypes
[entry::chc] childId : id40, mapToS : $f90
[entry::chc] adding $f102 to varTypes
[entry::chc] childId : id40, mapToS : $f91
[entry::chc] adding $f103 to varTypes
[entry::chc] childId : id40, mapToS : $f92
[entry::chc] adding $f104 to varTypes
[entry::chc] childId : id40, mapToS : $f93
[entry::chc] adding $f105 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f103, $f92 -> $f104, $f93 -> $f105), [])
[entry::chc] get {$f105: Int, $f104: Node, $f101: Node, $f102: Node, $f103: Node, $f100: Int}
[slotted_egraphs::parse] from (new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))>) <(init leafDrop (pred <(int $8) (node $9) (node $10)>))>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $16)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($14)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $14)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $15)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $16) (node $14) (node $15))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $9) (binode (int $16) (node $14) (node $15)))
[slotted_egraphs::parse] left tokens [LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $8) 1)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $17)
[slotted_egraphs::parse] left tokens [LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("-"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (- (int $8) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $17) (- (int $8) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($16)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $16)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($14)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $14))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $14)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($15)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $15))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $15)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $16), id2: ($f1 -> $14), id2: ($f1 -> $15))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $16, $1 -> $14, $2 -> $15))
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $16) (node $14) (node $15))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $9), id38: ($f81 -> $14, $f82 -> $15, $f83 -> $16))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3)), ($0 -> $9, $1 -> $14, $2 -> $15, $3 -> $16))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $16) (node $14) (node $15)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $8), id26: ())
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id26: ()), ($0 -> $8))
[entry::chc] calling make on Geq(id1: ($f0 -> $f109), id26: ())
[entry::chc] slots: {$f109}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f109 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f109), id26: ())
[entry::chc] get {$f109: Int}
[slotted_egraphs::egraph::add] classes insert id44
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f109: Int} }
    ($f109):>> Geq(id1: ($f0 -> $f109), id26: ())
     - Geq(id1: ($f0 -> $f109), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Geq(id1: ($f0 -> $0), id26: ())
[entry::chc] calling make on Geq(id1: ($f0 -> $0), id26: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f109}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f109 to varTypes
[entry::chc] aggregateVarType for Geq(id1: ($f0 -> $f109), id26: ())
[entry::chc] get {$f109: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id44 <-> (geq (int $8) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($17)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $17)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Minus(id1: ($f0 -> $8), id26: ())
[slotted_egraphs::egraph::add] ret (Minus(id1: ($f0 -> $0), id26: ()), ($0 -> $8))
[entry::chc] calling make on Minus(id1: ($f0 -> $f110), id26: ())
[entry::chc] slots: {$f110}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f110 to varTypes
[entry::chc] aggregateVarType for Minus(id1: ($f0 -> $f110), id26: ())
[entry::chc] get {$f110: Int}
[slotted_egraphs::egraph::add] classes insert id45
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f110: Int} }
    ($f110):>> Minus(id1: ($f0 -> $f110), id26: ())
     - Minus(id1: ($f0 -> $f110), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Minus(id1: ($f0 -> $0), id26: ())
[entry::chc] calling make on Minus(id1: ($f0 -> $0), id26: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f110}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f110 to varTypes
[entry::chc] aggregateVarType for Minus(id1: ($f0 -> $f110), id26: ())
[entry::chc] get {$f110: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id45 <-> (- (int $8) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $17), id45: ($f110 -> $8))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id45: ($f110 -> $1)), ($0 -> $17, $1 -> $8))
[entry::chc] calling make on Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
[entry::chc] slots: {$f111, $f112}
[entry::chc] childId : id45, mapToS : $f110
[entry::chc] adding $f111 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f112 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
[entry::chc] get {$f111: Int, $f112: Int}
[slotted_egraphs::egraph::add] classes insert id46
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f111: Int, $f112: Int} }
    ($f111, $f112):>> Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
     - Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Eq(id1: ($f0 -> $0), id45: ($f110 -> $1))
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id45: ($f110 -> $1))
[entry::chc] exists in egraph
[entry::chc] slots: {$f111, $f112}
[entry::chc] childId : id45, mapToS : $f110
[entry::chc] adding $f111 to varTypes
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f112 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
[entry::chc] get {$f111: Int, $f112: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id46 <-> (eq (int $17) (- (int $8) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id39: ($f84 -> $9, $f85 -> $14, $f86 -> $15, $f87 -> $16), id44: ($f109 -> $8), id46: ($f111 -> $8, $f112 -> $17)])
[slotted_egraphs::egraph::add] ret (And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)]), ($0 -> $9, $1 -> $14, $2 -> $15, $3 -> $16, $4 -> $8, $5 -> $17))
[entry::chc] calling make on And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
[entry::chc] slots: {$f113, $f114, $f115, $f116, $f117, $f118}
[entry::chc] childId : id44, mapToS : $f109
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id46, mapToS : $f111
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f114 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f115 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f116 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f117 to varTypes
[entry::chc] childId : id46, mapToS : $f112
[entry::chc] adding $f118 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
[entry::chc] get {$f118: Int, $f117: Int, $f114: Node, $f115: Node, $f116: Node, $f113: Int}
[slotted_egraphs::egraph::add] classes insert id47
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f118: Int, $f117: Int, $f114: Node, $f115: Node, $f116: Node, $f113: Int} }
    ($f113, $f114, $f115, $f116, $f117, $f118):>> And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
     - And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)])
[entry::chc] calling make on And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f113, $f114, $f115, $f116, $f117, $f118}
[entry::chc] childId : id44, mapToS : $f109
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id46, mapToS : $f111
[entry::chc] adding $f113 to varTypes
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f114 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f115 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f116 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f117 to varTypes
[entry::chc] childId : id46, mapToS : $f112
[entry::chc] adding $f118 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
[entry::chc] get {$f115: Node, $f114: Node, $f116: Node, $f117: Int, $f113: Int, $f118: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id47 <-> (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id11: (), id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10))
[slotted_egraphs::egraph::add] ret (Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2)), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id47: ($f113 -> $8, $f114 -> $9, $f115 -> $14, $f116 -> $15, $f117 -> $16, $f118 -> $17), [AppliedId(id13: ($f24 -> $8, $f25 -> $9, $f26 -> $10))])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))]), ($0 -> $8, $1 -> $9, $2 -> $10, $3 -> $14, $4 -> $15, $5 -> $16, $6 -> $17))
[entry::chc] calling make on New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
[entry::chc] slots: {$f119, $f120, $f121, $f122, $f123, $f124, $f125}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id47, mapToS : $f113
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id47, mapToS : $f114
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id47, mapToS : $f115
[entry::chc] adding $f122 to varTypes
[entry::chc] childId : id47, mapToS : $f116
[entry::chc] adding $f123 to varTypes
[entry::chc] childId : id47, mapToS : $f117
[entry::chc] adding $f124 to varTypes
[entry::chc] childId : id47, mapToS : $f118
[entry::chc] adding $f125 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
[entry::chc] get {$f125: Int, $f123: Node, $f120: Node, $f121: Node, $f119: Int, $f122: Node, $f124: Int}
[slotted_egraphs::egraph::add] classes insert id48
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f125: Int, $f123: Node, $f120: Node, $f121: Node, $f119: Int, $f122: Node, $f124: Int} }
    ($f119, $f120, $f121, $f122, $f123, $f124, $f125):>> New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
     - New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f119, $f120, $f121, $f122, $f123, $f124, $f125}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id47, mapToS : $f113
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f119 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id47, mapToS : $f114
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f120 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f121 to varTypes
[entry::chc] childId : id47, mapToS : $f115
[entry::chc] adding $f122 to varTypes
[entry::chc] childId : id47, mapToS : $f116
[entry::chc] adding $f123 to varTypes
[entry::chc] childId : id47, mapToS : $f117
[entry::chc] adding $f124 to varTypes
[entry::chc] childId : id47, mapToS : $f118
[entry::chc] adding $f125 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
[entry::chc] get {$f121: Node, $f119: Int, $f124: Int, $f122: Node, $f125: Int, $f120: Node, $f123: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id48 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10))))
[slotted_egraphs::parse] from (interface leafDrop (pred <(int $8) (node $9) (node $10)>) 3)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("3"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("3"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("3"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, Ident("3"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("3"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [Ident("3"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 3
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface leafDrop (pred (int $8) (node $9) (node $10)) 3)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(3)
[slotted_egraphs::egraph::add] ret (Number(3), ())
[entry::chc] calling make on Number(3)
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(3)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id49
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(3)
     - Number(3)
    
[slotted_egraphs::egraph::rebuild] from update_analysis Number(3)
[entry::chc] calling make on Number(3)
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(3)
[entry::chc] get {}
[slotted_egraphs::egraph::add] add_syn_expr: id49 <-> 3
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id11: (), id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id49: ())
[slotted_egraphs::egraph::add] ret (Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id49: ()), ($0 -> $8, $1 -> $9, $2 -> $10))
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
[entry::chc] slots: {$f126, $f127, $f128}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f128 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
[entry::chc] get {$f128: Node, $f127: Node, $f126: Int}
[slotted_egraphs::egraph::add] classes insert id50
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f128: Node, $f127: Node, $f126: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id49: ())
[entry::chc] calling make on Interface(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id49: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f126, $f127, $f128}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f128 to varTypes
[entry::chc] aggregateVarType for Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
[entry::chc] get {$f128: Node, $f127: Node, $f126: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id50 <-> (interface leafDrop (pred (int $8) (node $9) (node $10)) 3)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id48: ($f119 -> $8, $f120 -> $9, $f121 -> $10, $f122 -> $14, $f123 -> $15, $f124 -> $16, $f125 -> $17)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f125: Int, $f123: Node, $f120: Node, $f121: Node, $f119: Int, $f122: Node, $f124: Int} }
    ($f119, $f120, $f121, $f122, $f123, $f124, $f125):>> New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
     - New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
    
[slotted_egraphs::egraph::union] r: id50: ($f126 -> $8, $f127 -> $9, $f128 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f128: Node, $f127: Node, $f126: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id48: ($f119 -> $8, $f120 -> $9, $f121 -> $10, $f122 -> $14, $f123 -> $15, $f124 -> $16, $f125 -> $17)
[slotted_egraphs::egraph::rebuild] cap {$8, $9, $10}
[slotted_egraphs::egraph::rebuild] origcap {$f119, $f120, $f121}
[slotted_egraphs::egraph::rebuild] new cap {$f119, $f120, $f121}
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id48: ($f119 -> $8, $f120 -> $9, $f121 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f125: Int, $f123: Node, $f120: Node, $f121: Node, $f119: Int, $f122: Node, $f124: Int} }
    ($f119, $f120, $f121):>> New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
     - New(id12: ($f21 -> $f119, $f22 -> $f120, $f23 -> $f121), id47: ($f113 -> $f119, $f114 -> $f120, $f115 -> $f122, $f116 -> $f123, $f117 -> $f124, $f118 -> $f125), [AppliedId(id13: ($f24 -> $f119, $f25 -> $f120, $f26 -> $f121))])
    
[slotted_egraphs::egraph::union] r: id50: ($f126 -> $8, $f127 -> $9, $f128 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f128: Node, $f127: Node, $f126: Int} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
    
[slotted_egraphs::egraph::union] Call move_to id48: ($f119 -> $8, $f120 -> $9, $f121 -> $10), id50: ($f126 -> $8, $f127 -> $9, $f128 -> $10)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f125: Int, $f123: Node, $f120: Node, $f121: Node, $f119: Int, $f122: Node, $f124: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f128: Node, $f127: Node, $f126: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f128: Node, $f123: Node, $f120: Node, $f119: Int, $f124: Int, $f126: Int, $f127: Node, $f125: Int, $f121: Node, $f122: Node} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f128: Node, $f123: Node, $f120: Node, $f119: Int, $f124: Int, $f126: Int, $f127: Node, $f125: Int, $f121: Node, $f122: Node} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f129, $f116 -> $f130, $f117 -> $f131, $f118 -> $f132), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f126, $f127, $f128, $f129, $f130, $f131, $f132}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id47, mapToS : $f113
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id47, mapToS : $f114
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id47, mapToS : $f115
[entry::chc] adding $f129 to varTypes
[entry::chc] childId : id47, mapToS : $f116
[entry::chc] adding $f130 to varTypes
[entry::chc] childId : id47, mapToS : $f117
[entry::chc] adding $f131 to varTypes
[entry::chc] childId : id47, mapToS : $f118
[entry::chc] adding $f132 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f129, $f116 -> $f130, $f117 -> $f131, $f118 -> $f132), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[entry::chc] get {$f130: Node, $f126: Int, $f127: Node, $f129: Node, $f131: Int, $f132: Int, $f128: Node}
[slotted_egraphs::parse] from (compose <(new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (leaf)) (eq (node $10) (leaf))>) <>) (new (pred <(int $8) (node $9) (node $10)>) (and <(leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))>) <>) (new (pred <(int $8) (node $9) (node $10)>) (and <(eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))>) <(init leafDrop (pred <(int $8) (node $9) (node $10)>))>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $9) leaf)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $10) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $9) leaf) (eq (node $10) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("int"), Slot($8), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (leq (int $8) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $13)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($11)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $11)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($12), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($12)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $12)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $13) (node $11) (node $12))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $9) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($10), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($13), RParen, LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $13)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($11), RParen, LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($11)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $11)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($12), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($12)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $12)
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $13) (node $11) (node $12))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $10) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($9), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($16), RParen, LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $16)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($14), RParen, LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($14)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $14)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($15), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $15)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $16) (node $14) (node $15))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $9) (binode (int $16) (node $14) (node $15)))
[slotted_egraphs::parse] left tokens [LParen, Ident("geq"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (int $8) 1)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($17), RParen, LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $17)
[slotted_egraphs::parse] left tokens [LParen, Ident("-"), LParen, Ident("int"), Slot($8), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("-"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (- (int $8) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $17) (- (int $8) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($8), RParen, LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $8)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($9), RParen, LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $9)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($10), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $10)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $8) (node $9) (node $10))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf))) (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))) (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $9), id32: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id32: ()), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $9) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $10), id32: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id32: ()), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $10) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id33: ($f71 -> $9), id33: ($f71 -> $10)])
[slotted_egraphs::egraph::add] ret (And([id33: ($f71 -> $0), id33: ($f71 -> $1)]), ($0 -> $9, $1 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id34 <-> (and (eq (node $9) leaf) (eq (node $10) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id34: ($f72 -> $9, $f73 -> $10), [])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id34: ($f72 -> $1, $f73 -> $2), []), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Leq(id1: ($f0 -> $8), id6: ())
[slotted_egraphs::egraph::add] ret (Leq(id1: ($f0 -> $0), id6: ()), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (leq (int $8) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($13)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($11)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $11))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($12)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $12))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $13), id2: ($f1 -> $11), id2: ($f1 -> $12))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $13, $1 -> $11, $2 -> $12))
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $9), id38: ($f81 -> $11, $f82 -> $12, $f83 -> $13))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3)), ($0 -> $9, $1 -> $11, $2 -> $12, $3 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($13)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $13)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($11)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $11))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $11)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($12)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $12))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $12)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $13), id2: ($f1 -> $11), id2: ($f1 -> $12))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $13, $1 -> $11, $2 -> $12))
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $13) (node $11) (node $12))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $10), id38: ($f81 -> $11, $f82 -> $12, $f83 -> $13))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3)), ($0 -> $10, $1 -> $11, $2 -> $12, $3 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $10) (binode (int $13) (node $11) (node $12)))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id37: ($f80 -> $8), id39: ($f84 -> $9, $f85 -> $11, $f86 -> $12, $f87 -> $13), id39: ($f84 -> $10, $f85 -> $11, $f86 -> $12, $f87 -> $13)])
[slotted_egraphs::egraph::add] ret (And([id37: ($f80 -> $0), id39: ($f84 -> $1, $f85 -> $2, $f86 -> $3, $f87 -> $4), id39: ($f84 -> $5, $f85 -> $2, $f86 -> $3, $f87 -> $4)]), ($0 -> $8, $1 -> $9, $2 -> $11, $3 -> $12, $4 -> $13, $5 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id40: ($f88 -> $8, $f89 -> $9, $f90 -> $10, $f91 -> $11, $f92 -> $12, $f93 -> $13), [])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id40: ($f88 -> $0, $f89 -> $1, $f90 -> $2, $f91 -> $3, $f92 -> $4, $f93 -> $5), []), ($0 -> $8, $1 -> $9, $2 -> $10, $3 -> $11, $4 -> $12, $5 -> $13))
[slotted_egraphs::egraph::add] add_syn_expr: id43 <-> (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12)))))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($16)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $16)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($14)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $14))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $14)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($15)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $15))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $15)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $16), id2: ($f1 -> $14), id2: ($f1 -> $15))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $16, $1 -> $14, $2 -> $15))
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $16) (node $14) (node $15))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $9), id38: ($f81 -> $14, $f82 -> $15, $f83 -> $16))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3)), ($0 -> $9, $1 -> $14, $2 -> $15, $3 -> $16))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $9) (binode (int $16) (node $14) (node $15)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $8), id26: ())
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id26: ()), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id44 <-> (geq (int $8) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($17)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $17)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Minus(id1: ($f0 -> $8), id26: ())
[slotted_egraphs::egraph::add] ret (Minus(id1: ($f0 -> $0), id26: ()), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id45 <-> (- (int $8) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $17), id45: ($f110 -> $8))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id45: ($f110 -> $1)), ($0 -> $17, $1 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id46 <-> (eq (int $17) (- (int $8) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id39: ($f84 -> $9, $f85 -> $14, $f86 -> $15, $f87 -> $16), id44: ($f109 -> $8), id46: ($f111 -> $8, $f112 -> $17)])
[slotted_egraphs::egraph::add] ret (And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id44: ($f109 -> $4), id46: ($f111 -> $4, $f112 -> $5)]), ($0 -> $9, $1 -> $14, $2 -> $15, $3 -> $16, $4 -> $8, $5 -> $17))
[slotted_egraphs::egraph::add] add_syn_expr: id47 <-> (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Int($8)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $8)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($9)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $9))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($10)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $10)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $8), id2: ($f1 -> $9), id2: ($f1 -> $10)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)]), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (pred (int $8) (node $9) (node $10))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id11: (), id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10))
[slotted_egraphs::egraph::add] ret (Init(id11: (), id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2)), ($0 -> $8, $1 -> $9, $2 -> $10))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (init leafDrop (pred (int $8) (node $9) (node $10)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id12: ($f21 -> $8, $f22 -> $9, $f23 -> $10), id47: ($f113 -> $8, $f114 -> $9, $f115 -> $14, $f116 -> $15, $f117 -> $16, $f118 -> $17), [AppliedId(id13: ($f24 -> $8, $f25 -> $9, $f26 -> $10))])
[slotted_egraphs::egraph::add] ret (New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))]), ($0 -> $8, $1 -> $9, $2 -> $10, $3 -> $14, $4 -> $15, $5 -> $16, $6 -> $17))
[slotted_egraphs::egraph::add] add_syn_expr: id50 <-> (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id36: ($f77 -> $8, $f78 -> $9, $f79 -> $10)), AppliedId(id43: ($f100 -> $8, $f101 -> $9, $f102 -> $10)), AppliedId(id50: ($f126 -> $8, $f127 -> $9, $f128 -> $10))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))]), ($0 -> $8, $1 -> $9, $2 -> $10))
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
[entry::chc] slots: {$f137, $f138, $f139}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f139 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
[entry::chc] get {$f139: Node, $f137: Int, $f138: Node}
[slotted_egraphs::egraph::add] classes insert id51
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f139: Node, $f137: Int, $f138: Node} }
    ($f137, $f138, $f139):>> Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
     - Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f137, $f138, $f139}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f139 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
[entry::chc] get {$f137: Int, $f138: Node, $f139: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id51 <-> (compose (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) leaf) (eq (node $10) leaf))) (new (pred (int $8) (node $9) (node $10)) (and (leq (int $8) 0) (eq (node $9) (binode (int $13) (node $11) (node $12))) (eq (node $10) (binode (int $13) (node $11) (node $12))))) (new (pred (int $8) (node $9) (node $10)) (and (eq (node $9) (binode (int $16) (node $14) (node $15))) (geq (int $8) 1) (eq (int $17) (- (int $8) 1))) (init leafDrop (pred (int $8) (node $9) (node $10)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id13: ($f24 -> $8, $f25 -> $9, $f26 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f26: Node, $f24: Int, $f25: Node} }
    ($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
     - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
    
[slotted_egraphs::egraph::union] r: id51: ($f137 -> $8, $f138 -> $9, $f139 -> $10)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f139: Node, $f137: Int, $f138: Node} }
    ($f137, $f138, $f139):>> Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
     - Compose([AppliedId(id36: ($f77 -> $f137, $f78 -> $f138, $f79 -> $f139)), AppliedId(id43: ($f100 -> $f137, $f101 -> $f138, $f102 -> $f139)), AppliedId(id50: ($f126 -> $f137, $f127 -> $f138, $f128 -> $f139))])
    
[slotted_egraphs::egraph::union] Call move_to id51: ($f137 -> $8, $f138 -> $9, $f139 -> $10), id13: ($f24 -> $8, $f25 -> $9, $f26 -> $10)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f139: Node, $f137: Int, $f138: Node} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f26: Node, $f24: Int, $f25: Node} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"leafDrop"}, varTypes: {$f25: Node, $f138: Node, $f26: Node, $f24: Int, $f139: Node, $f137: Int} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f25: Node, $f138: Node, $f26: Node, $f24: Int, $f139: Node, $f137: Int} }
    ($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
     - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
     - Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[entry::chc] get {$f24: Int, $f25: Node, $f26: Node}
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f31: Int, $f34: Int, $f33: Node, $f32: Node, $f35: Int} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f35: Int, $f32: Node, $f31: Int, $f33: Node, $f34: Int}
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f132: Int, $f128: Node, $f123: Node, $f120: Node, $f119: Int, $f124: Int, $f126: Int, $f127: Node, $f130: Node, $f125: Int, $f129: Node, $f131: Int, $f121: Node, $f122: Node} }
    ($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
     - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] calling make on New(id12: ($f21 -> $0, $f22 -> $1, $f23 -> $2), id47: ($f113 -> $0, $f114 -> $1, $f115 -> $3, $f116 -> $4, $f117 -> $5, $f118 -> $6), [AppliedId(id13: ($f24 -> $0, $f25 -> $1, $f26 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f126, $f127, $f128, $f133, $f134, $f135, $f136}
[entry::chc] childId : id12, mapToS : $f21
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id47, mapToS : $f113
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f126 to varTypes
[entry::chc] childId : id12, mapToS : $f22
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id47, mapToS : $f114
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f127 to varTypes
[entry::chc] childId : id12, mapToS : $f23
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id47, mapToS : $f115
[entry::chc] adding $f133 to varTypes
[entry::chc] childId : id47, mapToS : $f116
[entry::chc] adding $f134 to varTypes
[entry::chc] childId : id47, mapToS : $f117
[entry::chc] adding $f135 to varTypes
[entry::chc] childId : id47, mapToS : $f118
[entry::chc] adding $f136 to varTypes
[entry::chc] aggregateVarType for New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])
[entry::chc] get {$f136: Int, $f128: Node, $f133: Node, $f126: Int, $f134: Node, $f127: Node, $f135: Int}
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"leafDrop"}, varTypes: {$f25: Node, $f138: Node, $f26: Node, $f24: Int, $f139: Node, $f137: Int} }
    ($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
     - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
     - Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] calling make on Compose([AppliedId(id36: ($f77 -> $0, $f78 -> $1, $f79 -> $2)), AppliedId(id43: ($f100 -> $0, $f101 -> $1, $f102 -> $2)), AppliedId(id50: ($f126 -> $0, $f127 -> $1, $f128 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f24, $f25, $f26}
[entry::chc] childId : id36, mapToS : $f77
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id43, mapToS : $f100
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id50, mapToS : $f126
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id36, mapToS : $f78
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id43, mapToS : $f101
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id50, mapToS : $f127
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id36, mapToS : $f79
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id43, mapToS : $f102
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id50, mapToS : $f128
[entry::chc] adding $f26 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])
[entry::chc] get {$f25: Node, $f26: Node, $f24: Int}
[slotted_egraphs::parse] from (init minLeaf (pred <(node $18) (int $19)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $18) (int $19))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $18) (int $19)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $18), id1: ($f0 -> $19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $18, $f28 -> $19))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $18) (int $19)))
[slotted_egraphs::parse] from (new (pred <(node $18) (int $19)>) (and <(eq (int $19) 0) (eq (node $18) (leaf))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $18) (int $19))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $19) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $18) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (int $19) 0) (eq (node $18) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $18) (int $19)) (and (eq (int $19) 0) (eq (node $18) leaf)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $18), id1: ($f0 -> $19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $19), id6: ())
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id6: ()), ($0 -> $19))
[entry::chc] calling make on Eq(id1: ($f0 -> $f140), id6: ())
[entry::chc] slots: {$f140}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f140 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f140), id6: ())
[entry::chc] get {$f140: Int}
[slotted_egraphs::egraph::add] classes insert id52
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f140: Int} }
    ($f140):>> Eq(id1: ($f0 -> $f140), id6: ())
     - Eq(id1: ($f0 -> $f140), id6: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Eq(id1: ($f0 -> $0), id6: ())
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id6: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f140}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f140 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f140), id6: ())
[entry::chc] get {$f140: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id52 <-> (eq (int $19) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $18), id32: ())
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id32: ()), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (eq (node $18) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id52: ($f140 -> $19), id33: ($f71 -> $18)])
[slotted_egraphs::egraph::add] ret (And([id52: ($f140 -> $0), id33: ($f71 -> $1)]), ($0 -> $19, $1 -> $18))
[entry::chc] calling make on And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
[entry::chc] slots: {$f141, $f142}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id52, mapToS : $f140
[entry::chc] adding $f142 to varTypes
[entry::chc] aggregateVarType for And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
[entry::chc] get {$f141: Node, $f142: Int}
[slotted_egraphs::egraph::add] classes insert id53
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f141: Node, $f142: Int} }
    ($f141, $f142):>> And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
     - And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id52: ($f140 -> $0), id33: ($f71 -> $1)])
[entry::chc] calling make on And([id52: ($f140 -> $0), id33: ($f71 -> $1)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f141, $f142}
[entry::chc] childId : id33, mapToS : $f71
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id52, mapToS : $f140
[entry::chc] adding $f142 to varTypes
[entry::chc] aggregateVarType for And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
[entry::chc] get {$f142: Int, $f141: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id53 <-> (and (eq (int $19) 0) (eq (node $18) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id15: ($f27 -> $18, $f28 -> $19), id53: ($f141 -> $18, $f142 -> $19), [])
[slotted_egraphs::egraph::add] ret (New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), []), ($0 -> $18, $1 -> $19))
[entry::chc] calling make on New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
[entry::chc] slots: {$f143, $f144}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id53, mapToS : $f141
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f144 to varTypes
[entry::chc] childId : id53, mapToS : $f142
[entry::chc] adding $f144 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
[entry::chc] get {$f144: Int, $f143: Node}
[slotted_egraphs::egraph::add] classes insert id54
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f144: Int, $f143: Node} }
    ($f143, $f144):>> New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
     - New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f143, $f144}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id53, mapToS : $f141
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f144 to varTypes
[entry::chc] childId : id53, mapToS : $f142
[entry::chc] adding $f144 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
[entry::chc] get {$f143: Node, $f144: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id54 <-> (new (pred (node $18) (int $19)) (and (eq (int $19) 0) (eq (node $18) leaf)))
[slotted_egraphs::parse] from (interface minLeaf (pred <(node $18) (int $19)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $18) (int $19))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (node $18) (int $19)) 1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $18), id1: ($f0 -> $19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id14: (), id15: ($f27 -> $18, $f28 -> $19), id26: ())
[slotted_egraphs::egraph::add] ret (Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ()), ($0 -> $18, $1 -> $19))
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
[entry::chc] slots: {$f145, $f146}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f146 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
[entry::chc] get {$f145: Node, $f146: Int}
[slotted_egraphs::egraph::add] classes insert id55
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f145: Node, $f146: Int} }
    ($f145, $f146):>> Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
     - Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ())
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f145, $f146}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f146 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
[entry::chc] get {$f145: Node, $f146: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id55 <-> (interface minLeaf (pred (node $18) (int $19)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id54: ($f143 -> $18, $f144 -> $19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f144: Int, $f143: Node} }
    ($f143, $f144):>> New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
     - New(id15: ($f27 -> $f143, $f28 -> $f144), id53: ($f141 -> $f143, $f142 -> $f144), [])
    
[slotted_egraphs::egraph::union] r: id55: ($f145 -> $18, $f146 -> $19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f145: Node, $f146: Int} }
    ($f145, $f146):>> Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
     - Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
    
[slotted_egraphs::egraph::union] Call move_to id54: ($f143 -> $18, $f144 -> $19), id55: ($f145 -> $18, $f146 -> $19)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f144: Int, $f143: Node} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f145: Node, $f146: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f144: Int, $f143: Node, $f145: Node, $f146: Int} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f144: Int, $f143: Node, $f145: Node, $f146: Int} }
    ($f145, $f146):>> Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
     - New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
     - Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id53: ($f141 -> $0, $f142 -> $1), [])
[entry::chc] exists in egraph
[entry::chc] slots: {$f145, $f146}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id53, mapToS : $f141
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f146 to varTypes
[entry::chc] childId : id53, mapToS : $f142
[entry::chc] adding $f146 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])
[entry::chc] get {$f146: Int, $f145: Node}
[slotted_egraphs::parse] from (new (pred <(node $18) (int $19)>) (and <(eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1))>) <(init minLeaf (pred <(node $21) (int $23)>)) (init minLeaf (pred <(node $22) (int $24)>)) (init min (pred <(int $23) (int $24) (int $25)>))>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($20), RParen, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($20), RParen, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($20), RParen, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $18) (int $19))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("node"), Slot($18), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($20), RParen, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($20), RParen, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($20)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $20)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($21), RParen, LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($21)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $21)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($22), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($22)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $22)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $20) (node $21) (node $22))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (node $18) (binode (int $20) (node $21) (node $22)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($19), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [LParen, Ident("+"), LParen, Ident("int"), Slot($25), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($25)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $25)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (int $25) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $19) (+ (int $25) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($21), RParen, LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($21)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $21)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($23), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $23)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $21) (int $23))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $21) (int $23)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($22), RParen, LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($22)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $22)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($24), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $24)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $22) (int $24))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $22) (int $24)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 min
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($23), RParen, LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($23)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $23)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($24), RParen, LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($24)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $24)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($25), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($25)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $25)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $23) (int $24) (int $25))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init min (pred (int $23) (int $24) (int $25)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $18) (int $19)) (and (eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1))) (init minLeaf (pred (node $21) (int $23))) (init minLeaf (pred (node $22) (int $24))) (init min (pred (int $23) (int $24) (int $25))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $18), id1: ($f0 -> $19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($20)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $20))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $20)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($21)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $21))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $21)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($22)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $22))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $22)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id1: ($f0 -> $20), id2: ($f1 -> $21), id2: ($f1 -> $22))
[slotted_egraphs::egraph::add] ret (BiNode(id1: ($f0 -> $0), id2: ($f1 -> $1), id2: ($f1 -> $2)), ($0 -> $20, $1 -> $21, $2 -> $22))
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (binode (int $20) (node $21) (node $22))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id2: ($f1 -> $18), id38: ($f81 -> $21, $f82 -> $22, $f83 -> $20))
[slotted_egraphs::egraph::add] ret (Eq(id2: ($f1 -> $0), id38: ($f81 -> $1, $f82 -> $2, $f83 -> $3)), ($0 -> $18, $1 -> $21, $2 -> $22, $3 -> $20))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (eq (node $18) (binode (int $20) (node $21) (node $22)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($25)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $25))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $25)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id1: ($f0 -> $25), id26: ())
[slotted_egraphs::egraph::add] ret (Add(id1: ($f0 -> $0), id26: ()), ($0 -> $25))
[entry::chc] calling make on Add(id1: ($f0 -> $f147), id26: ())
[entry::chc] slots: {$f147}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f147 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f147), id26: ())
[entry::chc] get {$f147: Int}
[slotted_egraphs::egraph::add] classes insert id56
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f147: Int} }
    ($f147):>> Add(id1: ($f0 -> $f147), id26: ())
     - Add(id1: ($f0 -> $f147), id26: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Add(id1: ($f0 -> $0), id26: ())
[entry::chc] calling make on Add(id1: ($f0 -> $0), id26: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f147}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f147 to varTypes
[entry::chc] aggregateVarType for Add(id1: ($f0 -> $f147), id26: ())
[entry::chc] get {$f147: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id56 <-> (+ (int $25) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $19), id56: ($f147 -> $25))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id56: ($f147 -> $1)), ($0 -> $19, $1 -> $25))
[entry::chc] calling make on Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
[entry::chc] slots: {$f148, $f149}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id56, mapToS : $f147
[entry::chc] adding $f149 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
[entry::chc] get {$f149: Int, $f148: Int}
[slotted_egraphs::egraph::add] classes insert id57
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f149: Int, $f148: Int} }
    ($f148, $f149):>> Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
     - Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
    
[slotted_egraphs::egraph::rebuild] from update_analysis Eq(id1: ($f0 -> $0), id56: ($f147 -> $1))
[entry::chc] calling make on Eq(id1: ($f0 -> $0), id56: ($f147 -> $1))
[entry::chc] exists in egraph
[entry::chc] slots: {$f148, $f149}
[entry::chc] childId : id1, mapToS : $f0
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id56, mapToS : $f147
[entry::chc] adding $f149 to varTypes
[entry::chc] aggregateVarType for Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
[entry::chc] get {$f149: Int, $f148: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id57 <-> (eq (int $19) (+ (int $25) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id39: ($f84 -> $18, $f85 -> $21, $f86 -> $22, $f87 -> $20), id57: ($f148 -> $19, $f149 -> $25)])
[slotted_egraphs::egraph::add] ret (And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id57: ($f148 -> $4, $f149 -> $5)]), ($0 -> $18, $1 -> $21, $2 -> $22, $3 -> $20, $4 -> $19, $5 -> $25))
[entry::chc] calling make on And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
[entry::chc] slots: {$f150, $f151, $f152, $f153, $f154, $f155}
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f150 to varTypes
[entry::chc] childId : id57, mapToS : $f148
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id57, mapToS : $f149
[entry::chc] adding $f155 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
[entry::chc] get {$f155: Int, $f150: Node, $f154: Node, $f151: Int, $f152: Int, $f153: Node}
[slotted_egraphs::egraph::add] classes insert id58
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f155: Int, $f150: Node, $f154: Node, $f151: Int, $f152: Int, $f153: Node} }
    ($f150, $f151, $f152, $f153, $f154, $f155):>> And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
     - And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id57: ($f148 -> $4, $f149 -> $5)])
[entry::chc] calling make on And([id39: ($f84 -> $0, $f85 -> $1, $f86 -> $2, $f87 -> $3), id57: ($f148 -> $4, $f149 -> $5)])
[entry::chc] exists in egraph
[entry::chc] slots: {$f150, $f151, $f152, $f153, $f154, $f155}
[entry::chc] childId : id39, mapToS : $f84
[entry::chc] adding $f150 to varTypes
[entry::chc] childId : id57, mapToS : $f148
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id39, mapToS : $f87
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id39, mapToS : $f85
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id39, mapToS : $f86
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id57, mapToS : $f149
[entry::chc] adding $f155 to varTypes
[entry::chc] aggregateVarType for And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
[entry::chc] get {$f155: Int, $f152: Int, $f154: Node, $f151: Int, $f150: Node, $f153: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id58 <-> (and (eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($21)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $21))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $21)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $23)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $21), id1: ($f0 -> $23)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $21, $1 -> $23))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $21) (int $23))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $21, $f28 -> $23))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $21, $1 -> $23))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $21) (int $23)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($22)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $22))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $22)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $24)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $22), id1: ($f0 -> $24)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $22, $1 -> $24))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $22) (int $24))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id14: (), id15: ($f27 -> $22, $f28 -> $24))
[slotted_egraphs::egraph::add] ret (Init(id14: (), id15: ($f27 -> $0, $f28 -> $1)), ($0 -> $22, $1 -> $24))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (init minLeaf (pred (node $22) (int $24)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("min")
[slotted_egraphs::egraph::add] ret (PredName("min"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] shape_called_from_add input Int($23)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $23))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $23)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($24)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $24))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $24)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($25)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $25))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $25)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $23), id1: ($f0 -> $24), id1: ($f0 -> $25)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $23, $1 -> $24, $2 -> $25))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $23) (int $24) (int $25))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id19: (), id20: ($f41 -> $23, $f42 -> $24, $f43 -> $25))
[slotted_egraphs::egraph::add] ret (Init(id19: (), id20: ($f41 -> $0, $f42 -> $1, $f43 -> $2)), ($0 -> $23, $1 -> $24, $2 -> $25))
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> (init min (pred (int $23) (int $24) (int $25)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id15: ($f27 -> $18, $f28 -> $19), id58: ($f150 -> $18, $f151 -> $19, $f152 -> $20, $f153 -> $21, $f154 -> $22, $f155 -> $25), [AppliedId(id16: ($f29 -> $21, $f30 -> $23)), AppliedId(id16: ($f29 -> $22, $f30 -> $24)), AppliedId(id31: ($f68 -> $23, $f69 -> $24, $f70 -> $25))])
[slotted_egraphs::egraph::add] ret (New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))]), ($0 -> $18, $1 -> $19, $2 -> $20, $3 -> $21, $4 -> $22, $5 -> $25, $6 -> $23, $7 -> $24))
[entry::chc] calling make on New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
[entry::chc] slots: {$f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f158 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f163 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f163 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
[entry::chc] get {$f159: Node, $f156: Node, $f157: Int, $f163: Int, $f158: Int, $f160: Node, $f161: Int, $f162: Int}
[slotted_egraphs::egraph::add] classes insert id59
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f159: Node, $f156: Node, $f157: Int, $f163: Int, $f158: Int, $f160: Node, $f161: Int, $f162: Int} }
    ($f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163):>> New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
     - New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f156 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f157 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f158 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f159 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f160 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f161 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f163 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f163 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
[entry::chc] get {$f161: Int, $f158: Int, $f159: Node, $f157: Int, $f160: Node, $f162: Int, $f156: Node, $f163: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id59 <-> (new (pred (node $18) (int $19)) (and (eq (node $18) (binode (int $20) (node $21) (node $22))) (eq (int $19) (+ (int $25) 1))) (init minLeaf (pred (node $21) (int $23))) (init minLeaf (pred (node $22) (int $24))) (init min (pred (int $23) (int $24) (int $25))))
[slotted_egraphs::parse] from (interface minLeaf (pred <(node $18) (int $19)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $18) (int $19))
[slotted_egraphs::parse] left tokens [Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 2
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (node $18) (int $19)) 2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $18), id1: ($f0 -> $19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(2)
[slotted_egraphs::egraph::add] ret (Number(2), ())
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id14: (), id15: ($f27 -> $18, $f28 -> $19), id42: ())
[slotted_egraphs::egraph::add] ret (Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ()), ($0 -> $18, $1 -> $19))
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
[entry::chc] slots: {$f164, $f165}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
[entry::chc] get {$f164: Node, $f165: Int}
[slotted_egraphs::egraph::add] classes insert id60
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f164: Node, $f165: Int} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ())
[entry::chc] calling make on Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ())
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] aggregateVarType for Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
[entry::chc] get {$f165: Int, $f164: Node}
[slotted_egraphs::egraph::add] add_syn_expr: id60 <-> (interface minLeaf (pred (node $18) (int $19)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id59: ($f156 -> $18, $f157 -> $19, $f158 -> $20, $f159 -> $21, $f160 -> $22, $f161 -> $23, $f162 -> $24, $f163 -> $25)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f159: Node, $f156: Node, $f157: Int, $f163: Int, $f158: Int, $f160: Node, $f161: Int, $f162: Int} }
    ($f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163):>> New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
     - New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
    
[slotted_egraphs::egraph::union] r: id60: ($f164 -> $18, $f165 -> $19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f164: Node, $f165: Int} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id59: ($f156 -> $18, $f157 -> $19, $f158 -> $20, $f159 -> $21, $f160 -> $22, $f161 -> $23, $f162 -> $24, $f163 -> $25)
[slotted_egraphs::egraph::rebuild] cap {$18, $19}
[slotted_egraphs::egraph::rebuild] origcap {$f156, $f157}
[slotted_egraphs::egraph::rebuild] new cap {$f156, $f157}
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id59: ($f156 -> $18, $f157 -> $19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f159: Node, $f156: Node, $f157: Int, $f163: Int, $f158: Int, $f160: Node, $f161: Int, $f162: Int} }
    ($f156, $f157):>> New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
     - New(id15: ($f27 -> $f156, $f28 -> $f157), id58: ($f150 -> $f156, $f151 -> $f157, $f152 -> $f158, $f153 -> $f159, $f154 -> $f160, $f155 -> $f163), [AppliedId(id16: ($f29 -> $f159, $f30 -> $f161)), AppliedId(id16: ($f29 -> $f160, $f30 -> $f162)), AppliedId(id31: ($f68 -> $f161, $f69 -> $f162, $f70 -> $f163))])
    
[slotted_egraphs::egraph::union] r: id60: ($f164 -> $18, $f165 -> $19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f164: Node, $f165: Int} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[slotted_egraphs::egraph::union] Call move_to id59: ($f156 -> $18, $f157 -> $19), id60: ($f164 -> $18, $f165 -> $19)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f159: Node, $f156: Node, $f157: Int, $f163: Int, $f158: Int, $f160: Node, $f161: Int, $f162: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f164: Node, $f165: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f159: Node, $f156: Node, $f157: Int, $f165: Int, $f164: Node, $f163: Int, $f158: Int, $f160: Node, $f161: Int, $f162: Int} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f159: Node, $f156: Node, $f157: Int, $f165: Int, $f164: Node, $f163: Int, $f158: Int, $f160: Node, $f161: Int, $f162: Int} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f166, $f153 -> $f167, $f154 -> $f168, $f155 -> $f169), [AppliedId(id16: ($f29 -> $f167, $f30 -> $f170)), AppliedId(id16: ($f29 -> $f168, $f30 -> $f171)), AppliedId(id31: ($f68 -> $f170, $f69 -> $f171, $f70 -> $f169))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f166, $f167, $f168, $f169, $f170, $f171}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f166 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f167 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f167 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f168 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f168 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f169 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f169 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f170 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f170 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f171 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f171 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f166, $f153 -> $f167, $f154 -> $f168, $f155 -> $f169), [AppliedId(id16: ($f29 -> $f167, $f30 -> $f170)), AppliedId(id16: ($f29 -> $f168, $f30 -> $f171)), AppliedId(id31: ($f68 -> $f170, $f69 -> $f171, $f70 -> $f169))])
[entry::chc] get {$f166: Int, $f171: Int, $f165: Int, $f167: Node, $f170: Int, $f169: Int, $f164: Node, $f168: Node}
[slotted_egraphs::parse] from (compose <(interface minLeaf (pred <(node $18) (int $19)>) 1) (interface minLeaf (pred <(node $18) (int $19)>) 2)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $18) (int $19))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (node $18) (int $19)) 1)
[slotted_egraphs::parse] left tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($18), RParen, LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($18)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $18)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($19), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($19)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $19)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $18) (int $19))
[slotted_egraphs::parse] left tokens [Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 2
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (node $18) (int $19)) 2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (interface minLeaf (pred (node $18) (int $19)) 1) (interface minLeaf (pred (node $18) (int $19)) 2))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $18), id1: ($f0 -> $19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id14: (), id15: ($f27 -> $18, $f28 -> $19), id26: ())
[slotted_egraphs::egraph::add] ret (Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id26: ()), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id55 <-> (interface minLeaf (pred (node $18) (int $19)) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($18)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $18))
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (node $18)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($19)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (int $19)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id2: ($f1 -> $18), id1: ($f0 -> $19)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id2: ($f1 -> $0), id1: ($f0 -> $1)]), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (pred (node $18) (int $19))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(2)
[slotted_egraphs::egraph::add] ret (Number(2), ())
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> 2
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id14: (), id15: ($f27 -> $18, $f28 -> $19), id42: ())
[slotted_egraphs::egraph::add] ret (Interface(id14: (), id15: ($f27 -> $0, $f28 -> $1), id42: ()), ($0 -> $18, $1 -> $19))
[slotted_egraphs::egraph::add] add_syn_expr: id60 <-> (interface minLeaf (pred (node $18) (int $19)) 2)
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id55: ($f145 -> $18, $f146 -> $19)), AppliedId(id60: ($f164 -> $18, $f165 -> $19))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))]), ($0 -> $18, $1 -> $19))
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
[entry::chc] slots: {$f178, $f179}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f179 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f179 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
[entry::chc] get {$f178: Node, $f179: Int}
[slotted_egraphs::egraph::add] classes insert id61
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f178: Node, $f179: Int} }
    ($f178, $f179):>> Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
     - Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f178, $f179}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f178 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f179 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f179 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
[entry::chc] get {$f178: Node, $f179: Int}
[slotted_egraphs::egraph::add] add_syn_expr: id61 <-> (compose (interface minLeaf (pred (node $18) (int $19)) 1) (interface minLeaf (pred (node $18) (int $19)) 2))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id16: ($f29 -> $18, $f30 -> $19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f29: Node, $f30: Int} }
    ($f29, $f30):>> Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
     - Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
    
[slotted_egraphs::egraph::union] r: id61: ($f178 -> $18, $f179 -> $19)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f178: Node, $f179: Int} }
    ($f178, $f179):>> Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
     - Compose([AppliedId(id55: ($f145 -> $f178, $f146 -> $f179)), AppliedId(id60: ($f164 -> $f178, $f165 -> $f179))])
    
[slotted_egraphs::egraph::union] Call move_to id61: ($f178 -> $18, $f179 -> $19), id16: ($f29 -> $18, $f30 -> $19)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f178: Node, $f179: Int} }
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f29: Node, $f30: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Int, $f29: Node, $f179: Int, $f178: Node} }
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f157: Int, $f166: Int, $f164: Node, $f171: Int, $f170: Int, $f161: Int, $f159: Node, $f156: Node, $f165: Int, $f163: Int, $f169: Int, $f168: Node, $f158: Int, $f160: Node, $f167: Node, $f162: Int} }
    ($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
     - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
     - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] calling make on New(id15: ($f27 -> $0, $f28 -> $1), id58: ($f150 -> $0, $f151 -> $1, $f152 -> $2, $f153 -> $3, $f154 -> $4, $f155 -> $5), [AppliedId(id16: ($f29 -> $3, $f30 -> $6)), AppliedId(id16: ($f29 -> $4, $f30 -> $7)), AppliedId(id31: ($f68 -> $6, $f69 -> $7, $f70 -> $5))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f164, $f165, $f172, $f173, $f174, $f175, $f176, $f177}
[entry::chc] childId : id15, mapToS : $f27
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id58, mapToS : $f150
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id15, mapToS : $f28
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f151
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id58, mapToS : $f152
[entry::chc] adding $f172 to varTypes
[entry::chc] childId : id58, mapToS : $f153
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id58, mapToS : $f154
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id58, mapToS : $f155
[entry::chc] adding $f175 to varTypes
[entry::chc] childId : id31, mapToS : $f70
[entry::chc] adding $f175 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f176 to varTypes
[entry::chc] childId : id31, mapToS : $f68
[entry::chc] adding $f176 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f177 to varTypes
[entry::chc] childId : id31, mapToS : $f69
[entry::chc] adding $f177 to varTypes
[entry::chc] aggregateVarType for New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
[entry::chc] get {$f164: Node, $f174: Node, $f177: Int, $f172: Int, $f165: Int, $f173: Node, $f176: Int, $f175: Int}
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f31: Int, $f34: Int, $f33: Node, $f32: Node, $f35: Int} }
    ($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
     - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] calling make on New(id5: (), id10: ($f18 -> $0, $f19 -> $1, $f20 -> $2), [AppliedId(id13: ($f24 -> $0, $f25 -> $3, $f26 -> $4)), AppliedId(id16: ($f29 -> $4, $f30 -> $1)), AppliedId(id16: ($f29 -> $3, $f30 -> $2))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f31, $f32, $f33, $f34, $f35}
[entry::chc] childId : id10, mapToS : $f18
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f24
[entry::chc] adding $f31 to varTypes
[entry::chc] childId : id13, mapToS : $f25
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id13, mapToS : $f26
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id16, mapToS : $f29
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id10, mapToS : $f19
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f34 to varTypes
[entry::chc] childId : id10, mapToS : $f20
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id16, mapToS : $f30
[entry::chc] adding $f35 to varTypes
[entry::chc] aggregateVarType for New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
[entry::chc] get {$f32: Node, $f31: Int, $f35: Int, $f33: Node, $f34: Int}
[slotted_egraphs::egraph::rebuild] handle_pending
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Int, $f29: Node, $f179: Int, $f178: Node} }
    ($f29, $f30):>> Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
     - Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
     - Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id55: ($f145 -> $0, $f146 -> $1)), AppliedId(id60: ($f164 -> $0, $f165 -> $1))])
[entry::chc] exists in egraph
[entry::chc] slots: {$f29, $f30}
[entry::chc] childId : id55, mapToS : $f145
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id60, mapToS : $f164
[entry::chc] adding $f29 to varTypes
[entry::chc] childId : id55, mapToS : $f146
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id60, mapToS : $f165
[entry::chc] adding $f30 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
[entry::chc] get {$f30: Int, $f29: Node}
[entry::chc::tst] egraph after

 == Egraph ==
CHCData { predNames: {}, varTypes: {} }
id0():>> PredName("root")
 - PredName("root")

CHCData { predNames: {}, varTypes: {$f0: Int} }
id1($f0):>> Int($f0)
 - Int($f0)

CHCData { predNames: {}, varTypes: {$f1: Node} }
id2($f1):>> Node($f1)
 - Node($f1)

CHCData { predNames: {}, varTypes: {$f2: Int, $f4: Node, $f3: Node, $f5: Int, $f6: Int} }
id3($f2, $f3, $f4, $f5, $f6):>> PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])
 - PredSyntax([id1: ($f0 -> $f2), id2: ($f1 -> $f3), id2: ($f1 -> $f4), id1: ($f0 -> $f5), id1: ($f0 -> $f6)])

CHCData { predNames: {"root"}, varTypes: {$f37: Node, $f11: Int, $f7: Int, $f10: Int, $f38: Node, $f40: Int, $f36: Int, $f8: Node, $f39: Int, $f9: Node} }
id4($f7, $f8, $f9, $f10, $f11):>> Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Init(id0: (), id3: ($f2 -> $f7, $f3 -> $f8, $f4 -> $f9, $f5 -> $f10, $f6 -> $f11))
 - Compose([AppliedId(id17: ($f31 -> $f7, $f32 -> $f8, $f33 -> $f9, $f34 -> $f10, $f35 -> $f11))])

CHCData { predNames: {}, varTypes: {} }
id5():>> PredSyntax([])
 - PredSyntax([])

CHCData { predNames: {}, varTypes: {} }
id6():>> Number(0)
 - Number(0)

CHCData { predNames: {}, varTypes: {$f12: Int} }
id7($f12):>> Geq(id1: ($f0 -> $f12), id6: ())
 - Geq(id1: ($f0 -> $f12), id6: ())

CHCData { predNames: {}, varTypes: {$f14: Int, $f13: Int} }
id8($f13, $f14):>> Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))
 - Add(id1: ($f0 -> $f14), id1: ($f0 -> $f13))

CHCData { predNames: {}, varTypes: {$f17: Int, $f16: Int, $f15: Int} }
id9($f15, $f16, $f17):>> Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))
 - Less(id8: ($f13 -> $f15, $f14 -> $f16), id1: ($f0 -> $f17))

CHCData { predNames: {}, varTypes: {$f19: Int, $f18: Int, $f20: Int} }
id10($f18, $f19, $f20):>> And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])
 - And([id7: ($f12 -> $f18), id9: ($f15 -> $f18, $f16 -> $f19, $f17 -> $f20)])

CHCData { predNames: {}, varTypes: {} }
id11():>> PredName("leafDrop")
 - PredName("leafDrop")

CHCData { predNames: {}, varTypes: {$f22: Node, $f23: Node, $f21: Int} }
id12($f21, $f22, $f23):>> PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])
 - PredSyntax([id1: ($f0 -> $f21), id2: ($f1 -> $f22), id2: ($f1 -> $f23)])

CHCData { predNames: {"leafDrop"}, varTypes: {$f25: Node, $f138: Node, $f26: Node, $f24: Int, $f139: Node, $f137: Int} }
id13($f24, $f25, $f26):>> Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
 - Init(id11: (), id12: ($f21 -> $f24, $f22 -> $f25, $f23 -> $f26))
 - Compose([AppliedId(id36: ($f77 -> $f24, $f78 -> $f25, $f79 -> $f26)), AppliedId(id43: ($f100 -> $f24, $f101 -> $f25, $f102 -> $f26)), AppliedId(id50: ($f126 -> $f24, $f127 -> $f25, $f128 -> $f26))])

CHCData { predNames: {}, varTypes: {} }
id14():>> PredName("minLeaf")
 - PredName("minLeaf")

CHCData { predNames: {}, varTypes: {$f27: Node, $f28: Int} }
id15($f27, $f28):>> PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])
 - PredSyntax([id2: ($f1 -> $f27), id1: ($f0 -> $f28)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f30: Int, $f29: Node, $f179: Int, $f178: Node} }
id16($f29, $f30):>> Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))
 - Compose([AppliedId(id55: ($f145 -> $f29, $f146 -> $f30)), AppliedId(id60: ($f164 -> $f29, $f165 -> $f30))])
 - Init(id14: (), id15: ($f27 -> $f29, $f28 -> $f30))

CHCData { predNames: {}, varTypes: {$f31: Int, $f34: Int, $f33: Node, $f32: Node, $f35: Int} }
id17($f31, $f32, $f33, $f34, $f35):>> New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])
 - New(id5: (), id10: ($f18 -> $f31, $f19 -> $f34, $f20 -> $f35), [AppliedId(id13: ($f24 -> $f31, $f25 -> $f32, $f26 -> $f33)), AppliedId(id16: ($f29 -> $f33, $f30 -> $f34)), AppliedId(id16: ($f29 -> $f32, $f30 -> $f35))])

CHCData { predNames: {}, varTypes: {} }
id19():>> PredName("min")
 - PredName("min")

CHCData { predNames: {}, varTypes: {$f42: Int, $f43: Int, $f41: Int} }
id20($f41, $f42, $f43):>> PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])
 - PredSyntax([id1: ($f0 -> $f41), id1: ($f0 -> $f42), id1: ($f0 -> $f43)])

CHCData { predNames: {}, varTypes: {$f48: Int, $f47: Int} }
id22($f47, $f48):>> Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))
 - Less(id1: ($f0 -> $f47), id1: ($f0 -> $f48))

CHCData { predNames: {}, varTypes: {$f49: Int, $f50: Int} }
id23($f49, $f50):>> Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))
 - Eq(id1: ($f0 -> $f50), id1: ($f0 -> $f49))

CHCData { predNames: {}, varTypes: {$f53: Int, $f52: Int, $f51: Int} }
id24($f51, $f52, $f53):>> And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])
 - And([id22: ($f47 -> $f51, $f48 -> $f52), id23: ($f49 -> $f51, $f50 -> $f53)])

CHCData { predNames: {}, varTypes: {} }
id26():>> Number(1)
 - Number(1)

CHCData { predNames: {"min"}, varTypes: {$f54: Int, $f55: Int, $f58: Int, $f59: Int, $f57: Int, $f56: Int} }
id27($f57, $f58, $f59):>> Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())
 - New(id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id24: ($f51 -> $f57, $f52 -> $f58, $f53 -> $f59), [])
 - Interface(id19: (), id20: ($f41 -> $f57, $f42 -> $f58, $f43 -> $f59), id26: ())

CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
id28($f60, $f61):>> Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))
 - Geq(id1: ($f0 -> $f60), id1: ($f0 -> $f61))

CHCData { predNames: {}, varTypes: {$f64: Int, $f63: Int, $f62: Int} }
id29($f62, $f63, $f64):>> And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])
 - And([id28: ($f60 -> $f62, $f61 -> $f63), id23: ($f49 -> $f63, $f50 -> $f64)])

CHCData { predNames: {}, varTypes: {$f65: Int, $f66: Int, $f67: Int} }
id30($f65, $f66, $f67):>> New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])
 - New(id20: ($f41 -> $f65, $f42 -> $f66, $f43 -> $f67), id29: ($f62 -> $f65, $f63 -> $f66, $f64 -> $f67), [])

CHCData { predNames: {"min"}, varTypes: {$f69: Int, $f44: Int, $f70: Int, $f68: Int, $f46: Int, $f45: Int} }
id31($f68, $f69, $f70):>> Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
 - Compose([AppliedId(id27: ($f57 -> $f68, $f58 -> $f69, $f59 -> $f70)), AppliedId(id30: ($f65 -> $f68, $f66 -> $f69, $f67 -> $f70))])
 - Init(id19: (), id20: ($f41 -> $f68, $f42 -> $f69, $f43 -> $f70))

CHCData { predNames: {}, varTypes: {} }
id32():>> Leaf
 - Leaf

CHCData { predNames: {}, varTypes: {$f71: Node} }
id33($f71):>> Eq(id2: ($f1 -> $f71), id32: ())
 - Eq(id2: ($f1 -> $f71), id32: ())

CHCData { predNames: {}, varTypes: {$f72: Node, $f73: Node} }
id34($f72, $f73):>> And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])
 - And([id33: ($f71 -> $f72), id33: ($f71 -> $f73)])

CHCData { predNames: {"leafDrop"}, varTypes: {$f74: Int, $f76: Node, $f79: Node, $f77: Int, $f75: Node, $f78: Node} }
id36($f77, $f78, $f79):>> Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())
 - New(id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id34: ($f72 -> $f78, $f73 -> $f79), [])
 - Interface(id11: (), id12: ($f21 -> $f77, $f22 -> $f78, $f23 -> $f79), id26: ())

CHCData { predNames: {}, varTypes: {$f80: Int} }
id37($f80):>> Leq(id1: ($f0 -> $f80), id6: ())
 - Leq(id1: ($f0 -> $f80), id6: ())

CHCData { predNames: {}, varTypes: {$f82: Node, $f83: Int, $f81: Node} }
id38($f81, $f82, $f83):>> BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))
 - BiNode(id1: ($f0 -> $f83), id2: ($f1 -> $f81), id2: ($f1 -> $f82))

CHCData { predNames: {}, varTypes: {$f85: Node, $f86: Node, $f87: Int, $f84: Node} }
id39($f84, $f85, $f86, $f87):>> Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))
 - Eq(id2: ($f1 -> $f84), id38: ($f81 -> $f85, $f82 -> $f86, $f83 -> $f87))

CHCData { predNames: {}, varTypes: {$f91: Node, $f89: Node, $f92: Node, $f93: Int, $f88: Int, $f90: Node} }
id40($f88, $f89, $f90, $f91, $f92, $f93):>> And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])
 - And([id37: ($f80 -> $f88), id39: ($f84 -> $f89, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93), id39: ($f84 -> $f90, $f85 -> $f91, $f86 -> $f92, $f87 -> $f93)])

CHCData { predNames: {}, varTypes: {} }
id42():>> Number(2)
 - Number(2)

CHCData { predNames: {"leafDrop"}, varTypes: {$f94: Int, $f105: Int, $f104: Node, $f96: Node, $f95: Node, $f101: Node, $f97: Node, $f102: Node, $f100: Int, $f99: Int, $f103: Node, $f98: Node} }
id43($f100, $f101, $f102):>> Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
 - Interface(id11: (), id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id42: ())
 - New(id12: ($f21 -> $f100, $f22 -> $f101, $f23 -> $f102), id40: ($f88 -> $f100, $f89 -> $f101, $f90 -> $f102, $f91 -> $f106, $f92 -> $f107, $f93 -> $f108), [])

CHCData { predNames: {}, varTypes: {$f109: Int} }
id44($f109):>> Geq(id1: ($f0 -> $f109), id26: ())
 - Geq(id1: ($f0 -> $f109), id26: ())

CHCData { predNames: {}, varTypes: {$f110: Int} }
id45($f110):>> Minus(id1: ($f0 -> $f110), id26: ())
 - Minus(id1: ($f0 -> $f110), id26: ())

CHCData { predNames: {}, varTypes: {$f111: Int, $f112: Int} }
id46($f111, $f112):>> Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))
 - Eq(id1: ($f0 -> $f112), id45: ($f110 -> $f111))

CHCData { predNames: {}, varTypes: {$f118: Int, $f117: Int, $f114: Node, $f115: Node, $f116: Node, $f113: Int} }
id47($f113, $f114, $f115, $f116, $f117, $f118):>> And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])
 - And([id39: ($f84 -> $f114, $f85 -> $f115, $f86 -> $f116, $f87 -> $f117), id44: ($f109 -> $f113), id46: ($f111 -> $f113, $f112 -> $f118)])

CHCData { predNames: {}, varTypes: {} }
id49():>> Number(3)
 - Number(3)

CHCData { predNames: {"leafDrop"}, varTypes: {$f132: Int, $f128: Node, $f123: Node, $f133: Node, $f125: Int, $f126: Int, $f124: Int, $f120: Node, $f119: Int, $f131: Int, $f136: Int, $f127: Node, $f130: Node, $f129: Node, $f134: Node, $f135: Int, $f121: Node, $f122: Node} }
id50($f126, $f127, $f128):>> Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
 - Interface(id11: (), id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id49: ())
 - New(id12: ($f21 -> $f126, $f22 -> $f127, $f23 -> $f128), id47: ($f113 -> $f126, $f114 -> $f127, $f115 -> $f133, $f116 -> $f134, $f117 -> $f135, $f118 -> $f136), [AppliedId(id13: ($f24 -> $f126, $f25 -> $f127, $f26 -> $f128))])

CHCData { predNames: {}, varTypes: {$f140: Int} }
id52($f140):>> Eq(id1: ($f0 -> $f140), id6: ())
 - Eq(id1: ($f0 -> $f140), id6: ())

CHCData { predNames: {}, varTypes: {$f141: Node, $f142: Int} }
id53($f141, $f142):>> And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])
 - And([id52: ($f140 -> $f142), id33: ($f71 -> $f141)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f144: Int, $f143: Node, $f145: Node, $f146: Int} }
id55($f145, $f146):>> Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
 - Interface(id14: (), id15: ($f27 -> $f145, $f28 -> $f146), id26: ())
 - New(id15: ($f27 -> $f145, $f28 -> $f146), id53: ($f141 -> $f145, $f142 -> $f146), [])

CHCData { predNames: {}, varTypes: {$f147: Int} }
id56($f147):>> Add(id1: ($f0 -> $f147), id26: ())
 - Add(id1: ($f0 -> $f147), id26: ())

CHCData { predNames: {}, varTypes: {$f149: Int, $f148: Int} }
id57($f148, $f149):>> Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))
 - Eq(id1: ($f0 -> $f148), id56: ($f147 -> $f149))

CHCData { predNames: {}, varTypes: {$f155: Int, $f150: Node, $f154: Node, $f151: Int, $f152: Int, $f153: Node} }
id58($f150, $f151, $f152, $f153, $f154, $f155):>> And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])
 - And([id39: ($f84 -> $f150, $f85 -> $f153, $f86 -> $f154, $f87 -> $f152), id57: ($f148 -> $f151, $f149 -> $f155)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f173: Node, $f174: Node, $f157: Int, $f166: Int, $f164: Node, $f171: Int, $f175: Int, $f170: Int, $f161: Int, $f159: Node, $f156: Node, $f165: Int, $f176: Int, $f163: Int, $f169: Int, $f168: Node, $f177: Int, $f158: Int, $f172: Int, $f160: Node, $f167: Node, $f162: Int} }
id60($f164, $f165):>> Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
 - New(id15: ($f27 -> $f164, $f28 -> $f165), id58: ($f150 -> $f164, $f151 -> $f165, $f152 -> $f172, $f153 -> $f173, $f154 -> $f174, $f155 -> $f175), [AppliedId(id16: ($f29 -> $f173, $f30 -> $f176)), AppliedId(id16: ($f29 -> $f174, $f30 -> $f177)), AppliedId(id31: ($f68 -> $f176, $f69 -> $f177, $f70 -> $f175))])
 - Interface(id14: (), id15: ($f27 -> $f164, $f28 -> $f165), id42: ())
test chc::tst::tst2 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 73 filtered out; finished in 0.17s


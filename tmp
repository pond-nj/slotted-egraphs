   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.35s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-7db37e3e129514c0)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-9a9d60ae6aa2b312)

running 1 test
[entry::chc::tst] p_compose = (compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)>) (compose <(new (pred <(var $0)>) (true) <>)>)>) (new (pred <(var $0) (var $1)>) (true) <>)>)
[slotted_egraphs::parse] from (compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)>) (compose <(new (pred <(var $0)>) (true) <>)>)>) (new (pred <(var $0) (var $1)>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[entry::chc] calling make on Var($f0)
[entry::chc] result {$f0: Unknown}
[slotted_egraphs::egraph::add] classes insert id0
[slotted_egraphs::egraph::add] add to id0 Var($0)
[slotted_egraphs::egraph::add] remove from id0 Var($0)
[slotted_egraphs::egraph::add] add to id0 Var($0)
[entry::chc] calling make on Var($0)
[entry::chc] exists in egraph
[entry::chc] result {$f0: Unknown}
[entry::chc] calling merge to id0
[entry::chc] eclassSlots {$f0}
[entry::chc] result varTypes {$f0: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f1: Unknown, $f2: Unknown}
[slotted_egraphs::egraph::add] classes insert id1
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] remove from id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f1: Unknown, $f2: Unknown}
[entry::chc] calling merge to id1
[entry::chc] eclassSlots {$f2, $f1}
[entry::chc] result varTypes {$f1: Unknown, $f2: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred <(var $0) (var $1)>)
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id2
[slotted_egraphs::egraph::add] add to id2 True
[slotted_egraphs::egraph::add] remove from id2 True
[slotted_egraphs::egraph::add] add to id2 True
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[entry::chc] calling merge to id2
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (true)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred <(var $0) (var $1)>)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (true)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f3)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f3)])
[entry::chc] get {$f3: Unknown}
[slotted_egraphs::egraph::add] classes insert id3
[slotted_egraphs::egraph::add] add to id3 PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::add] remove from id3 PredSyntax([id0: ($f0 -> $0)])
[slotted_egraphs::egraph::add] add to id3 PredSyntax([id0: ($f0 -> $0)])
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f3)])
[entry::chc] get {$f3: Unknown}
[entry::chc] calling merge to id3
[entry::chc] eclassSlots {$f3}
[entry::chc] result varTypes {$f3: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred <(var $0)>)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (true)
[entry::chc] calling make on New(id3: ($f3 -> $f4), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f4}
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for New(id3: ($f3 -> $f4), id2: (), [])
[entry::chc] get {$f4: Unknown}
[slotted_egraphs::egraph::add] classes insert id4
[slotted_egraphs::egraph::add] add to id4 New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::add] remove from id4 New(id3: ($f3 -> $0), id2: (), [])
[slotted_egraphs::egraph::add] add to id4 New(id3: ($f3 -> $0), id2: (), [])
[entry::chc] calling make on New(id3: ($f3 -> $0), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f4}
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for New(id3: ($f3 -> $f4), id2: (), [])
[entry::chc] get {$f4: Unknown}
[entry::chc] calling merge to id4
[entry::chc] eclassSlots {$f4}
[entry::chc] result varTypes {$f4: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (new (pred <(var $0)>) (true) <>)
[entry::chc] calling make on Compose([AppliedId(id4: ($f4 -> $f5))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f5}
[entry::chc] childId : id4, mapToS : $f4
[entry::chc] adding $f5 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id4: ($f4 -> $f5))])
[entry::chc] get {$f5: Unknown}
[slotted_egraphs::egraph::add] classes insert id5
[slotted_egraphs::egraph::add] add to id5 Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::add] remove from id5 Compose([AppliedId(id4: ($f4 -> $0))])
[slotted_egraphs::egraph::add] add to id5 Compose([AppliedId(id4: ($f4 -> $0))])
[entry::chc] calling make on Compose([AppliedId(id4: ($f4 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f5}
[entry::chc] childId : id4, mapToS : $f4
[entry::chc] adding $f5 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id4: ($f4 -> $f5))])
[entry::chc] get {$f5: Unknown}
[entry::chc] calling merge to id5
[entry::chc] eclassSlots {$f5}
[entry::chc] result varTypes {$f5: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (compose <(new (pred <(var $0)>) (true) <>)>)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred <(var $1)>)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (true)
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (new (pred <(var $1)>) (true) <>)
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (compose <(new (pred <(var $1)>) (true) <>)>)
[entry::chc] calling make on New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f6, $f7}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f7 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[entry::chc] get {$f7: Unknown, $f6: Unknown}
[slotted_egraphs::egraph::add] classes insert id6
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] remove from id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f6, $f7}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f7 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[entry::chc] get {$f6: Unknown, $f7: Unknown}
[entry::chc] calling merge to id6
[entry::chc] eclassSlots {$f7, $f6}
[entry::chc] result varTypes {$f6: Unknown, $f7: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> (new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)
[entry::chc] calling make on Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f8, $f9}
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f9 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[entry::chc] get {$f9: Unknown, $f8: Unknown}
[slotted_egraphs::egraph::add] classes insert id7
[slotted_egraphs::egraph::add] add to id7 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] remove from id7 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] add to id7 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f8, $f9}
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f9 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[entry::chc] get {$f8: Unknown, $f9: Unknown}
[entry::chc] calling merge to id7
[entry::chc] eclassSlots {$f8, $f9}
[entry::chc] result varTypes {$f9: Unknown, $f8: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> (compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)>)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (pred <(var $0)>)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (true)
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (new (pred <(var $0)>) (true) <>)
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (compose <(new (pred <(var $0)>) (true) <>)>)
[entry::chc] calling make on New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f10, $f11}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f11 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[entry::chc] get {$f10: Unknown, $f11: Unknown}
[slotted_egraphs::egraph::add] classes insert id8
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] remove from id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f10, $f11}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f11 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[entry::chc] get {$f10: Unknown, $f11: Unknown}
[entry::chc] calling merge to id8
[entry::chc] eclassSlots {$f11, $f10}
[entry::chc] result varTypes {$f10: Unknown, $f11: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)>) (compose <(new (pred <(var $0)>) (true) <>)>)>)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $0)
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (var $1)
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred <(var $0) (var $1)>)
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> (true)
[entry::chc] calling make on New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f12, $f13}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f13 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[entry::chc] get {$f13: Unknown, $f12: Unknown}
[slotted_egraphs::egraph::add] classes insert id9
[slotted_egraphs::egraph::add] add to id9 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[slotted_egraphs::egraph::add] remove from id9 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[slotted_egraphs::egraph::add] add to id9 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f12, $f13}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f13 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[entry::chc] get {$f12: Unknown, $f13: Unknown}
[entry::chc] calling merge to id9
[entry::chc] eclassSlots {$f13, $f12}
[entry::chc] result varTypes {$f12: Unknown, $f13: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (new (pred <(var $0) (var $1)>) (true) <>)
[entry::chc] calling make on Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f14, $f15}
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f15 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[entry::chc] get {$f14: Unknown, $f15: Unknown}
[slotted_egraphs::egraph::add] classes insert id10
[slotted_egraphs::egraph::add] add to id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] remove from id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f14, $f15}
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f14 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f15 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[entry::chc] get {$f15: Unknown, $f14: Unknown}
[entry::chc] calling merge to id10
[entry::chc] eclassSlots {$f14, $f15}
[entry::chc] result varTypes {$f15: Unknown, $f14: Unknown}
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0) (var $1)>) (true) <(compose <(new (pred <(var $0)>) (true) <>)>) (compose <(new (pred <(var $1)>) (true) <>)>)>)>) (compose <(new (pred <(var $0)>) (true) <>)>)>) (new (pred <(var $0) (var $1)>) (true) <>)>)
[slotted_egraphs::parse] from (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2> ) *3>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(0), RVecBracket, RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] from (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] from (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] from (true)
[slotted_egraphs::parse] to tokens [LParen, Ident("true"), RParen]
[slotted_egraphs::parse] from (and <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("and"), LVecBracket, RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f14, $f11 -> $f15), id9: ($f12 -> $f14, $f13 -> $f15)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f14, $f2 -> $f15), id2: (), [AppliedId(id7: ($f8 -> $f14, $f9 -> $f15)), AppliedId(id5: ($f5 -> $f14))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f14, $f2 -> $f15), id2: (), id7: ($f8 -> $f14, $f9 -> $f15), id5: ($f5 -> $f14)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f14, $f2 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f14, $f2 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f14, $f11 -> $f15)), AppliedId(id9: ($f12 -> $f14, $f13 -> $f15))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f14, $f11 -> $f15), id9: ($f12 -> $f14, $f13 -> $f15)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f14, $f11 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f14, $f11 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f14, $f13 -> $f15) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f14, $f13 -> $f15), "star_1_0": id8: ($f10 -> $f14, $f11 -> $f15)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f18, $f7 -> $f17) with id6: ($f6 -> $f18, $f7 -> $f17)
[entry::chc] calling make on New(id1: ($f1 -> $f36, $f2 -> $f35), id2: (), [AppliedId(id5: ($f5 -> $f35)), AppliedId(id5: ($f5 -> $f36))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f35, $f36}
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f36 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f36, $f2 -> $f35), id2: (), [AppliedId(id5: ($f5 -> $f35)), AppliedId(id5: ($f5 -> $f36))])
[entry::chc] get {$f36: Unknown, $f35: Unknown}
[slotted_egraphs::egraph::add] classes insert id11
[slotted_egraphs::egraph::add] add to id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] remove from id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f35, $f36}
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f36 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f36, $f2 -> $f35), id2: (), [AppliedId(id5: ($f5 -> $f35)), AppliedId(id5: ($f5 -> $f36))])
[entry::chc] get {$f35: Unknown, $f36: Unknown}
[entry::chc] calling merge to id11
[entry::chc] eclassSlots {$f36, $f35}
[entry::chc] result varTypes {$f35: Unknown, $f36: Unknown}
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f18, $f7 -> $f17) with id11: ($f35 -> $f17, $f36 -> $f18)
[slotted_egraphs::egraph::union] Call move_to id11: ($f35 -> $f17, $f36 -> $f18), id6: ($f6 -> $f18, $f7 -> $f17)
[entry::chc] calling merge to id6
[entry::chc] eclassSlots {$f7, $f6}
[entry::chc] result varTypes {$f6: Unknown, $f7: Unknown}
[slotted_egraphs::egraph::add] remove from id11 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))]) to self.pending
[slotted_egraphs::egraph::add] remove from id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id6 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f6, $f7}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f6 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f7 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[entry::chc] get {$f7: Unknown, $f6: Unknown}
[entry::chc] calling merge to id6
[entry::chc] eclassSlots {$f7, $f6}
[entry::chc] result varTypes {$f7: Unknown, $f6: Unknown}
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f19, $f11 -> $f20) with id8: ($f10 -> $f19, $f11 -> $f20)
[entry::chc] calling make on New(id1: ($f1 -> $f37, $f2 -> $f38), id2: (), [AppliedId(id5: ($f5 -> $f37)), AppliedId(id7: ($f8 -> $f37, $f9 -> $f38))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f37, $f38}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] adding $f38 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f37, $f2 -> $f38), id2: (), [AppliedId(id5: ($f5 -> $f37)), AppliedId(id7: ($f8 -> $f37, $f9 -> $f38))])
[entry::chc] get {$f38: Unknown, $f37: Unknown}
[slotted_egraphs::egraph::add] classes insert id12
[slotted_egraphs::egraph::add] add to id12 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] remove from id12 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] add to id12 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f37, $f38}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] adding $f37 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] adding $f38 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f37, $f2 -> $f38), id2: (), [AppliedId(id5: ($f5 -> $f37)), AppliedId(id7: ($f8 -> $f37, $f9 -> $f38))])
[entry::chc] get {$f37: Unknown, $f38: Unknown}
[entry::chc] calling merge to id12
[entry::chc] eclassSlots {$f37, $f38}
[entry::chc] result varTypes {$f38: Unknown, $f37: Unknown}
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f19, $f11 -> $f20) with id12: ($f37 -> $f19, $f38 -> $f20)
[slotted_egraphs::egraph::union] Call move_to id12: ($f37 -> $f19, $f38 -> $f20), id8: ($f10 -> $f19, $f11 -> $f20)
[entry::chc] calling merge to id8
[entry::chc] eclassSlots {$f11, $f10}
[entry::chc] result varTypes {$f10: Unknown, $f11: Unknown}
[slotted_egraphs::egraph::add] remove from id12 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] add to id8 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f10, $f11}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f11 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] adding $f11 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[entry::chc] get {$f11: Unknown, $f10: Unknown}
[entry::chc] calling merge to id8
[entry::chc] eclassSlots {$f11, $f10}
[entry::chc] result varTypes {$f10: Unknown, $f11: Unknown}
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f23) with id5: ($f5 -> $f23)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f24, $f9 -> $f25) with id7: ($f8 -> $f24, $f9 -> $f25)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id10: ($f14 -> $f26, $f15 -> $f27) with id10: ($f14 -> $f26, $f15 -> $f27)
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] classes insert id13
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id8: ($f10 -> $0, $f11 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[entry::chc] get {$f39: Unknown, $f40: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id10: ($f14 -> $f26, $f15 -> $f27) with id13: ($f39 -> $f26, $f40 -> $f27)
[slotted_egraphs::egraph::union] Call move_to id10: ($f14 -> $f26, $f15 -> $f27), id13: ($f39 -> $f26, $f40 -> $f27)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::add] remove from id10 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id8: ($f10 -> $0, $f11 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id8, mapToS : $f10
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id8, mapToS : $f11
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[entry::chc] get {$f39: Unknown, $f40: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f28), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f29), "star_1_0": id5: ($f5 -> $f30), "syntax": id1: ($f1 -> $f30, $f2 -> $f29)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f31), "star_1_0": id7: ($f8 -> $f31, $f9 -> $f32), "syntax": id1: ($f1 -> $f31, $f2 -> $f32)}, {"syntax": id1: ($f1 -> $f33, $f2 -> $f34), "cond": id2: ()}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            1,
        ],
        $f6: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f10: [
            0,
            1,
        ],
        $f11: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc] calling make on And([])
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for And([])
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id14
[slotted_egraphs::egraph::add] add to id14 And([])
[slotted_egraphs::egraph::add] remove from id14 And([])
[slotted_egraphs::egraph::add] add to id14 And([])
[entry::chc] calling make on And([])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for And([])
[entry::chc] get {}
[entry::chc] calling merge to id14
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id14: ()
[slotted_egraphs::egraph::union] Call move_to id14: (), id2: ()
[entry::chc] calling merge to id2
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph::add] remove from id14 And([])
[slotted_egraphs::egraph::add] add to id2 And([])
[slotted_egraphs::egraph::union] adding And([]) to self.pending
[slotted_egraphs::egraph::add] remove from id2 And([])
[slotted_egraphs::egraph::add] add to id2 And([])
[entry::chc] calling make on And([])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for And([])
[entry::chc] get {}
[entry::chc] calling merge to id2
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id7: ($f8 -> $f39, $f9 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id7: ($f8 -> $f39, $f9 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f39, $f9 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id8: ($f10 -> $f39, $f11 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f41),
            "star_1_0": id6: ($f6 -> $f41, $f7 -> $f42),
            "star_3_0": id9: ($f12 -> $f41, $f13 -> $f42),
            "syntax1": id1: ($f1 -> $f41, $f2 -> $f42),
        },
        {
            "star_2_0": id7: ($f8 -> $f43, $f9 -> $f44),
            "star_1_0": id4: ($f4 -> $f43),
            "star_3_0": id9: ($f12 -> $f43, $f13 -> $f44),
            "syntax1": id1: ($f1 -> $f43, $f2 -> $f44),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] calling make on New(id1: ($f1 -> $f74, $f2 -> $f75), id2: (), [AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f75))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f74, $f75}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f75 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f74, $f2 -> $f75), id2: (), [AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f75))])
[entry::chc] get {$f74: Unknown, $f75: Unknown}
[slotted_egraphs::egraph::add] classes insert id15
[slotted_egraphs::egraph::add] add to id15 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] remove from id15 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id15 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f74, $f75}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f74 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f75 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f75 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f74, $f2 -> $f75), id2: (), [AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f75))])
[entry::chc] get {$f74: Unknown, $f75: Unknown}
[entry::chc] calling merge to id15
[entry::chc] eclassSlots {$f75, $f74}
[entry::chc] result varTypes {$f75: Unknown, $f74: Unknown}
[entry::chc] calling make on New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f76, $f77}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f77 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[entry::chc] get {$f76: Unknown, $f77: Unknown}
[slotted_egraphs::egraph::add] classes insert id16
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] remove from id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f76, $f77}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f77 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[entry::chc] get {$f77: Unknown, $f76: Unknown}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f76, $f77}
[entry::chc] result varTypes {$f77: Unknown, $f76: Unknown}
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f78, $f13 -> $f79)), AppliedId(id15: ($f74 -> $f78, $f75 -> $f79))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f78, $f79}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id15, mapToS : $f74
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f79 to varTypes
[entry::chc] childId : id15, mapToS : $f75
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f78, $f13 -> $f79)), AppliedId(id15: ($f74 -> $f78, $f75 -> $f79))])
[entry::chc] get {$f78: Unknown, $f79: Unknown}
[slotted_egraphs::egraph::add] classes insert id17
[slotted_egraphs::egraph::add] add to id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[slotted_egraphs::egraph::add] remove from id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[slotted_egraphs::egraph::add] add to id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f78, $f79}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id15, mapToS : $f74
[entry::chc] adding $f78 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f79 to varTypes
[entry::chc] childId : id15, mapToS : $f75
[entry::chc] adding $f79 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f78, $f13 -> $f79)), AppliedId(id15: ($f74 -> $f78, $f75 -> $f79))])
[entry::chc] get {$f78: Unknown, $f79: Unknown}
[entry::chc] calling merge to id17
[entry::chc] eclassSlots {$f78, $f79}
[entry::chc] result varTypes {$f79: Unknown, $f78: Unknown}
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f41, $f40 -> $f42) with id17: ($f78 -> $f41, $f79 -> $f42)
[slotted_egraphs::egraph::union] Call move_to id17: ($f78 -> $f41, $f79 -> $f42), id13: ($f39 -> $f41, $f40 -> $f42)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::add] remove from id17 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id15, mapToS : $f74
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id15, mapToS : $f75
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id15: ($f74 -> $f39, $f75 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f80, $f13 -> $f81)), AppliedId(id16: ($f76 -> $f80, $f77 -> $f81))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f80, $f81}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f80 to varTypes
[entry::chc] childId : id16, mapToS : $f76
[entry::chc] adding $f80 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f81 to varTypes
[entry::chc] childId : id16, mapToS : $f77
[entry::chc] adding $f81 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f80, $f13 -> $f81)), AppliedId(id16: ($f76 -> $f80, $f77 -> $f81))])
[entry::chc] get {$f80: Unknown, $f81: Unknown}
[slotted_egraphs::egraph::add] classes insert id18
[slotted_egraphs::egraph::add] add to id18 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[slotted_egraphs::egraph::add] remove from id18 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[slotted_egraphs::egraph::add] add to id18 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f80, $f81}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f80 to varTypes
[entry::chc] childId : id16, mapToS : $f76
[entry::chc] adding $f80 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f81 to varTypes
[entry::chc] childId : id16, mapToS : $f77
[entry::chc] adding $f81 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f80, $f13 -> $f81)), AppliedId(id16: ($f76 -> $f80, $f77 -> $f81))])
[entry::chc] get {$f81: Unknown, $f80: Unknown}
[entry::chc] calling merge to id18
[entry::chc] eclassSlots {$f81, $f80}
[entry::chc] result varTypes {$f80: Unknown, $f81: Unknown}
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f41, $f40 -> $f42) with id18: ($f80 -> $f41, $f81 -> $f42)
[slotted_egraphs::egraph::union] Call move_to id18: ($f80 -> $f41, $f81 -> $f42), id13: ($f39 -> $f41, $f40 -> $f42)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::add] remove from id18 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id16: ($f76 -> $0, $f77 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f76
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id16, mapToS : $f77
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[entry::chc] get {$f39: Unknown, $f40: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] calling make on New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f82, $f83}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f83 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] adding $f83 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[entry::chc] get {$f82: Unknown, $f83: Unknown}
[slotted_egraphs::egraph::add] classes insert id19
[slotted_egraphs::egraph::add] add to id19 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] remove from id19 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[slotted_egraphs::egraph::add] add to id19 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id7: ($f8 -> $0, $f9 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f82, $f83}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id7, mapToS : $f8
[entry::chc] adding $f82 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f83 to varTypes
[entry::chc] childId : id7, mapToS : $f9
[entry::chc] adding $f83 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[entry::chc] get {$f82: Unknown, $f83: Unknown}
[entry::chc] calling merge to id19
[entry::chc] eclassSlots {$f83, $f82}
[entry::chc] result varTypes {$f83: Unknown, $f82: Unknown}
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f84, $f13 -> $f85)), AppliedId(id19: ($f82 -> $f84, $f83 -> $f85))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f84, $f85}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id19, mapToS : $f82
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f85 to varTypes
[entry::chc] childId : id19, mapToS : $f83
[entry::chc] adding $f85 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f84, $f13 -> $f85)), AppliedId(id19: ($f82 -> $f84, $f83 -> $f85))])
[entry::chc] get {$f85: Unknown, $f84: Unknown}
[slotted_egraphs::egraph::add] classes insert id20
[slotted_egraphs::egraph::add] add to id20 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[slotted_egraphs::egraph::add] remove from id20 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[slotted_egraphs::egraph::add] add to id20 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f84, $f85}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id19, mapToS : $f82
[entry::chc] adding $f84 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f85 to varTypes
[entry::chc] childId : id19, mapToS : $f83
[entry::chc] adding $f85 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f84, $f13 -> $f85)), AppliedId(id19: ($f82 -> $f84, $f83 -> $f85))])
[entry::chc] get {$f84: Unknown, $f85: Unknown}
[entry::chc] calling merge to id20
[entry::chc] eclassSlots {$f84, $f85}
[entry::chc] result varTypes {$f84: Unknown, $f85: Unknown}
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f43, $f40 -> $f44) with id20: ($f84 -> $f43, $f85 -> $f44)
[slotted_egraphs::egraph::union] Call move_to id20: ($f84 -> $f43, $f85 -> $f44), id13: ($f39 -> $f43, $f40 -> $f44)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::add] remove from id20 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id19: ($f82 -> $0, $f83 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id19, mapToS : $f82
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id19, mapToS : $f83
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f47, $f7 -> $f46) with id6: ($f6 -> $f47, $f7 -> $f46)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f47, $f7 -> $f46) with id6: ($f6 -> $f47, $f7 -> $f46)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f48, $f7 -> $f49) with id6: ($f6 -> $f48, $f7 -> $f49)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f48, $f7 -> $f49) with id6: ($f6 -> $f48, $f7 -> $f49)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f50, $f11 -> $f51) with id8: ($f10 -> $f50, $f11 -> $f51)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f50, $f11 -> $f51) with id8: ($f10 -> $f50, $f11 -> $f51)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f52, $f11 -> $f53) with id8: ($f10 -> $f52, $f11 -> $f53)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f52, $f11 -> $f53) with id8: ($f10 -> $f52, $f11 -> $f53)
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f56) with id5: ($f5 -> $f56)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f57, $f9 -> $f58) with id7: ($f8 -> $f57, $f9 -> $f58)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f59, $f40 -> $f60) with id13: ($f39 -> $f59, $f40 -> $f60)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f59, $f40 -> $f60) with id13: ($f39 -> $f59, $f40 -> $f60)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f61, $f40 -> $f62) with id13: ($f39 -> $f61, $f40 -> $f62)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f61, $f40 -> $f62) with id13: ($f39 -> $f61, $f40 -> $f62)
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f63), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f64), "star_1_0": id5: ($f5 -> $f65), "syntax": id1: ($f1 -> $f65, $f2 -> $f64)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f66), "star_1_0": id5: ($f5 -> $f67), "syntax": id1: ($f1 -> $f66, $f2 -> $f67)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f68), "star_1_0": id7: ($f8 -> $f68, $f9 -> $f69), "syntax": id1: ($f1 -> $f68, $f2 -> $f69)}, {"cond": id2: (), "star_1_1": id7: ($f8 -> $f70, $f9 -> $f71), "star_1_0": id5: ($f5 -> $f70), "syntax": id1: ($f1 -> $f70, $f2 -> $f71)}, {"syntax": id1: ($f1 -> $f72, $f2 -> $f73), "cond": id2: ()}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            1,
        ],
        $f6: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f7),
        id5: ($f5 -> $f6),
    ]
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] mergeVarTypes = {
        $f7: Unknown,
        $f6: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f6: [
            1,
        ],
        $f7: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f11: Unknown,
        $f10: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            0,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f10),
        id7: ($f8 -> $f10, $f9 -> $f11),
    ]
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            1,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id2: ()
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id15: ($f74 -> $f39, $f75 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id15: ($f74 -> $f39, $f75 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id7: ($f8 -> $f39, $f9 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id7: ($f8 -> $f39, $f9 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f39, $f9 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f74, $f2 -> $f75), id2: (), [AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f75))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f74, $f2 -> $f75), id2: (), id5: ($f5 -> $f74), id5: ($f5 -> $f74), id5: ($f5 -> $f75)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f74, $f2 -> $f75) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f74, $f2 -> $f75)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f74, $f2 -> $f75), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f74) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f74, $f2 -> $f75), "cond": id2: (), "star_1_0": id5: ($f5 -> $f74)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f74) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f74), "star_1_0": id5: ($f5 -> $f74), "syntax": id1: ($f1 -> $f74, $f2 -> $f75)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f75) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f74), "star_1_0": id5: ($f5 -> $f74), "syntax": id1: ($f1 -> $f74, $f2 -> $f75), "star_1_2": id5: ($f5 -> $f75)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id15: ($f74 -> $f39, $f75 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id15: ($f74 -> $f39, $f75 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id15: ($f74 -> $f39, $f75 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id15: ($f74 -> $f39, $f75 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id16: ($f76 -> $f39, $f77 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id19: ($f82 -> $f39, $f83 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id8: ($f10 -> $f39, $f11 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f74, $f2 -> $f75), id2: (), [AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f74)), AppliedId(id5: ($f5 -> $f75))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f74, $f2 -> $f75), id2: (), id5: ($f5 -> $f74), id5: ($f5 -> $f74), id5: ($f5 -> $f75)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f74, $f2 -> $f75) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f74, $f2 -> $f75)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f74, $f2 -> $f75), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f74) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f74, $f2 -> $f75), "cond": id2: (), "star_1_0": id5: ($f5 -> $f74)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f74) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f74), "star_1_0": id5: ($f5 -> $f74), "syntax": id1: ($f1 -> $f74, $f2 -> $f75)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f75) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f74), "star_1_0": id5: ($f5 -> $f74), "syntax": id1: ($f1 -> $f74, $f2 -> $f75), "star_1_2": id5: ($f5 -> $f75)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f86),
            "star_1_0": id6: ($f6 -> $f86, $f7 -> $f87),
            "star_3_0": id9: ($f12 -> $f86, $f13 -> $f87),
            "syntax1": id1: ($f1 -> $f86, $f2 -> $f87),
        },
        {
            "star_2_0": id7: ($f8 -> $f88, $f9 -> $f89),
            "star_1_0": id4: ($f4 -> $f88),
            "star_3_0": id9: ($f12 -> $f88, $f13 -> $f89),
            "syntax1": id1: ($f1 -> $f88, $f2 -> $f89),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f86, $f40 -> $f87) with id13: ($f39 -> $f86, $f40 -> $f87)
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f86, $f40 -> $f87) with id13: ($f39 -> $f86, $f40 -> $f87)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f88, $f40 -> $f89) with id13: ($f39 -> $f88, $f40 -> $f89)
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f92, $f7 -> $f91) with id6: ($f6 -> $f92, $f7 -> $f91)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f92, $f7 -> $f91) with id6: ($f6 -> $f92, $f7 -> $f91)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f93, $f7 -> $f94) with id6: ($f6 -> $f93, $f7 -> $f94)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f93, $f7 -> $f94) with id6: ($f6 -> $f93, $f7 -> $f94)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f95, $f11 -> $f96) with id8: ($f10 -> $f95, $f11 -> $f96)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f95, $f11 -> $f96) with id8: ($f10 -> $f95, $f11 -> $f96)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f97, $f11 -> $f98) with id8: ($f10 -> $f97, $f11 -> $f98)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f97, $f11 -> $f98) with id8: ($f10 -> $f97, $f11 -> $f98)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id15: ($f74 -> $f101, $f75 -> $f102) with id15: ($f74 -> $f101, $f75 -> $f102)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id15: ($f74 -> $f101, $f75 -> $f102) with id15: ($f74 -> $f101, $f75 -> $f102)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id15: ($f74 -> $f101, $f75 -> $f102) with id16: ($f76 -> $f101, $f77 -> $f102)
[slotted_egraphs::egraph::union] Call move_to id15: ($f74 -> $f101, $f75 -> $f102), id16: ($f76 -> $f101, $f77 -> $f102)
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f76, $f77}
[entry::chc] result varTypes {$f76: Unknown, $f77: Unknown}
[slotted_egraphs::egraph::add] remove from id15 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id15: ($f74 -> $0, $f75 -> $1))])
[slotted_egraphs::egraph::rebuild] end handling pending at 1
[slotted_egraphs::egraph::add] remove from id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f76, $f77}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f77 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[entry::chc] get {$f76: Unknown, $f77: Unknown}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f76, $f77}
[entry::chc] result varTypes {$f77: Unknown, $f76: Unknown}
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f101, $f77 -> $f102) with id16: ($f76 -> $f101, $f77 -> $f102)
[entry::chc] calling make on New(id1: ($f1 -> $f137, $f2 -> $f138), id2: (), [AppliedId(id5: ($f5 -> $f138)), AppliedId(id5: ($f5 -> $f137)), AppliedId(id5: ($f5 -> $f137))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f137, $f138}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f138 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f137, $f2 -> $f138), id2: (), [AppliedId(id5: ($f5 -> $f138)), AppliedId(id5: ($f5 -> $f137)), AppliedId(id5: ($f5 -> $f137))])
[entry::chc] get {$f137: Unknown, $f138: Unknown}
[slotted_egraphs::egraph::add] classes insert id21
[slotted_egraphs::egraph::add] add to id21 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] remove from id21 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id21 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f137, $f138}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f137 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f138 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f138 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f137, $f2 -> $f138), id2: (), [AppliedId(id5: ($f5 -> $f138)), AppliedId(id5: ($f5 -> $f137)), AppliedId(id5: ($f5 -> $f137))])
[entry::chc] get {$f137: Unknown, $f138: Unknown}
[entry::chc] calling merge to id21
[entry::chc] eclassSlots {$f137, $f138}
[entry::chc] result varTypes {$f137: Unknown, $f138: Unknown}
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f101, $f77 -> $f102) with id21: ($f137 -> $f101, $f138 -> $f102)
[slotted_egraphs::egraph::union] Call move_to id21: ($f137 -> $f101, $f138 -> $f102), id16: ($f76 -> $f101, $f77 -> $f102)
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f76, $f77}
[entry::chc] result varTypes {$f77: Unknown, $f76: Unknown}
[slotted_egraphs::egraph::add] remove from id21 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))]) to self.pending
[slotted_egraphs::egraph::add] remove from id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id16 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1)), AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f76, $f77}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f76 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f77 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f77 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[entry::chc] get {$f77: Unknown, $f76: Unknown}
[entry::chc] calling merge to id16
[entry::chc] eclassSlots {$f76, $f77}
[entry::chc] result varTypes {$f77: Unknown, $f76: Unknown}
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f101, $f77 -> $f102) with id16: ($f76 -> $f101, $f77 -> $f102)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f104, $f77 -> $f103) with id16: ($f76 -> $f104, $f77 -> $f103)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f104, $f77 -> $f103) with id16: ($f76 -> $f104, $f77 -> $f103)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f104, $f77 -> $f103) with id16: ($f76 -> $f104, $f77 -> $f103)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f104, $f77 -> $f103) with id16: ($f76 -> $f104, $f77 -> $f103)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f104, $f77 -> $f103) with id16: ($f76 -> $f104, $f77 -> $f103)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f104, $f77 -> $f103) with id16: ($f76 -> $f104, $f77 -> $f103)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id19: ($f82 -> $f105, $f83 -> $f106) with id19: ($f82 -> $f105, $f83 -> $f106)
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f107) with id5: ($f5 -> $f107)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f108, $f9 -> $f109) with id7: ($f8 -> $f108, $f9 -> $f109)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f110, $f40 -> $f111) with id13: ($f39 -> $f110, $f40 -> $f111)
[entry::chc] calling make on Compose([AppliedId(id16: ($f76 -> $f139, $f77 -> $f140)), AppliedId(id9: ($f12 -> $f139, $f13 -> $f140))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f139, $f140}
[entry::chc] childId : id16, mapToS : $f76
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id16, mapToS : $f77
[entry::chc] adding $f140 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f140 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id16: ($f76 -> $f139, $f77 -> $f140)), AppliedId(id9: ($f12 -> $f139, $f13 -> $f140))])
[entry::chc] get {$f140: Unknown, $f139: Unknown}
[slotted_egraphs::egraph::add] classes insert id22
[slotted_egraphs::egraph::add] add to id22 Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] remove from id22 Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id22 Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f139, $f140}
[entry::chc] childId : id16, mapToS : $f76
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f139 to varTypes
[entry::chc] childId : id16, mapToS : $f77
[entry::chc] adding $f140 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f140 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id16: ($f76 -> $f139, $f77 -> $f140)), AppliedId(id9: ($f12 -> $f139, $f13 -> $f140))])
[entry::chc] get {$f139: Unknown, $f140: Unknown}
[entry::chc] calling merge to id22
[entry::chc] eclassSlots {$f140, $f139}
[entry::chc] result varTypes {$f140: Unknown, $f139: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f110, $f40 -> $f111) with id22: ($f139 -> $f110, $f140 -> $f111)
[slotted_egraphs::egraph::union] Call move_to id22: ($f139 -> $f110, $f140 -> $f111), id13: ($f39 -> $f110, $f40 -> $f111)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] remove from id22 Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id16: ($f76 -> $0, $f77 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id16, mapToS : $f76
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f77
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[entry::chc] get {$f39: Unknown, $f40: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f112, $f40 -> $f113) with id13: ($f39 -> $f112, $f40 -> $f113)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f112, $f40 -> $f113) with id13: ($f39 -> $f112, $f40 -> $f113)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f114, $f40 -> $f115) with id13: ($f39 -> $f114, $f40 -> $f115)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f114, $f40 -> $f115) with id13: ($f39 -> $f114, $f40 -> $f115)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f116, $f40 -> $f117) with id13: ($f39 -> $f116, $f40 -> $f117)
[entry::chc] calling make on Compose([AppliedId(id19: ($f82 -> $f141, $f83 -> $f142)), AppliedId(id9: ($f12 -> $f141, $f13 -> $f142))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f141, $f142}
[entry::chc] childId : id19, mapToS : $f82
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id19, mapToS : $f83
[entry::chc] adding $f142 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f142 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id19: ($f82 -> $f141, $f83 -> $f142)), AppliedId(id9: ($f12 -> $f141, $f13 -> $f142))])
[entry::chc] get {$f142: Unknown, $f141: Unknown}
[slotted_egraphs::egraph::add] classes insert id23
[slotted_egraphs::egraph::add] add to id23 Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] remove from id23 Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id23 Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f141, $f142}
[entry::chc] childId : id19, mapToS : $f82
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f141 to varTypes
[entry::chc] childId : id19, mapToS : $f83
[entry::chc] adding $f142 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f142 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id19: ($f82 -> $f141, $f83 -> $f142)), AppliedId(id9: ($f12 -> $f141, $f13 -> $f142))])
[entry::chc] get {$f141: Unknown, $f142: Unknown}
[entry::chc] calling merge to id23
[entry::chc] eclassSlots {$f142, $f141}
[entry::chc] result varTypes {$f141: Unknown, $f142: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f116, $f40 -> $f117) with id23: ($f141 -> $f116, $f142 -> $f117)
[slotted_egraphs::egraph::union] Call move_to id23: ($f141 -> $f116, $f142 -> $f117), id13: ($f39 -> $f116, $f40 -> $f117)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] remove from id23 Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id19: ($f82 -> $0, $f83 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id19, mapToS : $f82
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id19, mapToS : $f83
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[entry::chc] get {$f39: Unknown, $f40: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f118, $f40 -> $f119) with id13: ($f39 -> $f118, $f40 -> $f119)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f118, $f40 -> $f119) with id13: ($f39 -> $f118, $f40 -> $f119)
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f120), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f121), "star_1_0": id5: ($f5 -> $f122), "syntax": id1: ($f1 -> $f122, $f2 -> $f121)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f123), "star_1_0": id5: ($f5 -> $f124), "syntax": id1: ($f1 -> $f123, $f2 -> $f124)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f125), "star_1_0": id7: ($f8 -> $f125, $f9 -> $f126), "syntax": id1: ($f1 -> $f125, $f2 -> $f126)}, {"cond": id2: (), "star_1_1": id7: ($f8 -> $f127, $f9 -> $f128), "star_1_0": id5: ($f5 -> $f127), "syntax": id1: ($f1 -> $f127, $f2 -> $f128)}, {"syntax": id1: ($f1 -> $f129, $f2 -> $f130), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f131), "star_1_0": id5: ($f5 -> $f131), "syntax": id1: ($f1 -> $f131, $f2 -> $f132), "star_1_2": id5: ($f5 -> $f132)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f133), "star_1_0": id5: ($f5 -> $f134), "syntax": id1: ($f1 -> $f134, $f2 -> $f133), "star_1_2": id5: ($f5 -> $f134)}, {"syntax": id1: ($f1 -> $f135, $f2 -> $f136), "cond": id2: (), "star_1_0": id7: ($f8 -> $f135, $f9 -> $f136)}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f7: Unknown,
        $f6: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            1,
        ],
        $f6: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f7),
        id5: ($f5 -> $f6),
    ]
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f6: [
            1,
        ],
        $f7: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f11: Unknown,
        $f10: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            0,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f10),
        id7: ($f8 -> $f10, $f9 -> $f11),
    ]
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f10: [
            0,
            1,
        ],
        $f11: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f76: [
            0,
            1,
        ],
        $f77: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f76: Unknown,
        $f77: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f76: [
            0,
            2,
        ],
        $f77: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] root eclass id19 
    CHCData { predNames: {}, varTypes: {$f83: Unknown, $f82: Unknown} }
    ($f82, $f83):>> New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
     - New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f82, $f9 -> $f83),
    ]
[entry::chc::rewrite] appId.slots {$f82, $f83}
[entry::chc::rewrite] mergeVarTypes = {
        $f83: Unknown,
        $f82: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f83: [
            0,
        ],
        $f82: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f83
[entry::chc::rewrite] var = $f82
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id2: ()
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id7: ($f8 -> $f39, $f9 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id7: ($f8 -> $f39, $f9 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f39, $f9 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id16: ($f76 -> $f39, $f77 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id19: ($f82 -> $f39, $f83 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id8: ($f10 -> $f39, $f11 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f143),
            "star_1_0": id6: ($f6 -> $f143, $f7 -> $f144),
            "star_3_0": id9: ($f12 -> $f143, $f13 -> $f144),
            "syntax1": id1: ($f1 -> $f143, $f2 -> $f144),
        },
        {
            "star_2_0": id7: ($f8 -> $f145, $f9 -> $f146),
            "star_1_0": id4: ($f4 -> $f145),
            "star_3_0": id9: ($f12 -> $f145, $f13 -> $f146),
            "syntax1": id1: ($f1 -> $f145, $f2 -> $f146),
        },
        {
            "star_2_0": id5: ($f5 -> $f147),
            "star_2_1": id5: ($f5 -> $f148),
            "star_1_0": id4: ($f4 -> $f148),
            "star_3_0": id9: ($f12 -> $f148, $f13 -> $f147),
            "syntax1": id1: ($f1 -> $f148, $f2 -> $f147),
        },
        {
            "star_2_0": id5: ($f5 -> $f149),
            "star_2_1": id5: ($f5 -> $f149),
            "star_1_0": id4: ($f4 -> $f150),
            "star_3_0": id9: ($f12 -> $f149, $f13 -> $f150),
            "syntax1": id1: ($f1 -> $f149, $f2 -> $f150),
        },
        {
            "star_2_0": id5: ($f5 -> $f151),
            "star_2_1": id5: ($f5 -> $f152),
            "star_1_0": id4: ($f4 -> $f151),
            "star_3_0": id9: ($f12 -> $f151, $f13 -> $f152),
            "syntax1": id1: ($f1 -> $f151, $f2 -> $f152),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f143, $f40 -> $f144) with id13: ($f39 -> $f143, $f40 -> $f144)
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f143, $f40 -> $f144) with id13: ($f39 -> $f143, $f40 -> $f144)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f145, $f40 -> $f146) with id13: ($f39 -> $f145, $f40 -> $f146)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f207, $f13 -> $f206)), AppliedId(id6: ($f6 -> $f207, $f7 -> $f206))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f206, $f207}
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f206 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f206 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f207 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f207 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f207, $f13 -> $f206)), AppliedId(id6: ($f6 -> $f207, $f7 -> $f206))])
[entry::chc] get {$f206: Unknown, $f207: Unknown}
[slotted_egraphs::egraph::add] classes insert id24
[slotted_egraphs::egraph::add] add to id24 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] remove from id24 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] add to id24 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f206, $f207}
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f206 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f206 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f207 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f207 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f207, $f13 -> $f206)), AppliedId(id6: ($f6 -> $f207, $f7 -> $f206))])
[entry::chc] get {$f207: Unknown, $f206: Unknown}
[entry::chc] calling merge to id24
[entry::chc] eclassSlots {$f207, $f206}
[entry::chc] result varTypes {$f206: Unknown, $f207: Unknown}
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f148, $f40 -> $f147) with id24: ($f206 -> $f147, $f207 -> $f148)
[slotted_egraphs::egraph::union] Call move_to id24: ($f206 -> $f147, $f207 -> $f148), id13: ($f39 -> $f148, $f40 -> $f147)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] remove from id24 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id6: ($f6 -> $0, $f7 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[entry::chc] get {$f39: Unknown, $f40: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[entry::chc] calling make on New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f208, $f209}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f209 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[entry::chc] get {$f209: Unknown, $f208: Unknown}
[slotted_egraphs::egraph::add] classes insert id25
[slotted_egraphs::egraph::add] add to id25 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] remove from id25 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id25 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0)), AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f208, $f209}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f209 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[entry::chc] get {$f209: Unknown, $f208: Unknown}
[entry::chc] calling merge to id25
[entry::chc] eclassSlots {$f208, $f209}
[entry::chc] result varTypes {$f209: Unknown, $f208: Unknown}
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f210, $f13 -> $f211)), AppliedId(id25: ($f208 -> $f210, $f209 -> $f211))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f210, $f211}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f210 to varTypes
[entry::chc] childId : id25, mapToS : $f208
[entry::chc] adding $f210 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f211 to varTypes
[entry::chc] childId : id25, mapToS : $f209
[entry::chc] adding $f211 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f210, $f13 -> $f211)), AppliedId(id25: ($f208 -> $f210, $f209 -> $f211))])
[entry::chc] get {$f211: Unknown, $f210: Unknown}
[slotted_egraphs::egraph::add] classes insert id26
[slotted_egraphs::egraph::add] add to id26 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[slotted_egraphs::egraph::add] remove from id26 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[slotted_egraphs::egraph::add] add to id26 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f210, $f211}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f210 to varTypes
[entry::chc] childId : id25, mapToS : $f208
[entry::chc] adding $f210 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f211 to varTypes
[entry::chc] childId : id25, mapToS : $f209
[entry::chc] adding $f211 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f210, $f13 -> $f211)), AppliedId(id25: ($f208 -> $f210, $f209 -> $f211))])
[entry::chc] get {$f210: Unknown, $f211: Unknown}
[entry::chc] calling merge to id26
[entry::chc] eclassSlots {$f210, $f211}
[entry::chc] result varTypes {$f211: Unknown, $f210: Unknown}
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f149, $f40 -> $f150) with id26: ($f210 -> $f149, $f211 -> $f150)
[slotted_egraphs::egraph::union] Call move_to id26: ($f210 -> $f149, $f211 -> $f150), id13: ($f39 -> $f149, $f40 -> $f150)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::add] remove from id26 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id25: ($f208 -> $0, $f209 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id25, mapToS : $f208
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id25, mapToS : $f209
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f151, $f40 -> $f152) with id13: ($f39 -> $f151, $f40 -> $f152)
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f155, $f7 -> $f154) with id6: ($f6 -> $f155, $f7 -> $f154)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f155, $f7 -> $f154) with id6: ($f6 -> $f155, $f7 -> $f154)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f156, $f7 -> $f157) with id6: ($f6 -> $f156, $f7 -> $f157)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f156, $f7 -> $f157) with id6: ($f6 -> $f156, $f7 -> $f157)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f158, $f11 -> $f159) with id8: ($f10 -> $f158, $f11 -> $f159)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f158, $f11 -> $f159) with id8: ($f10 -> $f158, $f11 -> $f159)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f160, $f11 -> $f161) with id8: ($f10 -> $f160, $f11 -> $f161)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f160, $f11 -> $f161) with id8: ($f10 -> $f160, $f11 -> $f161)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f165, $f77 -> $f164) with id16: ($f76 -> $f165, $f77 -> $f164)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f165, $f77 -> $f164) with id16: ($f76 -> $f165, $f77 -> $f164)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f165, $f77 -> $f164) with id16: ($f76 -> $f165, $f77 -> $f164)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f165, $f77 -> $f164) with id16: ($f76 -> $f165, $f77 -> $f164)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f165, $f77 -> $f164) with id16: ($f76 -> $f165, $f77 -> $f164)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f165, $f77 -> $f164) with id16: ($f76 -> $f165, $f77 -> $f164)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f166, $f77 -> $f167) with id16: ($f76 -> $f166, $f77 -> $f167)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f166, $f77 -> $f167) with id16: ($f76 -> $f166, $f77 -> $f167)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f166, $f77 -> $f167) with id16: ($f76 -> $f166, $f77 -> $f167)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f166, $f77 -> $f167) with id16: ($f76 -> $f166, $f77 -> $f167)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f166, $f77 -> $f167) with id16: ($f76 -> $f166, $f77 -> $f167)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f166, $f77 -> $f167) with id16: ($f76 -> $f166, $f77 -> $f167)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f168, $f77 -> $f169) with id16: ($f76 -> $f168, $f77 -> $f169)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f168, $f77 -> $f169) with id16: ($f76 -> $f168, $f77 -> $f169)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f168, $f77 -> $f169) with id16: ($f76 -> $f168, $f77 -> $f169)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f168, $f77 -> $f169) with id16: ($f76 -> $f168, $f77 -> $f169)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f168, $f77 -> $f169) with id16: ($f76 -> $f168, $f77 -> $f169)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f168, $f77 -> $f169) with id16: ($f76 -> $f168, $f77 -> $f169)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id19: ($f82 -> $f170, $f83 -> $f171) with id19: ($f82 -> $f170, $f83 -> $f171)
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f172) with id5: ($f5 -> $f172)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f173, $f9 -> $f174) with id7: ($f8 -> $f173, $f9 -> $f174)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f175, $f40 -> $f176) with id13: ($f39 -> $f175, $f40 -> $f176)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f175, $f40 -> $f176) with id13: ($f39 -> $f175, $f40 -> $f176)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f177, $f40 -> $f178) with id13: ($f39 -> $f177, $f40 -> $f178)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f177, $f40 -> $f178) with id13: ($f39 -> $f177, $f40 -> $f178)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f179, $f40 -> $f180) with id13: ($f39 -> $f179, $f40 -> $f180)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f179, $f40 -> $f180) with id13: ($f39 -> $f179, $f40 -> $f180)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f181, $f40 -> $f182) with id13: ($f39 -> $f181, $f40 -> $f182)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f181, $f40 -> $f182) with id13: ($f39 -> $f181, $f40 -> $f182)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f183, $f40 -> $f184) with id13: ($f39 -> $f183, $f40 -> $f184)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f183, $f40 -> $f184) with id13: ($f39 -> $f183, $f40 -> $f184)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f185, $f40 -> $f186) with id13: ($f39 -> $f185, $f40 -> $f186)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f185, $f40 -> $f186) with id13: ($f39 -> $f185, $f40 -> $f186)
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f187), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f188), "star_1_0": id5: ($f5 -> $f189), "syntax": id1: ($f1 -> $f189, $f2 -> $f188)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f190), "star_1_0": id5: ($f5 -> $f191), "syntax": id1: ($f1 -> $f190, $f2 -> $f191)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f192), "star_1_0": id7: ($f8 -> $f192, $f9 -> $f193), "syntax": id1: ($f1 -> $f192, $f2 -> $f193)}, {"cond": id2: (), "star_1_1": id7: ($f8 -> $f194, $f9 -> $f195), "star_1_0": id5: ($f5 -> $f194), "syntax": id1: ($f1 -> $f194, $f2 -> $f195)}, {"syntax": id1: ($f1 -> $f196, $f2 -> $f197), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f198), "star_1_0": id5: ($f5 -> $f199), "syntax": id1: ($f1 -> $f199, $f2 -> $f198), "star_1_2": id5: ($f5 -> $f199)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f200), "star_1_0": id5: ($f5 -> $f201), "syntax": id1: ($f1 -> $f200, $f2 -> $f201), "star_1_2": id5: ($f5 -> $f200)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f202), "star_1_0": id5: ($f5 -> $f202), "syntax": id1: ($f1 -> $f202, $f2 -> $f203), "star_1_2": id5: ($f5 -> $f203)}, {"syntax": id1: ($f1 -> $f204, $f2 -> $f205), "cond": id2: (), "star_1_0": id7: ($f8 -> $f204, $f9 -> $f205)}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f6: [
            0,
        ],
        $f7: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f7),
        id5: ($f5 -> $f6),
    ]
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] mergeVarTypes = {
        $f7: Unknown,
        $f6: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            0,
        ],
        $f6: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f10: [
            0,
            1,
        ],
        $f11: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f10),
        id7: ($f8 -> $f10, $f9 -> $f11),
    ]
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] mergeVarTypes = {
        $f11: Unknown,
        $f10: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            1,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            1,
        ],
        $f76: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            0,
        ],
        $f76: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] mergeVarTypes = {
        $f76: Unknown,
        $f77: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f76: [
            0,
            1,
        ],
        $f77: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] root eclass id19 
    CHCData { predNames: {}, varTypes: {$f83: Unknown, $f82: Unknown} }
    ($f82, $f83):>> New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
     - New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f82, $f9 -> $f83),
    ]
[entry::chc::rewrite] appId.slots {$f82, $f83}
[entry::chc::rewrite] mergeVarTypes = {
        $f83: Unknown,
        $f82: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f82: [
            0,
        ],
        $f83: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f82
[entry::chc::rewrite] var = $f83
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id2: ()
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id7: ($f8 -> $f39, $f9 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id7: ($f8 -> $f39, $f9 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f39, $f9 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id16: ($f76 -> $f39, $f77 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id19: ($f82 -> $f39, $f83 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id6: ($f6 -> $f39, $f7 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id8: ($f10 -> $f39, $f11 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id25: ($f208 -> $f39, $f209 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id25: ($f208 -> $f39, $f209 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f212),
            "star_1_0": id6: ($f6 -> $f212, $f7 -> $f213),
            "star_3_0": id9: ($f12 -> $f212, $f13 -> $f213),
            "syntax1": id1: ($f1 -> $f212, $f2 -> $f213),
        },
        {
            "star_2_0": id7: ($f8 -> $f214, $f9 -> $f215),
            "star_1_0": id4: ($f4 -> $f214),
            "star_3_0": id9: ($f12 -> $f214, $f13 -> $f215),
            "syntax1": id1: ($f1 -> $f214, $f2 -> $f215),
        },
        {
            "star_2_0": id5: ($f5 -> $f216),
            "star_2_1": id5: ($f5 -> $f217),
            "star_1_0": id4: ($f4 -> $f217),
            "star_3_0": id9: ($f12 -> $f217, $f13 -> $f216),
            "syntax1": id1: ($f1 -> $f217, $f2 -> $f216),
        },
        {
            "star_2_0": id5: ($f5 -> $f218),
            "star_2_1": id5: ($f5 -> $f218),
            "star_1_0": id4: ($f4 -> $f219),
            "star_3_0": id9: ($f12 -> $f218, $f13 -> $f219),
            "syntax1": id1: ($f1 -> $f218, $f2 -> $f219),
        },
        {
            "star_2_0": id5: ($f5 -> $f220),
            "star_2_1": id5: ($f5 -> $f221),
            "star_1_0": id4: ($f4 -> $f220),
            "star_3_0": id9: ($f12 -> $f220, $f13 -> $f221),
            "syntax1": id1: ($f1 -> $f220, $f2 -> $f221),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f212, $f40 -> $f213) with id13: ($f39 -> $f212, $f40 -> $f213)
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f212, $f40 -> $f213) with id13: ($f39 -> $f212, $f40 -> $f213)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f214, $f40 -> $f215) with id13: ($f39 -> $f214, $f40 -> $f215)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f217, $f40 -> $f216) with id13: ($f39 -> $f217, $f40 -> $f216)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f218, $f40 -> $f219) with id13: ($f39 -> $f218, $f40 -> $f219)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f220, $f40 -> $f221) with id13: ($f39 -> $f220, $f40 -> $f221)
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f224, $f7 -> $f223) with id6: ($f6 -> $f224, $f7 -> $f223)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f224, $f7 -> $f223) with id6: ($f6 -> $f224, $f7 -> $f223)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f225, $f7 -> $f226) with id6: ($f6 -> $f225, $f7 -> $f226)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f225, $f7 -> $f226) with id6: ($f6 -> $f225, $f7 -> $f226)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f227, $f11 -> $f228) with id8: ($f10 -> $f227, $f11 -> $f228)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f227, $f11 -> $f228) with id8: ($f10 -> $f227, $f11 -> $f228)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f229, $f11 -> $f230) with id8: ($f10 -> $f229, $f11 -> $f230)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f229, $f11 -> $f230) with id8: ($f10 -> $f229, $f11 -> $f230)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f234, $f77 -> $f233) with id16: ($f76 -> $f234, $f77 -> $f233)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f234, $f77 -> $f233) with id16: ($f76 -> $f234, $f77 -> $f233)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f234, $f77 -> $f233) with id16: ($f76 -> $f234, $f77 -> $f233)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f234, $f77 -> $f233) with id16: ($f76 -> $f234, $f77 -> $f233)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f234, $f77 -> $f233) with id16: ($f76 -> $f234, $f77 -> $f233)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f234, $f77 -> $f233) with id16: ($f76 -> $f234, $f77 -> $f233)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f235, $f77 -> $f236) with id16: ($f76 -> $f235, $f77 -> $f236)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f235, $f77 -> $f236) with id16: ($f76 -> $f235, $f77 -> $f236)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f235, $f77 -> $f236) with id16: ($f76 -> $f235, $f77 -> $f236)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f235, $f77 -> $f236) with id16: ($f76 -> $f235, $f77 -> $f236)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f235, $f77 -> $f236) with id16: ($f76 -> $f235, $f77 -> $f236)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f235, $f77 -> $f236) with id16: ($f76 -> $f235, $f77 -> $f236)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f237, $f77 -> $f238) with id16: ($f76 -> $f237, $f77 -> $f238)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f237, $f77 -> $f238) with id16: ($f76 -> $f237, $f77 -> $f238)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f237, $f77 -> $f238) with id16: ($f76 -> $f237, $f77 -> $f238)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f237, $f77 -> $f238) with id16: ($f76 -> $f237, $f77 -> $f238)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f237, $f77 -> $f238) with id16: ($f76 -> $f237, $f77 -> $f238)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f237, $f77 -> $f238) with id16: ($f76 -> $f237, $f77 -> $f238)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id19: ($f82 -> $f239, $f83 -> $f240) with id19: ($f82 -> $f239, $f83 -> $f240)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f241, $f209 -> $f242) with id25: ($f208 -> $f241, $f209 -> $f242)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f241, $f209 -> $f242) with id25: ($f208 -> $f241, $f209 -> $f242)
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f243) with id5: ($f5 -> $f243)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f244, $f9 -> $f245) with id7: ($f8 -> $f244, $f9 -> $f245)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f246, $f40 -> $f247) with id13: ($f39 -> $f246, $f40 -> $f247)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f246, $f40 -> $f247) with id13: ($f39 -> $f246, $f40 -> $f247)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f248, $f40 -> $f249) with id13: ($f39 -> $f248, $f40 -> $f249)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f248, $f40 -> $f249) with id13: ($f39 -> $f248, $f40 -> $f249)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f250, $f40 -> $f251) with id13: ($f39 -> $f250, $f40 -> $f251)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f250, $f40 -> $f251) with id13: ($f39 -> $f250, $f40 -> $f251)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f252, $f40 -> $f253) with id13: ($f39 -> $f252, $f40 -> $f253)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f252, $f40 -> $f253) with id13: ($f39 -> $f252, $f40 -> $f253)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f254, $f40 -> $f255) with id13: ($f39 -> $f254, $f40 -> $f255)
[entry::chc] calling make on Compose([AppliedId(id6: ($f6 -> $f283, $f7 -> $f284)), AppliedId(id9: ($f12 -> $f283, $f13 -> $f284))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f283, $f284}
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f283 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f283 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f284 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f284 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id6: ($f6 -> $f283, $f7 -> $f284)), AppliedId(id9: ($f12 -> $f283, $f13 -> $f284))])
[entry::chc] get {$f283: Unknown, $f284: Unknown}
[slotted_egraphs::egraph::add] classes insert id27
[slotted_egraphs::egraph::add] add to id27 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] remove from id27 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id27 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f283, $f284}
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f283 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f283 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f284 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f284 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id6: ($f6 -> $f283, $f7 -> $f284)), AppliedId(id9: ($f12 -> $f283, $f13 -> $f284))])
[entry::chc] get {$f284: Unknown, $f283: Unknown}
[entry::chc] calling merge to id27
[entry::chc] eclassSlots {$f284, $f283}
[entry::chc] result varTypes {$f283: Unknown, $f284: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f254, $f40 -> $f255) with id27: ($f283 -> $f254, $f284 -> $f255)
[slotted_egraphs::egraph::union] Call move_to id27: ($f283 -> $f254, $f284 -> $f255), id13: ($f39 -> $f254, $f40 -> $f255)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::add] remove from id27 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id6: ($f6 -> $0, $f7 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id6, mapToS : $f7
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f256, $f40 -> $f257) with id13: ($f39 -> $f256, $f40 -> $f257)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f256, $f40 -> $f257) with id13: ($f39 -> $f256, $f40 -> $f257)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f258, $f40 -> $f259) with id13: ($f39 -> $f258, $f40 -> $f259)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f258, $f40 -> $f259) with id13: ($f39 -> $f258, $f40 -> $f259)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f260, $f40 -> $f261) with id13: ($f39 -> $f260, $f40 -> $f261)
[entry::chc] calling make on Compose([AppliedId(id25: ($f208 -> $f285, $f209 -> $f286)), AppliedId(id9: ($f12 -> $f285, $f13 -> $f286))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f285, $f286}
[entry::chc] childId : id25, mapToS : $f208
[entry::chc] adding $f285 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f285 to varTypes
[entry::chc] childId : id25, mapToS : $f209
[entry::chc] adding $f286 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f286 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id25: ($f208 -> $f285, $f209 -> $f286)), AppliedId(id9: ($f12 -> $f285, $f13 -> $f286))])
[entry::chc] get {$f286: Unknown, $f285: Unknown}
[slotted_egraphs::egraph::add] classes insert id28
[slotted_egraphs::egraph::add] add to id28 Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] remove from id28 Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id28 Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f285, $f286}
[entry::chc] childId : id25, mapToS : $f208
[entry::chc] adding $f285 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f285 to varTypes
[entry::chc] childId : id25, mapToS : $f209
[entry::chc] adding $f286 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f286 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id25: ($f208 -> $f285, $f209 -> $f286)), AppliedId(id9: ($f12 -> $f285, $f13 -> $f286))])
[entry::chc] get {$f285: Unknown, $f286: Unknown}
[entry::chc] calling merge to id28
[entry::chc] eclassSlots {$f286, $f285}
[entry::chc] result varTypes {$f286: Unknown, $f285: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f260, $f40 -> $f261) with id28: ($f285 -> $f260, $f286 -> $f261)
[slotted_egraphs::egraph::union] Call move_to id28: ($f285 -> $f260, $f286 -> $f261), id13: ($f39 -> $f260, $f40 -> $f261)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] remove from id28 Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id25: ($f208 -> $0, $f209 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id25, mapToS : $f208
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id25, mapToS : $f209
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f262), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f263), "star_1_0": id5: ($f5 -> $f264), "syntax": id1: ($f1 -> $f264, $f2 -> $f263)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f265), "star_1_0": id5: ($f5 -> $f266), "syntax": id1: ($f1 -> $f265, $f2 -> $f266)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f267), "star_1_0": id7: ($f8 -> $f267, $f9 -> $f268), "syntax": id1: ($f1 -> $f267, $f2 -> $f268)}, {"cond": id2: (), "star_1_1": id7: ($f8 -> $f269, $f9 -> $f270), "star_1_0": id5: ($f5 -> $f269), "syntax": id1: ($f1 -> $f269, $f2 -> $f270)}, {"syntax": id1: ($f1 -> $f271, $f2 -> $f272), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f273), "star_1_0": id5: ($f5 -> $f274), "syntax": id1: ($f1 -> $f274, $f2 -> $f273), "star_1_2": id5: ($f5 -> $f274)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f275), "star_1_0": id5: ($f5 -> $f276), "syntax": id1: ($f1 -> $f275, $f2 -> $f276), "star_1_2": id5: ($f5 -> $f275)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f277), "star_1_0": id5: ($f5 -> $f277), "syntax": id1: ($f1 -> $f277, $f2 -> $f278), "star_1_2": id5: ($f5 -> $f278)}, {"syntax": id1: ($f1 -> $f279, $f2 -> $f280), "cond": id2: (), "star_1_0": id7: ($f8 -> $f279, $f9 -> $f280)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f281), "star_1_0": id5: ($f5 -> $f281), "syntax": id1: ($f1 -> $f281, $f2 -> $f282)}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            1,
        ],
        $f6: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f7),
        id5: ($f5 -> $f6),
    ]
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] mergeVarTypes = {
        $f7: Unknown,
        $f6: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            0,
        ],
        $f6: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f10: [
            0,
            1,
        ],
        $f11: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f10),
        id7: ($f8 -> $f10, $f9 -> $f11),
    ]
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            1,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f76: Unknown,
        $f77: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            1,
        ],
        $f76: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            0,
        ],
        $f76: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f76: [
            0,
            1,
        ],
        $f77: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] root eclass id19 
    CHCData { predNames: {}, varTypes: {$f83: Unknown, $f82: Unknown} }
    ($f82, $f83):>> New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
     - New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f82, $f9 -> $f83),
    ]
[entry::chc::rewrite] appId.slots {$f82, $f83}
[entry::chc::rewrite] mergeVarTypes = {
        $f83: Unknown,
        $f82: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f83: [
            0,
        ],
        $f82: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f83
[entry::chc::rewrite] var = $f82
[entry::chc::rewrite] root eclass id25 
    CHCData { predNames: {}, varTypes: {$f209: Unknown, $f208: Unknown} }
    ($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f208),
        id5: ($f5 -> $f208),
    ]
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] mergeVarTypes = {
        $f208: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f208: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f208
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id2: ()
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id7: ($f8 -> $f39, $f9 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id7: ($f8 -> $f39, $f9 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f39, $f9 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id25: ($f208 -> $f39, $f209 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id25: ($f208 -> $f39, $f209 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id25: ($f208 -> $f39, $f209 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id16: ($f76 -> $f39, $f77 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id19: ($f82 -> $f39, $f83 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id6: ($f6 -> $f39, $f7 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id8: ($f10 -> $f39, $f11 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id25: ($f208 -> $f39, $f209 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id25: ($f208 -> $f39, $f209 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f287),
            "star_1_0": id4: ($f4 -> $f288),
            "star_3_0": id9: ($f12 -> $f288, $f13 -> $f287),
            "syntax1": id1: ($f1 -> $f288, $f2 -> $f287),
        },
        {
            "star_2_0": id5: ($f5 -> $f289),
            "star_1_0": id4: ($f4 -> $f290),
            "star_3_0": id9: ($f12 -> $f289, $f13 -> $f290),
            "syntax1": id1: ($f1 -> $f289, $f2 -> $f290),
        },
        {
            "star_2_0": id5: ($f5 -> $f291),
            "star_1_0": id4: ($f4 -> $f291),
            "star_3_0": id9: ($f12 -> $f291, $f13 -> $f292),
            "syntax1": id1: ($f1 -> $f291, $f2 -> $f292),
        },
        {
            "star_2_0": id5: ($f5 -> $f293),
            "star_1_0": id6: ($f6 -> $f293, $f7 -> $f294),
            "star_3_0": id9: ($f12 -> $f293, $f13 -> $f294),
            "syntax1": id1: ($f1 -> $f293, $f2 -> $f294),
        },
        {
            "star_2_0": id7: ($f8 -> $f295, $f9 -> $f296),
            "star_1_0": id4: ($f4 -> $f295),
            "star_3_0": id9: ($f12 -> $f295, $f13 -> $f296),
            "syntax1": id1: ($f1 -> $f295, $f2 -> $f296),
        },
        {
            "star_2_0": id5: ($f5 -> $f297),
            "star_2_1": id5: ($f5 -> $f298),
            "star_1_0": id4: ($f4 -> $f298),
            "star_3_0": id9: ($f12 -> $f298, $f13 -> $f297),
            "syntax1": id1: ($f1 -> $f298, $f2 -> $f297),
        },
        {
            "star_2_0": id5: ($f5 -> $f299),
            "star_2_1": id5: ($f5 -> $f299),
            "star_1_0": id4: ($f4 -> $f300),
            "star_3_0": id9: ($f12 -> $f299, $f13 -> $f300),
            "syntax1": id1: ($f1 -> $f299, $f2 -> $f300),
        },
        {
            "star_2_0": id5: ($f5 -> $f301),
            "star_2_1": id5: ($f5 -> $f302),
            "star_1_0": id4: ($f4 -> $f301),
            "star_3_0": id9: ($f12 -> $f301, $f13 -> $f302),
            "syntax1": id1: ($f1 -> $f301, $f2 -> $f302),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] calling make on New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f368, $f369}
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f369 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
[entry::chc] get {$f369: Unknown, $f368: Unknown}
[slotted_egraphs::egraph::add] classes insert id29
[slotted_egraphs::egraph::add] add to id29 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] remove from id29 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1))])
[slotted_egraphs::egraph::add] add to id29 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f368, $f369}
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f368 to varTypes
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f369 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
[entry::chc] get {$f368: Unknown, $f369: Unknown}
[entry::chc] calling merge to id29
[entry::chc] eclassSlots {$f369, $f368}
[entry::chc] result varTypes {$f368: Unknown, $f369: Unknown}
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f371, $f13 -> $f370)), AppliedId(id29: ($f368 -> $f370, $f369 -> $f371))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f370, $f371}
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f370 to varTypes
[entry::chc] childId : id29, mapToS : $f368
[entry::chc] adding $f370 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f371 to varTypes
[entry::chc] childId : id29, mapToS : $f369
[entry::chc] adding $f371 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f371, $f13 -> $f370)), AppliedId(id29: ($f368 -> $f370, $f369 -> $f371))])
[entry::chc] get {$f371: Unknown, $f370: Unknown}
[slotted_egraphs::egraph::add] classes insert id30
[slotted_egraphs::egraph::add] add to id30 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[slotted_egraphs::egraph::add] remove from id30 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[slotted_egraphs::egraph::add] add to id30 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f370, $f371}
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f370 to varTypes
[entry::chc] childId : id29, mapToS : $f368
[entry::chc] adding $f370 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f371 to varTypes
[entry::chc] childId : id29, mapToS : $f369
[entry::chc] adding $f371 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f371, $f13 -> $f370)), AppliedId(id29: ($f368 -> $f370, $f369 -> $f371))])
[entry::chc] get {$f371: Unknown, $f370: Unknown}
[entry::chc] calling merge to id30
[entry::chc] eclassSlots {$f371, $f370}
[entry::chc] result varTypes {$f371: Unknown, $f370: Unknown}
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f288, $f40 -> $f287) with id30: ($f370 -> $f287, $f371 -> $f288)
[slotted_egraphs::egraph::union] Call move_to id30: ($f370 -> $f287, $f371 -> $f288), id13: ($f39 -> $f288, $f40 -> $f287)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] remove from id30 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id29: ($f368 -> $1, $f369 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id29, mapToS : $f369
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id29, mapToS : $f368
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[entry::chc] calling make on New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f372, $f373}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f372 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f372 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f373 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[entry::chc] get {$f372: Unknown, $f373: Unknown}
[slotted_egraphs::egraph::add] classes insert id31
[slotted_egraphs::egraph::add] add to id31 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] remove from id31 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0))])
[slotted_egraphs::egraph::add] add to id31 New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0))])
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id2: (), [AppliedId(id5: ($f5 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f372, $f373}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] adding $f372 to varTypes
[entry::chc] childId : id5, mapToS : $f5
[entry::chc] adding $f372 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] adding $f373 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[entry::chc] get {$f373: Unknown, $f372: Unknown}
[entry::chc] calling merge to id31
[entry::chc] eclassSlots {$f372, $f373}
[entry::chc] result varTypes {$f373: Unknown, $f372: Unknown}
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $f374, $f13 -> $f375)), AppliedId(id31: ($f372 -> $f374, $f373 -> $f375))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f374, $f375}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f374 to varTypes
[entry::chc] childId : id31, mapToS : $f372
[entry::chc] adding $f374 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f375 to varTypes
[entry::chc] childId : id31, mapToS : $f373
[entry::chc] adding $f375 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f374, $f13 -> $f375)), AppliedId(id31: ($f372 -> $f374, $f373 -> $f375))])
[entry::chc] get {$f375: Unknown, $f374: Unknown}
[slotted_egraphs::egraph::add] classes insert id32
[slotted_egraphs::egraph::add] add to id32 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[slotted_egraphs::egraph::add] remove from id32 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[slotted_egraphs::egraph::add] add to id32 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f374, $f375}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f374 to varTypes
[entry::chc] childId : id31, mapToS : $f372
[entry::chc] adding $f374 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f375 to varTypes
[entry::chc] childId : id31, mapToS : $f373
[entry::chc] adding $f375 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f374, $f13 -> $f375)), AppliedId(id31: ($f372 -> $f374, $f373 -> $f375))])
[entry::chc] get {$f375: Unknown, $f374: Unknown}
[entry::chc] calling merge to id32
[entry::chc] eclassSlots {$f375, $f374}
[entry::chc] result varTypes {$f374: Unknown, $f375: Unknown}
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f289, $f40 -> $f290) with id32: ($f374 -> $f289, $f375 -> $f290)
[slotted_egraphs::egraph::union] Call move_to id32: ($f374 -> $f289, $f375 -> $f290), id13: ($f39 -> $f289, $f40 -> $f290)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] remove from id32 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id9: ($f12 -> $0, $f13 -> $1)), AppliedId(id31: ($f372 -> $0, $f373 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id31, mapToS : $f372
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id31, mapToS : $f373
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f291, $f40 -> $f292) with id13: ($f39 -> $f291, $f40 -> $f292)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f293, $f40 -> $f294) with id13: ($f39 -> $f293, $f40 -> $f294)
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f293, $f40 -> $f294) with id13: ($f39 -> $f293, $f40 -> $f294)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f295, $f40 -> $f296) with id13: ($f39 -> $f295, $f40 -> $f296)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f298, $f40 -> $f297) with id13: ($f39 -> $f298, $f40 -> $f297)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f299, $f40 -> $f300) with id13: ($f39 -> $f299, $f40 -> $f300)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f301, $f40 -> $f302) with id13: ($f39 -> $f301, $f40 -> $f302)
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f305, $f7 -> $f304) with id6: ($f6 -> $f305, $f7 -> $f304)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f305, $f7 -> $f304) with id6: ($f6 -> $f305, $f7 -> $f304)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f306, $f7 -> $f307) with id6: ($f6 -> $f306, $f7 -> $f307)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f306, $f7 -> $f307) with id6: ($f6 -> $f306, $f7 -> $f307)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f308, $f11 -> $f309) with id8: ($f10 -> $f308, $f11 -> $f309)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f308, $f11 -> $f309) with id8: ($f10 -> $f308, $f11 -> $f309)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f310, $f11 -> $f311) with id8: ($f10 -> $f310, $f11 -> $f311)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f310, $f11 -> $f311) with id8: ($f10 -> $f310, $f11 -> $f311)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f315, $f77 -> $f314) with id16: ($f76 -> $f315, $f77 -> $f314)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f315, $f77 -> $f314) with id16: ($f76 -> $f315, $f77 -> $f314)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f315, $f77 -> $f314) with id16: ($f76 -> $f315, $f77 -> $f314)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f315, $f77 -> $f314) with id16: ($f76 -> $f315, $f77 -> $f314)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f315, $f77 -> $f314) with id16: ($f76 -> $f315, $f77 -> $f314)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f315, $f77 -> $f314) with id16: ($f76 -> $f315, $f77 -> $f314)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f316, $f77 -> $f317) with id16: ($f76 -> $f316, $f77 -> $f317)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f316, $f77 -> $f317) with id16: ($f76 -> $f316, $f77 -> $f317)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f316, $f77 -> $f317) with id16: ($f76 -> $f316, $f77 -> $f317)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f316, $f77 -> $f317) with id16: ($f76 -> $f316, $f77 -> $f317)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f316, $f77 -> $f317) with id16: ($f76 -> $f316, $f77 -> $f317)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f316, $f77 -> $f317) with id16: ($f76 -> $f316, $f77 -> $f317)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f318, $f77 -> $f319) with id16: ($f76 -> $f318, $f77 -> $f319)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f318, $f77 -> $f319) with id16: ($f76 -> $f318, $f77 -> $f319)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f318, $f77 -> $f319) with id16: ($f76 -> $f318, $f77 -> $f319)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f318, $f77 -> $f319) with id16: ($f76 -> $f318, $f77 -> $f319)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f318, $f77 -> $f319) with id16: ($f76 -> $f318, $f77 -> $f319)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f318, $f77 -> $f319) with id16: ($f76 -> $f318, $f77 -> $f319)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id19: ($f82 -> $f320, $f83 -> $f321) with id19: ($f82 -> $f320, $f83 -> $f321)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f322, $f209 -> $f323) with id25: ($f208 -> $f322, $f209 -> $f323)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f322, $f209 -> $f323) with id25: ($f208 -> $f322, $f209 -> $f323)
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f324) with id5: ($f5 -> $f324)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f325, $f9 -> $f326) with id7: ($f8 -> $f325, $f9 -> $f326)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f327, $f40 -> $f328) with id13: ($f39 -> $f327, $f40 -> $f328)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f327, $f40 -> $f328) with id13: ($f39 -> $f327, $f40 -> $f328)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f329, $f40 -> $f330) with id13: ($f39 -> $f329, $f40 -> $f330)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f329, $f40 -> $f330) with id13: ($f39 -> $f329, $f40 -> $f330)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f331, $f40 -> $f332) with id13: ($f39 -> $f331, $f40 -> $f332)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f331, $f40 -> $f332) with id13: ($f39 -> $f331, $f40 -> $f332)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f333, $f40 -> $f334) with id13: ($f39 -> $f333, $f40 -> $f334)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f333, $f40 -> $f334) with id13: ($f39 -> $f333, $f40 -> $f334)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f335, $f40 -> $f336) with id13: ($f39 -> $f335, $f40 -> $f336)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f335, $f40 -> $f336) with id13: ($f39 -> $f335, $f40 -> $f336)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f337, $f40 -> $f338) with id13: ($f39 -> $f337, $f40 -> $f338)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f337, $f40 -> $f338) with id13: ($f39 -> $f337, $f40 -> $f338)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f339, $f40 -> $f340) with id13: ($f39 -> $f339, $f40 -> $f340)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f339, $f40 -> $f340) with id13: ($f39 -> $f339, $f40 -> $f340)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f341, $f40 -> $f342) with id13: ($f39 -> $f341, $f40 -> $f342)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f341, $f40 -> $f342) with id13: ($f39 -> $f341, $f40 -> $f342)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f343, $f40 -> $f344) with id13: ($f39 -> $f343, $f40 -> $f344)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f343, $f40 -> $f344) with id13: ($f39 -> $f343, $f40 -> $f344)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f345, $f40 -> $f346) with id13: ($f39 -> $f345, $f40 -> $f346)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f345, $f40 -> $f346) with id13: ($f39 -> $f345, $f40 -> $f346)
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f347), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f348), "star_1_0": id5: ($f5 -> $f349), "syntax": id1: ($f1 -> $f349, $f2 -> $f348)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f350), "star_1_0": id5: ($f5 -> $f351), "syntax": id1: ($f1 -> $f350, $f2 -> $f351)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f352), "star_1_0": id7: ($f8 -> $f352, $f9 -> $f353), "syntax": id1: ($f1 -> $f352, $f2 -> $f353)}, {"cond": id2: (), "star_1_1": id7: ($f8 -> $f354, $f9 -> $f355), "star_1_0": id5: ($f5 -> $f354), "syntax": id1: ($f1 -> $f354, $f2 -> $f355)}, {"syntax": id1: ($f1 -> $f356, $f2 -> $f357), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f358), "star_1_0": id5: ($f5 -> $f359), "syntax": id1: ($f1 -> $f359, $f2 -> $f358), "star_1_2": id5: ($f5 -> $f359)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f360), "star_1_0": id5: ($f5 -> $f361), "syntax": id1: ($f1 -> $f360, $f2 -> $f361), "star_1_2": id5: ($f5 -> $f360)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f362), "star_1_0": id5: ($f5 -> $f362), "syntax": id1: ($f1 -> $f362, $f2 -> $f363), "star_1_2": id5: ($f5 -> $f363)}, {"syntax": id1: ($f1 -> $f364, $f2 -> $f365), "cond": id2: (), "star_1_0": id7: ($f8 -> $f364, $f9 -> $f365)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f366), "star_1_0": id5: ($f5 -> $f366), "syntax": id1: ($f1 -> $f366, $f2 -> $f367)}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f6: [
            0,
        ],
        $f7: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f7),
        id5: ($f5 -> $f6),
    ]
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] mergeVarTypes = {
        $f7: Unknown,
        $f6: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f6: [
            1,
        ],
        $f7: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            0,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f10),
        id7: ($f8 -> $f10, $f9 -> $f11),
    ]
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] mergeVarTypes = {
        $f11: Unknown,
        $f10: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f10: [
            0,
            1,
        ],
        $f11: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f76: Unknown,
        $f77: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f76: [
            0,
            2,
        ],
        $f77: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            0,
        ],
        $f76: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f76: [
            0,
            1,
        ],
        $f77: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] root eclass id19 
    CHCData { predNames: {}, varTypes: {$f83: Unknown, $f82: Unknown} }
    ($f82, $f83):>> New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
     - New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f82, $f9 -> $f83),
    ]
[entry::chc::rewrite] appId.slots {$f82, $f83}
[entry::chc::rewrite] mergeVarTypes = {
        $f82: Unknown,
        $f83: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f83: [
            0,
        ],
        $f82: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f83
[entry::chc::rewrite] var = $f82
[entry::chc::rewrite] root eclass id25 
    CHCData { predNames: {}, varTypes: {$f209: Unknown, $f208: Unknown} }
    ($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f208),
        id5: ($f5 -> $f208),
    ]
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] mergeVarTypes = {
        $f208: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f208: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f208
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id2: ()
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id7: ($f8 -> $f39, $f9 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id7: ($f8 -> $f39, $f9 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f39, $f9 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f369, $f2 -> $f368), id2: (), id5: ($f5 -> $f368)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f369, $f2 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: (), "star_1_0": id5: ($f5 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f372, $f2 -> $f373), id2: (), id5: ($f5 -> $f372)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f372, $f2 -> $f373) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f372) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: (), "star_1_0": id5: ($f5 -> $f372)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id25: ($f208 -> $f39, $f209 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id25: ($f208 -> $f39, $f209 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id25: ($f208 -> $f39, $f209 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id29: ($f368 -> $f40, $f369 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id29: ($f368 -> $f40, $f369 -> $f39), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f372 -> $f39, $f373 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id31: ($f372 -> $f39, $f373 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id16: ($f76 -> $f39, $f77 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id19: ($f82 -> $f39, $f83 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id6: ($f6 -> $f39, $f7 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id8: ($f10 -> $f39, $f11 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id25: ($f208 -> $f39, $f209 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id25: ($f208 -> $f39, $f209 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f369, $f2 -> $f368), id2: (), id5: ($f5 -> $f368)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f369, $f2 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: (), "star_1_0": id5: ($f5 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f372, $f2 -> $f373), id2: (), id5: ($f5 -> $f372)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f372, $f2 -> $f373) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f372) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: (), "star_1_0": id5: ($f5 -> $f372)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f376),
            "star_1_0": id4: ($f4 -> $f377),
            "star_3_0": id9: ($f12 -> $f377, $f13 -> $f376),
            "syntax1": id1: ($f1 -> $f377, $f2 -> $f376),
        },
        {
            "star_2_0": id5: ($f5 -> $f378),
            "star_1_0": id4: ($f4 -> $f379),
            "star_3_0": id9: ($f12 -> $f378, $f13 -> $f379),
            "syntax1": id1: ($f1 -> $f378, $f2 -> $f379),
        },
        {
            "star_2_0": id5: ($f5 -> $f380),
            "star_1_0": id4: ($f4 -> $f380),
            "star_3_0": id9: ($f12 -> $f380, $f13 -> $f381),
            "syntax1": id1: ($f1 -> $f380, $f2 -> $f381),
        },
        {
            "star_2_0": id5: ($f5 -> $f382),
            "star_1_0": id6: ($f6 -> $f382, $f7 -> $f383),
            "star_3_0": id9: ($f12 -> $f382, $f13 -> $f383),
            "syntax1": id1: ($f1 -> $f382, $f2 -> $f383),
        },
        {
            "star_2_0": id7: ($f8 -> $f384, $f9 -> $f385),
            "star_1_0": id4: ($f4 -> $f384),
            "star_3_0": id9: ($f12 -> $f384, $f13 -> $f385),
            "syntax1": id1: ($f1 -> $f384, $f2 -> $f385),
        },
        {
            "star_2_0": id5: ($f5 -> $f386),
            "star_2_1": id5: ($f5 -> $f387),
            "star_1_0": id4: ($f4 -> $f387),
            "star_3_0": id9: ($f12 -> $f387, $f13 -> $f386),
            "syntax1": id1: ($f1 -> $f387, $f2 -> $f386),
        },
        {
            "star_2_0": id5: ($f5 -> $f388),
            "star_2_1": id5: ($f5 -> $f388),
            "star_1_0": id4: ($f4 -> $f389),
            "star_3_0": id9: ($f12 -> $f388, $f13 -> $f389),
            "syntax1": id1: ($f1 -> $f388, $f2 -> $f389),
        },
        {
            "star_2_0": id5: ($f5 -> $f390),
            "star_2_1": id5: ($f5 -> $f391),
            "star_1_0": id4: ($f4 -> $f390),
            "star_3_0": id9: ($f12 -> $f390, $f13 -> $f391),
            "syntax1": id1: ($f1 -> $f390, $f2 -> $f391),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f377, $f40 -> $f376) with id13: ($f39 -> $f377, $f40 -> $f376)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f378, $f40 -> $f379) with id13: ($f39 -> $f378, $f40 -> $f379)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f380, $f40 -> $f381) with id13: ($f39 -> $f380, $f40 -> $f381)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f382, $f40 -> $f383) with id13: ($f39 -> $f382, $f40 -> $f383)
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f382, $f40 -> $f383) with id13: ($f39 -> $f382, $f40 -> $f383)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f384, $f40 -> $f385) with id13: ($f39 -> $f384, $f40 -> $f385)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f387, $f40 -> $f386) with id13: ($f39 -> $f387, $f40 -> $f386)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f388, $f40 -> $f389) with id13: ($f39 -> $f388, $f40 -> $f389)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f390, $f40 -> $f391) with id13: ($f39 -> $f390, $f40 -> $f391)
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f394, $f7 -> $f393) with id6: ($f6 -> $f394, $f7 -> $f393)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f394, $f7 -> $f393) with id6: ($f6 -> $f394, $f7 -> $f393)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f395, $f7 -> $f396) with id6: ($f6 -> $f395, $f7 -> $f396)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f395, $f7 -> $f396) with id6: ($f6 -> $f395, $f7 -> $f396)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f397, $f11 -> $f398) with id8: ($f10 -> $f397, $f11 -> $f398)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f397, $f11 -> $f398) with id8: ($f10 -> $f397, $f11 -> $f398)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f399, $f11 -> $f400) with id8: ($f10 -> $f399, $f11 -> $f400)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f399, $f11 -> $f400) with id8: ($f10 -> $f399, $f11 -> $f400)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f404, $f77 -> $f403) with id16: ($f76 -> $f404, $f77 -> $f403)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f404, $f77 -> $f403) with id16: ($f76 -> $f404, $f77 -> $f403)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f404, $f77 -> $f403) with id16: ($f76 -> $f404, $f77 -> $f403)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f404, $f77 -> $f403) with id16: ($f76 -> $f404, $f77 -> $f403)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f404, $f77 -> $f403) with id16: ($f76 -> $f404, $f77 -> $f403)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f404, $f77 -> $f403) with id16: ($f76 -> $f404, $f77 -> $f403)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f405, $f77 -> $f406) with id16: ($f76 -> $f405, $f77 -> $f406)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f405, $f77 -> $f406) with id16: ($f76 -> $f405, $f77 -> $f406)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f405, $f77 -> $f406) with id16: ($f76 -> $f405, $f77 -> $f406)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f405, $f77 -> $f406) with id16: ($f76 -> $f405, $f77 -> $f406)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f405, $f77 -> $f406) with id16: ($f76 -> $f405, $f77 -> $f406)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f405, $f77 -> $f406) with id16: ($f76 -> $f405, $f77 -> $f406)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f407, $f77 -> $f408) with id16: ($f76 -> $f407, $f77 -> $f408)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f407, $f77 -> $f408) with id16: ($f76 -> $f407, $f77 -> $f408)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f407, $f77 -> $f408) with id16: ($f76 -> $f407, $f77 -> $f408)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f407, $f77 -> $f408) with id16: ($f76 -> $f407, $f77 -> $f408)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f407, $f77 -> $f408) with id16: ($f76 -> $f407, $f77 -> $f408)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f407, $f77 -> $f408) with id16: ($f76 -> $f407, $f77 -> $f408)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id19: ($f82 -> $f409, $f83 -> $f410) with id19: ($f82 -> $f409, $f83 -> $f410)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f411, $f209 -> $f412) with id25: ($f208 -> $f411, $f209 -> $f412)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f411, $f209 -> $f412) with id25: ($f208 -> $f411, $f209 -> $f412)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id29: ($f368 -> $f413, $f369 -> $f414) with id29: ($f368 -> $f413, $f369 -> $f414)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id31: ($f372 -> $f415, $f373 -> $f416) with id31: ($f372 -> $f415, $f373 -> $f416)
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f417) with id5: ($f5 -> $f417)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f418, $f9 -> $f419) with id7: ($f8 -> $f418, $f9 -> $f419)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f420, $f40 -> $f421) with id13: ($f39 -> $f420, $f40 -> $f421)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f420, $f40 -> $f421) with id13: ($f39 -> $f420, $f40 -> $f421)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f422, $f40 -> $f423) with id13: ($f39 -> $f422, $f40 -> $f423)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f422, $f40 -> $f423) with id13: ($f39 -> $f422, $f40 -> $f423)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f424, $f40 -> $f425) with id13: ($f39 -> $f424, $f40 -> $f425)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f424, $f40 -> $f425) with id13: ($f39 -> $f424, $f40 -> $f425)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f426, $f40 -> $f427) with id13: ($f39 -> $f426, $f40 -> $f427)
[entry::chc] calling make on Compose([AppliedId(id29: ($f368 -> $f470, $f369 -> $f469)), AppliedId(id9: ($f12 -> $f469, $f13 -> $f470))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f469, $f470}
[entry::chc] childId : id29, mapToS : $f369
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id29, mapToS : $f368
[entry::chc] adding $f470 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f470 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id29: ($f368 -> $f470, $f369 -> $f469)), AppliedId(id9: ($f12 -> $f469, $f13 -> $f470))])
[entry::chc] get {$f469: Unknown, $f470: Unknown}
[slotted_egraphs::egraph::add] classes insert id33
[slotted_egraphs::egraph::add] add to id33 Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[slotted_egraphs::egraph::add] remove from id33 Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[slotted_egraphs::egraph::add] add to id33 Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[entry::chc] calling make on Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f469, $f470}
[entry::chc] childId : id29, mapToS : $f369
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f469 to varTypes
[entry::chc] childId : id29, mapToS : $f368
[entry::chc] adding $f470 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f470 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id29: ($f368 -> $f470, $f369 -> $f469)), AppliedId(id9: ($f12 -> $f469, $f13 -> $f470))])
[entry::chc] get {$f469: Unknown, $f470: Unknown}
[entry::chc] calling merge to id33
[entry::chc] eclassSlots {$f469, $f470}
[entry::chc] result varTypes {$f470: Unknown, $f469: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f426, $f40 -> $f427) with id33: ($f469 -> $f426, $f470 -> $f427)
[slotted_egraphs::egraph::union] Call move_to id33: ($f469 -> $f426, $f470 -> $f427), id13: ($f39 -> $f426, $f40 -> $f427)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::add] remove from id33 Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[entry::chc] calling make on Compose([AppliedId(id29: ($f368 -> $0, $f369 -> $1)), AppliedId(id9: ($f12 -> $1, $f13 -> $0))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id29, mapToS : $f369
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id29, mapToS : $f368
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[entry::chc] get {$f40: Unknown, $f39: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f428, $f40 -> $f429) with id13: ($f39 -> $f428, $f40 -> $f429)
[entry::chc] calling make on Compose([AppliedId(id31: ($f372 -> $f471, $f373 -> $f472)), AppliedId(id9: ($f12 -> $f471, $f13 -> $f472))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f471, $f472}
[entry::chc] childId : id31, mapToS : $f372
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id31, mapToS : $f373
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f472 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id31: ($f372 -> $f471, $f373 -> $f472)), AppliedId(id9: ($f12 -> $f471, $f13 -> $f472))])
[entry::chc] get {$f471: Unknown, $f472: Unknown}
[slotted_egraphs::egraph::add] classes insert id34
[slotted_egraphs::egraph::add] add to id34 Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] remove from id34 Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id34 Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f471, $f472}
[entry::chc] childId : id31, mapToS : $f372
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f471 to varTypes
[entry::chc] childId : id31, mapToS : $f373
[entry::chc] adding $f472 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f472 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id31: ($f372 -> $f471, $f373 -> $f472)), AppliedId(id9: ($f12 -> $f471, $f13 -> $f472))])
[entry::chc] get {$f471: Unknown, $f472: Unknown}
[entry::chc] calling merge to id34
[entry::chc] eclassSlots {$f472, $f471}
[entry::chc] result varTypes {$f471: Unknown, $f472: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f428, $f40 -> $f429) with id34: ($f471 -> $f428, $f472 -> $f429)
[slotted_egraphs::egraph::union] Call move_to id34: ($f471 -> $f428, $f472 -> $f429), id13: ($f39 -> $f428, $f40 -> $f429)
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f40: Unknown, $f39: Unknown}
[slotted_egraphs::egraph::add] remove from id34 Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))]) to self.pending
[slotted_egraphs::egraph::add] remove from id13 Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[slotted_egraphs::egraph::add] add to id13 Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] calling make on Compose([AppliedId(id31: ($f372 -> $0, $f373 -> $1)), AppliedId(id9: ($f12 -> $0, $f13 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f39, $f40}
[entry::chc] childId : id31, mapToS : $f372
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id9, mapToS : $f12
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id31, mapToS : $f373
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id9, mapToS : $f13
[entry::chc] adding $f40 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[entry::chc] get {$f39: Unknown, $f40: Unknown}
[entry::chc] calling merge to id13
[entry::chc] eclassSlots {$f40, $f39}
[entry::chc] result varTypes {$f39: Unknown, $f40: Unknown}
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f430, $f40 -> $f431) with id13: ($f39 -> $f430, $f40 -> $f431)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f430, $f40 -> $f431) with id13: ($f39 -> $f430, $f40 -> $f431)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f432, $f40 -> $f433) with id13: ($f39 -> $f432, $f40 -> $f433)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f432, $f40 -> $f433) with id13: ($f39 -> $f432, $f40 -> $f433)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f434, $f40 -> $f435) with id13: ($f39 -> $f434, $f40 -> $f435)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f434, $f40 -> $f435) with id13: ($f39 -> $f434, $f40 -> $f435)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f436, $f40 -> $f437) with id13: ($f39 -> $f436, $f40 -> $f437)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f436, $f40 -> $f437) with id13: ($f39 -> $f436, $f40 -> $f437)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f438, $f40 -> $f439) with id13: ($f39 -> $f438, $f40 -> $f439)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f438, $f40 -> $f439) with id13: ($f39 -> $f438, $f40 -> $f439)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f440, $f40 -> $f441) with id13: ($f39 -> $f440, $f40 -> $f441)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f440, $f40 -> $f441) with id13: ($f39 -> $f440, $f40 -> $f441)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f442, $f40 -> $f443) with id13: ($f39 -> $f442, $f40 -> $f443)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f442, $f40 -> $f443) with id13: ($f39 -> $f442, $f40 -> $f443)
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f444), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f445), "star_1_0": id5: ($f5 -> $f446), "syntax": id1: ($f1 -> $f446, $f2 -> $f445)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f447), "star_1_0": id5: ($f5 -> $f448), "syntax": id1: ($f1 -> $f447, $f2 -> $f448)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f449), "star_1_0": id7: ($f8 -> $f449, $f9 -> $f450), "syntax": id1: ($f1 -> $f449, $f2 -> $f450)}, {"cond": id2: (), "star_1_1": id7: ($f8 -> $f451, $f9 -> $f452), "star_1_0": id5: ($f5 -> $f451), "syntax": id1: ($f1 -> $f451, $f2 -> $f452)}, {"syntax": id1: ($f1 -> $f453, $f2 -> $f454), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f455), "star_1_0": id5: ($f5 -> $f456), "syntax": id1: ($f1 -> $f456, $f2 -> $f455), "star_1_2": id5: ($f5 -> $f456)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f457), "star_1_0": id5: ($f5 -> $f458), "syntax": id1: ($f1 -> $f457, $f2 -> $f458), "star_1_2": id5: ($f5 -> $f457)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f459), "star_1_0": id5: ($f5 -> $f459), "syntax": id1: ($f1 -> $f459, $f2 -> $f460), "star_1_2": id5: ($f5 -> $f460)}, {"syntax": id1: ($f1 -> $f461, $f2 -> $f462), "cond": id2: (), "star_1_0": id7: ($f8 -> $f461, $f9 -> $f462)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f463), "star_1_0": id5: ($f5 -> $f463), "syntax": id1: ($f1 -> $f463, $f2 -> $f464)}, {"syntax": id1: ($f1 -> $f466, $f2 -> $f465), "cond": id2: (), "star_1_0": id5: ($f5 -> $f465)}, {"syntax": id1: ($f1 -> $f467, $f2 -> $f468), "cond": id2: (), "star_1_0": id5: ($f5 -> $f467)}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f6: [
            0,
        ],
        $f7: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f7),
        id5: ($f5 -> $f6),
    ]
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            0,
        ],
        $f6: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f10: Unknown,
        $f11: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            0,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f10),
        id7: ($f8 -> $f10, $f9 -> $f11),
    ]
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] mergeVarTypes = {
        $f11: Unknown,
        $f10: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f11: [
            1,
        ],
        $f10: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f76: Unknown,
        $f77: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            1,
        ],
        $f76: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            0,
        ],
        $f76: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] mergeVarTypes = {
        $f76: Unknown,
        $f77: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f76: [
            0,
            1,
        ],
        $f77: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] root eclass id19 
    CHCData { predNames: {}, varTypes: {$f83: Unknown, $f82: Unknown} }
    ($f82, $f83):>> New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
     - New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f82, $f9 -> $f83),
    ]
[entry::chc::rewrite] appId.slots {$f82, $f83}
[entry::chc::rewrite] mergeVarTypes = {
        $f82: Unknown,
        $f83: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f83: [
            0,
        ],
        $f82: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f83
[entry::chc::rewrite] var = $f82
[entry::chc::rewrite] root eclass id25 
    CHCData { predNames: {}, varTypes: {$f209: Unknown, $f208: Unknown} }
    ($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f208),
        id5: ($f5 -> $f208),
    ]
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] mergeVarTypes = {
        $f208: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f208: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f208
[entry::chc::rewrite] root eclass id29 
    CHCData { predNames: {}, varTypes: {$f368: Unknown, $f369: Unknown} }
    ($f368, $f369):>> New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
     - New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f368),
    ]
[entry::chc::rewrite] appId.slots {$f368}
[entry::chc::rewrite] mergeVarTypes = {
        $f368: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f368: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f368
[entry::chc::rewrite] root eclass id31 
    CHCData { predNames: {}, varTypes: {$f373: Unknown, $f372: Unknown} }
    ($f372, $f373):>> New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
     - New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f372),
    ]
[entry::chc::rewrite] appId.slots {$f372}
[entry::chc::rewrite] mergeVarTypes = {
        $f372: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f372: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f372
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id2: ()
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new ?syntax1 (and <*0>) <(compose <*1>) *2>) *3>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id7: ($f8 -> $f39, $f9 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id7: ($f8 -> $f39, $f9 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id7: ($f8 -> $f39, $f9 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id7: ($f8 -> $f39, $f9 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f39, $f2 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(0)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(0)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(0)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax1": id1: ($f1 -> $f39, $f2 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_0 -> id5: ($f5 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40), "star_1_0": id4: ($f4 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_2_1 -> id5: ($f5 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] insert star_3_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_2_0": id5: ($f5 -> $f40), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f39), "star_1_0": id4: ($f4 -> $f40), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }, State { partial_subst: {"star_2_0": id5: ($f5 -> $f39), "star_2_1": id5: ($f5 -> $f40), "star_1_0": id4: ($f4 -> $f39), "star_3_0": id9: ($f12 -> $f39, $f13 -> $f40), "syntax1": id1: ($f1 -> $f39, $f2 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), Star(3)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(And([Star(0)]), [Star(0)]), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc star []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f369, $f2 -> $f368), id2: (), id5: ($f5 -> $f368)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f369, $f2 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: (), "star_1_0": id5: ($f5 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f372, $f2 -> $f373), id2: (), id5: ($f5 -> $f372)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f372, $f2 -> $f373) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f372) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: (), "star_1_0": id5: ($f5 -> $f372)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f5)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id4: ($f4 -> $f5) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id4: ($f4 -> $f5)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f8, $f7 -> $f9)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f8, $f7 -> $f9) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f8, $f7 -> $f9)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id6: ($f6 -> $f39, $f7 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id25: ($f208 -> $f39, $f209 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id25: ($f208 -> $f39, $f209 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id25: ($f208 -> $f39, $f209 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id8: ($f10 -> $f39, $f11 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id29: ($f368 -> $f40, $f369 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id29: ($f368 -> $f40, $f369 -> $f39), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id31: ($f372 -> $f39, $f373 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id31: ($f372 -> $f39, $f373 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id29: ($f368 -> $f40, $f369 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id29: ($f368 -> $f40, $f369 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id29: ($f368 -> $f40, $f369 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id31: ($f372 -> $f39, $f373 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id31: ($f372 -> $f39, $f373 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id31: ($f372 -> $f39, $f373 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id16: ($f76 -> $f39, $f77 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id19: ($f82 -> $f39, $f83 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id19: ($f82 -> $f39, $f83 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id19: ($f82 -> $f39, $f83 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id6: ($f6 -> $f39, $f7 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id6: ($f6 -> $f39, $f7 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id8: ($f10 -> $f39, $f11 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id8: ($f10 -> $f39, $f11 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id16: ($f76 -> $f39, $f77 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id9: ($f12 -> $f39, $f13 -> $f40), "star_1_0": id16: ($f76 -> $f39, $f77 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh Compose([Star(1)]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id9: ($f12 -> $f39, $f13 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id25: ($f208 -> $f39, $f209 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_1_1": id25: ($f208 -> $f39, $f209 -> $f40), "star_1_0": id9: ($f12 -> $f39, $f13 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond <*1>)
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id3: ($f3 -> $f4), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f7), "star_1_0": id5: ($f5 -> $f6), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f6, $f2 -> $f7), "cond": id2: (), "star_1_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f6), "star_1_0": id5: ($f5 -> $f7), "syntax": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id7: ($f8 -> $f10, $f9 -> $f11), id5: ($f5 -> $f10)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f10), "star_1_0": id7: ($f8 -> $f10, $f9 -> $f11), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f10, $f2 -> $f11), id2: (), id5: ($f5 -> $f10), id7: ($f8 -> $f10, $f9 -> $f11)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f10, $f2 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f10) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f10, $f2 -> $f11), "cond": id2: (), "star_1_0": id5: ($f5 -> $f10)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id7: ($f8 -> $f10, $f9 -> $f11) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id7: ($f8 -> $f10, $f9 -> $f11), "star_1_0": id5: ($f5 -> $f10), "syntax": id1: ($f1 -> $f10, $f2 -> $f11)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f12, $f2 -> $f13), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f12, $f2 -> $f13) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f12, $f2 -> $f13), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f77), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f77), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f77), id5: ($f5 -> $f76), id5: ($f5 -> $f76)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f77), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f76, $f2 -> $f77), id2: (), id5: ($f5 -> $f76), id5: ($f5 -> $f76), id5: ($f5 -> $f77)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f76, $f2 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f76, $f2 -> $f77), "cond": id2: (), "star_1_0": id5: ($f5 -> $f76)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f76) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id5: ($f5 -> $f77) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f76), "star_1_0": id5: ($f5 -> $f76), "syntax": id1: ($f1 -> $f76, $f2 -> $f77), "star_1_2": id5: ($f5 -> $f77)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f82, $f2 -> $f83), id2: (), id7: ($f8 -> $f82, $f9 -> $f83)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f82, $f2 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id7: ($f8 -> $f82, $f9 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f82, $f2 -> $f83), "cond": id2: (), "star_1_0": id7: ($f8 -> $f82, $f9 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f208, $f2 -> $f209), id2: (), id5: ($f5 -> $f208), id5: ($f5 -> $f208)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f208, $f2 -> $f209) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f208, $f2 -> $f209), "cond": id2: (), "star_1_0": id5: ($f5 -> $f208)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id5: ($f5 -> $f208) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"cond": id2: (), "star_1_1": id5: ($f5 -> $f208), "star_1_0": id5: ($f5 -> $f208), "syntax": id1: ($f1 -> $f208, $f2 -> $f209)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f369, $f2 -> $f368), id2: (), id5: ($f5 -> $f368)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f369, $f2 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f368) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f369, $f2 -> $f368), "cond": id2: (), "star_1_0": id5: ($f5 -> $f368)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(1)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f372, $f2 -> $f373), id2: (), id5: ($f5 -> $f372)]
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f372, $f2 -> $f373) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert cond -> id2: () to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id5: ($f5 -> $f372) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax": id1: ($f1 -> $f372, $f2 -> $f373), "cond": id2: (), "star_1_0": id5: ($f5 -> $f372)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (true)
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[entry::chc::rewrite] unfold rule, found [
        {
            "star_2_0": id5: ($f5 -> $f473),
            "star_1_0": id4: ($f4 -> $f474),
            "star_3_0": id9: ($f12 -> $f474, $f13 -> $f473),
            "syntax1": id1: ($f1 -> $f474, $f2 -> $f473),
        },
        {
            "star_2_0": id5: ($f5 -> $f475),
            "star_1_0": id4: ($f4 -> $f476),
            "star_3_0": id9: ($f12 -> $f475, $f13 -> $f476),
            "syntax1": id1: ($f1 -> $f475, $f2 -> $f476),
        },
        {
            "star_2_0": id5: ($f5 -> $f477),
            "star_1_0": id4: ($f4 -> $f477),
            "star_3_0": id9: ($f12 -> $f477, $f13 -> $f478),
            "syntax1": id1: ($f1 -> $f477, $f2 -> $f478),
        },
        {
            "star_2_0": id5: ($f5 -> $f479),
            "star_1_0": id6: ($f6 -> $f479, $f7 -> $f480),
            "star_3_0": id9: ($f12 -> $f479, $f13 -> $f480),
            "syntax1": id1: ($f1 -> $f479, $f2 -> $f480),
        },
        {
            "star_2_0": id7: ($f8 -> $f481, $f9 -> $f482),
            "star_1_0": id4: ($f4 -> $f481),
            "star_3_0": id9: ($f12 -> $f481, $f13 -> $f482),
            "syntax1": id1: ($f1 -> $f481, $f2 -> $f482),
        },
        {
            "star_2_0": id5: ($f5 -> $f483),
            "star_2_1": id5: ($f5 -> $f484),
            "star_1_0": id4: ($f4 -> $f484),
            "star_3_0": id9: ($f12 -> $f484, $f13 -> $f483),
            "syntax1": id1: ($f1 -> $f484, $f2 -> $f483),
        },
        {
            "star_2_0": id5: ($f5 -> $f485),
            "star_2_1": id5: ($f5 -> $f485),
            "star_1_0": id4: ($f4 -> $f486),
            "star_3_0": id9: ($f12 -> $f485, $f13 -> $f486),
            "syntax1": id1: ($f1 -> $f485, $f2 -> $f486),
        },
        {
            "star_2_0": id5: ($f5 -> $f487),
            "star_2_1": id5: ($f5 -> $f488),
            "star_1_0": id4: ($f4 -> $f487),
            "star_3_0": id9: ($f12 -> $f487, $f13 -> $f488),
            "syntax1": id1: ($f1 -> $f487, $f2 -> $f488),
        },
    ]
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f474, $f40 -> $f473) with id13: ($f39 -> $f474, $f40 -> $f473)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f475, $f40 -> $f476) with id13: ($f39 -> $f475, $f40 -> $f476)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f477, $f40 -> $f478) with id13: ($f39 -> $f477, $f40 -> $f478)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f6), id5: ($f5 -> $f7)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f7), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f6)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f6, $f2 -> $f7), id2: (), id5: ($f5 -> $f7), id5: ($f5 -> $f6)]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id1: ($f1 -> $f6, $f2 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id1: ($f1 -> $f6, $f2 -> $f7),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_0 -> id5: ($f5 -> $f7) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert star_4_1 -> id5: ($f5 -> $f6) to subst
[slotted_egraphs::rewrite::ematch] acc star [State { partial_subst: {"star_4_1": id5: ($f5 -> $f6), "syntax2": id1: ($f1 -> $f6, $f2 -> $f7), "star_4_0": id5: ($f5 -> $f7)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f479, $f40 -> $f480) with id13: ($f39 -> $f479, $f40 -> $f480)
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f479, $f40 -> $f480) with id13: ($f39 -> $f479, $f40 -> $f480)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f481, $f40 -> $f482) with id13: ($f39 -> $f481, $f40 -> $f482)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f484, $f40 -> $f483) with id13: ($f39 -> $f484, $f40 -> $f483)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f485, $f40 -> $f486) with id13: ($f39 -> $f485, $f40 -> $f486)
[slotted_egraphs::parse] from (new ?syntax2 (and <*6>) <*4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax2"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, Star(4), RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f4), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [Star(4)])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [Star(4)]) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax2"), ENode(And([Star(6)]), [Star(6)]), Star(4)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f4), id2: ()]
[slotted_egraphs::rewrite::ematch] insert syntax2 -> id3: ($f3 -> $f4) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode And([])
[slotted_egraphs::rewrite::ematch] patternEnode And([Star(6)])
[slotted_egraphs::rewrite::ematch] n_sh And([Star(6)]) == clear_n2_sh And([])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "syntax2": id3: ($f3 -> $f4),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(6)]
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"syntax2": id3: ($f3 -> $f4)}, partial_slotmap: () }]
[slotted_egraphs::parse] from (new ?syntax1 (and < *6>) <?star_2_0 ?star_2_1  *4>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax1"), LParen, Ident("and"), LVecBracket, Star(6), RVecBracket, RParen, LVecBracket, PVar("star_2_0"), PVar("star_2_1"), Star(4), RVecBracket, RParen]
[slotted_egraphs::parse] from (compose <?star_3_0  *5>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, PVar("star_3_0"), Star(5), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("Unfold"), id13: ($f39 -> $f487, $f40 -> $f488) with id13: ($f39 -> $f487, $f40 -> $f488)
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f491, $f7 -> $f490) with id6: ($f6 -> $f491, $f7 -> $f490)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f491, $f7 -> $f490) with id6: ($f6 -> $f491, $f7 -> $f490)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f492, $f7 -> $f493) with id6: ($f6 -> $f492, $f7 -> $f493)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id6: ($f6 -> $f492, $f7 -> $f493) with id6: ($f6 -> $f492, $f7 -> $f493)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f494, $f11 -> $f495) with id8: ($f10 -> $f494, $f11 -> $f495)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f494, $f11 -> $f495) with id8: ($f10 -> $f494, $f11 -> $f495)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f496, $f11 -> $f497) with id8: ($f10 -> $f496, $f11 -> $f497)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id8: ($f10 -> $f496, $f11 -> $f497) with id8: ($f10 -> $f496, $f11 -> $f497)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f501, $f77 -> $f500) with id16: ($f76 -> $f501, $f77 -> $f500)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f501, $f77 -> $f500) with id16: ($f76 -> $f501, $f77 -> $f500)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f501, $f77 -> $f500) with id16: ($f76 -> $f501, $f77 -> $f500)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f501, $f77 -> $f500) with id16: ($f76 -> $f501, $f77 -> $f500)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f501, $f77 -> $f500) with id16: ($f76 -> $f501, $f77 -> $f500)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f501, $f77 -> $f500) with id16: ($f76 -> $f501, $f77 -> $f500)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f502, $f77 -> $f503) with id16: ($f76 -> $f502, $f77 -> $f503)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f502, $f77 -> $f503) with id16: ($f76 -> $f502, $f77 -> $f503)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f502, $f77 -> $f503) with id16: ($f76 -> $f502, $f77 -> $f503)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f502, $f77 -> $f503) with id16: ($f76 -> $f502, $f77 -> $f503)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f502, $f77 -> $f503) with id16: ($f76 -> $f502, $f77 -> $f503)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f502, $f77 -> $f503) with id16: ($f76 -> $f502, $f77 -> $f503)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f504, $f77 -> $f505) with id16: ($f76 -> $f504, $f77 -> $f505)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f504, $f77 -> $f505) with id16: ($f76 -> $f504, $f77 -> $f505)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f504, $f77 -> $f505) with id16: ($f76 -> $f504, $f77 -> $f505)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f504, $f77 -> $f505) with id16: ($f76 -> $f504, $f77 -> $f505)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f504, $f77 -> $f505) with id16: ($f76 -> $f504, $f77 -> $f505)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id16: ($f76 -> $f504, $f77 -> $f505) with id16: ($f76 -> $f504, $f77 -> $f505)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id19: ($f82 -> $f506, $f83 -> $f507) with id19: ($f82 -> $f506, $f83 -> $f507)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f508, $f209 -> $f509) with id25: ($f208 -> $f508, $f209 -> $f509)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id25: ($f208 -> $f508, $f209 -> $f509) with id25: ($f208 -> $f508, $f209 -> $f509)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id29: ($f368 -> $f510, $f369 -> $f511) with id29: ($f368 -> $f510, $f369 -> $f511)
[slotted_egraphs::egraph::union] Union because Some("newChildrenPermute"), id31: ($f372 -> $f512, $f373 -> $f513) with id31: ($f372 -> $f512, $f373 -> $f513)
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id5: ($f5 -> $f514) with id5: ($f5 -> $f514)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id7: ($f8 -> $f515, $f9 -> $f516) with id7: ($f8 -> $f515, $f9 -> $f516)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f517, $f40 -> $f518) with id13: ($f39 -> $f517, $f40 -> $f518)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f517, $f40 -> $f518) with id13: ($f39 -> $f517, $f40 -> $f518)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f519, $f40 -> $f520) with id13: ($f39 -> $f519, $f40 -> $f520)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f519, $f40 -> $f520) with id13: ($f39 -> $f519, $f40 -> $f520)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f521, $f40 -> $f522) with id13: ($f39 -> $f521, $f40 -> $f522)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f521, $f40 -> $f522) with id13: ($f39 -> $f521, $f40 -> $f522)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f523, $f40 -> $f524) with id13: ($f39 -> $f523, $f40 -> $f524)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f523, $f40 -> $f524) with id13: ($f39 -> $f523, $f40 -> $f524)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f525, $f40 -> $f526) with id13: ($f39 -> $f525, $f40 -> $f526)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f525, $f40 -> $f526) with id13: ($f39 -> $f525, $f40 -> $f526)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f527, $f40 -> $f528) with id13: ($f39 -> $f527, $f40 -> $f528)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f527, $f40 -> $f528) with id13: ($f39 -> $f527, $f40 -> $f528)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f529, $f40 -> $f530) with id13: ($f39 -> $f529, $f40 -> $f530)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f529, $f40 -> $f530) with id13: ($f39 -> $f529, $f40 -> $f530)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f531, $f40 -> $f532) with id13: ($f39 -> $f531, $f40 -> $f532)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f531, $f40 -> $f532) with id13: ($f39 -> $f531, $f40 -> $f532)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f533, $f40 -> $f534) with id13: ($f39 -> $f533, $f40 -> $f534)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f533, $f40 -> $f534) with id13: ($f39 -> $f533, $f40 -> $f534)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f535, $f40 -> $f536) with id13: ($f39 -> $f535, $f40 -> $f536)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f535, $f40 -> $f536) with id13: ($f39 -> $f535, $f40 -> $f536)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f537, $f40 -> $f538) with id13: ($f39 -> $f537, $f40 -> $f538)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f537, $f40 -> $f538) with id13: ($f39 -> $f537, $f40 -> $f538)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f539, $f40 -> $f540) with id13: ($f39 -> $f539, $f40 -> $f540)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f539, $f40 -> $f540) with id13: ($f39 -> $f539, $f40 -> $f540)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f541, $f40 -> $f542) with id13: ($f39 -> $f541, $f40 -> $f542)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f541, $f40 -> $f542) with id13: ($f39 -> $f541, $f40 -> $f542)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f543, $f40 -> $f544) with id13: ($f39 -> $f543, $f40 -> $f544)
[slotted_egraphs::egraph::union] Union because Some("composeChildrenPermute"), id13: ($f39 -> $f543, $f40 -> $f544) with id13: ($f39 -> $f543, $f40 -> $f544)
[entry::chc::rewrite] define found [{"syntax": id3: ($f3 -> $f545), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f546), "star_1_0": id5: ($f5 -> $f547), "syntax": id1: ($f1 -> $f547, $f2 -> $f546)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f548), "star_1_0": id5: ($f5 -> $f549), "syntax": id1: ($f1 -> $f548, $f2 -> $f549)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f550), "star_1_0": id7: ($f8 -> $f550, $f9 -> $f551), "syntax": id1: ($f1 -> $f550, $f2 -> $f551)}, {"cond": id2: (), "star_1_1": id7: ($f8 -> $f552, $f9 -> $f553), "star_1_0": id5: ($f5 -> $f552), "syntax": id1: ($f1 -> $f552, $f2 -> $f553)}, {"syntax": id1: ($f1 -> $f554, $f2 -> $f555), "cond": id2: ()}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f556), "star_1_0": id5: ($f5 -> $f557), "syntax": id1: ($f1 -> $f557, $f2 -> $f556), "star_1_2": id5: ($f5 -> $f557)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f558), "star_1_0": id5: ($f5 -> $f559), "syntax": id1: ($f1 -> $f558, $f2 -> $f559), "star_1_2": id5: ($f5 -> $f558)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f560), "star_1_0": id5: ($f5 -> $f560), "syntax": id1: ($f1 -> $f560, $f2 -> $f561), "star_1_2": id5: ($f5 -> $f561)}, {"syntax": id1: ($f1 -> $f562, $f2 -> $f563), "cond": id2: (), "star_1_0": id7: ($f8 -> $f562, $f9 -> $f563)}, {"cond": id2: (), "star_1_1": id5: ($f5 -> $f564), "star_1_0": id5: ($f5 -> $f564), "syntax": id1: ($f1 -> $f564, $f2 -> $f565)}, {"syntax": id1: ($f1 -> $f567, $f2 -> $f566), "cond": id2: (), "star_1_0": id5: ($f5 -> $f566)}, {"syntax": id1: ($f1 -> $f568, $f2 -> $f569), "cond": id2: (), "star_1_0": id5: ($f5 -> $f568)}]
[entry::chc::rewrite] root eclass id4 
    CHCData { predNames: {}, varTypes: {$f4: Unknown} }
    ($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
     - New(id3: ($f3 -> $f4), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f6),
        id5: ($f5 -> $f7),
    ]
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] mergeVarTypes = {
        $f7: Unknown,
        $f6: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f7: [
            1,
        ],
        $f6: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] root eclass id6 
    CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
    ($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
     - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f7),
        id5: ($f5 -> $f6),
    ]
[entry::chc::rewrite] appId.slots {$f7}
[entry::chc::rewrite] appId.slots {$f6}
[entry::chc::rewrite] mergeVarTypes = {
        $f6: Unknown,
        $f7: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f6: [
            1,
        ],
        $f7: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f6
[entry::chc::rewrite] var = $f7
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f10, $f9 -> $f11),
        id5: ($f5 -> $f10),
    ]
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] mergeVarTypes = {
        $f11: Unknown,
        $f10: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f10: [
            0,
            1,
        ],
        $f11: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] root eclass id8 
    CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
    ($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
     - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f10),
        id7: ($f8 -> $f10, $f9 -> $f11),
    ]
[entry::chc::rewrite] appId.slots {$f10}
[entry::chc::rewrite] appId.slots {$f10, $f11}
[entry::chc::rewrite] mergeVarTypes = {
        $f11: Unknown,
        $f10: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f10: [
            0,
            1,
        ],
        $f11: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f10
[entry::chc::rewrite] var = $f11
[entry::chc::rewrite] root eclass id9 
    CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
    ($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
     - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
    
[entry::chc::rewrite] childAppIds []
[entry::chc::rewrite] mergeVarTypes = {}
[entry::chc::rewrite] varToChildIndx = {}
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            1,
        ],
        $f76: [
            0,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f77),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
    ]
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            0,
        ],
        $f76: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id16 
    CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
    ($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])
     - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f76),
        id5: ($f5 -> $f77),
    ]
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f76}
[entry::chc::rewrite] appId.slots {$f77}
[entry::chc::rewrite] mergeVarTypes = {
        $f77: Unknown,
        $f76: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f77: [
            2,
        ],
        $f76: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f77
[entry::chc::rewrite] var = $f76
[entry::chc::rewrite] root eclass id19 
    CHCData { predNames: {}, varTypes: {$f83: Unknown, $f82: Unknown} }
    ($f82, $f83):>> New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
     - New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
    
[entry::chc::rewrite] childAppIds [
        id7: ($f8 -> $f82, $f9 -> $f83),
    ]
[entry::chc::rewrite] appId.slots {$f82, $f83}
[entry::chc::rewrite] mergeVarTypes = {
        $f83: Unknown,
        $f82: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f82: [
            0,
        ],
        $f83: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f82
[entry::chc::rewrite] var = $f83
[entry::chc::rewrite] root eclass id25 
    CHCData { predNames: {}, varTypes: {$f209: Unknown, $f208: Unknown} }
    ($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f208),
        id5: ($f5 -> $f208),
    ]
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] appId.slots {$f208}
[entry::chc::rewrite] mergeVarTypes = {
        $f208: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f208: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f208
[entry::chc::rewrite] root eclass id29 
    CHCData { predNames: {}, varTypes: {$f368: Unknown, $f369: Unknown} }
    ($f368, $f369):>> New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
     - New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f368),
    ]
[entry::chc::rewrite] appId.slots {$f368}
[entry::chc::rewrite] mergeVarTypes = {
        $f368: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f368: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f368
[entry::chc::rewrite] root eclass id31 
    CHCData { predNames: {}, varTypes: {$f373: Unknown, $f372: Unknown} }
    ($f372, $f373):>> New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
     - New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
    
[entry::chc::rewrite] childAppIds [
        id5: ($f5 -> $f372),
    ]
[entry::chc::rewrite] appId.slots {$f372}
[entry::chc::rewrite] mergeVarTypes = {
        $f372: Unknown,
    }
[entry::chc::rewrite] varToChildIndx = {
        $f372: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f372
[slotted_egraphs::egraph::union] Union because Some("trueToAnd"), id2: () with id2: ()
[entry::chc::tst] egraph after

 == Egraph ==
(var $f0)
CHCData { predNames: {}, varTypes: {$f0: Unknown} }
id0($f0):>> Var($f0)
 - Var($f0)

(pred <(var $f1) (var $f2)>)
CHCData { predNames: {}, varTypes: {$f1: Unknown, $f2: Unknown} }
id1($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
 - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])

(true)
CHCData { predNames: {}, varTypes: {} }
id2():>> True
 - True
 - And([])

(pred <(var $f3)>)
CHCData { predNames: {}, varTypes: {$f3: Unknown} }
id3($f3):>> PredSyntax([id0: ($f0 -> $f3)])
 - PredSyntax([id0: ($f0 -> $f3)])

(new (pred <(var $f4)>) (true) <>)
CHCData { predNames: {}, varTypes: {$f4: Unknown} }
id4($f4):>> New(id3: ($f3 -> $f4), id2: (), [])
 - New(id3: ($f3 -> $f4), id2: (), [])

(compose <(new (pred <(var $f5)>) (true) <>)>)
CHCData { predNames: {}, varTypes: {$f5: Unknown} }
id5($f5):>> Compose([AppliedId(id4: ($f4 -> $f5))])
 - Compose([AppliedId(id4: ($f4 -> $f5))])

(new (pred <(var $f6) (var $f7)>) (true) <(compose <(new (pred <(var $f6)>) (true) <>)>) (compose <(new (pred <(var $f7)>) (true) <>)>)>)
CHCData { predNames: {}, varTypes: {$f7: Unknown, $f6: Unknown} }
id6($f6, $f7):>> New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
 - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f6)), AppliedId(id5: ($f5 -> $f7))])
 - New(id1: ($f1 -> $f6, $f2 -> $f7), id2: (), [AppliedId(id5: ($f5 -> $f7)), AppliedId(id5: ($f5 -> $f6))])

(compose <(new (pred <(var $f8) (var $f9)>) (true) <(compose <(new (pred <(var $f8)>) (true) <>)>) (compose <(new (pred <(var $f9)>) (true) <>)>)>)>)
CHCData { predNames: {}, varTypes: {$f9: Unknown, $f8: Unknown} }
id7($f8, $f9):>> Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
 - Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])

(new (pred <(var $f10) (var $f11)>) (true) <(compose <(new (pred <(var $f10) (var $f11)>) (true) <(compose <(new (pred <(var $f10)>) (true) <>)>) (compose <(new (pred <(var $f11)>) (true) <>)>)>)>) (compose <(new (pred <(var $f10)>) (true) <>)>)>)
CHCData { predNames: {}, varTypes: {$f10: Unknown, $f11: Unknown} }
id8($f10, $f11):>> New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
 - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id7: ($f8 -> $f10, $f9 -> $f11)), AppliedId(id5: ($f5 -> $f10))])
 - New(id1: ($f1 -> $f10, $f2 -> $f11), id2: (), [AppliedId(id5: ($f5 -> $f10)), AppliedId(id7: ($f8 -> $f10, $f9 -> $f11))])

(new (pred <(var $f12) (var $f13)>) (true) <>)
CHCData { predNames: {}, varTypes: {$f12: Unknown, $f13: Unknown} }
id9($f12, $f13):>> New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])
 - New(id1: ($f1 -> $f12, $f2 -> $f13), id2: (), [])

(compose <(new (pred <(var $f39) (var $f40)>) (true) <>) (new (pred <(var $f39) (var $f40)>) (true) <(compose <(new (pred <(var $f39) (var $f40)>) (true) <(compose <(new (pred <(var $f39)>) (true) <>)>) (compose <(new (pred <(var $f40)>) (true) <>)>)>)>) (compose <(new (pred <(var $f39)>) (true) <>)>)>)>)
CHCData { predNames: {}, varTypes: {$f39: Unknown, $f40: Unknown} }
id13($f39, $f40):>> Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
 - Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
 - Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
 - Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
 - Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
 - Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
 - Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
 - Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
 - Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
 - Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
 - Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
 - Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
 - Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
 - Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
 - Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])

(new (pred <(var $f76) (var $f77)>) (true) <(compose <(new (pred <(var $f76)>) (true) <>)>) (compose <(new (pred <(var $f77)>) (true) <>)>) (compose <(new (pred <(var $f76)>) (true) <>)>)>)
CHCData { predNames: {}, varTypes: {$f77: Unknown, $f76: Unknown} }
id16($f76, $f77):>> New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
 - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76))])
 - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f77))])
 - New(id1: ($f1 -> $f76, $f2 -> $f77), id2: (), [AppliedId(id5: ($f5 -> $f77)), AppliedId(id5: ($f5 -> $f76)), AppliedId(id5: ($f5 -> $f76))])

(new (pred <(var $f82) (var $f83)>) (true) <(compose <(new (pred <(var $f82) (var $f83)>) (true) <(compose <(new (pred <(var $f82)>) (true) <>)>) (compose <(new (pred <(var $f83)>) (true) <>)>)>)>)>)
CHCData { predNames: {}, varTypes: {$f83: Unknown, $f82: Unknown} }
id19($f82, $f83):>> New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])
 - New(id1: ($f1 -> $f82, $f2 -> $f83), id2: (), [AppliedId(id7: ($f8 -> $f82, $f9 -> $f83))])

(new (pred <(var $f208) (var $f209)>) (true) <(compose <(new (pred <(var $f208)>) (true) <>)>) (compose <(new (pred <(var $f208)>) (true) <>)>)>)
CHCData { predNames: {}, varTypes: {$f209: Unknown, $f208: Unknown} }
id25($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])
 - New(id1: ($f1 -> $f208, $f2 -> $f209), id2: (), [AppliedId(id5: ($f5 -> $f208)), AppliedId(id5: ($f5 -> $f208))])

(new (pred <(var $f369) (var $f368)>) (true) <(compose <(new (pred <(var $f368)>) (true) <>)>)>)
CHCData { predNames: {}, varTypes: {$f368: Unknown, $f369: Unknown} }
id29($f368, $f369):>> New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])
 - New(id1: ($f1 -> $f369, $f2 -> $f368), id2: (), [AppliedId(id5: ($f5 -> $f368))])

(new (pred <(var $f372) (var $f373)>) (true) <(compose <(new (pred <(var $f372)>) (true) <>)>)>)
CHCData { predNames: {}, varTypes: {$f373: Unknown, $f372: Unknown} }
id31($f372, $f373):>> New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
 - New(id1: ($f1 -> $f372, $f2 -> $f373), id2: (), [AppliedId(id5: ($f5 -> $f372))])
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::parse] from (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, PVar("a"), PVar("b"), RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose <(new (pred <?a ?b>) (true) <(compose <(new (pred <?a>) (true) <>)>) (compose <(new (pred <?b>) (true) <>)>) (compose <(new (pred <?a>) (true) <>)>)>) (new (pred <?a ?b>) (true) <>)>)
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f5))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f8, $f7 -> $f9))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), AppliedId(id0: ())]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id6: ($f6 -> $f39, $f7 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id6: ($f6 -> $f39, $f7 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id25: ($f208 -> $f39, $f209 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id25: ($f208 -> $f39, $f209 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id8: ($f10 -> $f39, $f11 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id8: ($f10 -> $f39, $f11 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id29: ($f368 -> $f40, $f369 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id29: ($f368 -> $f40, $f369 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id31: ($f372 -> $f39, $f373 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id31: ($f372 -> $f39, $f373 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id29: ($f368 -> $f40, $f369 -> $f39)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id29: ($f368 -> $f40, $f369 -> $f39), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id31: ($f372 -> $f39, $f373 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id31: ($f372 -> $f39, $f373 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id16: ($f76 -> $f39, $f77 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id16: ($f76 -> $f39, $f77 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id19: ($f82 -> $f39, $f83 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id19: ($f82 -> $f39, $f83 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id19: ($f82 -> $f39, $f83 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id19: ($f82 -> $f39, $f83 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id7: ($f8 -> $f39, $f9 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id6: ($f6 -> $f39, $f7 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id6: ($f6 -> $f39, $f7 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id8: ($f10 -> $f39, $f11 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id8: ($f10 -> $f39, $f11 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id16: ($f76 -> $f39, $f77 -> $f40)), AppliedId(id9: ($f12 -> $f39, $f13 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id16: ($f76 -> $f39, $f77 -> $f40), id9: ($f12 -> $f39, $f13 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f40), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f40)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f40), id5: ($f5 -> $f39), id5: ($f5 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f39)), AppliedId(id5: ($f5 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: (), id5: ($f5 -> $f39), id5: ($f5 -> $f39), id5: ($f5 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] insert a -> id0: ($f0 -> $f39) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] insert b -> id0: ($f0 -> $f40) to subst
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id4: ($f4 -> $f39))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id4: ($f4 -> $f39)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id3: ($f3 -> $f39), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id3: ($f3 -> $f39), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: ()]) == clear_n2_sh PredSyntax([id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39)]
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] n_sh New(id0: (), id0: (), []) == clear_n2_sh New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f39, $f2 -> $f40), id2: ()]
[slotted_egraphs::rewrite::ematch] eclassEnode PredSyntax([id0: ($f0 -> $f39), id0: ($f0 -> $f40)])
[slotted_egraphs::rewrite::ematch] patternEnode PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] n_sh PredSyntax([id0: (), id0: ()]) == clear_n2_sh PredSyntax([id0: (), id0: ()])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("a"), PVar("b")]
[slotted_egraphs::rewrite::ematch] eclassChildren [id0: ($f0 -> $f39), id0: ($f0 -> $f40)]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode True
[slotted_egraphs::rewrite::ematch] patternEnode True
[slotted_egraphs::rewrite::ematch] n_sh True == clear_n2_sh True
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {
            "a": id0: ($f0 -> $f39),
            "b": id0: ($f0 -> $f40),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren []
[slotted_egraphs::rewrite::ematch] eclassChildren []
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] acc [State { partial_subst: {"a": id0: ($f0 -> $f39), "b": id0: ($f0 -> $f40)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] eclassEnode Compose([AppliedId(id9: ($f12 -> $f39, $f13 -> $f40)), AppliedId(id25: ($f208 -> $f39, $f209 -> $f40))])
[slotted_egraphs::rewrite::ematch] patternEnode Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] n_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())]) == clear_n2_sh Compose([AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, []), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("b")]), ENode(True, [])])]), ENode(Compose([AppliedId(id0: ())]), [ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: ()]), [PVar("a")]), ENode(True, [])])])]), ENode(New(id0: (), id0: (), []), [ENode(PredSyntax([id0: (), id0: ()]), [PVar("a"), PVar("b")]), ENode(True, [])])]
[slotted_egraphs::rewrite::ematch] eclassChildren [id9: ($f12 -> $f39, $f13 -> $f40), id25: ($f208 -> $f39, $f209 -> $f40)]
[slotted_egraphs::rewrite::ematch] eclassEnode New(id1: ($f1 -> $f39, $f2 -> $f40), id2: (), [])
[slotted_egraphs::rewrite::ematch] patternEnode New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] acc []
test chc::tst::tst1 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 73 filtered out; finished in 0.74s


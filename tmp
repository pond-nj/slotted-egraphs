   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.95s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-6d92e85151c62515)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-44c3f9e1ee7a5866)

running 1 test
[slotted_egraphs::parse] from (new (pred <>) (and <(geq (var $i0) 0) (lt (+ (var $i3) (var $i0)) (var $i4))>) <(init leafDrop (pred <(var $i0) (var $i1) (var $i2)>)) (init minLeaf (pred <(var $i2) (var $i3)>)) (init minLeaf (pred <(var $i1) (var $i4)>))>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i0), RParen, Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("var"), Slot($i3), RParen, LParen, Ident("var"), Slot($i0), RParen, RParen, LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 pred
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i0), RParen, Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("var"), Slot($i3), RParen, LParen, Ident("var"), Slot($i0), RParen, RParen, LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i0)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("var"), Slot($i3), RParen, LParen, Ident("var"), Slot($i0), RParen, RParen, LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("var"), Slot($i3), RParen, LParen, Ident("var"), Slot($i0), RParen, RParen, LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (var $i0) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("lt"), LParen, Ident("+"), LParen, Ident("var"), Slot($i3), RParen, LParen, Ident("var"), Slot($i0), RParen, RParen, LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i3)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i0), RParen, RParen, LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i0)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (var $i3) (var $i0))
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i4), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i4)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (+ (var $i3) (var $i0)) (var $i4))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (geq (var $i0) 0) (lt (+ (var $i3) (var $i0)) (var $i4)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i0), RParen, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i1)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i2), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $i0) (var $i1) (var $i2))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (var $i0) (var $i1) (var $i2)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i2), RParen, LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i2)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i3), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i3)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $i2) (var $i3))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (var $i2) (var $i3)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i1), RParen, LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i1)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i4), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i4)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $i1) (var $i4))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (var $i1) (var $i4)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new pred (and (geq (var $i0) 0) (lt (+ (var $i3) (var $i0)) (var $i4))) (init leafDrop (pred (var $i0) (var $i1) (var $i2))) (init minLeaf (pred (var $i2) (var $i3))) (init minLeaf (pred (var $i1) (var $i4))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([])
[slotted_egraphs::egraph::add] ret (PredSyntax([]), ())
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> pred
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i0)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $i0), id2: ())
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id2: ()), ($0 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (geq (var $i0) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i3)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i3)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i0)
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id1: ($f0 -> $i3), id1: ($f0 -> $i0))
[slotted_egraphs::egraph::add] ret (Add(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i3, $1 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> (+ (var $i3) (var $i0))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i4)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i4)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id4: ($f2 -> $i0, $f3 -> $i3), id1: ($f0 -> $i4))
[slotted_egraphs::egraph::add] ret (Less(id4: ($f2 -> $0, $f3 -> $1), id1: ($f0 -> $2)), ($0 -> $i0, $1 -> $i3, $2 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (lt (+ (var $i3) (var $i0)) (var $i4))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id3: ($f1 -> $i0), id5: ($f4 -> $i0, $f5 -> $i3, $f6 -> $i4)])
[slotted_egraphs::egraph::add] ret (And([id3: ($f1 -> $0), id5: ($f4 -> $0, $f5 -> $1, $f6 -> $2)]), ($0 -> $i0, $1 -> $i3, $2 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> (and (geq (var $i0) 0) (lt (+ (var $i3) (var $i0)) (var $i4)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i0), id1: ($f0 -> $i1), id1: ($f0 -> $i2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $i0, $1 -> $i1, $2 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $i0) (var $i1) (var $i2))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id7: (), id8: ($f10 -> $i0, $f11 -> $i1, $f12 -> $i2))
[slotted_egraphs::egraph::add] ret (Init(id7: (), id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2)), ($0 -> $i0, $1 -> $i1, $2 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (init leafDrop (pred (var $i0) (var $i1) (var $i2)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i2)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i3)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i3))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i3)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i2), id1: ($f0 -> $i3)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $i2, $1 -> $i3))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (pred (var $i2) (var $i3))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id10: (), id11: ($f16 -> $i3, $f17 -> $i2))
[slotted_egraphs::egraph::add] ret (Init(id10: (), id11: ($f16 -> $0, $f17 -> $1)), ($0 -> $i3, $1 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (init minLeaf (pred (var $i2) (var $i3)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i4)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i4)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i1), id1: ($f0 -> $i4)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $i1, $1 -> $i4))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (pred (var $i1) (var $i4))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id10: (), id11: ($f16 -> $i4, $f17 -> $i1))
[slotted_egraphs::egraph::add] ret (Init(id10: (), id11: ($f16 -> $0, $f17 -> $1)), ($0 -> $i4, $1 -> $i1))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (init minLeaf (pred (var $i1) (var $i4)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id0: (), id6: ($f7 -> $i0, $f8 -> $i3, $f9 -> $i4), [AppliedId(id9: ($f13 -> $i0, $f14 -> $i1, $f15 -> $i2)), AppliedId(id12: ($f18 -> $i3, $f19 -> $i2)), AppliedId(id12: ($f18 -> $i4, $f19 -> $i1))])
[slotted_egraphs::egraph::add] ret (New(id0: (), id6: ($f7 -> $0, $f8 -> $1, $f9 -> $2), [AppliedId(id9: ($f13 -> $0, $f14 -> $3, $f15 -> $4)), AppliedId(id12: ($f18 -> $1, $f19 -> $4)), AppliedId(id12: ($f18 -> $2, $f19 -> $3))]), ($0 -> $i0, $1 -> $i3, $2 -> $i4, $3 -> $i1, $4 -> $i2))
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (new pred (and (geq (var $i0) 0) (lt (+ (var $i3) (var $i0)) (var $i4))) (init leafDrop (pred (var $i0) (var $i1) (var $i2))) (init minLeaf (pred (var $i2) (var $i3))) (init minLeaf (pred (var $i1) (var $i4))))
[slotted_egraphs::parse] from (init leafDrop (pred <(var $0) (var $1) (var $2)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1) (var $2))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (var $0) (var $1) (var $2)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $0) (var $1) (var $2))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id7: (), id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2))
[slotted_egraphs::egraph::add] ret (Init(id7: (), id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2)), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (init leafDrop (pred (var $0) (var $1) (var $2)))
[slotted_egraphs::parse] from (compose <(new (pred <(var $0) (var $1) (var $2)>) (and <(eq (var $1) (leaf)) (eq (var $2) (leaf))>) <>) (new (pred <(var $0) (var $1) (var $2)>) (and <(leq (var $0) 0) (eq (var $1) (node (var $i7) (var $i5) (var $i6))) (eq (var $2) (node (var $i7) (var $i5) (var $i6)))>) <>) (new (pred <(var $0) (var $1) (var $2)>) (and <(eq (var $1) (node (var $i10) (var $i8) (var $i9))) (geq (var $0) 1) (eq (var $i11) (- (var $0) 1))>) <(init leafDrop (pred <(var $0) (var $1) (var $2)>))>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1) (var $2))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $1) leaf)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $2)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $2) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (var $1) leaf) (eq (var $2) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) leaf) (eq (var $2) leaf)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1) (var $2))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("leq"), LParen, Ident("var"), Slot($0), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (leq (var $0) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i7)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i5)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i6)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node (var $i7) (var $i5) (var $i6))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $1) (node (var $i7) (var $i5) (var $i6)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($2), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $2)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), LParen, Ident("var"), Slot($i7), RParen, LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i7)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i5), RParen, LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i5)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i6), RParen, RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i6)
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node (var $i7) (var $i5) (var $i6))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $2) (node (var $i7) (var $i5) (var $i6)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (leq (var $0) 0) (eq (var $1) (node (var $i7) (var $i5) (var $i6))) (eq (var $2) (node (var $i7) (var $i5) (var $i6))))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1) (var $2)) (and (leq (var $0) 0) (eq (var $1) (node (var $i7) (var $i5) (var $i6))) (eq (var $2) (node (var $i7) (var $i5) (var $i6)))))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1) (var $2))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), LParen, Ident("var"), Slot($i10), RParen, LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i10)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i10)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i8), RParen, LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i8)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i8)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i9), RParen, RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i9)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i9)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node (var $i10) (var $i8) (var $i9))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $1) (node (var $i10) (var $i8) (var $i9)))
[slotted_egraphs::parse] left tokens [LParen, Ident("geq"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (var $0) 1)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($i11), RParen, LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i11)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i11)
[slotted_egraphs::parse] left tokens [LParen, Ident("-"), LParen, Ident("var"), Slot($0), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("-"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (- (var $0) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $i11) (- (var $0) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (var $1) (node (var $i10) (var $i8) (var $i9))) (geq (var $0) 1) (eq (var $i11) (- (var $0) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("leafDrop"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 leafDrop
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($2), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1) (var $2))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init leafDrop (pred (var $0) (var $1) (var $2)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) (node (var $i10) (var $i8) (var $i9))) (geq (var $0) 1) (eq (var $i11) (- (var $0) 1))) (init leafDrop (pred (var $0) (var $1) (var $2))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) leaf) (eq (var $2) leaf))) (new (pred (var $0) (var $1) (var $2)) (and (leq (var $0) 0) (eq (var $1) (node (var $i7) (var $i5) (var $i6))) (eq (var $2) (node (var $i7) (var $i5) (var $i6))))) (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) (node (var $i10) (var $i8) (var $i9))) (geq (var $0) 1) (eq (var $i11) (- (var $0) 1))) (init leafDrop (pred (var $0) (var $1) (var $2)))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $0) (var $1) (var $2))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $1), id14: ())
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id14: ()), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (eq (var $1) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $2)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $2), id14: ())
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id14: ()), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (eq (var $2) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id15: ($f25 -> $1), id15: ($f25 -> $2)])
[slotted_egraphs::egraph::add] ret (And([id15: ($f25 -> $0), id15: ($f25 -> $1)]), ($0 -> $1, $1 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (and (eq (var $1) leaf) (eq (var $2) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id16: ($f26 -> $1, $f27 -> $2), [])
[slotted_egraphs::egraph::add] ret (New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id16: ($f26 -> $1, $f27 -> $2), []), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) leaf) (eq (var $2) leaf)))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $0) (var $1) (var $2))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Leq(id1: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::add] ret (Leq(id1: ($f0 -> $0), id2: ()), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (leq (var $0) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i7)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i7)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i5)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i6)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input Node(id1: ($f0 -> $i7), id1: ($f0 -> $i5), id1: ($f0 -> $i6))
[slotted_egraphs::egraph::add] ret (Node(id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)), ($0 -> $i7, $1 -> $i5, $2 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> (node (var $i7) (var $i5) (var $i6))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $1), id19: ($f32 -> $i7, $f33 -> $i5, $f34 -> $i6))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id19: ($f32 -> $1, $f33 -> $2, $f34 -> $3)), ($0 -> $1, $1 -> $i7, $2 -> $i5, $3 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (eq (var $1) (node (var $i7) (var $i5) (var $i6)))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $2)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i7)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i7))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i7)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i5)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i5))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i5)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i6)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i6)
[slotted_egraphs::egraph::add] shape_called_from_add input Node(id1: ($f0 -> $i7), id1: ($f0 -> $i5), id1: ($f0 -> $i6))
[slotted_egraphs::egraph::add] ret (Node(id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)), ($0 -> $i7, $1 -> $i5, $2 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> (node (var $i7) (var $i5) (var $i6))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $2), id19: ($f32 -> $i7, $f33 -> $i5, $f34 -> $i6))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id19: ($f32 -> $1, $f33 -> $2, $f34 -> $3)), ($0 -> $2, $1 -> $i7, $2 -> $i5, $3 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (eq (var $2) (node (var $i7) (var $i5) (var $i6)))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id18: ($f31 -> $0), id20: ($f35 -> $1, $f36 -> $i7, $f37 -> $i5, $f38 -> $i6), id20: ($f35 -> $2, $f36 -> $i7, $f37 -> $i5, $f38 -> $i6)])
[slotted_egraphs::egraph::add] ret (And([id18: ($f31 -> $0), id20: ($f35 -> $1, $f36 -> $2, $f37 -> $3, $f38 -> $4), id20: ($f35 -> $5, $f36 -> $2, $f37 -> $3, $f38 -> $4)]), ($0 -> $0, $1 -> $1, $2 -> $i7, $3 -> $i5, $4 -> $i6, $5 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id21 <-> (and (leq (var $0) 0) (eq (var $1) (node (var $i7) (var $i5) (var $i6))) (eq (var $2) (node (var $i7) (var $i5) (var $i6))))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id21: ($f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $i7, $f43 -> $i5, $f44 -> $i6), [])
[slotted_egraphs::egraph::add] ret (New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id21: ($f39 -> $0, $f40 -> $1, $f41 -> $2, $f42 -> $3, $f43 -> $4, $f44 -> $5), []), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $i7, $4 -> $i5, $5 -> $i6))
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (new (pred (var $0) (var $1) (var $2)) (and (leq (var $0) 0) (eq (var $1) (node (var $i7) (var $i5) (var $i6))) (eq (var $2) (node (var $i7) (var $i5) (var $i6)))))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $0) (var $1) (var $2))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i10)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i10))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i10)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i8)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i8))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i8)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i9)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i9)
[slotted_egraphs::egraph::add] shape_called_from_add input Node(id1: ($f0 -> $i10), id1: ($f0 -> $i8), id1: ($f0 -> $i9))
[slotted_egraphs::egraph::add] ret (Node(id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)), ($0 -> $i10, $1 -> $i8, $2 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> (node (var $i10) (var $i8) (var $i9))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $1), id19: ($f32 -> $i10, $f33 -> $i8, $f34 -> $i9))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id19: ($f32 -> $1, $f33 -> $2, $f34 -> $3)), ($0 -> $1, $1 -> $i10, $2 -> $i8, $3 -> $i9))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (eq (var $1) (node (var $i10) (var $i8) (var $i9)))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $0), id23: ())
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id23: ()), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (geq (var $0) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i11)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i11))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i11)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Minus(id1: ($f0 -> $0), id23: ())
[slotted_egraphs::egraph::add] ret (Minus(id1: ($f0 -> $0), id23: ()), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id25 <-> (- (var $0) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i11), id25: ($f52 -> $0))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id25: ($f52 -> $1)), ($0 -> $i11, $1 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id26 <-> (eq (var $i11) (- (var $0) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id20: ($f35 -> $1, $f36 -> $i10, $f37 -> $i8, $f38 -> $i9), id24: ($f51 -> $0), id26: ($f53 -> $0, $f54 -> $i11)])
[slotted_egraphs::egraph::add] ret (And([id20: ($f35 -> $0, $f36 -> $1, $f37 -> $2, $f38 -> $3), id24: ($f51 -> $4), id26: ($f53 -> $4, $f54 -> $5)]), ($0 -> $1, $1 -> $i10, $2 -> $i8, $3 -> $i9, $4 -> $0, $5 -> $i11))
[slotted_egraphs::egraph::add] add_syn_expr: id27 <-> (and (eq (var $1) (node (var $i10) (var $i8) (var $i9))) (geq (var $0) 1) (eq (var $i11) (- (var $0) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("leafDrop")
[slotted_egraphs::egraph::add] ret (PredName("leafDrop"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> leafDrop
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($2)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $2)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $0) (var $1) (var $2))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id7: (), id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2))
[slotted_egraphs::egraph::add] ret (Init(id7: (), id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2)), ($0 -> $0, $1 -> $1, $2 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> (init leafDrop (pred (var $0) (var $1) (var $2)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id27: ($f55 -> $0, $f56 -> $1, $f57 -> $i10, $f58 -> $i8, $f59 -> $i9, $f60 -> $i11), [AppliedId(id9: ($f13 -> $0, $f14 -> $1, $f15 -> $2))])
[slotted_egraphs::egraph::add] ret (New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id27: ($f55 -> $0, $f56 -> $1, $f57 -> $3, $f58 -> $4, $f59 -> $5, $f60 -> $6), [AppliedId(id9: ($f13 -> $0, $f14 -> $1, $f15 -> $2))]), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $i10, $4 -> $i8, $5 -> $i9, $6 -> $i11))
[slotted_egraphs::egraph::add] add_syn_expr: id28 <-> (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) (node (var $i10) (var $i8) (var $i9))) (geq (var $0) 1) (eq (var $i11) (- (var $0) 1))) (init leafDrop (pred (var $0) (var $1) (var $2))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id17: ($f28 -> $0, $f29 -> $1, $f30 -> $2)), AppliedId(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2, $f48 -> $i7, $f49 -> $i5, $f50 -> $i6)), AppliedId(id28: ($f61 -> $0, $f62 -> $1, $f63 -> $2, $f64 -> $i10, $f65 -> $i8, $f66 -> $i9, $f67 -> $i11))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id17: ($f28 -> $0, $f29 -> $1, $f30 -> $2)), AppliedId(id22: ($f45 -> $0, $f46 -> $1, $f47 -> $2, $f48 -> $3, $f49 -> $4, $f50 -> $5)), AppliedId(id28: ($f61 -> $0, $f62 -> $1, $f63 -> $2, $f64 -> $6, $f65 -> $7, $f66 -> $8, $f67 -> $9))]), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $i7, $4 -> $i5, $5 -> $i6, $6 -> $i10, $7 -> $i8, $8 -> $i9, $9 -> $i11))
[slotted_egraphs::egraph::add] add_syn_expr: id29 <-> (compose (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) leaf) (eq (var $2) leaf))) (new (pred (var $0) (var $1) (var $2)) (and (leq (var $0) 0) (eq (var $1) (node (var $i7) (var $i5) (var $i6))) (eq (var $2) (node (var $i7) (var $i5) (var $i6))))) (new (pred (var $0) (var $1) (var $2)) (and (eq (var $1) (node (var $i10) (var $i8) (var $i9))) (geq (var $0) 1) (eq (var $i11) (- (var $0) 1))) (init leafDrop (pred (var $0) (var $1) (var $2)))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::parse] from (init minLeaf (pred <(var $0) (var $1)>))
[slotted_egraphs::parse] to tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1))
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (var $0) (var $1)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (pred (var $0) (var $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id10: (), id11: ($f16 -> $1, $f17 -> $0))
[slotted_egraphs::egraph::add] ret (Init(id10: (), id11: ($f16 -> $0, $f17 -> $1)), ($0 -> $1, $1 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (init minLeaf (pred (var $0) (var $1)))
[slotted_egraphs::parse] from (compose <(new (pred <(var $0) (var $1)>) (and <(eq (var $1) 0) (eq (var $0) (leaf))>) <>) (new (pred <(var $0) (var $1)>) (and <(eq (var $0) (node (var $i12) (var $i13) (var $i14))) (eq (var $1) (+ (var $i17) 1))>) <(init minLeaf (pred <(var $i13) (var $i15)>)) (init minLeaf (pred <(var $i14) (var $i16)>)) (compose <(new (pred <(var $i15) (var $i16) (var $i17)>) (and <(lt (var $i15) (var $i16)) (eq (var $i17) (var $i15))>) <>) (new (pred <(var $i15) (var $i16) (var $i17)>) (and <(geq (var $i15) (var $i16)) (eq (var $i17) (var $i16))>) <>)>)>)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $1) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $0) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (var $1) 0) (eq (var $0) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1)) (and (eq (var $1) 0) (eq (var $0) leaf)))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($0), RParen, LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $0) (var $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("var"), Slot($0), RParen, LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), LParen, Ident("var"), Slot($i12), RParen, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i12)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i12)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i13)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i14), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i14)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i14)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node (var $i12) (var $i13) (var $i14))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $0) (node (var $i12) (var $i13) (var $i14)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("+"), LParen, Ident("var"), Slot($i17), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i17)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (var $i17) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $1) (+ (var $i17) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (var $0) (node (var $i12) (var $i13) (var $i14))) (eq (var $1) (+ (var $i17) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i13), RParen, LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i13)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i13)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i15), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i15)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $i13) (var $i15))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (var $i13) (var $i15)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i14), RParen, LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i14)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i14)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i16), RParen, RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i16)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $i14) (var $i16))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (var $i14) (var $i16)))
[slotted_egraphs::parse] left tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i15)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i16)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i17)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $i15) (var $i16) (var $i17))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("lt"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i15)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i16)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("lt"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (lt (var $i15) (var $i16))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i17)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i15), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i15)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $i17) (var $i15))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15))))
[slotted_egraphs::parse] left tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i15)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i16), RParen, LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i16)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i17), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i17)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (var $i15) (var $i16) (var $i17))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("geq"), LParen, Ident("var"), Slot($i15), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i15)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i15)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i16), RParen, RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i16)
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("geq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (geq (var $i15) (var $i16))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("var"), Slot($i17), RParen, LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i17)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i17)
[slotted_egraphs::parse] left tokens [LParen, Ident("var"), Slot($i16), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("var"), Slot($i16)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (var $i16)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (var $i17) (var $i16))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16)))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))) (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16)))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (var $0) (var $1)) (and (eq (var $0) (node (var $i12) (var $i13) (var $i14))) (eq (var $1) (+ (var $i17) 1))) (init minLeaf (pred (var $i13) (var $i15))) (init minLeaf (pred (var $i14) (var $i16))) (compose (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))) (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16))))))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new (pred (var $0) (var $1)) (and (eq (var $1) 0) (eq (var $0) leaf))) (new (pred (var $0) (var $1)) (and (eq (var $0) (node (var $i12) (var $i13) (var $i14))) (eq (var $1) (+ (var $i17) 1))) (init minLeaf (pred (var $i13) (var $i15))) (init minLeaf (pred (var $i14) (var $i16))) (compose (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))) (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16)))))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (pred (var $0) (var $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $1), id2: ())
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id2: ()), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id30 <-> (eq (var $1) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $0), id14: ())
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id14: ()), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (eq (var $0) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id30: ($f92 -> $1), id15: ($f25 -> $0)])
[slotted_egraphs::egraph::add] ret (And([id30: ($f92 -> $0), id15: ($f25 -> $1)]), ($0 -> $1, $1 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id31 <-> (and (eq (var $1) 0) (eq (var $0) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id11: ($f16 -> $1, $f17 -> $0), id31: ($f93 -> $0, $f94 -> $1), [])
[slotted_egraphs::egraph::add] ret (New(id11: ($f16 -> $0, $f17 -> $1), id31: ($f93 -> $1, $f94 -> $0), []), ($0 -> $1, $1 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id32 <-> (new (pred (var $0) (var $1)) (and (eq (var $1) 0) (eq (var $0) leaf)))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (pred (var $0) (var $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($0)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i12)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i12))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i12)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i13)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i13)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i14)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i14))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i14)
[slotted_egraphs::egraph::add] shape_called_from_add input Node(id1: ($f0 -> $i12), id1: ($f0 -> $i13), id1: ($f0 -> $i14))
[slotted_egraphs::egraph::add] ret (Node(id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)), ($0 -> $i12, $1 -> $i13, $2 -> $i14))
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> (node (var $i12) (var $i13) (var $i14))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $0), id19: ($f32 -> $i12, $f33 -> $i13, $f34 -> $i14))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id19: ($f32 -> $1, $f33 -> $2, $f34 -> $3)), ($0 -> $0, $1 -> $i12, $2 -> $i13, $3 -> $i14))
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (eq (var $0) (node (var $i12) (var $i13) (var $i14)))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($1)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i17)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i17)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id1: ($f0 -> $i17), id23: ())
[slotted_egraphs::egraph::add] ret (Add(id1: ($f0 -> $0), id23: ()), ($0 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id33 <-> (+ (var $i17) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $1), id33: ($f97 -> $i17))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id33: ($f97 -> $1)), ($0 -> $1, $1 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id34 <-> (eq (var $1) (+ (var $i17) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id20: ($f35 -> $0, $f36 -> $i12, $f37 -> $i13, $f38 -> $i14), id34: ($f98 -> $1, $f99 -> $i17)])
[slotted_egraphs::egraph::add] ret (And([id20: ($f35 -> $0, $f36 -> $1, $f37 -> $2, $f38 -> $3), id34: ($f98 -> $4, $f99 -> $5)]), ($0 -> $0, $1 -> $i12, $2 -> $i13, $3 -> $i14, $4 -> $1, $5 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id35 <-> (and (eq (var $0) (node (var $i12) (var $i13) (var $i14))) (eq (var $1) (+ (var $i17) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i13)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i13))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i13)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i15)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i15)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i13), id1: ($f0 -> $i15)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $i13, $1 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (pred (var $i13) (var $i15))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id10: (), id11: ($f16 -> $i15, $f17 -> $i13))
[slotted_egraphs::egraph::add] ret (Init(id10: (), id11: ($f16 -> $0, $f17 -> $1)), ($0 -> $i15, $1 -> $i13))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (init minLeaf (pred (var $i13) (var $i15)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i14)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i14))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i14)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i16)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i16)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i14), id1: ($f0 -> $i16)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1)]), ($0 -> $i14, $1 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (pred (var $i14) (var $i16))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id10: (), id11: ($f16 -> $i16, $f17 -> $i14))
[slotted_egraphs::egraph::add] ret (Init(id10: (), id11: ($f16 -> $0, $f17 -> $1)), ($0 -> $i16, $1 -> $i14))
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (init minLeaf (pred (var $i14) (var $i16)))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i15)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i15)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i16)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i16)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i17)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i17)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i15), id1: ($f0 -> $i16), id1: ($f0 -> $i17)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $i15, $1 -> $i16, $2 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $i15) (var $i16) (var $i17))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i15)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i15)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i16)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i16)
[slotted_egraphs::egraph::add] shape_called_from_add input Less(id1: ($f0 -> $i15), id1: ($f0 -> $i16))
[slotted_egraphs::egraph::add] ret (Less(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i15, $1 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id36 <-> (lt (var $i15) (var $i16))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i17)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i17)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i15)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i15)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i17), id1: ($f0 -> $i15))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i17, $1 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (eq (var $i17) (var $i15))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id36: ($f106 -> $i15, $f107 -> $i16), id37: ($f108 -> $i17, $f109 -> $i15)])
[slotted_egraphs::egraph::add] ret (And([id36: ($f106 -> $0, $f107 -> $1), id37: ($f108 -> $2, $f109 -> $0)]), ($0 -> $i15, $1 -> $i16, $2 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id38 <-> (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id8: ($f10 -> $i15, $f11 -> $i16, $f12 -> $i17), id38: ($f110 -> $i17, $f111 -> $i15, $f112 -> $i16), [])
[slotted_egraphs::egraph::add] ret (New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id38: ($f110 -> $2, $f111 -> $0, $f112 -> $1), []), ($0 -> $i15, $1 -> $i16, $2 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id39 <-> (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15))))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i15)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i15)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i16)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i16)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i17)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i17)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id1: ($f0 -> $i15), id1: ($f0 -> $i16), id1: ($f0 -> $i17)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id1: ($f0 -> $0), id1: ($f0 -> $1), id1: ($f0 -> $2)]), ($0 -> $i15, $1 -> $i16, $2 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> (pred (var $i15) (var $i16) (var $i17))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i15)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i15))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i15)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i16)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i16)
[slotted_egraphs::egraph::add] shape_called_from_add input Geq(id1: ($f0 -> $i15), id1: ($f0 -> $i16))
[slotted_egraphs::egraph::add] ret (Geq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i15, $1 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id40 <-> (geq (var $i15) (var $i16))
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i17)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i17)
[slotted_egraphs::egraph::add] shape_called_from_add input Var($i16)
[slotted_egraphs::egraph::add] ret (Var($0), ($0 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (var $i16)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id1: ($f0 -> $i17), id1: ($f0 -> $i16))
[slotted_egraphs::egraph::add] ret (Eq(id1: ($f0 -> $0), id1: ($f0 -> $1)), ($0 -> $i17, $1 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id37 <-> (eq (var $i17) (var $i16))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id40: ($f116 -> $i15, $f117 -> $i16), id37: ($f108 -> $i17, $f109 -> $i16)])
[slotted_egraphs::egraph::add] ret (And([id40: ($f116 -> $0, $f117 -> $1), id37: ($f108 -> $2, $f109 -> $1)]), ($0 -> $i15, $1 -> $i16, $2 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id41 <-> (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id8: ($f10 -> $i15, $f11 -> $i16, $f12 -> $i17), id41: ($f118 -> $i17, $f119 -> $i15, $f120 -> $i16), [])
[slotted_egraphs::egraph::add] ret (New(id8: ($f10 -> $0, $f11 -> $1, $f12 -> $2), id41: ($f118 -> $2, $f119 -> $0, $f120 -> $1), []), ($0 -> $i15, $1 -> $i16, $2 -> $i17))
[slotted_egraphs::egraph::add] add_syn_expr: id42 <-> (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id39: ($f113 -> $i17, $f114 -> $i15, $f115 -> $i16)), AppliedId(id42: ($f121 -> $i17, $f122 -> $i15, $f123 -> $i16))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id39: ($f113 -> $0, $f114 -> $1, $f115 -> $2)), AppliedId(id42: ($f121 -> $0, $f122 -> $1, $f123 -> $2))]), ($0 -> $i17, $1 -> $i15, $2 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id43 <-> (compose (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))) (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16)))))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id11: ($f16 -> $1, $f17 -> $0), id35: ($f100 -> $0, $f101 -> $1, $f102 -> $i12, $f103 -> $i13, $f104 -> $i14, $f105 -> $i17), [AppliedId(id12: ($f18 -> $i15, $f19 -> $i13)), AppliedId(id12: ($f18 -> $i16, $f19 -> $i14)), AppliedId(id43: ($f124 -> $i17, $f125 -> $i15, $f126 -> $i16))])
[slotted_egraphs::egraph::add] ret (New(id11: ($f16 -> $0, $f17 -> $1), id35: ($f100 -> $1, $f101 -> $0, $f102 -> $2, $f103 -> $3, $f104 -> $4, $f105 -> $5), [AppliedId(id12: ($f18 -> $6, $f19 -> $3)), AppliedId(id12: ($f18 -> $7, $f19 -> $4)), AppliedId(id43: ($f124 -> $5, $f125 -> $6, $f126 -> $7))]), ($0 -> $1, $1 -> $0, $2 -> $i12, $3 -> $i13, $4 -> $i14, $5 -> $i17, $6 -> $i15, $7 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id44 <-> (new (pred (var $0) (var $1)) (and (eq (var $0) (node (var $i12) (var $i13) (var $i14))) (eq (var $1) (+ (var $i17) 1))) (init minLeaf (pred (var $i13) (var $i15))) (init minLeaf (pred (var $i14) (var $i16))) (compose (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))) (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16))))))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id32: ($f95 -> $0, $f96 -> $1)), AppliedId(id44: ($f127 -> $0, $f128 -> $1, $f129 -> $i12, $f130 -> $i13, $f131 -> $i14, $f132 -> $i17, $f133 -> $i15, $f134 -> $i16))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id32: ($f95 -> $0, $f96 -> $1)), AppliedId(id44: ($f127 -> $0, $f128 -> $1, $f129 -> $2, $f130 -> $3, $f131 -> $4, $f132 -> $5, $f133 -> $6, $f134 -> $7))]), ($0 -> $0, $1 -> $1, $2 -> $i12, $3 -> $i13, $4 -> $i14, $5 -> $i17, $6 -> $i15, $7 -> $i16))
[slotted_egraphs::egraph::add] add_syn_expr: id45 <-> (compose (new (pred (var $0) (var $1)) (and (eq (var $1) 0) (eq (var $0) leaf))) (new (pred (var $0) (var $1)) (and (eq (var $0) (node (var $i12) (var $i13) (var $i14))) (eq (var $1) (+ (var $i17) 1))) (init minLeaf (pred (var $i13) (var $i15))) (init minLeaf (pred (var $i14) (var $i16))) (compose (new (pred (var $i15) (var $i16) (var $i17)) (and (lt (var $i15) (var $i16)) (eq (var $i17) (var $i15)))) (new (pred (var $i15) (var $i16) (var $i17)) (and (geq (var $i15) (var $i16)) (eq (var $i17) (var $i16)))))))
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[entry::chc] egraph after 
     == Egraph ==
    id0():>> PredSyntax([])
     - PredSyntax([])
    
    id1($f0):>> Var($f0)
     - Var($f0)
    
    id2():>> Number(0)
     - Number(0)
    
    id3($f1):>> Geq(id1: ($f0 -> $f1), id2: ())
     - Geq(id1: ($f0 -> $f1), id2: ())
    
    id4($f2, $f3):>> Add(id1: ($f0 -> $f3), id1: ($f0 -> $f2))
     - Add(id1: ($f0 -> $f3), id1: ($f0 -> $f2))
    
    id5($f4, $f5, $f6):>> Less(id4: ($f2 -> $f4, $f3 -> $f5), id1: ($f0 -> $f6))
     - Less(id4: ($f2 -> $f4, $f3 -> $f5), id1: ($f0 -> $f6))
    
    id6($f7, $f8, $f9):>> And([id3: ($f1 -> $f7), id5: ($f4 -> $f7, $f5 -> $f8, $f6 -> $f9)])
     - And([id3: ($f1 -> $f7), id5: ($f4 -> $f7, $f5 -> $f8, $f6 -> $f9)])
    
    id7():>> PredName("leafDrop")
     - PredName("leafDrop")
    
    id8($f10, $f11, $f12):>> PredSyntax([id1: ($f0 -> $f10), id1: ($f0 -> $f11), id1: ($f0 -> $f12)])
     - PredSyntax([id1: ($f0 -> $f10), id1: ($f0 -> $f11), id1: ($f0 -> $f12)])
    
    id9($f13, $f14, $f15):>> Init(id7: (), id8: ($f10 -> $f13, $f11 -> $f14, $f12 -> $f15))
     - Compose([AppliedId(id17: ($f28 -> $f13, $f29 -> $f14, $f30 -> $f15)), AppliedId(id22: ($f45 -> $f13, $f46 -> $f14, $f47 -> $f15, $f48 -> $f85, $f49 -> $f86, $f50 -> $f87)), AppliedId(id28: ($f61 -> $f13, $f62 -> $f14, $f63 -> $f15, $f64 -> $f88, $f65 -> $f89, $f66 -> $f90, $f67 -> $f91))])
     - Init(id7: (), id8: ($f10 -> $f13, $f11 -> $f14, $f12 -> $f15))
    
    id10():>> PredName("minLeaf")
     - PredName("minLeaf")
    
    id11($f16, $f17):>> PredSyntax([id1: ($f0 -> $f17), id1: ($f0 -> $f16)])
     - PredSyntax([id1: ($f0 -> $f17), id1: ($f0 -> $f16)])
    
    id12($f18, $f19):>> Init(id10: (), id11: ($f16 -> $f18, $f17 -> $f19))
     - Init(id10: (), id11: ($f16 -> $f18, $f17 -> $f19))
     - Compose([AppliedId(id32: ($f95 -> $f19, $f96 -> $f18)), AppliedId(id44: ($f127 -> $f19, $f128 -> $f18, $f129 -> $f149, $f130 -> $f150, $f131 -> $f151, $f132 -> $f152, $f133 -> $f153, $f134 -> $f154))])
    
    id13($f20, $f21, $f22, $f23, $f24):>> New(id0: (), id6: ($f7 -> $f20, $f8 -> $f21, $f9 -> $f22), [AppliedId(id9: ($f13 -> $f20, $f14 -> $f23, $f15 -> $f24)), AppliedId(id12: ($f18 -> $f21, $f19 -> $f24)), AppliedId(id12: ($f18 -> $f22, $f19 -> $f23))])
     - New(id0: (), id6: ($f7 -> $f20, $f8 -> $f21, $f9 -> $f22), [AppliedId(id9: ($f13 -> $f20, $f14 -> $f23, $f15 -> $f24)), AppliedId(id12: ($f18 -> $f21, $f19 -> $f24)), AppliedId(id12: ($f18 -> $f22, $f19 -> $f23))])
    
    id14():>> Leaf
     - Leaf
    
    id15($f25):>> Eq(id1: ($f0 -> $f25), id14: ())
     - Eq(id1: ($f0 -> $f25), id14: ())
    
    id16($f26, $f27):>> And([id15: ($f25 -> $f26), id15: ($f25 -> $f27)])
     - And([id15: ($f25 -> $f26), id15: ($f25 -> $f27)])
    
    id17($f28, $f29, $f30):>> New(id8: ($f10 -> $f28, $f11 -> $f29, $f12 -> $f30), id16: ($f26 -> $f29, $f27 -> $f30), [])
     - New(id8: ($f10 -> $f28, $f11 -> $f29, $f12 -> $f30), id16: ($f26 -> $f29, $f27 -> $f30), [])
    
    id18($f31):>> Leq(id1: ($f0 -> $f31), id2: ())
     - Leq(id1: ($f0 -> $f31), id2: ())
    
    id19($f32, $f33, $f34):>> Node(id1: ($f0 -> $f32), id1: ($f0 -> $f33), id1: ($f0 -> $f34))
     - Node(id1: ($f0 -> $f32), id1: ($f0 -> $f33), id1: ($f0 -> $f34))
    
    id20($f35, $f36, $f37, $f38):>> Eq(id1: ($f0 -> $f35), id19: ($f32 -> $f36, $f33 -> $f37, $f34 -> $f38))
     - Eq(id1: ($f0 -> $f35), id19: ($f32 -> $f36, $f33 -> $f37, $f34 -> $f38))
    
    id21($f39, $f40, $f41, $f42, $f43, $f44):>> And([id18: ($f31 -> $f39), id20: ($f35 -> $f40, $f36 -> $f42, $f37 -> $f43, $f38 -> $f44), id20: ($f35 -> $f41, $f36 -> $f42, $f37 -> $f43, $f38 -> $f44)])
     - And([id18: ($f31 -> $f39), id20: ($f35 -> $f40, $f36 -> $f42, $f37 -> $f43, $f38 -> $f44), id20: ($f35 -> $f41, $f36 -> $f42, $f37 -> $f43, $f38 -> $f44)])
    
    id22($f45, $f46, $f47, $f48, $f49, $f50):>> New(id8: ($f10 -> $f45, $f11 -> $f46, $f12 -> $f47), id21: ($f39 -> $f45, $f40 -> $f46, $f41 -> $f47, $f42 -> $f48, $f43 -> $f49, $f44 -> $f50), [])
     - New(id8: ($f10 -> $f45, $f11 -> $f46, $f12 -> $f47), id21: ($f39 -> $f45, $f40 -> $f46, $f41 -> $f47, $f42 -> $f48, $f43 -> $f49, $f44 -> $f50), [])
    
    id23():>> Number(1)
     - Number(1)
    
    id24($f51):>> Geq(id1: ($f0 -> $f51), id23: ())
     - Geq(id1: ($f0 -> $f51), id23: ())
    
    id25($f52):>> Minus(id1: ($f0 -> $f52), id23: ())
     - Minus(id1: ($f0 -> $f52), id23: ())
    
    id26($f53, $f54):>> Eq(id1: ($f0 -> $f54), id25: ($f52 -> $f53))
     - Eq(id1: ($f0 -> $f54), id25: ($f52 -> $f53))
    
    id27($f55, $f56, $f57, $f58, $f59, $f60):>> And([id20: ($f35 -> $f56, $f36 -> $f57, $f37 -> $f58, $f38 -> $f59), id24: ($f51 -> $f55), id26: ($f53 -> $f55, $f54 -> $f60)])
     - And([id20: ($f35 -> $f56, $f36 -> $f57, $f37 -> $f58, $f38 -> $f59), id24: ($f51 -> $f55), id26: ($f53 -> $f55, $f54 -> $f60)])
    
    id28($f61, $f62, $f63, $f64, $f65, $f66, $f67):>> New(id8: ($f10 -> $f61, $f11 -> $f62, $f12 -> $f63), id27: ($f55 -> $f61, $f56 -> $f62, $f57 -> $f64, $f58 -> $f65, $f59 -> $f66, $f60 -> $f67), [AppliedId(id9: ($f13 -> $f61, $f14 -> $f62, $f15 -> $f63))])
     - New(id8: ($f10 -> $f61, $f11 -> $f62, $f12 -> $f63), id27: ($f55 -> $f61, $f56 -> $f62, $f57 -> $f64, $f58 -> $f65, $f59 -> $f66, $f60 -> $f67), [AppliedId(id9: ($f13 -> $f61, $f14 -> $f62, $f15 -> $f63))])
    
    id30($f92):>> Eq(id1: ($f0 -> $f92), id2: ())
     - Eq(id1: ($f0 -> $f92), id2: ())
    
    id31($f93, $f94):>> And([id30: ($f92 -> $f94), id15: ($f25 -> $f93)])
     - And([id30: ($f92 -> $f94), id15: ($f25 -> $f93)])
    
    id32($f95, $f96):>> New(id11: ($f16 -> $f96, $f17 -> $f95), id31: ($f93 -> $f95, $f94 -> $f96), [])
     - New(id11: ($f16 -> $f96, $f17 -> $f95), id31: ($f93 -> $f95, $f94 -> $f96), [])
    
    id33($f97):>> Add(id1: ($f0 -> $f97), id23: ())
     - Add(id1: ($f0 -> $f97), id23: ())
    
    id34($f98, $f99):>> Eq(id1: ($f0 -> $f98), id33: ($f97 -> $f99))
     - Eq(id1: ($f0 -> $f98), id33: ($f97 -> $f99))
    
    id35($f100, $f101, $f102, $f103, $f104, $f105):>> And([id20: ($f35 -> $f100, $f36 -> $f102, $f37 -> $f103, $f38 -> $f104), id34: ($f98 -> $f101, $f99 -> $f105)])
     - And([id20: ($f35 -> $f100, $f36 -> $f102, $f37 -> $f103, $f38 -> $f104), id34: ($f98 -> $f101, $f99 -> $f105)])
    
    id36($f106, $f107):>> Less(id1: ($f0 -> $f106), id1: ($f0 -> $f107))
     - Less(id1: ($f0 -> $f106), id1: ($f0 -> $f107))
    
    id37($f108, $f109):>> Eq(id1: ($f0 -> $f108), id1: ($f0 -> $f109))
     - Eq(id1: ($f0 -> $f108), id1: ($f0 -> $f109))
    
    id38($f110, $f111, $f112):>> And([id36: ($f106 -> $f111, $f107 -> $f112), id37: ($f108 -> $f110, $f109 -> $f111)])
     - And([id36: ($f106 -> $f111, $f107 -> $f112), id37: ($f108 -> $f110, $f109 -> $f111)])
    
    id39($f113, $f114, $f115):>> New(id8: ($f10 -> $f114, $f11 -> $f115, $f12 -> $f113), id38: ($f110 -> $f113, $f111 -> $f114, $f112 -> $f115), [])
     - New(id8: ($f10 -> $f114, $f11 -> $f115, $f12 -> $f113), id38: ($f110 -> $f113, $f111 -> $f114, $f112 -> $f115), [])
    
    id40($f116, $f117):>> Geq(id1: ($f0 -> $f116), id1: ($f0 -> $f117))
     - Geq(id1: ($f0 -> $f116), id1: ($f0 -> $f117))
    
    id41($f118, $f119, $f120):>> And([id40: ($f116 -> $f119, $f117 -> $f120), id37: ($f108 -> $f118, $f109 -> $f120)])
     - And([id40: ($f116 -> $f119, $f117 -> $f120), id37: ($f108 -> $f118, $f109 -> $f120)])
    
    id42($f121, $f122, $f123):>> New(id8: ($f10 -> $f122, $f11 -> $f123, $f12 -> $f121), id41: ($f118 -> $f121, $f119 -> $f122, $f120 -> $f123), [])
     - New(id8: ($f10 -> $f122, $f11 -> $f123, $f12 -> $f121), id41: ($f118 -> $f121, $f119 -> $f122, $f120 -> $f123), [])
    
    id43($f124, $f125, $f126):>> Compose([AppliedId(id39: ($f113 -> $f124, $f114 -> $f125, $f115 -> $f126)), AppliedId(id42: ($f121 -> $f124, $f122 -> $f125, $f123 -> $f126))])
     - Compose([AppliedId(id39: ($f113 -> $f124, $f114 -> $f125, $f115 -> $f126)), AppliedId(id42: ($f121 -> $f124, $f122 -> $f125, $f123 -> $f126))])
    
    id44($f127, $f128, $f129, $f130, $f131, $f132, $f133, $f134):>> New(id11: ($f16 -> $f128, $f17 -> $f127), id35: ($f100 -> $f127, $f101 -> $f128, $f102 -> $f129, $f103 -> $f130, $f104 -> $f131, $f105 -> $f132), [AppliedId(id12: ($f18 -> $f133, $f19 -> $f130)), AppliedId(id12: ($f18 -> $f134, $f19 -> $f131)), AppliedId(id43: ($f124 -> $f132, $f125 -> $f133, $f126 -> $f134))])
     - New(id11: ($f16 -> $f128, $f17 -> $f127), id35: ($f100 -> $f127, $f101 -> $f128, $f102 -> $f129, $f103 -> $f130, $f104 -> $f131, $f105 -> $f132), [AppliedId(id12: ($f18 -> $f133, $f19 -> $f130)), AppliedId(id12: ($f18 -> $f134, $f19 -> $f131)), AppliedId(id43: ($f124 -> $f132, $f125 -> $f133, $f126 -> $f134))])
    
test chc::tst2 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 72 filtered out; finished in 0.04s


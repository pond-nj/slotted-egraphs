   Compiling slotted-egraphs v0.0.36 (/home/pondnj/chc/project/slotted-egraphs)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.53s
     Running unittests src/lib.rs (target/debug/deps/slotted_egraphs-7db37e3e129514c0)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.00s

     Running tests/entry.rs (target/debug/deps/entry-9a9d60ae6aa2b312)

running 1 test
[slotted_egraphs::parse] from (new (pred <(int $0) (int $1)>) (and <(eq (int $1) 0) (eq (int $0) (leaf))>) <>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [Ident("0"), RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 0
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $1) 0)
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("leaf"), RParen, RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("leaf")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 leaf
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $0) leaf)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (int $1) 0) (eq (int $0) leaf))
[slotted_egraphs::parse] left tokens [LVecBracket, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $0) (int $1)) (and (eq (int $1) 0) (eq (int $0) leaf)))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[entry::chc] calling make on Int($f0)
[entry::chc] result {$f0: Int}
[slotted_egraphs::egraph::add] classes insert id0
[slotted_egraphs::egraph::add] add to id0 Int($0)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id0
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[slotted_egraphs::egraph::add] remove from id0 Int($0)
[slotted_egraphs::egraph::add] add to id0 Int($0)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id0 Int($0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] calling make on Int($0)
[entry::chc] exists in egraph
[entry::chc] result {$f0: Int}
[entry::chc] calling merge to id0
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f0: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f0: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] eclassSlots {$f0}
[entry::chc] result varTypes {$f0: Int}
[slotted_egraphs::egraph] updating data for id0
[slotted_egraphs::egraph::rebuild] end of handle_pending id0: ($f0 -> $f0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f1: Int, $f2: Int}
[slotted_egraphs::egraph::add] classes insert id1
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id1
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::add] remove from id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] add to id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id1 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f1, $f2}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f1 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f2 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
[entry::chc] get {$f2: Int, $f1: Int}
[entry::chc] calling merge to id1
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f1: Int, $f2: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] eclassSlots {$f2, $f1}
[entry::chc] result varTypes {$f2: Int, $f1: Int}
[slotted_egraphs::egraph] updating data for id1
[slotted_egraphs::egraph::rebuild] end of handle_pending id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(0)
[slotted_egraphs::egraph::add] ret (Number(0), ())
[entry::chc] calling make on Number(0)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id2
[slotted_egraphs::egraph::add] add to id2 Number(0)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id2
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[slotted_egraphs::egraph::add] remove from id2 Number(0)
[slotted_egraphs::egraph::add] add to id2 Number(0)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id2 Number(0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[entry::chc] calling make on Number(0)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(0)
[entry::chc] get {}
[entry::chc] calling merge to id2
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id2
[slotted_egraphs::egraph::rebuild] end of handle_pending id2: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(0)
     - Number(0)
    
[slotted_egraphs::egraph::add] add_syn_expr: id2 <-> 0
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $1), id2: ())
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id2: ()), ($0 -> $1))
[entry::chc] calling make on Eq(id0: ($f0 -> $f3), id2: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f3), id2: ())
[entry::chc] get {$f3: Int}
[slotted_egraphs::egraph::add] classes insert id3
[slotted_egraphs::egraph::add] add to id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id3
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[slotted_egraphs::egraph::add] remove from id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::add] add to id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id3 Eq(id0: ($f0 -> $0), id2: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id2: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f3}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f3 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f3), id2: ())
[entry::chc] get {$f3: Int}
[entry::chc] calling merge to id3
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f3: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f3: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] eclassSlots {$f3}
[entry::chc] result varTypes {$f3: Int}
[slotted_egraphs::egraph] updating data for id3
[slotted_egraphs::egraph::rebuild] end of handle_pending id3: ($f3 -> $f3)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id3 <-> (eq (int $1) 0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Leaf
[slotted_egraphs::egraph::add] ret (Leaf, ())
[entry::chc] calling make on Leaf
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id4
[slotted_egraphs::egraph::add] add to id4 Leaf
[slotted_egraphs::egraph::rebuild] begin of handle_pending id4
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[slotted_egraphs::egraph::add] remove from id4 Leaf
[slotted_egraphs::egraph::add] add to id4 Leaf
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[slotted_egraphs::egraph::rebuild] from update_analysis id4 Leaf
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[entry::chc] calling make on Leaf
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Leaf
[entry::chc] get {}
[entry::chc] calling merge to id4
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id4
[slotted_egraphs::egraph::rebuild] end of handle_pending id4: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Leaf
     - Leaf
    
[slotted_egraphs::egraph::add] add_syn_expr: id4 <-> leaf
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id4: ()), ($0 -> $0))
[entry::chc] calling make on Eq(id0: ($f0 -> $f4), id4: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f4}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f4), id4: ())
[entry::chc] get {$f4: Int}
[slotted_egraphs::egraph::add] classes insert id5
[slotted_egraphs::egraph::add] add to id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id5
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[slotted_egraphs::egraph::add] remove from id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::add] add to id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id5 Eq(id0: ($f0 -> $0), id4: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id4: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f4}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f4 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f4), id4: ())
[entry::chc] get {$f4: Int}
[entry::chc] calling merge to id5
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f4: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f4: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] eclassSlots {$f4}
[entry::chc] result varTypes {$f4: Int}
[slotted_egraphs::egraph] updating data for id5
[slotted_egraphs::egraph::rebuild] end of handle_pending id5: ($f4 -> $f4)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id5 <-> (eq (int $0) leaf)
[slotted_egraphs::egraph::add] shape_called_from_add input And([id3: ($f3 -> $1), id5: ($f4 -> $0)])
[slotted_egraphs::egraph::add] ret (And([id3: ($f3 -> $0), id5: ($f4 -> $1)]), ($0 -> $1, $1 -> $0))
[entry::chc] calling make on And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f5, $f6}
[entry::chc] childId : id5, mapToS : $f4
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
[entry::chc] get {$f5: Int, $f6: Int}
[slotted_egraphs::egraph::add] classes insert id6
[slotted_egraphs::egraph::add] add to id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id6
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[slotted_egraphs::egraph::add] remove from id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::add] add to id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id6 And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] calling make on And([id3: ($f3 -> $0), id5: ($f4 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f5, $f6}
[entry::chc] childId : id5, mapToS : $f4
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f4: Int} }
    ($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
     - Eq(id0: ($f0 -> $f4), id4: ())
    
[entry::chc] adding $f5 to varTypes
[entry::chc] childId : id3, mapToS : $f3
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f3: Int} }
    ($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
     - Eq(id0: ($f0 -> $f3), id2: ())
    
[entry::chc] adding $f6 to varTypes
[entry::chc] aggregateVarType for And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
[entry::chc] get {$f6: Int, $f5: Int}
[entry::chc] calling merge to id6
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f5: Int, $f6: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] eclassSlots {$f5, $f6}
[entry::chc] result varTypes {$f6: Int, $f5: Int}
[slotted_egraphs::egraph] updating data for id6
[slotted_egraphs::egraph::rebuild] end of handle_pending id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id6 <-> (and (eq (int $1) 0) (eq (int $0) leaf))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), []), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f7, $f8}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id6, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
[entry::chc] get {$f7: Int, $f8: Int}
[slotted_egraphs::egraph::add] classes insert id7
[slotted_egraphs::egraph::add] add to id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id7
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::add] remove from id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] add to id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f7, $f8}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id6, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f7 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f8 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
[entry::chc] get {$f8: Int, $f7: Int}
[entry::chc] calling merge to id7
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f8: Int, $f7: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f7: Int, $f8: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[entry::chc] eclassSlots {$f8, $f7}
[entry::chc] result varTypes {$f8: Int, $f7: Int}
[slotted_egraphs::egraph] updating data for id7
[slotted_egraphs::egraph::rebuild] end of handle_pending id7: ($f7 -> $f7, $f8 -> $f8)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f8: Int, $f7: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::add] add_syn_expr: id7 <-> (new (pred (int $0) (int $1)) (and (eq (int $1) 0) (eq (int $0) leaf)))
[slotted_egraphs::parse] from (interface minLeaf (pred <(int $0) (int $1)>) 1)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id8
[slotted_egraphs::egraph::add] add to id8 PredName("minLeaf")
[slotted_egraphs::egraph::rebuild] begin of handle_pending id8
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[slotted_egraphs::egraph::add] remove from id8 PredName("minLeaf")
[slotted_egraphs::egraph::add] add to id8 PredName("minLeaf")
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[slotted_egraphs::egraph::rebuild] from update_analysis id8 PredName("minLeaf")
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[entry::chc] calling make on PredName("minLeaf")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("minLeaf")
[entry::chc] get {}
[entry::chc] calling merge to id8
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id8
[slotted_egraphs::egraph::rebuild] end of handle_pending id8: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("minLeaf")
     - PredName("minLeaf")
    
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[entry::chc] calling make on Number(1)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id9
[slotted_egraphs::egraph::add] add to id9 Number(1)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id9
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[slotted_egraphs::egraph::add] remove from id9 Number(1)
[slotted_egraphs::egraph::add] add to id9 Number(1)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id9 Number(1)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[entry::chc] calling make on Number(1)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(1)
[entry::chc] get {}
[entry::chc] calling merge to id9
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id9
[slotted_egraphs::egraph::rebuild] end of handle_pending id9: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(1)
     - Number(1)
    
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ()), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f9, $f10}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
[entry::chc] get {$f9: Int, $f10: Int}
[slotted_egraphs::egraph::add] classes insert id10
[slotted_egraphs::egraph::add] add to id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id10
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] remove from id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::add] add to id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id10 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f9, $f10}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
[entry::chc] get {$f9: Int, $f10: Int}
[entry::chc] calling merge to id10
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] eclassSlots {$f10, $f9}
[entry::chc] result varTypes {$f9: Int, $f10: Int}
[slotted_egraphs::egraph] updating data for id10
[slotted_egraphs::egraph::rebuild] end of handle_pending id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id7: ($f7 -> $0, $f8 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f8: Int, $f7: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::union] r: id10: ($f9 -> $0, $f10 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::union] Call move_to id7: ($f7 -> $0, $f8 -> $1), id10: ($f9 -> $0, $f10 -> $1)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f8: Int, $f7: Int} }
[entry::chc] calling merge to id10
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f8: Int, $f7: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] eclassSlots {$f10, $f9}
[entry::chc] result varTypes {$f10: Int, $f9: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
[slotted_egraphs::egraph] updating data for id10
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f8: Int, $f7: Int} }
    ($f7, $f8):>> New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
     - New(id1: ($f1 -> $f7, $f2 -> $f8), id6: ($f5 -> $f7, $f6 -> $f8), [])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] remove from id7 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] add to id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), []) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id10
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::add] remove from id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::add] add to id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id10 New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id6: ($f5 -> $0, $f6 -> $1), [])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f9, $f10}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id6, mapToS : $f5
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f9 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] childId : id6, mapToS : $f6
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
    ($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
     - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
    
[entry::chc] adding $f10 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
[entry::chc] get {$f10: Int, $f9: Int}
[entry::chc] calling merge to id10
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f10: Int, $f9: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f10: Int, $f9: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] eclassSlots {$f10, $f9}
[entry::chc] result varTypes {$f9: Int, $f10: Int}
[slotted_egraphs::egraph] updating data for id10
[slotted_egraphs::egraph::rebuild] end of handle_pending id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[slotted_egraphs::parse] from (new (pred <(int $0) (int $1)>) (and <(eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1))>) <(init minLeaf (pred <(node $3) (int $5)>)) (init minLeaf (pred <(node $4) (int $6)>)) (init min (pred <(int $5) (int $6) (int $7)>))>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [LParen, Ident("and"), LVecBracket, LParen, Ident("eq"), LParen, Ident("int"), Slot($0), RParen, LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("binode"), LParen, Ident("int"), Slot($2), RParen, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($2)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $2)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($3), RParen, LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $3)
[slotted_egraphs::parse] left tokens [LParen, Ident("node"), Slot($4), RParen, RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $4)
[slotted_egraphs::parse] left tokens [RParen, RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("binode"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (binode (int $2) (node $3) (node $4))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $0) (binode (int $2) (node $3) (node $4)))
[slotted_egraphs::parse] left tokens [LParen, Ident("eq"), LParen, Ident("int"), Slot($1), RParen, LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [LParen, Ident("+"), LParen, Ident("int"), Slot($7), RParen, Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("+"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (+ (int $7) 1)
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("eq"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (eq (int $1) (+ (int $7) 1))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("and"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1)))
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($3), RParen, LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($3)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $3)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($5), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $3) (int $5))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $3) (int $5)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($4), RParen, LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($4)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $4)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $4) (int $6))
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init minLeaf (pred (node $4) (int $6)))
[slotted_egraphs::parse] left tokens [LParen, Ident("init"), Ident("min"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 min
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($5), RParen, LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($5)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $5)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($6), RParen, LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($6)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $6)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($7), RParen, RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($7)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $7)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $5) (int $6) (int $7))
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("init"), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (init min (pred (int $5) (int $6) (int $7)))
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (int $0) (int $1)) (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1))) (init minLeaf (pred (node $3) (int $5))) (init minLeaf (pred (node $4) (int $6))) (init min (pred (int $5) (int $6) (int $7))))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($2)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $2))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $2)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($3)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $3))
[entry::chc] calling make on Node($f11)
[entry::chc] result {$f11: Node}
[slotted_egraphs::egraph::add] classes insert id11
[slotted_egraphs::egraph::add] add to id11 Node($0)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id11
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[slotted_egraphs::egraph::add] remove from id11 Node($0)
[slotted_egraphs::egraph::add] add to id11 Node($0)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id11 Node($0)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] calling make on Node($0)
[entry::chc] exists in egraph
[entry::chc] result {$f11: Node}
[entry::chc] calling merge to id11
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f11: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f11: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] eclassSlots {$f11}
[entry::chc] result varTypes {$f11: Node}
[slotted_egraphs::egraph] updating data for id11
[slotted_egraphs::egraph::rebuild] end of handle_pending id11: ($f11 -> $f11)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $3)
[slotted_egraphs::egraph::add] shape_called_from_add input Node($4)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $4)
[slotted_egraphs::egraph::add] shape_called_from_add input BiNode(id0: ($f0 -> $2), id11: ($f11 -> $3), id11: ($f11 -> $4))
[slotted_egraphs::egraph::add] ret (BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2)), ($0 -> $2, $1 -> $3, $2 -> $4))
[entry::chc] calling make on BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f12, $f13, $f14}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
[entry::chc] get {$f14: Node, $f13: Node, $f12: Int}
[slotted_egraphs::egraph::add] classes insert id12
[slotted_egraphs::egraph::add] add to id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id12
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f13: Node, $f12: Int} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[slotted_egraphs::egraph::add] remove from id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::add] add to id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f13: Node, $f12: Int} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id12 BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f13: Node, $f12: Int} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] calling make on BiNode(id0: ($f0 -> $0), id11: ($f11 -> $1), id11: ($f11 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f12, $f13, $f14}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f12 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f13 to varTypes
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f14 to varTypes
[entry::chc] aggregateVarType for BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
[entry::chc] get {$f12: Int, $f14: Node, $f13: Node}
[entry::chc] calling merge to id12
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f13: Node, $f12: Int} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f14: Node, $f13: Node, $f12: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f12: Int, $f14: Node, $f13: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f13: Node, $f12: Int} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] eclassSlots {$f14, $f13, $f12}
[entry::chc] result varTypes {$f14: Node, $f12: Int, $f13: Node}
[slotted_egraphs::egraph] updating data for id12
[slotted_egraphs::egraph::rebuild] end of handle_pending id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[slotted_egraphs::egraph::add] add_syn_expr: id12 <-> (binode (int $2) (node $3) (node $4))
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $0), id12: ($f12 -> $2, $f13 -> $3, $f14 -> $4))
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3)), ($0 -> $0, $1 -> $2, $2 -> $3, $3 -> $4))
[entry::chc] calling make on Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f15, $f16, $f17, $f18}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id12, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id12, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f17 to varTypes
[entry::chc] childId : id12, mapToS : $f14
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f18 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
[entry::chc] get {$f18: Node, $f16: Int, $f15: Int, $f17: Node}
[slotted_egraphs::egraph::add] classes insert id13
[slotted_egraphs::egraph::add] add to id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id13
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f18: Node, $f16: Int, $f15: Int, $f17: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[slotted_egraphs::egraph::add] remove from id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::add] add to id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f18: Node, $f16: Int, $f15: Int, $f17: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id13 Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f18: Node, $f16: Int, $f15: Int, $f17: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id12: ($f12 -> $1, $f13 -> $2, $f14 -> $3))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f15, $f16, $f17, $f18}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f15 to varTypes
[entry::chc] childId : id12, mapToS : $f12
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f16 to varTypes
[entry::chc] childId : id12, mapToS : $f13
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f17 to varTypes
[entry::chc] childId : id12, mapToS : $f14
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
    ($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
     - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
    
[entry::chc] adding $f18 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
[entry::chc] get {$f15: Int, $f18: Node, $f16: Int, $f17: Node}
[entry::chc] calling merge to id13
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f18: Node, $f16: Int, $f15: Int, $f17: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f18: Node, $f16: Int, $f15: Int, $f17: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f16: Int, $f17: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f18: Node, $f16: Int, $f15: Int, $f17: Node} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] eclassSlots {$f18, $f17, $f16, $f15}
[entry::chc] result varTypes {$f15: Int, $f18: Node, $f17: Node, $f16: Int}
[slotted_egraphs::egraph] updating data for id13
[slotted_egraphs::egraph::rebuild] end of handle_pending id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[slotted_egraphs::egraph::add] add_syn_expr: id13 <-> (eq (int $0) (binode (int $2) (node $3) (node $4)))
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Add(id0: ($f0 -> $7), id9: ())
[slotted_egraphs::egraph::add] ret (Add(id0: ($f0 -> $0), id9: ()), ($0 -> $7))
[entry::chc] calling make on Add(id0: ($f0 -> $f19), id9: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f19}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f19 to varTypes
[entry::chc] aggregateVarType for Add(id0: ($f0 -> $f19), id9: ())
[entry::chc] get {$f19: Int}
[slotted_egraphs::egraph::add] classes insert id14
[slotted_egraphs::egraph::add] add to id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id14
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[slotted_egraphs::egraph::add] remove from id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::add] add to id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id14 Add(id0: ($f0 -> $0), id9: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] calling make on Add(id0: ($f0 -> $0), id9: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f19}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f19 to varTypes
[entry::chc] aggregateVarType for Add(id0: ($f0 -> $f19), id9: ())
[entry::chc] get {$f19: Int}
[entry::chc] calling merge to id14
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f19: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f19: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] eclassSlots {$f19}
[entry::chc] result varTypes {$f19: Int}
[slotted_egraphs::egraph] updating data for id14
[slotted_egraphs::egraph::rebuild] end of handle_pending id14: ($f19 -> $f19)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id14 <-> (+ (int $7) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input Eq(id0: ($f0 -> $1), id14: ($f19 -> $7))
[slotted_egraphs::egraph::add] ret (Eq(id0: ($f0 -> $0), id14: ($f19 -> $1)), ($0 -> $1, $1 -> $7))
[entry::chc] calling make on Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f20, $f21}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f20 to varTypes
[entry::chc] childId : id14, mapToS : $f19
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] adding $f21 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
[entry::chc] get {$f20: Int, $f21: Int}
[slotted_egraphs::egraph::add] classes insert id15
[slotted_egraphs::egraph::add] add to id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id15
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[slotted_egraphs::egraph::add] remove from id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::add] add to id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id15 Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] calling make on Eq(id0: ($f0 -> $0), id14: ($f19 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f20, $f21}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f20 to varTypes
[entry::chc] childId : id14, mapToS : $f19
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f19: Int} }
    ($f19):>> Add(id0: ($f0 -> $f19), id9: ())
     - Add(id0: ($f0 -> $f19), id9: ())
    
[entry::chc] adding $f21 to varTypes
[entry::chc] aggregateVarType for Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
[entry::chc] get {$f20: Int, $f21: Int}
[entry::chc] calling merge to id15
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] eclassSlots {$f20, $f21}
[entry::chc] result varTypes {$f20: Int, $f21: Int}
[slotted_egraphs::egraph] updating data for id15
[slotted_egraphs::egraph::rebuild] end of handle_pending id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[slotted_egraphs::egraph::add] add_syn_expr: id15 <-> (eq (int $1) (+ (int $7) 1))
[slotted_egraphs::egraph::add] shape_called_from_add input And([id13: ($f15 -> $0, $f16 -> $2, $f17 -> $3, $f18 -> $4), id15: ($f20 -> $1, $f21 -> $7)])
[slotted_egraphs::egraph::add] ret (And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)]), ($0 -> $0, $1 -> $2, $2 -> $3, $3 -> $4, $4 -> $1, $5 -> $7))
[entry::chc] calling make on And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f22, $f23, $f24, $f25, $f26, $f27}
[entry::chc] childId : id13, mapToS : $f15
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id15, mapToS : $f20
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f23 to varTypes
[entry::chc] childId : id13, mapToS : $f16
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id13, mapToS : $f17
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id13, mapToS : $f18
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id15, mapToS : $f21
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f27 to varTypes
[entry::chc] aggregateVarType for And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
[entry::chc] get {$f23: Int, $f25: Node, $f27: Int, $f22: Int, $f24: Int, $f26: Node}
[slotted_egraphs::egraph::add] classes insert id16
[slotted_egraphs::egraph::add] add to id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id16
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f25: Node, $f27: Int, $f22: Int, $f24: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[slotted_egraphs::egraph::add] remove from id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::add] add to id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f25: Node, $f27: Int, $f22: Int, $f24: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id16 And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f25: Node, $f27: Int, $f22: Int, $f24: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] calling make on And([id13: ($f15 -> $0, $f16 -> $1, $f17 -> $2, $f18 -> $3), id15: ($f20 -> $4, $f21 -> $5)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f22, $f23, $f24, $f25, $f26, $f27}
[entry::chc] childId : id13, mapToS : $f15
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f22 to varTypes
[entry::chc] childId : id15, mapToS : $f20
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f23 to varTypes
[entry::chc] childId : id13, mapToS : $f16
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f24 to varTypes
[entry::chc] childId : id13, mapToS : $f17
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f25 to varTypes
[entry::chc] childId : id13, mapToS : $f18
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
    ($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
     - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
    
[entry::chc] adding $f26 to varTypes
[entry::chc] childId : id15, mapToS : $f21
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
    ($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
     - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
    
[entry::chc] adding $f27 to varTypes
[entry::chc] aggregateVarType for And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
[entry::chc] get {$f23: Int, $f26: Node, $f24: Int, $f22: Int, $f25: Node, $f27: Int}
[entry::chc] calling merge to id16
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f25: Node, $f27: Int, $f22: Int, $f24: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f23: Int, $f25: Node, $f27: Int, $f22: Int, $f24: Int, $f26: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f23: Int, $f26: Node, $f24: Int, $f22: Int, $f25: Node, $f27: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f23: Int, $f25: Node, $f27: Int, $f22: Int, $f24: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] eclassSlots {$f26, $f25, $f24, $f23, $f22, $f27}
[entry::chc] result varTypes {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node}
[slotted_egraphs::egraph] updating data for id16
[slotted_egraphs::egraph::rebuild] end of handle_pending id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id16 <-> (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($3)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $3))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $3)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $3), id0: ($f0 -> $5)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)]), ($0 -> $3, $1 -> $5))
[entry::chc] calling make on PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f28, $f29}
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f28 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f29 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
[entry::chc] get {$f28: Node, $f29: Int}
[slotted_egraphs::egraph::add] classes insert id17
[slotted_egraphs::egraph::add] add to id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id17
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[slotted_egraphs::egraph::add] remove from id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] add to id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id17 PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] calling make on PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f28, $f29}
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f28 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f29 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
[entry::chc] get {$f28: Node, $f29: Int}
[entry::chc] calling merge to id17
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f28: Node, $f29: Int} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] eclassSlots {$f29, $f28}
[entry::chc] result varTypes {$f29: Int, $f28: Node}
[slotted_egraphs::egraph] updating data for id17
[slotted_egraphs::egraph::rebuild] end of handle_pending id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f29: Int, $f28: Node} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (pred (node $3) (int $5))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id8: (), id17: ($f28 -> $3, $f29 -> $5))
[slotted_egraphs::egraph::add] ret (Init(id8: (), id17: ($f28 -> $0, $f29 -> $1)), ($0 -> $3, $1 -> $5))
[entry::chc] calling make on Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f30, $f31}
[entry::chc] childId : id17, mapToS : $f28
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f29: Int, $f28: Node} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id17, mapToS : $f29
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f29: Int, $f28: Node} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] aggregateVarType for Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
[entry::chc] get {$f31: Int, $f30: Node}
[slotted_egraphs::egraph::add] classes insert id18
[slotted_egraphs::egraph::add] add to id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id18
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[slotted_egraphs::egraph::add] remove from id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::add] add to id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id18 Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] calling make on Init(id8: (), id17: ($f28 -> $0, $f29 -> $1))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f30, $f31}
[entry::chc] childId : id17, mapToS : $f28
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f29: Int, $f28: Node} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f30 to varTypes
[entry::chc] childId : id17, mapToS : $f29
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f29: Int, $f28: Node} }
    ($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
     - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
    
[entry::chc] adding $f31 to varTypes
[entry::chc] aggregateVarType for Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
[entry::chc] get {$f31: Int, $f30: Node}
[entry::chc] calling merge to id18
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] eclassSlots {$f31, $f30}
[entry::chc] result varTypes {$f31: Int, $f30: Node}
[slotted_egraphs::egraph] updating data for id18
[slotted_egraphs::egraph::rebuild] end of handle_pending id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (init minLeaf (pred (node $3) (int $5)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Node($4)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $4))
[slotted_egraphs::egraph::add] add_syn_expr: id11 <-> (node $4)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $4), id0: ($f0 -> $6)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0), id0: ($f0 -> $1)]), ($0 -> $4, $1 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id17 <-> (pred (node $4) (int $6))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id8: (), id17: ($f28 -> $4, $f29 -> $6))
[slotted_egraphs::egraph::add] ret (Init(id8: (), id17: ($f28 -> $0, $f29 -> $1)), ($0 -> $4, $1 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id18 <-> (init minLeaf (pred (node $4) (int $6)))
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("min")
[slotted_egraphs::egraph::add] ret (PredName("min"), ())
[entry::chc] calling make on PredName("min")
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id19
[slotted_egraphs::egraph::add] add to id19 PredName("min")
[slotted_egraphs::egraph::rebuild] begin of handle_pending id19
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[slotted_egraphs::egraph::add] remove from id19 PredName("min")
[slotted_egraphs::egraph::add] add to id19 PredName("min")
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[slotted_egraphs::egraph::rebuild] from update_analysis id19 PredName("min")
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[entry::chc] calling make on PredName("min")
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for PredName("min")
[entry::chc] get {}
[entry::chc] calling merge to id19
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id19
[slotted_egraphs::egraph::rebuild] end of handle_pending id19: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> PredName("min")
     - PredName("min")
    
[slotted_egraphs::egraph::add] add_syn_expr: id19 <-> min
[slotted_egraphs::egraph::add] shape_called_from_add input Int($5)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $5))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $5)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($6)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $6))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $6)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($7)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $7))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $7)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $5), id0: ($f0 -> $6), id0: ($f0 -> $7)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)]), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f32, $f33, $f34}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f34 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
[entry::chc] get {$f32: Int, $f33: Int, $f34: Int}
[slotted_egraphs::egraph::add] classes insert id20
[slotted_egraphs::egraph::add] add to id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id20
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[slotted_egraphs::egraph::add] remove from id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::add] add to id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id20 PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] calling make on PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1), id0: ($f0 -> $2)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f32, $f33, $f34}
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f32 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f33 to varTypes
[entry::chc] childId : id0, mapToS : $f0
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f0: Int} }
    ($f0):>> Int($f0)
     - Int($f0)
    
[entry::chc] adding $f34 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
[entry::chc] get {$f34: Int, $f32: Int, $f33: Int}
[entry::chc] calling merge to id20
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f34: Int, $f32: Int, $f33: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f33: Int, $f34: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] eclassSlots {$f32, $f34, $f33}
[entry::chc] result varTypes {$f32: Int, $f34: Int, $f33: Int}
[slotted_egraphs::egraph] updating data for id20
[slotted_egraphs::egraph::rebuild] end of handle_pending id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[slotted_egraphs::egraph::add] add_syn_expr: id20 <-> (pred (int $5) (int $6) (int $7))
[slotted_egraphs::egraph::add] shape_called_from_add input Init(id19: (), id20: ($f32 -> $5, $f33 -> $6, $f34 -> $7))
[slotted_egraphs::egraph::add] ret (Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2)), ($0 -> $5, $1 -> $6, $2 -> $7))
[entry::chc] calling make on Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
[entry::chc] aggregateVarType
[entry::chc] slots: {$f35, $f36, $f37}
[entry::chc] childId : id20, mapToS : $f32
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id20, mapToS : $f33
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id20, mapToS : $f34
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f37 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
[entry::chc] get {$f36: Int, $f37: Int, $f35: Int}
[slotted_egraphs::egraph::add] classes insert id21
[slotted_egraphs::egraph::add] add to id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::rebuild] begin of handle_pending id21
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[slotted_egraphs::egraph::add] remove from id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::add] add to id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[slotted_egraphs::egraph::rebuild] from update_analysis id21 Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] calling make on Init(id19: (), id20: ($f32 -> $0, $f33 -> $1, $f34 -> $2))
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f35, $f36, $f37}
[entry::chc] childId : id20, mapToS : $f32
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f35 to varTypes
[entry::chc] childId : id20, mapToS : $f33
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f36 to varTypes
[entry::chc] childId : id20, mapToS : $f34
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
    ($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
     - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
    
[entry::chc] adding $f37 to varTypes
[entry::chc] aggregateVarType for Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
[entry::chc] get {$f36: Int, $f37: Int, $f35: Int}
[entry::chc] calling merge to id21
[entry::chc] dump from merge c 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] x CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
[entry::chc] y CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] eclassSlots {$f37, $f36, $f35}
[entry::chc] result varTypes {$f36: Int, $f37: Int, $f35: Int}
[slotted_egraphs::egraph] updating data for id21
[slotted_egraphs::egraph::rebuild] end of handle_pending id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[slotted_egraphs::egraph::add] add_syn_expr: id21 <-> (init min (pred (int $5) (int $6) (int $7)))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $7), [AppliedId(id18: ($f30 -> $3, $f31 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $5, $f36 -> $6, $f37 -> $7))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $0, $1 -> $1, $2 -> $2, $3 -> $3, $4 -> $4, $5 -> $7, $6 -> $5, $7 -> $6))
[entry::chc] calling make on New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f45 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
[entry::chc] get {$f42: Node, $f44: Int, $f41: Node, $f43: Int, $f40: Int, $f45: Int, $f39: Int, $f38: Int}
[slotted_egraphs::egraph::add] classes insert id22
[slotted_egraphs::egraph::add] add to id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id22
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f42: Node, $f44: Int, $f41: Node, $f43: Int, $f40: Int, $f45: Int, $f39: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::add] remove from id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f42: Node, $f44: Int, $f41: Node, $f43: Int, $f40: Int, $f45: Int, $f39: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f42: Node, $f44: Int, $f41: Node, $f43: Int, $f40: Int, $f45: Int, $f39: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f38 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f39 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f40 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f41 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f42 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f43 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f44 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f45 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f45 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
[entry::chc] get {$f44: Int, $f45: Int, $f40: Int, $f38: Int, $f43: Int, $f41: Node, $f39: Int, $f42: Node}
[entry::chc] calling merge to id22
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f42: Node, $f44: Int, $f41: Node, $f43: Int, $f40: Int, $f45: Int, $f39: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f42: Node, $f44: Int, $f41: Node, $f43: Int, $f40: Int, $f45: Int, $f39: Int, $f38: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f44: Int, $f45: Int, $f40: Int, $f38: Int, $f43: Int, $f41: Node, $f39: Int, $f42: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f42: Node, $f44: Int, $f41: Node, $f43: Int, $f40: Int, $f45: Int, $f39: Int, $f38: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[entry::chc] eclassSlots {$f43, $f42, $f41, $f40, $f39, $f38, $f45, $f44}
[entry::chc] result varTypes {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int}
[slotted_egraphs::egraph] updating data for id22
[slotted_egraphs::egraph::rebuild] end of handle_pending id22: ($f38 -> $f38, $f39 -> $f39, $f40 -> $f40, $f41 -> $f41, $f42 -> $f42, $f43 -> $f43, $f44 -> $f44, $f45 -> $f45)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id22 <-> (new (pred (int $0) (int $1)) (and (eq (int $0) (binode (int $2) (node $3) (node $4))) (eq (int $1) (+ (int $7) 1))) (init minLeaf (pred (node $3) (int $5))) (init minLeaf (pred (node $4) (int $6))) (init min (pred (int $5) (int $6) (int $7))))
[slotted_egraphs::parse] from (interface minLeaf (pred <(int $0) (int $1)>) 2)
[slotted_egraphs::parse] to tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("2"), RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("2"), RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 2
[slotted_egraphs::parse] left tokens [RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(2)
[slotted_egraphs::egraph::add] ret (Number(2), ())
[entry::chc] calling make on Number(2)
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id23
[slotted_egraphs::egraph::add] add to id23 Number(2)
[slotted_egraphs::egraph::rebuild] begin of handle_pending id23
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[slotted_egraphs::egraph::add] remove from id23 Number(2)
[slotted_egraphs::egraph::add] add to id23 Number(2)
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[slotted_egraphs::egraph::rebuild] from update_analysis id23 Number(2)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[entry::chc] calling make on Number(2)
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for Number(2)
[entry::chc] get {}
[entry::chc] calling merge to id23
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id23
[slotted_egraphs::egraph::rebuild] end of handle_pending id23: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> Number(2)
     - Number(2)
    
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> 2
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ()), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
[entry::chc] aggregateVarType
[entry::chc] slots: {$f46, $f47}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
[entry::chc] get {$f46: Int, $f47: Int}
[slotted_egraphs::egraph::add] classes insert id24
[slotted_egraphs::egraph::add] add to id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::add] remove from id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::add] add to id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] calling make on Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] aggregateVarType for Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
[entry::chc] get {$f46: Int, $f47: Int}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] eclassSlots {$f46, $f47}
[entry::chc] result varTypes {$f47: Int, $f46: Int}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::parse] from ?a
[slotted_egraphs::parse] to tokens [PVar("a")]
[slotted_egraphs::parse] from ?b
[slotted_egraphs::parse] to tokens [PVar("b")]
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id22: ($f38 -> $0, $f39 -> $1, $f40 -> $2, $f41 -> $3, $f42 -> $4, $f43 -> $5, $f44 -> $6, $f45 -> $7)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $0, $f47 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id22: ($f38 -> $0, $f39 -> $1, $f40 -> $2, $f41 -> $3, $f42 -> $4, $f43 -> $5, $f44 -> $6, $f45 -> $7)
[slotted_egraphs::egraph::rebuild] cap {$0, $1}
[slotted_egraphs::egraph::rebuild] origcap {$f38, $f39}
[slotted_egraphs::egraph::rebuild] new cap {$f38, $f39}
[slotted_egraphs::egraph::rebuild] before change c.slots 
    CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
    ($f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::rebuild] after change c.slots 
    CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
    ($f38, $f39):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id22: ($f38 -> $0, $f39 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
    ($f38, $f39):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $0, $f47 -> $1)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::union] Call move_to id22: ($f38 -> $0, $f39 -> $1), id24: ($f46 -> $0, $f47 -> $1)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[entry::chc] eclassSlots {$f46, $f47}
[entry::chc] result varTypes {$f47: Int, $f46: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f39: Int, $f44: Int, $f43: Int, $f40: Int, $f38: Int, $f41: Node, $f42: Node, $f45: Int} }
    ($f38, $f39):>> New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
     - New(id1: ($f1 -> $f38, $f2 -> $f39), id16: ($f22 -> $f38, $f23 -> $f39, $f24 -> $f40, $f25 -> $f41, $f26 -> $f42, $f27 -> $f45), [AppliedId(id18: ($f30 -> $f41, $f31 -> $f43)), AppliedId(id18: ($f30 -> $f42, $f31 -> $f44)), AppliedId(id21: ($f35 -> $f43, $f36 -> $f44, $f37 -> $f45))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
    
[slotted_egraphs::egraph::add] remove from id22 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f48, $f25 -> $f49, $f26 -> $f50, $f27 -> $f51), [AppliedId(id18: ($f30 -> $f49, $f31 -> $f52)), AppliedId(id18: ($f30 -> $f50, $f31 -> $f53)), AppliedId(id21: ($f35 -> $f52, $f36 -> $f53, $f37 -> $f51))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f48, $f25 -> $f49, $f26 -> $f50, $f27 -> $f51), [AppliedId(id18: ($f30 -> $f49, $f31 -> $f52)), AppliedId(id18: ($f30 -> $f50, $f31 -> $f53)), AppliedId(id21: ($f35 -> $f52, $f36 -> $f53, $f37 -> $f51))])
    
[slotted_egraphs::egraph::add] remove from id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47, $f54, $f55, $f56, $f57, $f58, $f59}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f54 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f55 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f56 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f57 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f58 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f59 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f59 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
[entry::chc] get {$f54: Int, $f58: Int, $f46: Int, $f55: Node, $f47: Int, $f59: Int, $f57: Int, $f56: Node}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f54: Int, $f58: Int, $f46: Int, $f55: Node, $f47: Int, $f59: Int, $f57: Int, $f56: Node} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f47: Int, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] eclassSlots {$f55, $f59, $f54, $f47, $f46, $f57, $f58, $f56}
[entry::chc] result varTypes {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::parse] from (compose <(interface minLeaf (pred <(int $0) (int $1)>) 1) (interface minLeaf (pred <(int $0) (int $1)>) 2)>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("1"), RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 1
[slotted_egraphs::parse] left tokens [RParen, LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::parse] left tokens [LParen, Ident("interface"), Ident("minLeaf"), LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 minLeaf
[slotted_egraphs::parse] left tokens [LParen, Ident("pred"), LVecBracket, LParen, Ident("int"), Slot($0), RParen, LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($0)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $0)
[slotted_egraphs::parse] left tokens [LParen, Ident("int"), Slot($1), RParen, RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("int"), Slot($1)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (int $1)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (int $0) (int $1))
[slotted_egraphs::parse] left tokens [Ident("2"), RParen, RVecBracket, RParen]
[slotted_egraphs::parse] parse_pattern_nosubst return2 2
[slotted_egraphs::parse] left tokens [RParen, RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("interface"), AppliedId(id0: ()), AppliedId(id0: ()), AppliedId(id0: ())]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (interface minLeaf (pred (int $0) (int $1)) 1) (interface minLeaf (pred (int $0) (int $1)) 2))
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(1)
[slotted_egraphs::egraph::add] ret (Number(1), ())
[slotted_egraphs::egraph::add] add_syn_expr: id9 <-> 1
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id9: ()), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id10 <-> (interface minLeaf (pred (int $0) (int $1)) 1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredName("minLeaf")
[slotted_egraphs::egraph::add] ret (PredName("minLeaf"), ())
[slotted_egraphs::egraph::add] add_syn_expr: id8 <-> minLeaf
[slotted_egraphs::egraph::add] shape_called_from_add input Int($0)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $0))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $0)
[slotted_egraphs::egraph::add] shape_called_from_add input Int($1)
[slotted_egraphs::egraph::add] ret (Int($0), ($0 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id0 <-> (int $1)
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id0: ($f0 -> $0), id0: ($f0 -> $1)]), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id1 <-> (pred (int $0) (int $1))
[slotted_egraphs::egraph::add] shape_called_from_add input Number(2)
[slotted_egraphs::egraph::add] ret (Number(2), ())
[slotted_egraphs::egraph::add] add_syn_expr: id23 <-> 2
[slotted_egraphs::egraph::add] shape_called_from_add input Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ())
[slotted_egraphs::egraph::add] ret (Interface(id8: (), id1: ($f1 -> $0, $f2 -> $1), id23: ()), ($0 -> $0, $1 -> $1))
[slotted_egraphs::egraph::add] add_syn_expr: id24 <-> (interface minLeaf (pred (int $0) (int $1)) 2)
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $0, $1 -> $1))
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f60: Int, $f61: Int}
[slotted_egraphs::egraph::add] classes insert id25
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id25
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f60: Int, $f61: Int}
[entry::chc] calling merge to id25
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Int, $f60: Int}
[slotted_egraphs::egraph] updating data for id25
[slotted_egraphs::egraph::rebuild] end of handle_pending id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] add_syn_expr: id25 <-> (compose (interface minLeaf (pred (int $0) (int $1)) 1) (interface minLeaf (pred (int $0) (int $1)) 2))
[entry::chc::tst] egraph before run

 == Egraph ==
CHCData { predNames: {}, varTypes: {$f0: Int} }
id0($f0):>> Int($f0)
 - Int($f0)

CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
id1($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
 - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])

CHCData { predNames: {}, varTypes: {} }
id2():>> Number(0)
 - Number(0)

CHCData { predNames: {}, varTypes: {$f3: Int} }
id3($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
 - Eq(id0: ($f0 -> $f3), id2: ())

CHCData { predNames: {}, varTypes: {} }
id4():>> Leaf
 - Leaf

CHCData { predNames: {}, varTypes: {$f4: Int} }
id5($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
 - Eq(id0: ($f0 -> $f4), id4: ())

CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
id6($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
 - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])

CHCData { predNames: {}, varTypes: {} }
id8():>> PredName("minLeaf")
 - PredName("minLeaf")

CHCData { predNames: {}, varTypes: {} }
id9():>> Number(1)
 - Number(1)

CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
id10($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
 - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
 - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())

CHCData { predNames: {}, varTypes: {$f11: Node} }
id11($f11):>> Node($f11)
 - Node($f11)

CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
id12($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
 - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))

CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
id13($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
 - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))

CHCData { predNames: {}, varTypes: {$f19: Int} }
id14($f19):>> Add(id0: ($f0 -> $f19), id9: ())
 - Add(id0: ($f0 -> $f19), id9: ())

CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
id15($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
 - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))

CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
id16($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
 - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])

CHCData { predNames: {}, varTypes: {$f29: Int, $f28: Node} }
id17($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
 - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
id18($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
 - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))

CHCData { predNames: {}, varTypes: {} }
id19():>> PredName("min")
 - PredName("min")

CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
id20($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
 - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])

CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
id21($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
 - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))

CHCData { predNames: {}, varTypes: {} }
id23():>> Number(2)
 - Number(2)

CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
id24($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
 - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])

CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
id25($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
 - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[slotted_egraphs::parse] from (compose <(new ?syntax1 (true) <(compose <*1>) *2>) *3>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, LParen, Ident("new"), PVar("syntax1"), LParen, Ident("true"), RParen, LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen, Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *1)
[slotted_egraphs::parse] left tokens [Star(2), RVecBracket, RParen, Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([AppliedId(id0: ()), Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::parse] left tokens [Star(3), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([AppliedId(id0: ()), Star(3)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(1)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (compose <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(1)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::parse] from (new ?syntax ?cond <*1>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(1), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(1)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *1)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f68, $f25 -> $f69, $f26 -> $f70, $f27 -> $f71), [AppliedId(id18: ($f30 -> $f69, $f31 -> $f72)), AppliedId(id18: ($f30 -> $f70, $f31 -> $f73)), AppliedId(id21: ($f35 -> $f72, $f36 -> $f73, $f37 -> $f71))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f68, $f25 -> $f69, $f26 -> $f70, $f27 -> $f71), [AppliedId(id18: ($f30 -> $f69, $f31 -> $f72)), AppliedId(id18: ($f30 -> $f70, $f31 -> $f73)), AppliedId(id21: ($f35 -> $f72, $f36 -> $f73, $f37 -> $f71))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id25, [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id10: ($f9 -> $f60, $f10 -> $f61), id24: ($f46 -> $f60, $f47 -> $f61)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id10: ($f9 -> $f60, $f10 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f60, $f10 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f60, $f2 -> $f61), id6: ($f5 -> $f60, $f6 -> $f61), []), Interface(id8: (), id1: ($f1 -> $f60, $f2 -> $f61), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id10: ($f9 -> $f60, $f10 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f60, $f2 -> $f61), id6: ($f5 -> $f60, $f6 -> $f61), []), Interface(id8: (), id1: ($f1 -> $f60, $f2 -> $f61), id9: ())]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f60, $f2 -> $f61), id6: ($f5 -> $f60, $f6 -> $f61), [])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id24: ($f46 -> $f60, $f47 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id10
[slotted_egraphs::rewrite::ematch] 	 1) id24
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), [AppliedId(id18: ($f30 -> $f81, $f31 -> $f84)), AppliedId(id18: ($f30 -> $f82, $f31 -> $f85)), AppliedId(id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), [AppliedId(id18: ($f30 -> $f81, $f31 -> $f84)), AppliedId(id18: ($f30 -> $f82, $f31 -> $f85)), AppliedId(id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), [AppliedId(id18: ($f30 -> $f81, $f31 -> $f84)), AppliedId(id18: ($f30 -> $f82, $f31 -> $f85)), AppliedId(id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), id18: ($f30 -> $f81, $f31 -> $f84), id18: ($f30 -> $f82, $f31 -> $f85), id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f81, $f31 -> $f84)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f81, $f31 -> $f84) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83),
                "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f82, $f31 -> $f85)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f82, $f31 -> $f85) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), "star_1_1": id18: ($f30 -> $f82, $f31 -> $f85), "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83),
                "star_1_1": id18: ($f30 -> $f82, $f31 -> $f85),
                "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), "star_1_1": id18: ($f30 -> $f82, $f31 -> $f85), "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83),
                "star_1_1": id18: ($f30 -> $f82, $f31 -> $f85),
                "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83), "star_1_1": id18: ($f30 -> $f82, $f31 -> $f85), "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f80, $f25 -> $f81, $f26 -> $f82, $f27 -> $f83),
            "star_1_1": id18: ($f30 -> $f82, $f31 -> $f85),
            "star_1_0": id18: ($f30 -> $f81, $f31 -> $f84),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id21: ($f35 -> $f84, $f36 -> $f85, $f37 -> $f83),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id25, [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f100, $f25 -> $f101, $f26 -> $f102, $f27 -> $f103), [AppliedId(id18: ($f30 -> $f101, $f31 -> $f104)), AppliedId(id18: ($f30 -> $f102, $f31 -> $f105)), AppliedId(id21: ($f35 -> $f104, $f36 -> $f105, $f37 -> $f103))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f100, $f25 -> $f101, $f26 -> $f102, $f27 -> $f103), [AppliedId(id18: ($f30 -> $f101, $f31 -> $f104)), AppliedId(id18: ($f30 -> $f102, $f31 -> $f105)), AppliedId(id21: ($f35 -> $f104, $f36 -> $f105, $f37 -> $f103))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id25, [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id10: ($f9 -> $f60, $f10 -> $f61), id24: ($f46 -> $f60, $f47 -> $f61)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id10: ($f9 -> $f60, $f10 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id10: ($f9 -> $f60, $f10 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id10
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id10: ($f9 -> $f60, $f10 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id10: ($f9 -> $f60, $f10 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id24: ($f46 -> $f60, $f47 -> $f61)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id24: ($f46 -> $f60, $f47 -> $f61) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id24
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id24: ($f46 -> $f60, $f47 -> $f61), "star_1_0": id10: ($f9 -> $f60, $f10 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id10
[slotted_egraphs::rewrite::ematch] 	 1) id24
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id24: ($f46 -> $f60, $f47 -> $f61),
                "star_1_0": id10: ($f9 -> $f60, $f10 -> $f61),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id24: ($f46 -> $f60, $f47 -> $f61), "star_1_0": id10: ($f9 -> $f60, $f10 -> $f61)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id24: ($f46 -> $f60, $f47 -> $f61),
            "star_1_0": id10: ($f9 -> $f60, $f10 -> $f61),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), [AppliedId(id18: ($f30 -> $f115, $f31 -> $f118)), AppliedId(id18: ($f30 -> $f116, $f31 -> $f119)), AppliedId(id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), [AppliedId(id18: ($f30 -> $f115, $f31 -> $f118)), AppliedId(id18: ($f30 -> $f116, $f31 -> $f119)), AppliedId(id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), [AppliedId(id18: ($f30 -> $f115, $f31 -> $f118)), AppliedId(id18: ($f30 -> $f116, $f31 -> $f119)), AppliedId(id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), id18: ($f30 -> $f115, $f31 -> $f118), id18: ($f30 -> $f116, $f31 -> $f119), id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f115, $f31 -> $f118)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f115, $f31 -> $f118) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117),
                "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f116, $f31 -> $f119)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f116, $f31 -> $f119) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), "star_1_1": id18: ($f30 -> $f116, $f31 -> $f119), "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117),
                "star_1_1": id18: ($f30 -> $f116, $f31 -> $f119),
                "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), "star_1_1": id18: ($f30 -> $f116, $f31 -> $f119), "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117),
                "star_1_1": id18: ($f30 -> $f116, $f31 -> $f119),
                "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117), "star_1_1": id18: ($f30 -> $f116, $f31 -> $f119), "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f114, $f25 -> $f115, $f26 -> $f116, $f27 -> $f117),
            "star_1_1": id18: ($f30 -> $f116, $f31 -> $f119),
            "star_1_0": id18: ($f30 -> $f115, $f31 -> $f118),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id21: ($f35 -> $f118, $f36 -> $f119, $f37 -> $f117),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id25, [Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f92, $7 -> $f93))
[entry::chc] calling make on New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f129 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f129 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f130 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f131 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f131 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f132 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f132 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f133 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f133 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f134 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f134 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f135 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f135 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
[entry::chc] get {$f130: Int, $f133: Int, $f129: Int, $f132: Node, $f131: Node, $f134: Int, $f135: Int, $f128: Int}
[slotted_egraphs::egraph::add] classes insert id26
[slotted_egraphs::egraph::add] add to id26 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id26
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f130: Int, $f133: Int, $f129: Int, $f132: Node, $f131: Node, $f134: Int, $f135: Int, $f128: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::add] remove from id26 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id26 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f130: Int, $f133: Int, $f129: Int, $f132: Node, $f131: Node, $f134: Int, $f135: Int, $f128: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id26 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f130: Int, $f133: Int, $f129: Int, $f132: Node, $f131: Node, $f134: Int, $f135: Int, $f128: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f128 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f129 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f129 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f130 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f131 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f131 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f132 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f132 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f133 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f133 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f134 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f134 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f135 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f135 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
[entry::chc] get {$f128: Int, $f132: Node, $f135: Int, $f131: Node, $f130: Int, $f129: Int, $f134: Int, $f133: Int}
[entry::chc] calling merge to id26
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f130: Int, $f133: Int, $f129: Int, $f132: Node, $f131: Node, $f134: Int, $f135: Int, $f128: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f130: Int, $f133: Int, $f129: Int, $f132: Node, $f131: Node, $f134: Int, $f135: Int, $f128: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f128: Int, $f132: Node, $f135: Int, $f131: Node, $f130: Int, $f129: Int, $f134: Int, $f133: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f130: Int, $f133: Int, $f129: Int, $f132: Node, $f131: Node, $f134: Int, $f135: Int, $f128: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[entry::chc] eclassSlots {$f135, $f134, $f133, $f132, $f131, $f130, $f129, $f128}
[entry::chc] result varTypes {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int}
[slotted_egraphs::egraph] updating data for id26
[slotted_egraphs::egraph::rebuild] end of handle_pending id26: ($f128 -> $f128, $f129 -> $f129, $f130 -> $f130, $f131 -> $f131, $f132 -> $f132, $f133 -> $f133, $f134 -> $f134, $f135 -> $f135)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::union] r: id26: ($f128 -> $f86, $f129 -> $f87, $f130 -> $f88, $f131 -> $f89, $f132 -> $f90, $f133 -> $f91, $f134 -> $f92, $f135 -> $f93)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id26: ($f128 -> $f86, $f129 -> $f87, $f130 -> $f88, $f131 -> $f89, $f132 -> $f90, $f133 -> $f91, $f134 -> $f92, $f135 -> $f93)
[slotted_egraphs::egraph::rebuild] cap {$f86, $f87}
[slotted_egraphs::egraph::rebuild] origcap {$f128, $f129}
[slotted_egraphs::egraph::rebuild] new cap {$f128, $f129}
[slotted_egraphs::egraph::rebuild] before change c.slots 
    CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
    ($f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::rebuild] after change c.slots 
    CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
    ($f128, $f129):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::union] r: id26: ($f128 -> $f86, $f129 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
    ($f128, $f129):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::union] Call move_to id26: ($f128 -> $f86, $f129 -> $f87), id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] eclassSlots {$f55, $f59, $f54, $f47, $f46, $f57, $f58, $f56}
[entry::chc] result varTypes {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f59: Int, $f58: Int, $f47: Int, $f57: Int, $f55: Node, $f54: Int, $f56: Node, $f46: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f133: Int, $f131: Node, $f128: Int, $f129: Int, $f132: Node, $f135: Int, $f130: Int, $f134: Int} }
    ($f128, $f129):>> New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
     - New(id1: ($f1 -> $f128, $f2 -> $f129), id16: ($f22 -> $f128, $f23 -> $f129, $f24 -> $f130, $f25 -> $f131, $f26 -> $f132, $f27 -> $f133), [AppliedId(id18: ($f30 -> $f132, $f31 -> $f134)), AppliedId(id18: ($f30 -> $f131, $f31 -> $f135)), AppliedId(id21: ($f35 -> $f135, $f36 -> $f134, $f37 -> $f133))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::add] remove from id26 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f136, $f25 -> $f137, $f26 -> $f138, $f27 -> $f139), [AppliedId(id18: ($f30 -> $f138, $f31 -> $f140)), AppliedId(id18: ($f30 -> $f137, $f31 -> $f141)), AppliedId(id21: ($f35 -> $f141, $f36 -> $f140, $f37 -> $f139))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f136, $f25 -> $f137, $f26 -> $f138, $f27 -> $f139), [AppliedId(id18: ($f30 -> $f138, $f31 -> $f140)), AppliedId(id18: ($f30 -> $f137, $f31 -> $f141)), AppliedId(id21: ($f35 -> $f141, $f36 -> $f140, $f37 -> $f139))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::add] remove from id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47, $f142, $f143, $f144, $f145, $f146, $f147}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f142 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f143 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f144 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f144 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f145 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f146 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f146 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f147 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f147 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
[entry::chc] get {$f147: Int, $f145: Int, $f143: Node, $f144: Node, $f46: Int, $f47: Int, $f142: Int, $f146: Int}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f147: Int, $f145: Int, $f143: Node, $f144: Node, $f46: Int, $f47: Int, $f142: Int, $f146: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f47: Int, $f54: Int, $f55: Node, $f56: Node, $f57: Int, $f59: Int, $f58: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] eclassSlots {$f55, $f59, $f54, $f147, $f146, $f145, $f144, $f143, $f142, $f47, $f46, $f57, $f58, $f56}
[entry::chc] result varTypes {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id25
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f60: Int, $f61: Int}
[entry::chc] calling merge to id25
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Int, $f60: Int}
[slotted_egraphs::egraph] updating data for id25
[slotted_egraphs::egraph::rebuild] end of handle_pending id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91)), AppliedId(id18: ($f30 -> $f89, $f31 -> $f93))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f92, $7 -> $f93))
[entry::chc] calling make on New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f149 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f149 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f150 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f155 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f155 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
[entry::chc] get {$f154: Int, $f155: Int, $f149: Int, $f148: Int, $f150: Int, $f151: Node, $f152: Node, $f153: Int}
[slotted_egraphs::egraph::add] classes insert id27
[slotted_egraphs::egraph::add] add to id27 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id27
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f154: Int, $f155: Int, $f149: Int, $f148: Int, $f150: Int, $f151: Node, $f152: Node, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::add] remove from id27 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id27 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f154: Int, $f155: Int, $f149: Int, $f148: Int, $f150: Int, $f151: Node, $f152: Node, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id27 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f154: Int, $f155: Int, $f149: Int, $f148: Int, $f150: Int, $f151: Node, $f152: Node, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f148 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f149 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f149 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f150 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f151 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f152 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f153 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f154 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f155 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f155 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
[entry::chc] get {$f153: Int, $f151: Node, $f148: Int, $f152: Node, $f155: Int, $f150: Int, $f154: Int, $f149: Int}
[entry::chc] calling merge to id27
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f154: Int, $f155: Int, $f149: Int, $f148: Int, $f150: Int, $f151: Node, $f152: Node, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f154: Int, $f155: Int, $f149: Int, $f148: Int, $f150: Int, $f151: Node, $f152: Node, $f153: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f153: Int, $f151: Node, $f148: Int, $f152: Node, $f155: Int, $f150: Int, $f154: Int, $f149: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f154: Int, $f155: Int, $f149: Int, $f148: Int, $f150: Int, $f151: Node, $f152: Node, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[entry::chc] eclassSlots {$f149, $f148, $f155, $f154, $f153, $f152, $f151, $f150}
[entry::chc] result varTypes {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int}
[slotted_egraphs::egraph] updating data for id27
[slotted_egraphs::egraph::rebuild] end of handle_pending id27: ($f148 -> $f148, $f149 -> $f149, $f150 -> $f150, $f151 -> $f151, $f152 -> $f152, $f153 -> $f153, $f154 -> $f154, $f155 -> $f155)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::union] r: id27: ($f148 -> $f86, $f149 -> $f87, $f150 -> $f88, $f151 -> $f89, $f152 -> $f90, $f153 -> $f91, $f154 -> $f92, $f155 -> $f93)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id27: ($f148 -> $f86, $f149 -> $f87, $f150 -> $f88, $f151 -> $f89, $f152 -> $f90, $f153 -> $f91, $f154 -> $f92, $f155 -> $f93)
[slotted_egraphs::egraph::rebuild] cap {$f86, $f87}
[slotted_egraphs::egraph::rebuild] origcap {$f148, $f149}
[slotted_egraphs::egraph::rebuild] new cap {$f148, $f149}
[slotted_egraphs::egraph::rebuild] before change c.slots 
    CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
    ($f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::rebuild] after change c.slots 
    CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
    ($f148, $f149):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::union] r: id27: ($f148 -> $f86, $f149 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
    ($f148, $f149):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::union] Call move_to id27: ($f148 -> $f86, $f149 -> $f87), id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[entry::chc] eclassSlots {$f55, $f59, $f54, $f147, $f146, $f145, $f144, $f143, $f142, $f47, $f46, $f57, $f58, $f56}
[entry::chc] result varTypes {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f58: Int, $f142: Int, $f46: Int, $f57: Int, $f146: Int, $f55: Node, $f54: Int, $f59: Int, $f144: Node, $f56: Node, $f147: Int, $f145: Int, $f47: Int, $f143: Node} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f149: Int, $f154: Int, $f148: Int, $f151: Node, $f155: Int, $f152: Node, $f150: Int, $f153: Int} }
    ($f148, $f149):>> New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
     - New(id1: ($f1 -> $f148, $f2 -> $f149), id16: ($f22 -> $f148, $f23 -> $f149, $f24 -> $f150, $f25 -> $f151, $f26 -> $f152, $f27 -> $f153), [AppliedId(id18: ($f30 -> $f152, $f31 -> $f154)), AppliedId(id21: ($f35 -> $f155, $f36 -> $f154, $f37 -> $f153)), AppliedId(id18: ($f30 -> $f151, $f31 -> $f155))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
    
[slotted_egraphs::egraph::add] remove from id27 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f156, $f25 -> $f157, $f26 -> $f158, $f27 -> $f159), [AppliedId(id18: ($f30 -> $f158, $f31 -> $f160)), AppliedId(id21: ($f35 -> $f161, $f36 -> $f160, $f37 -> $f159)), AppliedId(id18: ($f30 -> $f157, $f31 -> $f161))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f156, $f25 -> $f157, $f26 -> $f158, $f27 -> $f159), [AppliedId(id18: ($f30 -> $f158, $f31 -> $f160)), AppliedId(id21: ($f35 -> $f161, $f36 -> $f160, $f37 -> $f159)), AppliedId(id18: ($f30 -> $f157, $f31 -> $f161))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] remove from id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47, $f162, $f163, $f164, $f165, $f166, $f167}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f162 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f163 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f163 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f164 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f165 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f166 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f166 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f167 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f167 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
[entry::chc] get {$f164: Node, $f166: Int, $f46: Int, $f47: Int, $f165: Int, $f162: Int, $f167: Int, $f163: Node}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f164: Node, $f166: Int, $f46: Int, $f47: Int, $f165: Int, $f162: Int, $f167: Int, $f163: Node} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f57: Int, $f146: Int, $f46: Int, $f142: Int, $f147: Int, $f55: Node, $f144: Node, $f47: Int, $f54: Int, $f59: Int, $f58: Int, $f145: Int, $f143: Node, $f56: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] eclassSlots {$f54, $f146, $f144, $f166, $f142, $f59, $f46, $f57, $f162, $f164, $f55, $f147, $f145, $f167, $f143, $f165, $f47, $f58, $f163, $f56}
[entry::chc] result varTypes {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id25
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f60: Int, $f61: Int}
[entry::chc] calling merge to id25
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Int, $f60: Int}
[slotted_egraphs::egraph] updating data for id25
[slotted_egraphs::egraph::rebuild] end of handle_pending id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[entry::chc] calling make on New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f168 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f168 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f169 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f169 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f170 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f171 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f171 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f172 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f172 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f175 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f175 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
[entry::chc] get {$f172: Node, $f171: Node, $f169: Int, $f174: Int, $f170: Int, $f168: Int, $f173: Int, $f175: Int}
[slotted_egraphs::egraph::add] classes insert id28
[slotted_egraphs::egraph::add] add to id28 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id28
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f172: Node, $f171: Node, $f169: Int, $f174: Int, $f170: Int, $f168: Int, $f173: Int, $f175: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::add] remove from id28 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id28 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f172: Node, $f171: Node, $f169: Int, $f174: Int, $f170: Int, $f168: Int, $f173: Int, $f175: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id28 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f172: Node, $f171: Node, $f169: Int, $f174: Int, $f170: Int, $f168: Int, $f173: Int, $f175: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f168 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f168 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f169 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f169 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f170 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f171 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f171 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f172 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f172 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f173 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f174 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f175 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f175 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
[entry::chc] get {$f168: Int, $f170: Int, $f174: Int, $f171: Node, $f175: Int, $f173: Int, $f172: Node, $f169: Int}
[entry::chc] calling merge to id28
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f172: Node, $f171: Node, $f169: Int, $f174: Int, $f170: Int, $f168: Int, $f173: Int, $f175: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f172: Node, $f171: Node, $f169: Int, $f174: Int, $f170: Int, $f168: Int, $f173: Int, $f175: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f168: Int, $f170: Int, $f174: Int, $f171: Node, $f175: Int, $f173: Int, $f172: Node, $f169: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f172: Node, $f171: Node, $f169: Int, $f174: Int, $f170: Int, $f168: Int, $f173: Int, $f175: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[entry::chc] eclassSlots {$f172, $f171, $f170, $f169, $f168, $f175, $f174, $f173}
[entry::chc] result varTypes {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int}
[slotted_egraphs::egraph] updating data for id28
[slotted_egraphs::egraph::rebuild] end of handle_pending id28: ($f168 -> $f168, $f169 -> $f169, $f170 -> $f170, $f171 -> $f171, $f172 -> $f172, $f173 -> $f173, $f174 -> $f174, $f175 -> $f175)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id28: ($f168 -> $f86, $f169 -> $f87, $f170 -> $f88, $f171 -> $f89, $f172 -> $f90, $f173 -> $f91, $f174 -> $f92, $f175 -> $f93)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id28: ($f168 -> $f86, $f169 -> $f87, $f170 -> $f88, $f171 -> $f89, $f172 -> $f90, $f173 -> $f91, $f174 -> $f92, $f175 -> $f93)
[slotted_egraphs::egraph::rebuild] cap {$f86, $f87}
[slotted_egraphs::egraph::rebuild] origcap {$f168, $f169}
[slotted_egraphs::egraph::rebuild] new cap {$f168, $f169}
[slotted_egraphs::egraph::rebuild] before change c.slots 
    CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
    ($f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::rebuild] after change c.slots 
    CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
    ($f168, $f169):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id28: ($f168 -> $f86, $f169 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
    ($f168, $f169):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::union] Call move_to id28: ($f168 -> $f86, $f169 -> $f87), id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] eclassSlots {$f54, $f146, $f144, $f166, $f142, $f59, $f46, $f57, $f162, $f164, $f55, $f147, $f145, $f167, $f143, $f165, $f47, $f58, $f163, $f56}
[entry::chc] result varTypes {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f47: Int, $f56: Node, $f162: Int, $f167: Int, $f163: Node, $f145: Int, $f166: Int, $f165: Int, $f144: Node, $f54: Int, $f142: Int, $f59: Int, $f57: Int, $f46: Int, $f58: Int, $f55: Node, $f143: Node, $f146: Int, $f164: Node} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f171: Node, $f175: Int, $f174: Int, $f173: Int, $f169: Int, $f168: Int, $f172: Node, $f170: Int} }
    ($f168, $f169):>> New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
     - New(id1: ($f1 -> $f168, $f2 -> $f169), id16: ($f22 -> $f168, $f23 -> $f169, $f24 -> $f170, $f25 -> $f171, $f26 -> $f172, $f27 -> $f173), [AppliedId(id18: ($f30 -> $f171, $f31 -> $f175)), AppliedId(id21: ($f35 -> $f175, $f36 -> $f174, $f37 -> $f173)), AppliedId(id18: ($f30 -> $f172, $f31 -> $f174))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] remove from id28 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f176, $f25 -> $f177, $f26 -> $f178, $f27 -> $f179), [AppliedId(id18: ($f30 -> $f177, $f31 -> $f180)), AppliedId(id21: ($f35 -> $f180, $f36 -> $f181, $f37 -> $f179)), AppliedId(id18: ($f30 -> $f178, $f31 -> $f181))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f176, $f25 -> $f177, $f26 -> $f178, $f27 -> $f179), [AppliedId(id18: ($f30 -> $f177, $f31 -> $f180)), AppliedId(id21: ($f35 -> $f180, $f36 -> $f181, $f37 -> $f179)), AppliedId(id18: ($f30 -> $f178, $f31 -> $f181))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] remove from id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47, $f182, $f183, $f184, $f185, $f186, $f187}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f182 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f183 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f183 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f184 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f184 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f185 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f185 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f186 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f186 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f187 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f187 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
[entry::chc] get {$f183: Node, $f184: Node, $f185: Int, $f186: Int, $f46: Int, $f47: Int, $f182: Int, $f187: Int}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f183: Node, $f184: Node, $f185: Int, $f186: Int, $f46: Int, $f47: Int, $f182: Int, $f187: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f147: Int, $f163: Node, $f59: Int, $f54: Int, $f143: Node, $f144: Node, $f55: Node, $f164: Node, $f46: Int, $f166: Int, $f146: Int, $f58: Int, $f47: Int, $f57: Int, $f162: Int, $f145: Int, $f165: Int, $f167: Int, $f56: Node, $f142: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] eclassSlots {$f56, $f183, $f54, $f146, $f144, $f166, $f142, $f59, $f46, $f164, $f186, $f162, $f184, $f55, $f57, $f182, $f147, $f145, $f167, $f143, $f165, $f47, $f187, $f163, $f58, $f185}
[entry::chc] result varTypes {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id25
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f60: Int, $f61: Int}
[entry::chc] calling merge to id25
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Int, $f60: Int}
[slotted_egraphs::egraph] updating data for id25
[slotted_egraphs::egraph::rebuild] end of handle_pending id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91)), AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[entry::chc] calling make on New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f188 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f188 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f189 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f189 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f190 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f191 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f191 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f192 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f192 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f193 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f193 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f194 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f194 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f195 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f195 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
[entry::chc] get {$f193: Int, $f188: Int, $f189: Int, $f190: Int, $f192: Node, $f194: Int, $f195: Int, $f191: Node}
[slotted_egraphs::egraph::add] classes insert id29
[slotted_egraphs::egraph::add] add to id29 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id29
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f188: Int, $f189: Int, $f190: Int, $f192: Node, $f194: Int, $f195: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::add] remove from id29 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id29 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f188: Int, $f189: Int, $f190: Int, $f192: Node, $f194: Int, $f195: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id29 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f188: Int, $f189: Int, $f190: Int, $f192: Node, $f194: Int, $f195: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f188 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f188 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f189 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f189 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f190 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f191 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f191 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f192 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f192 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f193 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f193 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f194 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f194 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f195 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f195 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
[entry::chc] get {$f188: Int, $f193: Int, $f189: Int, $f192: Node, $f194: Int, $f191: Node, $f195: Int, $f190: Int}
[entry::chc] calling merge to id29
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f188: Int, $f189: Int, $f190: Int, $f192: Node, $f194: Int, $f195: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f193: Int, $f188: Int, $f189: Int, $f190: Int, $f192: Node, $f194: Int, $f195: Int, $f191: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f188: Int, $f193: Int, $f189: Int, $f192: Node, $f194: Int, $f191: Node, $f195: Int, $f190: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f188: Int, $f189: Int, $f190: Int, $f192: Node, $f194: Int, $f195: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[entry::chc] eclassSlots {$f195, $f194, $f193, $f192, $f191, $f190, $f189, $f188}
[entry::chc] result varTypes {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node}
[slotted_egraphs::egraph] updating data for id29
[slotted_egraphs::egraph::rebuild] end of handle_pending id29: ($f188 -> $f188, $f189 -> $f189, $f190 -> $f190, $f191 -> $f191, $f192 -> $f192, $f193 -> $f193, $f194 -> $f194, $f195 -> $f195)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id29: ($f188 -> $f86, $f189 -> $f87, $f190 -> $f88, $f191 -> $f89, $f192 -> $f90, $f193 -> $f91, $f194 -> $f92, $f195 -> $f93)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id29: ($f188 -> $f86, $f189 -> $f87, $f190 -> $f88, $f191 -> $f89, $f192 -> $f90, $f193 -> $f91, $f194 -> $f92, $f195 -> $f93)
[slotted_egraphs::egraph::rebuild] cap {$f86, $f87}
[slotted_egraphs::egraph::rebuild] origcap {$f188, $f189}
[slotted_egraphs::egraph::rebuild] new cap {$f188, $f189}
[slotted_egraphs::egraph::rebuild] before change c.slots 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
    ($f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::rebuild] after change c.slots 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
    ($f188, $f189):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id29: ($f188 -> $f86, $f189 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
    ($f188, $f189):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::union] Call move_to id29: ($f188 -> $f86, $f189 -> $f87), id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] eclassSlots {$f56, $f183, $f54, $f146, $f144, $f166, $f142, $f59, $f46, $f164, $f186, $f162, $f184, $f55, $f57, $f182, $f147, $f145, $f167, $f143, $f165, $f47, $f187, $f163, $f58, $f185}
[entry::chc] result varTypes {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f46: Int, $f147: Int, $f55: Node, $f166: Int, $f165: Int, $f186: Int, $f54: Int, $f58: Int, $f167: Int, $f142: Int, $f185: Int, $f47: Int, $f162: Int, $f182: Int, $f164: Node, $f163: Node, $f146: Int, $f56: Node, $f145: Int, $f144: Node, $f143: Node, $f59: Int, $f183: Node, $f187: Int, $f57: Int, $f184: Node} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f193: Int, $f192: Node, $f189: Int, $f188: Int, $f190: Int, $f195: Int, $f194: Int, $f191: Node} }
    ($f188, $f189):>> New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
     - New(id1: ($f1 -> $f188, $f2 -> $f189), id16: ($f22 -> $f188, $f23 -> $f189, $f24 -> $f190, $f25 -> $f191, $f26 -> $f192, $f27 -> $f193), [AppliedId(id21: ($f35 -> $f195, $f36 -> $f194, $f37 -> $f193)), AppliedId(id18: ($f30 -> $f191, $f31 -> $f195)), AppliedId(id18: ($f30 -> $f192, $f31 -> $f194))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] remove from id29 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f196, $f25 -> $f197, $f26 -> $f198, $f27 -> $f199), [AppliedId(id21: ($f35 -> $f200, $f36 -> $f201, $f37 -> $f199)), AppliedId(id18: ($f30 -> $f197, $f31 -> $f200)), AppliedId(id18: ($f30 -> $f198, $f31 -> $f201))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f196, $f25 -> $f197, $f26 -> $f198, $f27 -> $f199), [AppliedId(id21: ($f35 -> $f200, $f36 -> $f201, $f37 -> $f199)), AppliedId(id18: ($f30 -> $f197, $f31 -> $f200)), AppliedId(id18: ($f30 -> $f198, $f31 -> $f201))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] remove from id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47, $f202, $f203, $f204, $f205, $f206, $f207}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f202 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f203 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f203 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f204 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f204 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f205 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f205 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f206 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f206 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f207 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f207 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
[entry::chc] get {$f46: Int, $f47: Int, $f206: Int, $f207: Int, $f205: Int, $f204: Node, $f203: Node, $f202: Int}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f46: Int, $f47: Int, $f206: Int, $f207: Int, $f205: Int, $f204: Node, $f203: Node, $f202: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f186: Int, $f142: Int, $f58: Int, $f56: Node, $f185: Int, $f184: Node, $f54: Int, $f182: Int, $f164: Node, $f144: Node, $f183: Node, $f167: Int, $f47: Int, $f46: Int, $f143: Node, $f165: Int, $f57: Int, $f162: Int, $f59: Int, $f55: Node, $f166: Int, $f145: Int, $f187: Int, $f163: Node, $f146: Int, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] eclassSlots {$f183, $f54, $f205, $f146, $f142, $f46, $f164, $f186, $f57, $f182, $f204, $f145, $f167, $f163, $f56, $f185, $f207, $f203, $f144, $f166, $f59, $f162, $f184, $f55, $f206, $f147, $f202, $f143, $f165, $f47, $f187, $f58}
[entry::chc] result varTypes {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id25
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f61: Int, $f60: Int}
[entry::chc] calling merge to id25
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f61: Int, $f60: Int}
[slotted_egraphs::egraph] updating data for id25
[slotted_egraphs::egraph::rebuild] end of handle_pending id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id18: ($f30 -> $f89, $f31 -> $f93)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f86, $f2 -> $f87), id16: ($f22 -> $f86, $f23 -> $f87, $f24 -> $f88, $f25 -> $f89, $f26 -> $f90, $f27 -> $f91), [AppliedId(id21: ($f35 -> $f93, $f36 -> $f92, $f37 -> $f91)), AppliedId(id18: ($f30 -> $f90, $f31 -> $f92)), AppliedId(id18: ($f30 -> $f89, $f31 -> $f93))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f86, $1 -> $f87, $2 -> $f88, $3 -> $f89, $4 -> $f90, $5 -> $f91, $6 -> $f93, $7 -> $f92))
[entry::chc] calling make on New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f209 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f209 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f210 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f211 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f211 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f212 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f212 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f213 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f213 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f214 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f214 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f215 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f215 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
[entry::chc] get {$f208: Int, $f215: Int, $f209: Int, $f213: Int, $f214: Int, $f212: Node, $f211: Node, $f210: Int}
[slotted_egraphs::egraph::add] classes insert id30
[slotted_egraphs::egraph::add] add to id30 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id30
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f208: Int, $f215: Int, $f209: Int, $f213: Int, $f214: Int, $f212: Node, $f211: Node, $f210: Int} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::add] remove from id30 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::add] add to id30 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f208: Int, $f215: Int, $f209: Int, $f213: Int, $f214: Int, $f212: Node, $f211: Node, $f210: Int} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id30 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f208: Int, $f215: Int, $f209: Int, $f213: Int, $f214: Int, $f212: Node, $f211: Node, $f210: Int} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f208 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f209 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f209 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f210 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f211 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f211 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f212 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f212 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f213 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f213 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f214 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f214 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f215 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f215 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
[entry::chc] get {$f212: Node, $f210: Int, $f213: Int, $f214: Int, $f215: Int, $f208: Int, $f209: Int, $f211: Node}
[entry::chc] calling merge to id30
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f208: Int, $f215: Int, $f209: Int, $f213: Int, $f214: Int, $f212: Node, $f211: Node, $f210: Int} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f208: Int, $f215: Int, $f209: Int, $f213: Int, $f214: Int, $f212: Node, $f211: Node, $f210: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f212: Node, $f210: Int, $f213: Int, $f214: Int, $f215: Int, $f208: Int, $f209: Int, $f211: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f208: Int, $f215: Int, $f209: Int, $f213: Int, $f214: Int, $f212: Node, $f211: Node, $f210: Int} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[entry::chc] eclassSlots {$f208, $f215, $f214, $f213, $f212, $f211, $f210, $f209}
[entry::chc] result varTypes {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node}
[slotted_egraphs::egraph] updating data for id30
[slotted_egraphs::egraph::rebuild] end of handle_pending id30: ($f208 -> $f208, $f209 -> $f209, $f210 -> $f210, $f211 -> $f211, $f212 -> $f212, $f213 -> $f213, $f214 -> $f214, $f215 -> $f215)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id30: ($f208 -> $f86, $f209 -> $f87, $f210 -> $f88, $f211 -> $f89, $f212 -> $f90, $f213 -> $f91, $f214 -> $f92, $f215 -> $f93)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::rebuild] Call shrink slots
[slotted_egraphs::egraph::rebuild] from id30: ($f208 -> $f86, $f209 -> $f87, $f210 -> $f88, $f211 -> $f89, $f212 -> $f90, $f213 -> $f91, $f214 -> $f92, $f215 -> $f93)
[slotted_egraphs::egraph::rebuild] cap {$f86, $f87}
[slotted_egraphs::egraph::rebuild] origcap {$f208, $f209}
[slotted_egraphs::egraph::rebuild] new cap {$f208, $f209}
[slotted_egraphs::egraph::rebuild] before change c.slots 
    CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
    ($f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::rebuild] after change c.slots 
    CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
    ($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id30: ($f208 -> $f86, $f209 -> $f87)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
    ($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::union] Call move_to id30: ($f208 -> $f86, $f209 -> $f87), id24: ($f46 -> $f86, $f47 -> $f87)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
[entry::chc] y CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] eclassSlots {$f183, $f54, $f205, $f146, $f142, $f46, $f164, $f186, $f57, $f182, $f204, $f145, $f167, $f163, $f56, $f185, $f207, $f203, $f144, $f166, $f59, $f162, $f184, $f55, $f206, $f147, $f202, $f143, $f165, $f47, $f187, $f58}
[entry::chc] result varTypes {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f167: Int, $f55: Node, $f162: Int, $f59: Int, $f206: Int, $f147: Int, $f58: Int, $f145: Int, $f203: Node, $f164: Node, $f46: Int, $f146: Int, $f166: Int, $f165: Int, $f187: Int, $f202: Int, $f185: Int, $f143: Node, $f144: Node, $f183: Node, $f204: Node, $f207: Int, $f186: Int, $f47: Int, $f57: Int, $f54: Int, $f205: Int, $f142: Int, $f184: Node, $f56: Node, $f163: Node, $f182: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f214: Int, $f209: Int, $f210: Int, $f208: Int, $f215: Int, $f213: Int, $f212: Node, $f211: Node} }
    ($f208, $f209):>> New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
     - New(id1: ($f1 -> $f208, $f2 -> $f209), id16: ($f22 -> $f208, $f23 -> $f209, $f24 -> $f210, $f25 -> $f211, $f26 -> $f212, $f27 -> $f213), [AppliedId(id21: ($f35 -> $f215, $f36 -> $f214, $f37 -> $f213)), AppliedId(id18: ($f30 -> $f212, $f31 -> $f214)), AppliedId(id18: ($f30 -> $f211, $f31 -> $f215))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] remove from id30 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::union] adding New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f216, $f25 -> $f217, $f26 -> $f218, $f27 -> $f219), [AppliedId(id21: ($f35 -> $f220, $f36 -> $f221, $f37 -> $f219)), AppliedId(id18: ($f30 -> $f218, $f31 -> $f221)), AppliedId(id18: ($f30 -> $f217, $f31 -> $f220))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id24
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f216, $f25 -> $f217, $f26 -> $f218, $f27 -> $f219), [AppliedId(id21: ($f35 -> $f220, $f36 -> $f221, $f37 -> $f219)), AppliedId(id18: ($f30 -> $f218, $f31 -> $f221)), AppliedId(id18: ($f30 -> $f217, $f31 -> $f220))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] remove from id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::add] add to id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id24 New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] calling make on New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f46, $f47, $f222, $f223, $f224, $f225, $f226, $f227}
[entry::chc] childId : id1, mapToS : $f1
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id16, mapToS : $f22
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f46 to varTypes
[entry::chc] childId : id1, mapToS : $f2
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
    ($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
     - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f23
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f47 to varTypes
[entry::chc] childId : id16, mapToS : $f24
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f222 to varTypes
[entry::chc] childId : id16, mapToS : $f25
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f223 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f223 to varTypes
[entry::chc] childId : id16, mapToS : $f26
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f224 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f224 to varTypes
[entry::chc] childId : id16, mapToS : $f27
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
    ($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
     - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
    
[entry::chc] adding $f225 to varTypes
[entry::chc] childId : id21, mapToS : $f37
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f225 to varTypes
[entry::chc] childId : id21, mapToS : $f35
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f226 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f226 to varTypes
[entry::chc] childId : id21, mapToS : $f36
[entry::chc] childEclass : 
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    
[entry::chc] adding $f227 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f227 to varTypes
[entry::chc] aggregateVarType for New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
[entry::chc] get {$f227: Int, $f46: Int, $f47: Int, $f223: Node, $f222: Int, $f224: Node, $f225: Int, $f226: Int}
[entry::chc] calling merge to id24
[entry::chc] dump from merge c 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] x CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f227: Int, $f46: Int, $f47: Int, $f223: Node, $f222: Int, $f224: Node, $f225: Int, $f226: Int} }
[entry::chc] eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f185: Int, $f55: Node, $f147: Int, $f183: Node, $f144: Node, $f182: Int, $f167: Int, $f46: Int, $f204: Node, $f164: Node, $f207: Int, $f187: Int, $f206: Int, $f163: Node, $f143: Node, $f166: Int, $f142: Int, $f205: Int, $f184: Node, $f162: Int, $f203: Node, $f57: Int, $f202: Int, $f56: Node, $f47: Int, $f59: Int, $f165: Int, $f58: Int, $f145: Int, $f146: Int, $f186: Int, $f54: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] eclassSlots {$f183, $f54, $f205, $f146, $f227, $f142, $f223, $f46, $f164, $f186, $f57, $f182, $f204, $f145, $f167, $f226, $f222, $f163, $f56, $f185, $f207, $f203, $f144, $f225, $f166, $f59, $f162, $f184, $f55, $f206, $f147, $f202, $f143, $f165, $f47, $f187, $f58, $f224}
[entry::chc] result varTypes {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int}
[slotted_egraphs::egraph] updating data for id24
[slotted_egraphs::egraph::rebuild] end of handle_pending id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id25
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f60, $f61}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f60 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f61 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f61 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
[entry::chc] get {$f60: Int, $f61: Int}
[entry::chc] calling merge to id25
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f61: Int, $f60: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[entry::chc] eclassSlots {$f61, $f60}
[entry::chc] result varTypes {$f60: Int, $f61: Int}
[slotted_egraphs::egraph] updating data for id25
[slotted_egraphs::egraph::rebuild] end of handle_pending id25: ($f60 -> $f60, $f61 -> $f61)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $f106, $f10 -> $f107)), AppliedId(id24: ($f46 -> $f106, $f47 -> $f107))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $f106, $1 -> $f107))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $f106, $f10 -> $f107)), AppliedId(id24: ($f46 -> $f106, $f47 -> $f107))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $f106, $1 -> $f107))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id25: ($f60 -> $f106, $f61 -> $f107)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id25: ($f60 -> $f106, $f61 -> $f107)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $f106, $f10 -> $f107)), AppliedId(id24: ($f46 -> $f106, $f47 -> $f107))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $f106, $1 -> $f107))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id24: ($f46 -> $f106, $f47 -> $f107)), AppliedId(id10: ($f9 -> $f106, $f10 -> $f107))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))]), ($0 -> $f106, $1 -> $f107))
[entry::chc] calling make on Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f228, $f229}
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f228 to varTypes
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f228 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f229 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f229 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
[entry::chc] get {$f228: Int, $f229: Int}
[slotted_egraphs::egraph::add] classes insert id31
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id31
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::add] remove from id31 Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))])
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id31 Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] calling make on Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f228, $f229}
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f228 to varTypes
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f228 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f229 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f229 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
[entry::chc] get {$f228: Int, $f229: Int}
[entry::chc] calling merge to id31
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] eclassSlots {$f228, $f229}
[entry::chc] result varTypes {$f228: Int, $f229: Int}
[slotted_egraphs::egraph] updating data for id31
[slotted_egraphs::egraph::rebuild] end of handle_pending id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id25: ($f60 -> $f106, $f61 -> $f107)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::union] r: id31: ($f228 -> $f106, $f229 -> $f107)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::union] Call move_to id25: ($f60 -> $f106, $f61 -> $f107), id31: ($f228 -> $f106, $f229 -> $f107)
[slotted_egraphs::egraph::union] analysis_from CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] calling merge to id31
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] eclassSlots {$f228, $f229}
[entry::chc] result varTypes {$f228: Int, $f229: Int}
[slotted_egraphs::egraph::union] old_analysis_to CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
[slotted_egraphs::egraph::union] new_analysis_to CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
[slotted_egraphs::egraph] updating data for id31
[slotted_egraphs::egraph::union] before compose fresh from 
    CHCData { predNames: {}, varTypes: {$f60: Int, $f61: Int} }
    ($f60, $f61):>> Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
     - Compose([AppliedId(id10: ($f9 -> $f60, $f10 -> $f61)), AppliedId(id24: ($f46 -> $f60, $f47 -> $f61))])
    
[slotted_egraphs::egraph::union] before compose fresh to 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::add] remove from id25 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::union] adding Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]) to self.pending
[slotted_egraphs::egraph::union] after compose fresh from 
     Empty Eclass
[slotted_egraphs::egraph::union] after compose fresh to 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::rebuild] begin of handle_pending id31
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::add] remove from id31 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::add] add to id31 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id31 Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] calling make on Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f228, $f229}
[entry::chc] childId : id10, mapToS : $f9
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f228 to varTypes
[entry::chc] childId : id24, mapToS : $f46
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f228 to varTypes
[entry::chc] childId : id10, mapToS : $f10
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
    ($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
     - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
     - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
    
[entry::chc] adding $f229 to varTypes
[entry::chc] childId : id24, mapToS : $f47
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc] adding $f229 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
[entry::chc] get {$f228: Int, $f229: Int}
[entry::chc] calling merge to id31
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f228: Int, $f229: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc] eclassSlots {$f228, $f229}
[entry::chc] result varTypes {$f229: Int, $f228: Int}
[slotted_egraphs::egraph] updating data for id31
[slotted_egraphs::egraph::rebuild] end of handle_pending id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[entry::chc::rewrite] define found [{"cond": id16: ($f22 -> $f120, $f23 -> $f121, $f24 -> $f122, $f25 -> $f123, $f26 -> $f124, $f27 -> $f125), "star_1_1": id18: ($f30 -> $f124, $f31 -> $f126), "star_1_0": id18: ($f30 -> $f123, $f31 -> $f127), "syntax": id1: ($f1 -> $f120, $f2 -> $f121), "star_1_2": id21: ($f35 -> $f127, $f36 -> $f126, $f37 -> $f125)}]
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f120, $f2 -> $f121), id16: ($f22 -> $f120, $f23 -> $f121, $f24 -> $f122, $f25 -> $f123, $f26 -> $f124, $f27 -> $f125), [AppliedId(id18: ($f30 -> $f123, $f31 -> $f127)), AppliedId(id18: ($f30 -> $f124, $f31 -> $f126)), AppliedId(id21: ($f35 -> $f127, $f36 -> $f126, $f37 -> $f125))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f120, $1 -> $f121, $2 -> $f122, $3 -> $f123, $4 -> $f124, $5 -> $f125, $6 -> $f127, $7 -> $f126))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc::rewrite] subst = {
        "cond": id16: ($f22 -> $f120, $f23 -> $f121, $f24 -> $f122, $f25 -> $f123, $f26 -> $f124, $f27 -> $f125),
        "star_1_1": id18: ($f30 -> $f124, $f31 -> $f126),
        "star_1_0": id18: ($f30 -> $f123, $f31 -> $f127),
        "syntax": id1: ($f1 -> $f120, $f2 -> $f121),
        "star_1_2": id21: ($f35 -> $f127, $f36 -> $f126, $f37 -> $f125),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
[entry::chc::rewrite] appId.slots {$f123, $f127}
[entry::chc::rewrite] appId.slots {$f124, $f126}
[entry::chc::rewrite] appId.slots {$f125, $f126, $f127}
[entry::chc::rewrite] mergeVarTypes = {
        $f125: Int,
        $f127: Int,
        $f123: Node,
        $f126: Int,
        $f124: Node,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f127: [
            0,
            2,
        ],
        $f124: [
            1,
        ],
        $f125: [
            2,
        ],
        $f123: [
            0,
        ],
        $f126: [
            1,
            2,
        ],
    }
[entry::chc::rewrite] var = $f127
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f124
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f125
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f123
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f126
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f124)"
[slotted_egraphs::parse] from (new (pred <(node $f124)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f124), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f124)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f124)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f124))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f124)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f124)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f124))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f124)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f124))
[entry::chc] calling make on PredSyntax([id11: ($f11 -> $f230)])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f230}
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f230 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id11: ($f11 -> $f230)])
[entry::chc] get {$f230: Node}
[slotted_egraphs::egraph::add] classes insert id32
[slotted_egraphs::egraph::add] add to id32 PredSyntax([id11: ($f11 -> $0)])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id32
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[slotted_egraphs::egraph::add] remove from id32 PredSyntax([id11: ($f11 -> $0)])
[slotted_egraphs::egraph::add] add to id32 PredSyntax([id11: ($f11 -> $0)])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id32 PredSyntax([id11: ($f11 -> $0)])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[entry::chc] calling make on PredSyntax([id11: ($f11 -> $0)])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f230}
[entry::chc] childId : id11, mapToS : $f11
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f11: Node} }
    ($f11):>> Node($f11)
     - Node($f11)
    
[entry::chc] adding $f230 to varTypes
[entry::chc] aggregateVarType for PredSyntax([id11: ($f11 -> $f230)])
[entry::chc] get {$f230: Node}
[entry::chc] calling merge to id32
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f230: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f230: Node} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[entry::chc] eclassSlots {$f230}
[entry::chc] result varTypes {$f230: Node}
[slotted_egraphs::egraph] updating data for id32
[slotted_egraphs::egraph::rebuild] end of handle_pending id32: ($f230 -> $f230)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[slotted_egraphs::egraph::add] classes insert id33
[slotted_egraphs::egraph::add] add to id33 True
[slotted_egraphs::egraph::rebuild] begin of handle_pending id33
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[slotted_egraphs::egraph::add] remove from id33 True
[slotted_egraphs::egraph::add] add to id33 True
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[slotted_egraphs::egraph::rebuild] from update_analysis id33 True
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[entry::chc] calling make on True
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {}
[entry::chc] aggregateVarType for True
[entry::chc] get {}
[entry::chc] calling merge to id33
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[entry::chc] x CHCData { predNames: {}, varTypes: {} }
[entry::chc] y CHCData { predNames: {}, varTypes: {} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[entry::chc] eclassSlots {}
[entry::chc] result varTypes {}
[slotted_egraphs::egraph] updating data for id33
[slotted_egraphs::egraph::rebuild] end of handle_pending id33: ()
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {} }
    ():>> True
     - True
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f124), id33: (), [AppliedId(id18: ($f30 -> $f124, $f31 -> $f126))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f124, $1 -> $f126))
[entry::chc] calling make on New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f231, $f232}
[entry::chc] childId : id32, mapToS : $f230
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[entry::chc] adding $f231 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f231 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f232 to varTypes
[entry::chc] aggregateVarType for New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
[entry::chc] get {$f232: Int, $f231: Node}
[slotted_egraphs::egraph::add] classes insert id34
[slotted_egraphs::egraph::add] add to id34 New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id34
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f232: Int, $f231: Node} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[slotted_egraphs::egraph::add] remove from id34 New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))])
[slotted_egraphs::egraph::add] add to id34 New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f232: Int, $f231: Node} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id34 New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f232: Int, $f231: Node} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc] calling make on New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f231, $f232}
[entry::chc] childId : id32, mapToS : $f230
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f230: Node} }
    ($f230):>> PredSyntax([id11: ($f11 -> $f230)])
     - PredSyntax([id11: ($f11 -> $f230)])
    
[entry::chc] adding $f231 to varTypes
[entry::chc] childId : id18, mapToS : $f30
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f231 to varTypes
[entry::chc] childId : id18, mapToS : $f31
[entry::chc] childEclass : 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    
[entry::chc] adding $f232 to varTypes
[entry::chc] aggregateVarType for New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
[entry::chc] get {$f231: Node, $f232: Int}
[entry::chc] calling merge to id34
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f232: Int, $f231: Node} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f232: Int, $f231: Node} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f232: Int, $f231: Node} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc] eclassSlots {$f231, $f232}
[entry::chc] result varTypes {$f231: Node, $f232: Int}
[slotted_egraphs::egraph] updating data for id34
[slotted_egraphs::egraph::rebuild] end of handle_pending id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f124, $f232 -> $f126))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f124, $1 -> $f126))
[entry::chc] calling make on Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
[entry::chc] aggregateVarType
[entry::chc] slots: {$f233, $f234}
[entry::chc] childId : id34, mapToS : $f231
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc] adding $f233 to varTypes
[entry::chc] childId : id34, mapToS : $f232
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc] adding $f234 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
[entry::chc] get {$f233: Node, $f234: Int}
[slotted_egraphs::egraph::add] classes insert id35
[slotted_egraphs::egraph::add] add to id35 Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))])
[slotted_egraphs::egraph::rebuild] begin of handle_pending id35
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[slotted_egraphs::egraph::add] remove from id35 Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))])
[slotted_egraphs::egraph::add] add to id35 Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))])
[slotted_egraphs::egraph::rebuild] Eclass 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[slotted_egraphs::egraph::rebuild] from update_analysis id35 Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))])
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[entry::chc] calling make on Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))])
[entry::chc] aggregateVarType
[entry::chc] exists in egraph
[entry::chc] slots: {$f233, $f234}
[entry::chc] childId : id34, mapToS : $f231
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc] adding $f233 to varTypes
[entry::chc] childId : id34, mapToS : $f232
[entry::chc] childEclass : 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc] adding $f234 to varTypes
[entry::chc] aggregateVarType for Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
[entry::chc] get {$f233: Node, $f234: Int}
[entry::chc] calling merge to id35
[entry::chc] dump from merge c 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[entry::chc] x CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
[entry::chc] y CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
[entry::chc] eclass 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[entry::chc] eclassSlots {$f234, $f233}
[entry::chc] result varTypes {$f233: Node, $f234: Int}
[slotted_egraphs::egraph] updating data for id35
[slotted_egraphs::egraph::rebuild] end of handle_pending id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::egraph::rebuild] 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[entry::chc::rewrite] define new id35: ($f233 -> $f124, $f234 -> $f126)
[entry::chc::rewrite] nonBasicVarStr "(node $f123)"
[slotted_egraphs::parse] from (new (pred <(node $f123)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f123), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f123)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f123)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f123))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f123)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f123)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f123))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f123)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f123))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f123), id33: (), [AppliedId(id18: ($f30 -> $f123, $f31 -> $f127))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f123, $1 -> $f127))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f123, $f232 -> $f127))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f123, $1 -> $f127))
[entry::chc::rewrite] define new id35: ($f233 -> $f123, $f234 -> $f127)
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose (new ?syntax1 true (compose *1) *2) *3)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f241, $f25 -> $f242, $f26 -> $f243, $f27 -> $f244), [AppliedId(id18: ($f30 -> $f243, $f31 -> $f245)), AppliedId(id21: ($f35 -> $f246, $f36 -> $f245, $f37 -> $f244)), AppliedId(id18: ($f30 -> $f242, $f31 -> $f246))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f253, $f25 -> $f254, $f26 -> $f255, $f27 -> $f256), [AppliedId(id18: ($f30 -> $f254, $f31 -> $f257)), AppliedId(id21: ($f35 -> $f257, $f36 -> $f258, $f37 -> $f256)), AppliedId(id18: ($f30 -> $f255, $f31 -> $f258))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f265, $f25 -> $f266, $f26 -> $f267, $f27 -> $f268), [AppliedId(id18: ($f30 -> $f266, $f31 -> $f269)), AppliedId(id18: ($f30 -> $f267, $f31 -> $f270)), AppliedId(id21: ($f35 -> $f269, $f36 -> $f270, $f37 -> $f268))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f277, $f25 -> $f278, $f26 -> $f279, $f27 -> $f280), [AppliedId(id21: ($f35 -> $f281, $f36 -> $f282, $f37 -> $f280)), AppliedId(id18: ($f30 -> $f278, $f31 -> $f281)), AppliedId(id18: ($f30 -> $f279, $f31 -> $f282))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f289, $f25 -> $f290, $f26 -> $f291, $f27 -> $f292), [AppliedId(id21: ($f35 -> $f293, $f36 -> $f294, $f37 -> $f292)), AppliedId(id18: ($f30 -> $f291, $f31 -> $f294)), AppliedId(id18: ($f30 -> $f290, $f31 -> $f293))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f301, $f25 -> $f302, $f26 -> $f303, $f27 -> $f304), [AppliedId(id18: ($f30 -> $f303, $f31 -> $f305)), AppliedId(id18: ($f30 -> $f302, $f31 -> $f306)), AppliedId(id21: ($f35 -> $f306, $f36 -> $f305, $f37 -> $f304))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f241, $f25 -> $f242, $f26 -> $f243, $f27 -> $f244), [AppliedId(id18: ($f30 -> $f243, $f31 -> $f245)), AppliedId(id21: ($f35 -> $f246, $f36 -> $f245, $f37 -> $f244)), AppliedId(id18: ($f30 -> $f242, $f31 -> $f246))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f253, $f25 -> $f254, $f26 -> $f255, $f27 -> $f256), [AppliedId(id18: ($f30 -> $f254, $f31 -> $f257)), AppliedId(id21: ($f35 -> $f257, $f36 -> $f258, $f37 -> $f256)), AppliedId(id18: ($f30 -> $f255, $f31 -> $f258))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f265, $f25 -> $f266, $f26 -> $f267, $f27 -> $f268), [AppliedId(id18: ($f30 -> $f266, $f31 -> $f269)), AppliedId(id18: ($f30 -> $f267, $f31 -> $f270)), AppliedId(id21: ($f35 -> $f269, $f36 -> $f270, $f37 -> $f268))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f277, $f25 -> $f278, $f26 -> $f279, $f27 -> $f280), [AppliedId(id21: ($f35 -> $f281, $f36 -> $f282, $f37 -> $f280)), AppliedId(id18: ($f30 -> $f278, $f31 -> $f281)), AppliedId(id18: ($f30 -> $f279, $f31 -> $f282))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f289, $f25 -> $f290, $f26 -> $f291, $f27 -> $f292), [AppliedId(id21: ($f35 -> $f293, $f36 -> $f294, $f37 -> $f292)), AppliedId(id18: ($f30 -> $f291, $f31 -> $f294)), AppliedId(id18: ($f30 -> $f290, $f31 -> $f293))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f301, $f25 -> $f302, $f26 -> $f303, $f27 -> $f304), [AppliedId(id18: ($f30 -> $f303, $f31 -> $f305)), AppliedId(id18: ($f30 -> $f302, $f31 -> $f306)), AppliedId(id21: ($f35 -> $f306, $f36 -> $f305, $f37 -> $f304))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id31, [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id10: ($f9 -> $f228, $f10 -> $f229), id24: ($f46 -> $f228, $f47 -> $f229)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id10: ($f9 -> $f228, $f10 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f228, $f10 -> $f229)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f228, $f2 -> $f229), id6: ($f5 -> $f228, $f6 -> $f229), []), Interface(id8: (), id1: ($f1 -> $f228, $f2 -> $f229), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id10: ($f9 -> $f228, $f10 -> $f229)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f228, $f2 -> $f229), id6: ($f5 -> $f228, $f6 -> $f229), []), Interface(id8: (), id1: ($f1 -> $f228, $f2 -> $f229), id9: ())]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f228, $f2 -> $f229), id6: ($f5 -> $f228, $f6 -> $f229), [])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id24: ($f46 -> $f228, $f47 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id10
[slotted_egraphs::rewrite::ematch] 	 1) id24
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id24: ($f46 -> $f228, $f47 -> $f229), id10: ($f9 -> $f228, $f10 -> $f229)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id24: ($f46 -> $f228, $f47 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern (new ?syntax1 true (compose *1) *2) or ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f228, $f47 -> $f229)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f228, $f2 -> $f229), id23: ()), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f313, $f25 -> $f314, $f26 -> $f315, $f27 -> $f316), [AppliedId(id18: ($f30 -> $f315, $f31 -> $f317)), AppliedId(id21: ($f35 -> $f318, $f36 -> $f317, $f37 -> $f316)), AppliedId(id18: ($f30 -> $f314, $f31 -> $f318))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f325, $f25 -> $f326, $f26 -> $f327, $f27 -> $f328), [AppliedId(id18: ($f30 -> $f326, $f31 -> $f329)), AppliedId(id21: ($f35 -> $f329, $f36 -> $f330, $f37 -> $f328)), AppliedId(id18: ($f30 -> $f327, $f31 -> $f330))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f337, $f25 -> $f338, $f26 -> $f339, $f27 -> $f340), [AppliedId(id18: ($f30 -> $f338, $f31 -> $f341)), AppliedId(id18: ($f30 -> $f339, $f31 -> $f342)), AppliedId(id21: ($f35 -> $f341, $f36 -> $f342, $f37 -> $f340))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f349, $f25 -> $f350, $f26 -> $f351, $f27 -> $f352), [AppliedId(id21: ($f35 -> $f353, $f36 -> $f354, $f37 -> $f352)), AppliedId(id18: ($f30 -> $f350, $f31 -> $f353)), AppliedId(id18: ($f30 -> $f351, $f31 -> $f354))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f361, $f25 -> $f362, $f26 -> $f363, $f27 -> $f364), [AppliedId(id21: ($f35 -> $f365, $f36 -> $f366, $f37 -> $f364)), AppliedId(id18: ($f30 -> $f363, $f31 -> $f366)), AppliedId(id18: ($f30 -> $f362, $f31 -> $f365))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f373, $f25 -> $f374, $f26 -> $f375, $f27 -> $f376), [AppliedId(id18: ($f30 -> $f375, $f31 -> $f377)), AppliedId(id18: ($f30 -> $f374, $f31 -> $f378)), AppliedId(id21: ($f35 -> $f378, $f36 -> $f377, $f37 -> $f376))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax1 true (compose *1) *2) in id24: ($f46 -> $f228, $f47 -> $f229)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f228, $f2 -> $f229), id23: ()), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f313, $f25 -> $f314, $f26 -> $f315, $f27 -> $f316), [AppliedId(id18: ($f30 -> $f315, $f31 -> $f317)), AppliedId(id21: ($f35 -> $f318, $f36 -> $f317, $f37 -> $f316)), AppliedId(id18: ($f30 -> $f314, $f31 -> $f318))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f325, $f25 -> $f326, $f26 -> $f327, $f27 -> $f328), [AppliedId(id18: ($f30 -> $f326, $f31 -> $f329)), AppliedId(id21: ($f35 -> $f329, $f36 -> $f330, $f37 -> $f328)), AppliedId(id18: ($f30 -> $f327, $f31 -> $f330))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f337, $f25 -> $f338, $f26 -> $f339, $f27 -> $f340), [AppliedId(id18: ($f30 -> $f338, $f31 -> $f341)), AppliedId(id18: ($f30 -> $f339, $f31 -> $f342)), AppliedId(id21: ($f35 -> $f341, $f36 -> $f342, $f37 -> $f340))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f349, $f25 -> $f350, $f26 -> $f351, $f27 -> $f352), [AppliedId(id21: ($f35 -> $f353, $f36 -> $f354, $f37 -> $f352)), AppliedId(id18: ($f30 -> $f350, $f31 -> $f353)), AppliedId(id18: ($f30 -> $f351, $f31 -> $f354))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f361, $f25 -> $f362, $f26 -> $f363, $f27 -> $f364), [AppliedId(id21: ($f35 -> $f365, $f36 -> $f366, $f37 -> $f364)), AppliedId(id18: ($f30 -> $f363, $f31 -> $f366)), AppliedId(id18: ($f30 -> $f362, $f31 -> $f365))]), New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f373, $f25 -> $f374, $f26 -> $f375, $f27 -> $f376), [AppliedId(id18: ($f30 -> $f375, $f31 -> $f377)), AppliedId(id18: ($f30 -> $f374, $f31 -> $f378)), AppliedId(id21: ($f35 -> $f378, $f36 -> $f377, $f37 -> $f376))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f313, $f25 -> $f314, $f26 -> $f315, $f27 -> $f316), [AppliedId(id18: ($f30 -> $f315, $f31 -> $f317)), AppliedId(id21: ($f35 -> $f318, $f36 -> $f317, $f37 -> $f316)), AppliedId(id18: ($f30 -> $f314, $f31 -> $f318))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f313, $f25 -> $f314, $f26 -> $f315, $f27 -> $f316), id18: ($f30 -> $f315, $f31 -> $f317), id21: ($f35 -> $f318, $f36 -> $f317, $f37 -> $f316), id18: ($f30 -> $f314, $f31 -> $f318)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f228, $f2 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f228, $f2 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f228, $f2 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f228, $f2 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f313, $f25 -> $f314, $f26 -> $f315, $f27 -> $f316)
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f313, $f25 -> $f314, $f26 -> $f315, $f27 -> $f316)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f228, $f16 -> $f313, $f17 -> $f314, $f18 -> $f315), id15: ($f20 -> $f229, $f21 -> $f316)])]
[slotted_egraphs::rewrite::ematch] Search true in id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f313, $f25 -> $f314, $f26 -> $f315, $f27 -> $f316)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f228, $f16 -> $f313, $f17 -> $f314, $f18 -> $f315), id15: ($f20 -> $f229, $f21 -> $f316)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f315, $f31 -> $f317)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f318, $f36 -> $f317, $f37 -> $f316)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f314, $f31 -> $f318)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id21
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f325, $f25 -> $f326, $f26 -> $f327, $f27 -> $f328), [AppliedId(id18: ($f30 -> $f326, $f31 -> $f329)), AppliedId(id21: ($f35 -> $f329, $f36 -> $f330, $f37 -> $f328)), AppliedId(id18: ($f30 -> $f327, $f31 -> $f330))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f325, $f25 -> $f326, $f26 -> $f327, $f27 -> $f328), id18: ($f30 -> $f326, $f31 -> $f329), id21: ($f35 -> $f329, $f36 -> $f330, $f37 -> $f328), id18: ($f30 -> $f327, $f31 -> $f330)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f228, $f2 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f228, $f2 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f228, $f2 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f228, $f2 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f325, $f25 -> $f326, $f26 -> $f327, $f27 -> $f328)
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f325, $f25 -> $f326, $f26 -> $f327, $f27 -> $f328)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f228, $f16 -> $f325, $f17 -> $f326, $f18 -> $f327), id15: ($f20 -> $f229, $f21 -> $f328)])]
[slotted_egraphs::rewrite::ematch] Search true in id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f325, $f25 -> $f326, $f26 -> $f327, $f27 -> $f328)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f228, $f16 -> $f325, $f17 -> $f326, $f18 -> $f327), id15: ($f20 -> $f229, $f21 -> $f328)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f326, $f31 -> $f329)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f329, $f36 -> $f330, $f37 -> $f328)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f327, $f31 -> $f330)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id21
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f337, $f25 -> $f338, $f26 -> $f339, $f27 -> $f340), [AppliedId(id18: ($f30 -> $f338, $f31 -> $f341)), AppliedId(id18: ($f30 -> $f339, $f31 -> $f342)), AppliedId(id21: ($f35 -> $f341, $f36 -> $f342, $f37 -> $f340))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f337, $f25 -> $f338, $f26 -> $f339, $f27 -> $f340), id18: ($f30 -> $f338, $f31 -> $f341), id18: ($f30 -> $f339, $f31 -> $f342), id21: ($f35 -> $f341, $f36 -> $f342, $f37 -> $f340)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f228, $f2 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f228, $f2 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f228, $f2 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f228, $f2 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f337, $f25 -> $f338, $f26 -> $f339, $f27 -> $f340)
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f337, $f25 -> $f338, $f26 -> $f339, $f27 -> $f340)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f228, $f16 -> $f337, $f17 -> $f338, $f18 -> $f339), id15: ($f20 -> $f229, $f21 -> $f340)])]
[slotted_egraphs::rewrite::ematch] Search true in id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f337, $f25 -> $f338, $f26 -> $f339, $f27 -> $f340)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f228, $f16 -> $f337, $f17 -> $f338, $f18 -> $f339), id15: ($f20 -> $f229, $f21 -> $f340)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f338, $f31 -> $f341)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f339, $f31 -> $f342)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f341, $f36 -> $f342, $f37 -> $f340)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f349, $f25 -> $f350, $f26 -> $f351, $f27 -> $f352), [AppliedId(id21: ($f35 -> $f353, $f36 -> $f354, $f37 -> $f352)), AppliedId(id18: ($f30 -> $f350, $f31 -> $f353)), AppliedId(id18: ($f30 -> $f351, $f31 -> $f354))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f349, $f25 -> $f350, $f26 -> $f351, $f27 -> $f352), id21: ($f35 -> $f353, $f36 -> $f354, $f37 -> $f352), id18: ($f30 -> $f350, $f31 -> $f353), id18: ($f30 -> $f351, $f31 -> $f354)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f228, $f2 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f228, $f2 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f228, $f2 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f228, $f2 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f349, $f25 -> $f350, $f26 -> $f351, $f27 -> $f352)
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f349, $f25 -> $f350, $f26 -> $f351, $f27 -> $f352)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f228, $f16 -> $f349, $f17 -> $f350, $f18 -> $f351), id15: ($f20 -> $f229, $f21 -> $f352)])]
[slotted_egraphs::rewrite::ematch] Search true in id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f349, $f25 -> $f350, $f26 -> $f351, $f27 -> $f352)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f228, $f16 -> $f349, $f17 -> $f350, $f18 -> $f351), id15: ($f20 -> $f229, $f21 -> $f352)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f353, $f36 -> $f354, $f37 -> $f352)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f350, $f31 -> $f353)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f351, $f31 -> $f354)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id21
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f361, $f25 -> $f362, $f26 -> $f363, $f27 -> $f364), [AppliedId(id21: ($f35 -> $f365, $f36 -> $f366, $f37 -> $f364)), AppliedId(id18: ($f30 -> $f363, $f31 -> $f366)), AppliedId(id18: ($f30 -> $f362, $f31 -> $f365))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f361, $f25 -> $f362, $f26 -> $f363, $f27 -> $f364), id21: ($f35 -> $f365, $f36 -> $f366, $f37 -> $f364), id18: ($f30 -> $f363, $f31 -> $f366), id18: ($f30 -> $f362, $f31 -> $f365)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f228, $f2 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f228, $f2 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f228, $f2 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f228, $f2 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f361, $f25 -> $f362, $f26 -> $f363, $f27 -> $f364)
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f361, $f25 -> $f362, $f26 -> $f363, $f27 -> $f364)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f228, $f16 -> $f361, $f17 -> $f362, $f18 -> $f363), id15: ($f20 -> $f229, $f21 -> $f364)])]
[slotted_egraphs::rewrite::ematch] Search true in id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f361, $f25 -> $f362, $f26 -> $f363, $f27 -> $f364)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f228, $f16 -> $f361, $f17 -> $f362, $f18 -> $f363), id15: ($f20 -> $f229, $f21 -> $f364)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f365, $f36 -> $f366, $f37 -> $f364)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f363, $f31 -> $f366)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f362, $f31 -> $f365)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id21
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f373, $f25 -> $f374, $f26 -> $f375, $f27 -> $f376), [AppliedId(id18: ($f30 -> $f375, $f31 -> $f377)), AppliedId(id18: ($f30 -> $f374, $f31 -> $f378)), AppliedId(id21: ($f35 -> $f378, $f36 -> $f377, $f37 -> $f376))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f228, $f2 -> $f229), id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f373, $f25 -> $f374, $f26 -> $f375, $f27 -> $f376), id18: ($f30 -> $f375, $f31 -> $f377), id18: ($f30 -> $f374, $f31 -> $f378), id21: ($f35 -> $f378, $f36 -> $f377, $f37 -> $f376)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f228, $f2 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax1 or PVar("syntax1")
[slotted_egraphs::rewrite::ematch] insert syntax1 -> id1: ($f1 -> $f228, $f2 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax1 in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax1": id1: ($f1 -> $f228, $f2 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax1": id1: ($f1 -> $f228, $f2 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f373, $f25 -> $f374, $f26 -> $f375, $f27 -> $f376)
[slotted_egraphs::rewrite::ematch] childPattern true or ENode(True, [])
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f373, $f25 -> $f374, $f26 -> $f375, $f27 -> $f376)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f228, $f16 -> $f373, $f17 -> $f374, $f18 -> $f375), id15: ($f20 -> $f229, $f21 -> $f376)])]
[slotted_egraphs::rewrite::ematch] Search true in id16: ($f22 -> $f228, $f23 -> $f229, $f24 -> $f373, $f25 -> $f374, $f26 -> $f375, $f27 -> $f376)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(True, [])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f228, $f16 -> $f373, $f17 -> $f374, $f18 -> $f375), id15: ($f20 -> $f229, $f21 -> $f376)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f375, $f31 -> $f377)
[slotted_egraphs::rewrite::ematch] childPattern (compose *1) or ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f374, $f31 -> $f378)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_0 or PVar("star_2_0")
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f378, $f36 -> $f377, $f37 -> $f376)
[slotted_egraphs::rewrite::ematch] childPattern ?star_2_1 or PVar("star_2_1")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax1
[slotted_egraphs::rewrite::ematch] 	 1) true
[slotted_egraphs::rewrite::ematch] 	 2) (compose *1)
[slotted_egraphs::rewrite::ematch] 	 3) *2
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::rewrite::ematch] matchEnode with acc []
[slotted_egraphs::rewrite::ematch] eclassId id10: ($f9 -> $f228, $f10 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?star_3_0 or PVar("star_3_0")
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) (new ?syntax1 true (compose *1) *2)
[slotted_egraphs::rewrite::ematch] 	 1) *3
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id24
[slotted_egraphs::rewrite::ematch] 	 1) id10
[slotted_egraphs::rewrite::ematch] acc []
[slotted_egraphs::egraph] input enodes_applied id32: ($f230 -> $f230)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id32: ($f230 -> $f230)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id32, [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id33: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id33: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id33, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::egraph] enodes_applied res [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id34, [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] Search (compose (new ?syntax1 true (compose *1) *2) *3) in id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([AppliedId(id0: ()), Star(3)]), [ENode(New(id0: (), id0: (), [AppliedId(id0: ()), Star(2)]), [PVar("syntax1"), ENode(True, []), ENode(Compose([Star(1)]), [Star(1)]), Star(2)]), Star(3)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id35, [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id0: ()), Star(3)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
[slotted_egraphs::rewrite::ematch] continue at shape diff Compose([AppliedId(id0: ()), Star(3)]) != Compose([AppliedId(id0: ())])
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), [AppliedId(id18: ($f30 -> $f387, $f31 -> $f389)), AppliedId(id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388)), AppliedId(id18: ($f30 -> $f386, $f31 -> $f390))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), [AppliedId(id18: ($f30 -> $f398, $f31 -> $f401)), AppliedId(id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400)), AppliedId(id18: ($f30 -> $f399, $f31 -> $f402))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), [AppliedId(id18: ($f30 -> $f410, $f31 -> $f413)), AppliedId(id18: ($f30 -> $f411, $f31 -> $f414)), AppliedId(id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), [AppliedId(id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424)), AppliedId(id18: ($f30 -> $f422, $f31 -> $f425)), AppliedId(id18: ($f30 -> $f423, $f31 -> $f426))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), [AppliedId(id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436)), AppliedId(id18: ($f30 -> $f435, $f31 -> $f438)), AppliedId(id18: ($f30 -> $f434, $f31 -> $f437))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), [AppliedId(id18: ($f30 -> $f447, $f31 -> $f449)), AppliedId(id18: ($f30 -> $f446, $f31 -> $f450)), AppliedId(id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), [AppliedId(id18: ($f30 -> $f387, $f31 -> $f389)), AppliedId(id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388)), AppliedId(id18: ($f30 -> $f386, $f31 -> $f390))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), [AppliedId(id18: ($f30 -> $f398, $f31 -> $f401)), AppliedId(id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400)), AppliedId(id18: ($f30 -> $f399, $f31 -> $f402))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), [AppliedId(id18: ($f30 -> $f410, $f31 -> $f413)), AppliedId(id18: ($f30 -> $f411, $f31 -> $f414)), AppliedId(id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), [AppliedId(id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424)), AppliedId(id18: ($f30 -> $f422, $f31 -> $f425)), AppliedId(id18: ($f30 -> $f423, $f31 -> $f426))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), [AppliedId(id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436)), AppliedId(id18: ($f30 -> $f435, $f31 -> $f438)), AppliedId(id18: ($f30 -> $f434, $f31 -> $f437))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), [AppliedId(id18: ($f30 -> $f447, $f31 -> $f449)), AppliedId(id18: ($f30 -> $f446, $f31 -> $f450)), AppliedId(id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), [AppliedId(id18: ($f30 -> $f387, $f31 -> $f389)), AppliedId(id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388)), AppliedId(id18: ($f30 -> $f386, $f31 -> $f390))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), id18: ($f30 -> $f387, $f31 -> $f389), id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388), id18: ($f30 -> $f386, $f31 -> $f390)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f387, $f31 -> $f389)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f387, $f31 -> $f389) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388),
                "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), "star_1_1": id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388), "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388),
                "star_1_1": id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388),
                "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f386, $f31 -> $f390)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f386, $f31 -> $f390) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), "star_1_1": id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388), "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f386, $f31 -> $f390)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id21
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388),
                "star_1_1": id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388),
                "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f386, $f31 -> $f390),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), [AppliedId(id18: ($f30 -> $f398, $f31 -> $f401)), AppliedId(id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400)), AppliedId(id18: ($f30 -> $f399, $f31 -> $f402))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), id18: ($f30 -> $f398, $f31 -> $f401), id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400), id18: ($f30 -> $f399, $f31 -> $f402)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f398, $f31 -> $f401)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f398, $f31 -> $f401) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400),
                "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), "star_1_1": id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400), "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400),
                "star_1_1": id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400),
                "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f399, $f31 -> $f402)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f399, $f31 -> $f402) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), "star_1_1": id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400), "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f399, $f31 -> $f402)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id21
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400),
                "star_1_1": id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400),
                "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f399, $f31 -> $f402),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), [AppliedId(id18: ($f30 -> $f410, $f31 -> $f413)), AppliedId(id18: ($f30 -> $f411, $f31 -> $f414)), AppliedId(id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), id18: ($f30 -> $f410, $f31 -> $f413), id18: ($f30 -> $f411, $f31 -> $f414), id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f410, $f31 -> $f413)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f410, $f31 -> $f413) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412),
                "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f411, $f31 -> $f414)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f411, $f31 -> $f414) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), "star_1_1": id18: ($f30 -> $f411, $f31 -> $f414), "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412),
                "star_1_1": id18: ($f30 -> $f411, $f31 -> $f414),
                "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), "star_1_1": id18: ($f30 -> $f411, $f31 -> $f414), "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412),
                "star_1_1": id18: ($f30 -> $f411, $f31 -> $f414),
                "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), [AppliedId(id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424)), AppliedId(id18: ($f30 -> $f422, $f31 -> $f425)), AppliedId(id18: ($f30 -> $f423, $f31 -> $f426))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424), id18: ($f30 -> $f422, $f31 -> $f425), id18: ($f30 -> $f423, $f31 -> $f426)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424),
                "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f422, $f31 -> $f425)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f422, $f31 -> $f425) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), "star_1_1": id18: ($f30 -> $f422, $f31 -> $f425), "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424),
                "star_1_1": id18: ($f30 -> $f422, $f31 -> $f425),
                "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f423, $f31 -> $f426)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f423, $f31 -> $f426) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), "star_1_1": id18: ($f30 -> $f422, $f31 -> $f425), "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f423, $f31 -> $f426)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id21
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424),
                "star_1_1": id18: ($f30 -> $f422, $f31 -> $f425),
                "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f423, $f31 -> $f426),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), [AppliedId(id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436)), AppliedId(id18: ($f30 -> $f435, $f31 -> $f438)), AppliedId(id18: ($f30 -> $f434, $f31 -> $f437))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436), id18: ($f30 -> $f435, $f31 -> $f438), id18: ($f30 -> $f434, $f31 -> $f437)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436),
                "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f435, $f31 -> $f438)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f435, $f31 -> $f438) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), "star_1_1": id18: ($f30 -> $f435, $f31 -> $f438), "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436),
                "star_1_1": id18: ($f30 -> $f435, $f31 -> $f438),
                "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f434, $f31 -> $f437)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f434, $f31 -> $f437) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), "star_1_1": id18: ($f30 -> $f435, $f31 -> $f438), "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f434, $f31 -> $f437)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id21
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436),
                "star_1_1": id18: ($f30 -> $f435, $f31 -> $f438),
                "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f434, $f31 -> $f437),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), [AppliedId(id18: ($f30 -> $f447, $f31 -> $f449)), AppliedId(id18: ($f30 -> $f446, $f31 -> $f450)), AppliedId(id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), id18: ($f30 -> $f447, $f31 -> $f449), id18: ($f30 -> $f446, $f31 -> $f450), id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f447, $f31 -> $f449)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f447, $f31 -> $f449) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448),
                "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f446, $f31 -> $f450)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f446, $f31 -> $f450) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), "star_1_1": id18: ($f30 -> $f446, $f31 -> $f450), "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448),
                "star_1_1": id18: ($f30 -> $f446, $f31 -> $f450),
                "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), "star_1_1": id18: ($f30 -> $f446, $f31 -> $f450), "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448),
                "star_1_1": id18: ($f30 -> $f446, $f31 -> $f450),
                "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388), "star_1_1": id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388), "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f386, $f31 -> $f390)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400), "star_1_1": id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400), "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f399, $f31 -> $f402)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412), "star_1_1": id18: ($f30 -> $f411, $f31 -> $f414), "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424), "star_1_1": id18: ($f30 -> $f422, $f31 -> $f425), "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f423, $f31 -> $f426)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436), "star_1_1": id18: ($f30 -> $f435, $f31 -> $f438), "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f434, $f31 -> $f437)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448), "star_1_1": id18: ($f30 -> $f446, $f31 -> $f450), "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f385, $f25 -> $f386, $f26 -> $f387, $f27 -> $f388),
            "star_1_1": id21: ($f35 -> $f390, $f36 -> $f389, $f37 -> $f388),
            "star_1_0": id18: ($f30 -> $f387, $f31 -> $f389),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f386, $f31 -> $f390),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f397, $f25 -> $f398, $f26 -> $f399, $f27 -> $f400),
            "star_1_1": id21: ($f35 -> $f401, $f36 -> $f402, $f37 -> $f400),
            "star_1_0": id18: ($f30 -> $f398, $f31 -> $f401),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f399, $f31 -> $f402),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f409, $f25 -> $f410, $f26 -> $f411, $f27 -> $f412),
            "star_1_1": id18: ($f30 -> $f411, $f31 -> $f414),
            "star_1_0": id18: ($f30 -> $f410, $f31 -> $f413),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id21: ($f35 -> $f413, $f36 -> $f414, $f37 -> $f412),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f421, $f25 -> $f422, $f26 -> $f423, $f27 -> $f424),
            "star_1_1": id18: ($f30 -> $f422, $f31 -> $f425),
            "star_1_0": id21: ($f35 -> $f425, $f36 -> $f426, $f37 -> $f424),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f423, $f31 -> $f426),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f433, $f25 -> $f434, $f26 -> $f435, $f27 -> $f436),
            "star_1_1": id18: ($f30 -> $f435, $f31 -> $f438),
            "star_1_0": id21: ($f35 -> $f437, $f36 -> $f438, $f37 -> $f436),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f434, $f31 -> $f437),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f445, $f25 -> $f446, $f26 -> $f447, $f27 -> $f448),
            "star_1_1": id18: ($f30 -> $f446, $f31 -> $f450),
            "star_1_0": id18: ($f30 -> $f447, $f31 -> $f449),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id21: ($f35 -> $f450, $f36 -> $f449, $f37 -> $f448),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id31, [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id32: ($f230 -> $f230)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id32: ($f230 -> $f230)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id32, [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id33: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id33: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id33, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::egraph] enodes_applied res [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id34, [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id32: ($f230 -> $f231), id33: (), id18: ($f30 -> $f231, $f31 -> $f232)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id32: ($f230 -> $f231)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id32: ($f230 -> $f231) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id32
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id32: ($f230 -> $f231),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id33: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id33: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id33
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231), "cond": id33: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id32: ($f230 -> $f231),
                "cond": id33: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f231, $f31 -> $f232)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f231, $f31 -> $f232) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231), "cond": id33: (), "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id32
[slotted_egraphs::rewrite::ematch] 	 1) id33
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax": id32: ($f230 -> $f231),
                "cond": id33: (),
                "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231), "cond": id33: (), "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "syntax": id32: ($f230 -> $f231),
            "cond": id33: (),
            "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id35, [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (compose *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f507, $f25 -> $f508, $f26 -> $f509, $f27 -> $f510), [AppliedId(id18: ($f30 -> $f509, $f31 -> $f511)), AppliedId(id21: ($f35 -> $f512, $f36 -> $f511, $f37 -> $f510)), AppliedId(id18: ($f30 -> $f508, $f31 -> $f512))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f519, $f25 -> $f520, $f26 -> $f521, $f27 -> $f522), [AppliedId(id18: ($f30 -> $f520, $f31 -> $f523)), AppliedId(id21: ($f35 -> $f523, $f36 -> $f524, $f37 -> $f522)), AppliedId(id18: ($f30 -> $f521, $f31 -> $f524))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f531, $f25 -> $f532, $f26 -> $f533, $f27 -> $f534), [AppliedId(id18: ($f30 -> $f532, $f31 -> $f535)), AppliedId(id18: ($f30 -> $f533, $f31 -> $f536)), AppliedId(id21: ($f35 -> $f535, $f36 -> $f536, $f37 -> $f534))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f543, $f25 -> $f544, $f26 -> $f545, $f27 -> $f546), [AppliedId(id21: ($f35 -> $f547, $f36 -> $f548, $f37 -> $f546)), AppliedId(id18: ($f30 -> $f544, $f31 -> $f547)), AppliedId(id18: ($f30 -> $f545, $f31 -> $f548))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f555, $f25 -> $f556, $f26 -> $f557, $f27 -> $f558), [AppliedId(id21: ($f35 -> $f559, $f36 -> $f560, $f37 -> $f558)), AppliedId(id18: ($f30 -> $f557, $f31 -> $f560)), AppliedId(id18: ($f30 -> $f556, $f31 -> $f559))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f567, $f25 -> $f568, $f26 -> $f569, $f27 -> $f570), [AppliedId(id18: ($f30 -> $f569, $f31 -> $f571)), AppliedId(id18: ($f30 -> $f568, $f31 -> $f572)), AppliedId(id21: ($f35 -> $f572, $f36 -> $f571, $f37 -> $f570))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f507, $f25 -> $f508, $f26 -> $f509, $f27 -> $f510), [AppliedId(id18: ($f30 -> $f509, $f31 -> $f511)), AppliedId(id21: ($f35 -> $f512, $f36 -> $f511, $f37 -> $f510)), AppliedId(id18: ($f30 -> $f508, $f31 -> $f512))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f519, $f25 -> $f520, $f26 -> $f521, $f27 -> $f522), [AppliedId(id18: ($f30 -> $f520, $f31 -> $f523)), AppliedId(id21: ($f35 -> $f523, $f36 -> $f524, $f37 -> $f522)), AppliedId(id18: ($f30 -> $f521, $f31 -> $f524))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f531, $f25 -> $f532, $f26 -> $f533, $f27 -> $f534), [AppliedId(id18: ($f30 -> $f532, $f31 -> $f535)), AppliedId(id18: ($f30 -> $f533, $f31 -> $f536)), AppliedId(id21: ($f35 -> $f535, $f36 -> $f536, $f37 -> $f534))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f543, $f25 -> $f544, $f26 -> $f545, $f27 -> $f546), [AppliedId(id21: ($f35 -> $f547, $f36 -> $f548, $f37 -> $f546)), AppliedId(id18: ($f30 -> $f544, $f31 -> $f547)), AppliedId(id18: ($f30 -> $f545, $f31 -> $f548))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f555, $f25 -> $f556, $f26 -> $f557, $f27 -> $f558), [AppliedId(id21: ($f35 -> $f559, $f36 -> $f560, $f37 -> $f558)), AppliedId(id18: ($f30 -> $f557, $f31 -> $f560)), AppliedId(id18: ($f30 -> $f556, $f31 -> $f559))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f567, $f25 -> $f568, $f26 -> $f569, $f27 -> $f570), [AppliedId(id18: ($f30 -> $f569, $f31 -> $f571)), AppliedId(id18: ($f30 -> $f568, $f31 -> $f572)), AppliedId(id21: ($f35 -> $f572, $f36 -> $f571, $f37 -> $f570))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id31, [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id10: ($f9 -> $f228, $f10 -> $f229), id24: ($f46 -> $f228, $f47 -> $f229)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id10: ($f9 -> $f228, $f10 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id10: ($f9 -> $f228, $f10 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id10
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id10: ($f9 -> $f228, $f10 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id10: ($f9 -> $f228, $f10 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id24: ($f46 -> $f228, $f47 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id24: ($f46 -> $f228, $f47 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id24
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id24: ($f46 -> $f228, $f47 -> $f229), "star_1_0": id10: ($f9 -> $f228, $f10 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id10
[slotted_egraphs::rewrite::ematch] 	 1) id24
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id24: ($f46 -> $f228, $f47 -> $f229),
                "star_1_0": id10: ($f9 -> $f228, $f10 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id24: ($f46 -> $f228, $f47 -> $f229), id10: ($f9 -> $f228, $f10 -> $f229)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id24: ($f46 -> $f228, $f47 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id24: ($f46 -> $f228, $f47 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id24
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id24: ($f46 -> $f228, $f47 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "star_1_0": id24: ($f46 -> $f228, $f47 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id10: ($f9 -> $f228, $f10 -> $f229)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id10: ($f9 -> $f228, $f10 -> $f229) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id10
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id10: ($f9 -> $f228, $f10 -> $f229), "star_1_0": id24: ($f46 -> $f228, $f47 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id24
[slotted_egraphs::rewrite::ematch] 	 1) id10
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_1": id10: ($f9 -> $f228, $f10 -> $f229),
                "star_1_0": id24: ($f46 -> $f228, $f47 -> $f229),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_1": id24: ($f46 -> $f228, $f47 -> $f229), "star_1_0": id10: ($f9 -> $f228, $f10 -> $f229)}, partial_slotmap: () }, State { partial_subst: {"star_1_1": id10: ($f9 -> $f228, $f10 -> $f229), "star_1_0": id24: ($f46 -> $f228, $f47 -> $f229)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id24: ($f46 -> $f228, $f47 -> $f229),
            "star_1_0": id10: ($f9 -> $f228, $f10 -> $f229),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_1": id10: ($f9 -> $f228, $f10 -> $f229),
            "star_1_0": id24: ($f46 -> $f228, $f47 -> $f229),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id32: ($f230 -> $f230)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id32: ($f230 -> $f230)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id32, [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id33: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id33: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id33, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::egraph] enodes_applied res [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id34, [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] Search (compose *1) in id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(Compose([Star(1)]), [Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id35, [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id34: ($f231 -> $f233, $f232 -> $f234)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id34: ($f231 -> $f233, $f232 -> $f234)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id34: ($f231 -> $f233, $f232 -> $f234) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id34
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id34: ($f231 -> $f233, $f232 -> $f234)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id34
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "star_1_0": id34: ($f231 -> $f233, $f232 -> $f234),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (compose *1) in id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"star_1_0": id34: ($f231 -> $f233, $f232 -> $f234)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "star_1_0": id34: ($f231 -> $f233, $f232 -> $f234),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] === Call EmatchAll ===
[slotted_egraphs::rewrite::ematch] pattern = (new ?syntax ?cond *1)
[slotted_egraphs::egraph] input enodes_applied id0: ($f0 -> $f0)
[slotted_egraphs::egraph] enodes_applied res [Int($f0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id0: ($f0 -> $f0)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id0, [Int($f0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id1: ($f1 -> $f1, $f2 -> $f2)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id1, [PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id2: ()
[slotted_egraphs::egraph] enodes_applied res [Number(0)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id2: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id2, [Number(0)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id3: ($f3 -> $f3)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id3: ($f3 -> $f3)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id3, [Eq(id0: ($f0 -> $f3), id2: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id4: ()
[slotted_egraphs::egraph] enodes_applied res [Leaf]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id4: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id4, [Leaf]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id5: ($f4 -> $f4)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id5: ($f4 -> $f4)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id5, [Eq(id0: ($f0 -> $f4), id4: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::egraph] enodes_applied res [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id6: ($f5 -> $f5, $f6 -> $f6)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id6, [And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id8: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id8: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id8, [PredName("minLeaf")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id9: ()
[slotted_egraphs::egraph] enodes_applied res [Number(1)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id9: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id9, [Number(1)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::egraph] enodes_applied res [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id10: ($f9 -> $f9, $f10 -> $f10)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id10, [New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), []), Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
[slotted_egraphs::rewrite::ematch] continue at shape diff New(id0: (), id0: (), [Star(1)]) != New(id0: (), id0: (), [])
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id11: ($f11 -> $f11)
[slotted_egraphs::egraph] enodes_applied res [Node($f11)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id11: ($f11 -> $f11)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id11, [Node($f11)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::egraph] enodes_applied res [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id12: ($f12 -> $f12, $f13 -> $f13, $f14 -> $f14)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id12, [BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id13: ($f15 -> $f15, $f16 -> $f16, $f17 -> $f17, $f18 -> $f18)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id13, [Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id14: ($f19 -> $f19)
[slotted_egraphs::egraph] enodes_applied res [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id14: ($f19 -> $f19)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id14, [Add(id0: ($f0 -> $f19), id9: ())]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::egraph] enodes_applied res [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id15: ($f20 -> $f20, $f21 -> $f21)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id15, [Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::egraph] enodes_applied res [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id16: ($f22 -> $f22, $f23 -> $f23, $f24 -> $f24, $f25 -> $f25, $f26 -> $f26, $f27 -> $f27)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id16, [And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id17: ($f28 -> $f28, $f29 -> $f29)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id17, [PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::egraph] enodes_applied res [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id18: ($f30 -> $f30, $f31 -> $f31)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id18, [Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id19: ()
[slotted_egraphs::egraph] enodes_applied res [PredName("min")]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id19: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id19, [PredName("min")]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id20: ($f32 -> $f32, $f33 -> $f33, $f34 -> $f34)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id20, [PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::egraph] enodes_applied res [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id21: ($f35 -> $f35, $f36 -> $f36, $f37 -> $f37)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id21, [Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id23: ()
[slotted_egraphs::egraph] enodes_applied res [Number(2)]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id23: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id23, [Number(2)]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::egraph] enodes_applied res [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), [AppliedId(id18: ($f30 -> $f587, $f31 -> $f589)), AppliedId(id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588)), AppliedId(id18: ($f30 -> $f586, $f31 -> $f590))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), [AppliedId(id18: ($f30 -> $f598, $f31 -> $f601)), AppliedId(id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600)), AppliedId(id18: ($f30 -> $f599, $f31 -> $f602))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), [AppliedId(id18: ($f30 -> $f610, $f31 -> $f613)), AppliedId(id18: ($f30 -> $f611, $f31 -> $f614)), AppliedId(id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), [AppliedId(id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624)), AppliedId(id18: ($f30 -> $f622, $f31 -> $f625)), AppliedId(id18: ($f30 -> $f623, $f31 -> $f626))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), [AppliedId(id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636)), AppliedId(id18: ($f30 -> $f635, $f31 -> $f638)), AppliedId(id18: ($f30 -> $f634, $f31 -> $f637))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), [AppliedId(id18: ($f30 -> $f647, $f31 -> $f649)), AppliedId(id18: ($f30 -> $f646, $f31 -> $f650)), AppliedId(id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id24, [Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ()), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), [AppliedId(id18: ($f30 -> $f587, $f31 -> $f589)), AppliedId(id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588)), AppliedId(id18: ($f30 -> $f586, $f31 -> $f590))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), [AppliedId(id18: ($f30 -> $f598, $f31 -> $f601)), AppliedId(id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600)), AppliedId(id18: ($f30 -> $f599, $f31 -> $f602))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), [AppliedId(id18: ($f30 -> $f610, $f31 -> $f613)), AppliedId(id18: ($f30 -> $f611, $f31 -> $f614)), AppliedId(id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), [AppliedId(id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624)), AppliedId(id18: ($f30 -> $f622, $f31 -> $f625)), AppliedId(id18: ($f30 -> $f623, $f31 -> $f626))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), [AppliedId(id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636)), AppliedId(id18: ($f30 -> $f635, $f31 -> $f638)), AppliedId(id18: ($f30 -> $f634, $f31 -> $f637))]), New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), [AppliedId(id18: ($f30 -> $f647, $f31 -> $f649)), AppliedId(id18: ($f30 -> $f646, $f31 -> $f650)), AppliedId(id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), [AppliedId(id18: ($f30 -> $f587, $f31 -> $f589)), AppliedId(id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588)), AppliedId(id18: ($f30 -> $f586, $f31 -> $f590))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), id18: ($f30 -> $f587, $f31 -> $f589), id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588), id18: ($f30 -> $f586, $f31 -> $f590)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f587, $f31 -> $f589)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f587, $f31 -> $f589) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588),
                "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), "star_1_1": id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588), "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588),
                "star_1_1": id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588),
                "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f586, $f31 -> $f590)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f586, $f31 -> $f590) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), "star_1_1": id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588), "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f586, $f31 -> $f590)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id21
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588),
                "star_1_1": id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588),
                "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f586, $f31 -> $f590),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), [AppliedId(id18: ($f30 -> $f598, $f31 -> $f601)), AppliedId(id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600)), AppliedId(id18: ($f30 -> $f599, $f31 -> $f602))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), id18: ($f30 -> $f598, $f31 -> $f601), id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600), id18: ($f30 -> $f599, $f31 -> $f602)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f598, $f31 -> $f601)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f598, $f31 -> $f601) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600),
                "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), "star_1_1": id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600), "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600),
                "star_1_1": id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600),
                "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f599, $f31 -> $f602)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f599, $f31 -> $f602) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), "star_1_1": id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600), "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f599, $f31 -> $f602)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id21
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600),
                "star_1_1": id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600),
                "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f599, $f31 -> $f602),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), [AppliedId(id18: ($f30 -> $f610, $f31 -> $f613)), AppliedId(id18: ($f30 -> $f611, $f31 -> $f614)), AppliedId(id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), id18: ($f30 -> $f610, $f31 -> $f613), id18: ($f30 -> $f611, $f31 -> $f614), id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f610, $f31 -> $f613)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f610, $f31 -> $f613) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612),
                "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f611, $f31 -> $f614)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f611, $f31 -> $f614) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), "star_1_1": id18: ($f30 -> $f611, $f31 -> $f614), "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612),
                "star_1_1": id18: ($f30 -> $f611, $f31 -> $f614),
                "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), "star_1_1": id18: ($f30 -> $f611, $f31 -> $f614), "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612),
                "star_1_1": id18: ($f30 -> $f611, $f31 -> $f614),
                "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), [AppliedId(id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624)), AppliedId(id18: ($f30 -> $f622, $f31 -> $f625)), AppliedId(id18: ($f30 -> $f623, $f31 -> $f626))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624), id18: ($f30 -> $f622, $f31 -> $f625), id18: ($f30 -> $f623, $f31 -> $f626)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624),
                "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f622, $f31 -> $f625)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f622, $f31 -> $f625) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), "star_1_1": id18: ($f30 -> $f622, $f31 -> $f625), "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624),
                "star_1_1": id18: ($f30 -> $f622, $f31 -> $f625),
                "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f623, $f31 -> $f626)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f623, $f31 -> $f626) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), "star_1_1": id18: ($f30 -> $f622, $f31 -> $f625), "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f623, $f31 -> $f626)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id21
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624),
                "star_1_1": id18: ($f30 -> $f622, $f31 -> $f625),
                "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f623, $f31 -> $f626),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), [AppliedId(id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636)), AppliedId(id18: ($f30 -> $f635, $f31 -> $f638)), AppliedId(id18: ($f30 -> $f634, $f31 -> $f637))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636), id18: ($f30 -> $f635, $f31 -> $f638), id18: ($f30 -> $f634, $f31 -> $f637)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636),
                "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f635, $f31 -> $f638)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f635, $f31 -> $f638) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), "star_1_1": id18: ($f30 -> $f635, $f31 -> $f638), "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636),
                "star_1_1": id18: ($f30 -> $f635, $f31 -> $f638),
                "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f634, $f31 -> $f637)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id18: ($f30 -> $f634, $f31 -> $f637) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), "star_1_1": id18: ($f30 -> $f635, $f31 -> $f638), "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f634, $f31 -> $f637)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id21
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636),
                "star_1_1": id18: ($f30 -> $f635, $f31 -> $f638),
                "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id18: ($f30 -> $f634, $f31 -> $f637),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), [AppliedId(id18: ($f30 -> $f647, $f31 -> $f649)), AppliedId(id18: ($f30 -> $f646, $f31 -> $f650)), AppliedId(id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), id18: ($f30 -> $f647, $f31 -> $f649), id18: ($f30 -> $f646, $f31 -> $f650), id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id1: ($f1 -> $f46, $f2 -> $f47)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id1: ($f1 -> $f46, $f2 -> $f47) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id1
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648)
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648) to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id16
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f647, $f31 -> $f649)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f647, $f31 -> $f649) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id1: ($f1 -> $f46, $f2 -> $f47), "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648),
                "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f646, $f31 -> $f650)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_1 or PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] insert star_1_1 -> id18: ($f30 -> $f646, $f31 -> $f650) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_1 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_1")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), "star_1_1": id18: ($f30 -> $f646, $f31 -> $f650), "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649), "syntax": id1: ($f1 -> $f46, $f2 -> $f47)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648),
                "star_1_1": id18: ($f30 -> $f646, $f31 -> $f650),
                "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_2 or PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] insert star_1_2 -> id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_2 in id21
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_2")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), "star_1_1": id18: ($f30 -> $f646, $f31 -> $f650), "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id1
[slotted_egraphs::rewrite::ematch] 	 1) id16
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] 	 3) id18
[slotted_egraphs::rewrite::ematch] 	 4) id21
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648),
                "star_1_1": id18: ($f30 -> $f646, $f31 -> $f650),
                "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649),
                "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
                "star_1_2": id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id24: ($f46 -> $f46, $f47 -> $f47)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588), "star_1_1": id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588), "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f586, $f31 -> $f590)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600), "star_1_1": id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600), "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f599, $f31 -> $f602)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612), "star_1_1": id18: ($f30 -> $f611, $f31 -> $f614), "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624), "star_1_1": id18: ($f30 -> $f622, $f31 -> $f625), "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f623, $f31 -> $f626)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636), "star_1_1": id18: ($f30 -> $f635, $f31 -> $f638), "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id18: ($f30 -> $f634, $f31 -> $f637)}, partial_slotmap: () }, State { partial_subst: {"cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648), "star_1_1": id18: ($f30 -> $f646, $f31 -> $f650), "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649), "syntax": id1: ($f1 -> $f46, $f2 -> $f47), "star_1_2": id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f585, $f25 -> $f586, $f26 -> $f587, $f27 -> $f588),
            "star_1_1": id21: ($f35 -> $f590, $f36 -> $f589, $f37 -> $f588),
            "star_1_0": id18: ($f30 -> $f587, $f31 -> $f589),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f586, $f31 -> $f590),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f597, $f25 -> $f598, $f26 -> $f599, $f27 -> $f600),
            "star_1_1": id21: ($f35 -> $f601, $f36 -> $f602, $f37 -> $f600),
            "star_1_0": id18: ($f30 -> $f598, $f31 -> $f601),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f599, $f31 -> $f602),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f609, $f25 -> $f610, $f26 -> $f611, $f27 -> $f612),
            "star_1_1": id18: ($f30 -> $f611, $f31 -> $f614),
            "star_1_0": id18: ($f30 -> $f610, $f31 -> $f613),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id21: ($f35 -> $f613, $f36 -> $f614, $f37 -> $f612),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f621, $f25 -> $f622, $f26 -> $f623, $f27 -> $f624),
            "star_1_1": id18: ($f30 -> $f622, $f31 -> $f625),
            "star_1_0": id21: ($f35 -> $f625, $f36 -> $f626, $f37 -> $f624),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f623, $f31 -> $f626),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f633, $f25 -> $f634, $f26 -> $f635, $f27 -> $f636),
            "star_1_1": id18: ($f30 -> $f635, $f31 -> $f638),
            "star_1_0": id21: ($f35 -> $f637, $f36 -> $f638, $f37 -> $f636),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id18: ($f30 -> $f634, $f31 -> $f637),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "cond": id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f645, $f25 -> $f646, $f26 -> $f647, $f27 -> $f648),
            "star_1_1": id18: ($f30 -> $f646, $f31 -> $f650),
            "star_1_0": id18: ($f30 -> $f647, $f31 -> $f649),
            "syntax": id1: ($f1 -> $f46, $f2 -> $f47),
            "star_1_2": id21: ($f35 -> $f650, $f36 -> $f649, $f37 -> $f648),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id31: ($f228 -> $f228, $f229 -> $f229)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id31, [Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))]), Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id32: ($f230 -> $f230)
[slotted_egraphs::egraph] enodes_applied res [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id32: ($f230 -> $f230)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id32, [PredSyntax([id11: ($f11 -> $f230)])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id33: ()
[slotted_egraphs::egraph] enodes_applied res [True]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id33: ()
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id33, [True]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[slotted_egraphs::egraph] input enodes_applied id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::egraph] enodes_applied res [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id34, [New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])]
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id0: (), id0: (), [Star(1)])
[slotted_egraphs::rewrite::ematch] nullify_app_ids on New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
[slotted_egraphs::rewrite::ematch] matchChildren with State {
        partial_subst: {},
        partial_slotmap: (),
    }
[slotted_egraphs::rewrite::ematch] patternChildren [PVar("syntax"), PVar("cond"), Star(1)]
[slotted_egraphs::rewrite::ematch] eclassChildren [id32: ($f230 -> $f231), id33: (), id18: ($f30 -> $f231, $f31 -> $f232)]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {},
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id32: ($f230 -> $f231)
[slotted_egraphs::rewrite::ematch] childPattern ?syntax or PVar("syntax")
[slotted_egraphs::rewrite::ematch] insert syntax -> id32: ($f230 -> $f231) to subst
[slotted_egraphs::rewrite::ematch] Search ?syntax in id32
[slotted_egraphs::rewrite::ematch] Search pattern PVar("syntax")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id32: ($f230 -> $f231),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id33: ()
[slotted_egraphs::rewrite::ematch] childPattern ?cond or PVar("cond")
[slotted_egraphs::rewrite::ematch] insert cond -> id33: () to subst
[slotted_egraphs::rewrite::ematch] Search ?cond in id33
[slotted_egraphs::rewrite::ematch] Search pattern PVar("cond")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231), "cond": id33: ()}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchEnode with acc [
        State {
            partial_subst: {
                "syntax": id32: ($f230 -> $f231),
                "cond": id33: (),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] eclassId id18: ($f30 -> $f231, $f31 -> $f232)
[slotted_egraphs::rewrite::ematch] childPattern ?star_1_0 or PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] insert star_1_0 -> id18: ($f30 -> $f231, $f31 -> $f232) to subst
[slotted_egraphs::rewrite::ematch] Search ?star_1_0 in id18
[slotted_egraphs::rewrite::ematch] Search pattern PVar("star_1_0")
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231), "cond": id33: (), "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] matchChildren Result
[slotted_egraphs::rewrite::ematch] patternChildren
[slotted_egraphs::rewrite::ematch] 	 0) ?syntax
[slotted_egraphs::rewrite::ematch] 	 1) ?cond
[slotted_egraphs::rewrite::ematch] 	 2) *1
[slotted_egraphs::rewrite::ematch] eclassChildren
[slotted_egraphs::rewrite::ematch] 	 0) id32
[slotted_egraphs::rewrite::ematch] 	 1) id33
[slotted_egraphs::rewrite::ematch] 	 2) id18
[slotted_egraphs::rewrite::ematch] acc [
        State {
            partial_subst: {
                "syntax": id32: ($f230 -> $f231),
                "cond": id33: (),
                "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232),
            },
            partial_slotmap: (),
        },
    ]
[slotted_egraphs::rewrite::ematch] At return, Search (new ?syntax ?cond *1) in id34: ($f231 -> $f231, $f232 -> $f232)
[slotted_egraphs::rewrite::ematch] ret [State { partial_subst: {"syntax": id32: ($f230 -> $f231), "cond": id33: (), "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232)}, partial_slotmap: () }]
[slotted_egraphs::rewrite::ematch] final_subst s State {
        partial_subst: {
            "syntax": id32: ($f230 -> $f231),
            "cond": id33: (),
            "star_1_0": id18: ($f30 -> $f231, $f31 -> $f232),
        },
        partial_slotmap: (),
    }
[slotted_egraphs::egraph] input enodes_applied id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::egraph] enodes_applied res [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] Search (new ?syntax ?cond *1) in id35: ($f233 -> $f233, $f234 -> $f234)
[slotted_egraphs::rewrite::ematch] Search pattern ENode(New(id0: (), id0: (), [Star(1)]), [PVar("syntax"), PVar("cond"), Star(1)])
[slotted_egraphs::rewrite::ematch] enodesInEclass at id35, [Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])]
[slotted_egraphs::rewrite::ematch] continue because of discriminant mismatch
[entry::chc::rewrite] unfold rule, found []
[slotted_egraphs::parse] from (new ?syntax ?cond <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), PVar("syntax"), PVar("cond"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new ?syntax ?cond *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f458, $7 -> $f457))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458)), AppliedId(id18: ($f30 -> $f455, $f31 -> $f457))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f458, $7 -> $f457))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f454, $f31 -> $f458)), AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f458, $7 -> $f457))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f455, $f31 -> $f457)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f454, $f31 -> $f458))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f457, $7 -> $f458))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f451, $f2 -> $f452), id16: ($f22 -> $f451, $f23 -> $f452, $f24 -> $f453, $f25 -> $f454, $f26 -> $f455, $f27 -> $f456), [AppliedId(id18: ($f30 -> $f454, $f31 -> $f458)), AppliedId(id21: ($f35 -> $f458, $f36 -> $f457, $f37 -> $f456)), AppliedId(id18: ($f30 -> $f455, $f31 -> $f457))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f451, $1 -> $f452, $2 -> $f453, $3 -> $f454, $4 -> $f455, $5 -> $f456, $6 -> $f458, $7 -> $f457))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f451, $f47 -> $f452)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466)), AppliedId(id18: ($f30 -> $f462, $f31 -> $f465))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f463, $f31 -> $f466)), AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f466, $7 -> $f465))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f462, $f31 -> $f465)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f463, $f31 -> $f466))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f465, $7 -> $f466))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f459, $f2 -> $f460), id16: ($f22 -> $f459, $f23 -> $f460, $f24 -> $f461, $f25 -> $f462, $f26 -> $f463, $f27 -> $f464), [AppliedId(id18: ($f30 -> $f463, $f31 -> $f466)), AppliedId(id21: ($f35 -> $f465, $f36 -> $f466, $f37 -> $f464)), AppliedId(id18: ($f30 -> $f462, $f31 -> $f465))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f459, $1 -> $f460, $2 -> $f461, $3 -> $f462, $4 -> $f463, $5 -> $f464, $6 -> $f466, $7 -> $f465))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f459, $f47 -> $f460)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f473, $7 -> $f474))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472)), AppliedId(id18: ($f30 -> $f470, $f31 -> $f474))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f473, $7 -> $f474))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472)), AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id18: ($f30 -> $f470, $f31 -> $f474)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f467, $f2 -> $f468), id16: ($f22 -> $f467, $f23 -> $f468, $f24 -> $f469, $f25 -> $f470, $f26 -> $f471, $f27 -> $f472), [AppliedId(id21: ($f35 -> $f474, $f36 -> $f473, $f37 -> $f472)), AppliedId(id18: ($f30 -> $f471, $f31 -> $f473)), AppliedId(id18: ($f30 -> $f470, $f31 -> $f474))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f467, $1 -> $f468, $2 -> $f469, $3 -> $f470, $4 -> $f471, $5 -> $f472, $6 -> $f474, $7 -> $f473))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f467, $f47 -> $f468)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482)), AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id18: ($f30 -> $f479, $f31 -> $f482)), AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f482, $7 -> $f481))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id18: ($f30 -> $f479, $f31 -> $f482))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f481, $7 -> $f482))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f475, $f2 -> $f476), id16: ($f22 -> $f475, $f23 -> $f476, $f24 -> $f477, $f25 -> $f478, $f26 -> $f479, $f27 -> $f480), [AppliedId(id18: ($f30 -> $f479, $f31 -> $f482)), AppliedId(id18: ($f30 -> $f478, $f31 -> $f481)), AppliedId(id21: ($f35 -> $f481, $f36 -> $f482, $f37 -> $f480))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f475, $1 -> $f476, $2 -> $f477, $3 -> $f478, $4 -> $f479, $5 -> $f480, $6 -> $f482, $7 -> $f481))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f475, $f47 -> $f476)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f489, $7 -> $f490))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490)), AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f489, $7 -> $f490))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id18: ($f30 -> $f486, $f31 -> $f490)), AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id18: ($f30 -> $f486, $f31 -> $f490))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f483, $f2 -> $f484), id16: ($f22 -> $f483, $f23 -> $f484, $f24 -> $f485, $f25 -> $f486, $f26 -> $f487, $f27 -> $f488), [AppliedId(id18: ($f30 -> $f486, $f31 -> $f490)), AppliedId(id18: ($f30 -> $f487, $f31 -> $f489)), AppliedId(id21: ($f35 -> $f490, $f36 -> $f489, $f37 -> $f488))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f483, $1 -> $f484, $2 -> $f485, $3 -> $f486, $4 -> $f487, $5 -> $f488, $6 -> $f490, $7 -> $f489))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f483, $f47 -> $f484)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f497, $7 -> $f498))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496)), AppliedId(id18: ($f30 -> $f495, $f31 -> $f498))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f497, $7 -> $f498))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496)), AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f497, $7 -> $f498))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id18: ($f30 -> $f495, $f31 -> $f498)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f498, $7 -> $f497))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f491, $f2 -> $f492), id16: ($f22 -> $f491, $f23 -> $f492, $f24 -> $f493, $f25 -> $f494, $f26 -> $f495, $f27 -> $f496), [AppliedId(id21: ($f35 -> $f497, $f36 -> $f498, $f37 -> $f496)), AppliedId(id18: ($f30 -> $f494, $f31 -> $f497)), AppliedId(id18: ($f30 -> $f495, $f31 -> $f498))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f491, $1 -> $f492, $2 -> $f493, $3 -> $f494, $4 -> $f495, $5 -> $f496, $6 -> $f497, $7 -> $f498))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::union] r: id24: ($f46 -> $f491, $f47 -> $f492)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f499), id33: (), [AppliedId(id18: ($f30 -> $f499, $f31 -> $f500))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f499, $1 -> $f500))
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f499), id33: (), [AppliedId(id18: ($f30 -> $f499, $f31 -> $f500))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f499, $1 -> $f500))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id34: ($f231 -> $f499, $f232 -> $f500)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[slotted_egraphs::egraph::union] r: id34: ($f231 -> $f499, $f232 -> $f500)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[slotted_egraphs::parse] from (compose <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("compose"), LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("compose"), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (compose *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $f573, $f10 -> $f574)), AppliedId(id24: ($f46 -> $f573, $f47 -> $f574))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $f573, $1 -> $f574))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $f573, $f10 -> $f574)), AppliedId(id24: ($f46 -> $f573, $f47 -> $f574))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $f573, $1 -> $f574))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id31: ($f228 -> $f573, $f229 -> $f574)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::union] r: id31: ($f228 -> $f573, $f229 -> $f574)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $f573, $f10 -> $f574)), AppliedId(id24: ($f46 -> $f573, $f47 -> $f574))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $f573, $1 -> $f574))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id24: ($f46 -> $f573, $f47 -> $f574)), AppliedId(id10: ($f9 -> $f573, $f10 -> $f574))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))]), ($0 -> $f573, $1 -> $f574))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id31: ($f228 -> $f573, $f229 -> $f574)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::union] r: id31: ($f228 -> $f573, $f229 -> $f574)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id24: ($f46 -> $f575, $f47 -> $f576)), AppliedId(id10: ($f9 -> $f575, $f10 -> $f576))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))]), ($0 -> $f575, $1 -> $f576))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id24: ($f46 -> $f575, $f47 -> $f576)), AppliedId(id10: ($f9 -> $f575, $f10 -> $f576))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))]), ($0 -> $f575, $1 -> $f576))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id31: ($f228 -> $f575, $f229 -> $f576)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::union] r: id31: ($f228 -> $f575, $f229 -> $f576)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id24: ($f46 -> $f575, $f47 -> $f576)), AppliedId(id10: ($f9 -> $f575, $f10 -> $f576))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id24: ($f46 -> $0, $f47 -> $1)), AppliedId(id10: ($f9 -> $0, $f10 -> $1))]), ($0 -> $f575, $1 -> $f576))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id10: ($f9 -> $f575, $f10 -> $f576)), AppliedId(id24: ($f46 -> $f575, $f47 -> $f576))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id10: ($f9 -> $0, $f10 -> $1)), AppliedId(id24: ($f46 -> $0, $f47 -> $1))]), ($0 -> $f575, $1 -> $f576))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id31: ($f228 -> $f575, $f229 -> $f576)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::union] r: id31: ($f228 -> $f575, $f229 -> $f576)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
    ($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
     - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])
     - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
    
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f577, $f232 -> $f578))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f577, $1 -> $f578))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f577, $f232 -> $f578))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f577, $1 -> $f578))
[slotted_egraphs::egraph::union] Call union_leaders
[slotted_egraphs::egraph::union] l: id35: ($f233 -> $f577, $f234 -> $f578)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[slotted_egraphs::egraph::union] r: id35: ($f233 -> $f577, $f234 -> $f578)
[slotted_egraphs::egraph::union] 
    CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
    ($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
     - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
    
[entry::chc::rewrite] define found [{"cond": id16: ($f22 -> $f651, $f23 -> $f652, $f24 -> $f653, $f25 -> $f654, $f26 -> $f655, $f27 -> $f656), "star_1_1": id21: ($f35 -> $f658, $f36 -> $f657, $f37 -> $f656), "star_1_0": id18: ($f30 -> $f655, $f31 -> $f657), "syntax": id1: ($f1 -> $f651, $f2 -> $f652), "star_1_2": id18: ($f30 -> $f654, $f31 -> $f658)}, {"cond": id16: ($f22 -> $f659, $f23 -> $f660, $f24 -> $f661, $f25 -> $f662, $f26 -> $f663, $f27 -> $f664), "star_1_1": id21: ($f35 -> $f665, $f36 -> $f666, $f37 -> $f664), "star_1_0": id18: ($f30 -> $f662, $f31 -> $f665), "syntax": id1: ($f1 -> $f659, $f2 -> $f660), "star_1_2": id18: ($f30 -> $f663, $f31 -> $f666)}, {"cond": id16: ($f22 -> $f667, $f23 -> $f668, $f24 -> $f669, $f25 -> $f670, $f26 -> $f671, $f27 -> $f672), "star_1_1": id18: ($f30 -> $f671, $f31 -> $f673), "star_1_0": id18: ($f30 -> $f670, $f31 -> $f674), "syntax": id1: ($f1 -> $f667, $f2 -> $f668), "star_1_2": id21: ($f35 -> $f674, $f36 -> $f673, $f37 -> $f672)}, {"cond": id16: ($f22 -> $f675, $f23 -> $f676, $f24 -> $f677, $f25 -> $f678, $f26 -> $f679, $f27 -> $f680), "star_1_1": id18: ($f30 -> $f678, $f31 -> $f681), "star_1_0": id21: ($f35 -> $f681, $f36 -> $f682, $f37 -> $f680), "syntax": id1: ($f1 -> $f675, $f2 -> $f676), "star_1_2": id18: ($f30 -> $f679, $f31 -> $f682)}, {"cond": id16: ($f22 -> $f683, $f23 -> $f684, $f24 -> $f685, $f25 -> $f686, $f26 -> $f687, $f27 -> $f688), "star_1_1": id18: ($f30 -> $f687, $f31 -> $f689), "star_1_0": id21: ($f35 -> $f690, $f36 -> $f689, $f37 -> $f688), "syntax": id1: ($f1 -> $f683, $f2 -> $f684), "star_1_2": id18: ($f30 -> $f686, $f31 -> $f690)}, {"cond": id16: ($f22 -> $f691, $f23 -> $f692, $f24 -> $f693, $f25 -> $f694, $f26 -> $f695, $f27 -> $f696), "star_1_1": id18: ($f30 -> $f694, $f31 -> $f697), "star_1_0": id18: ($f30 -> $f695, $f31 -> $f698), "syntax": id1: ($f1 -> $f691, $f2 -> $f692), "star_1_2": id21: ($f35 -> $f697, $f36 -> $f698, $f37 -> $f696)}, {"syntax": id32: ($f230 -> $f699), "cond": id33: (), "star_1_0": id18: ($f30 -> $f699, $f31 -> $f700)}]
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f651, $f2 -> $f652), id16: ($f22 -> $f651, $f23 -> $f652, $f24 -> $f653, $f25 -> $f654, $f26 -> $f655, $f27 -> $f656), [AppliedId(id18: ($f30 -> $f655, $f31 -> $f657)), AppliedId(id21: ($f35 -> $f658, $f36 -> $f657, $f37 -> $f656)), AppliedId(id18: ($f30 -> $f654, $f31 -> $f658))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $7))]), ($0 -> $f651, $1 -> $f652, $2 -> $f653, $3 -> $f654, $4 -> $f655, $5 -> $f656, $6 -> $f657, $7 -> $f658))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc::rewrite] subst = {
        "cond": id16: ($f22 -> $f651, $f23 -> $f652, $f24 -> $f653, $f25 -> $f654, $f26 -> $f655, $f27 -> $f656),
        "star_1_1": id21: ($f35 -> $f658, $f36 -> $f657, $f37 -> $f656),
        "star_1_0": id18: ($f30 -> $f655, $f31 -> $f657),
        "syntax": id1: ($f1 -> $f651, $f2 -> $f652),
        "star_1_2": id18: ($f30 -> $f654, $f31 -> $f658),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
[entry::chc::rewrite] appId.slots {$f655, $f657}
[entry::chc::rewrite] appId.slots {$f656, $f657, $f658}
[entry::chc::rewrite] appId.slots {$f654, $f658}
[entry::chc::rewrite] mergeVarTypes = {
        $f655: Node,
        $f654: Node,
        $f658: Int,
        $f657: Int,
        $f656: Int,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f657: [
            0,
            1,
        ],
        $f656: [
            1,
        ],
        $f655: [
            0,
        ],
        $f658: [
            1,
            2,
        ],
        $f654: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f657
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f656
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f655
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f658
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f654
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f655)"
[slotted_egraphs::parse] from (new (pred <(node $f655)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f655), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f655)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f655)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f655))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f655)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f655)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f655))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f655)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f655))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f655), id33: (), [AppliedId(id18: ($f30 -> $f655, $f31 -> $f657))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f655, $1 -> $f657))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f655, $f232 -> $f657))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f655, $1 -> $f657))
[entry::chc::rewrite] define new id35: ($f233 -> $f655, $f234 -> $f657)
[entry::chc::rewrite] nonBasicVarStr "(node $f654)"
[slotted_egraphs::parse] from (new (pred <(node $f654)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f654), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f654)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f654)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f654))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f654)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f654)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f654))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f654)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f654))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f654), id33: (), [AppliedId(id18: ($f30 -> $f654, $f31 -> $f658))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f654, $1 -> $f658))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f654, $f232 -> $f658))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f654, $1 -> $f658))
[entry::chc::rewrite] define new id35: ($f233 -> $f654, $f234 -> $f658)
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f659, $f2 -> $f660), id16: ($f22 -> $f659, $f23 -> $f660, $f24 -> $f661, $f25 -> $f662, $f26 -> $f663, $f27 -> $f664), [AppliedId(id18: ($f30 -> $f662, $f31 -> $f665)), AppliedId(id21: ($f35 -> $f665, $f36 -> $f666, $f37 -> $f664)), AppliedId(id18: ($f30 -> $f663, $f31 -> $f666))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f659, $1 -> $f660, $2 -> $f661, $3 -> $f662, $4 -> $f663, $5 -> $f664, $6 -> $f665, $7 -> $f666))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc::rewrite] subst = {
        "cond": id16: ($f22 -> $f659, $f23 -> $f660, $f24 -> $f661, $f25 -> $f662, $f26 -> $f663, $f27 -> $f664),
        "star_1_1": id21: ($f35 -> $f665, $f36 -> $f666, $f37 -> $f664),
        "star_1_0": id18: ($f30 -> $f662, $f31 -> $f665),
        "syntax": id1: ($f1 -> $f659, $f2 -> $f660),
        "star_1_2": id18: ($f30 -> $f663, $f31 -> $f666),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
[entry::chc::rewrite] appId.slots {$f662, $f665}
[entry::chc::rewrite] appId.slots {$f664, $f665, $f666}
[entry::chc::rewrite] appId.slots {$f663, $f666}
[entry::chc::rewrite] mergeVarTypes = {
        $f663: Node,
        $f666: Int,
        $f662: Node,
        $f665: Int,
        $f664: Int,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f662: [
            0,
        ],
        $f663: [
            2,
        ],
        $f665: [
            0,
            1,
        ],
        $f666: [
            1,
            2,
        ],
        $f664: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f662
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f663
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f665
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f666
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f664
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f662)"
[slotted_egraphs::parse] from (new (pred <(node $f662)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f662), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f662)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f662)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f662))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f662)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f662)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f662))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f662)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f662))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f662), id33: (), [AppliedId(id18: ($f30 -> $f662, $f31 -> $f665))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f662, $1 -> $f665))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f662, $f232 -> $f665))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f662, $1 -> $f665))
[entry::chc::rewrite] define new id35: ($f233 -> $f662, $f234 -> $f665)
[entry::chc::rewrite] nonBasicVarStr "(node $f663)"
[slotted_egraphs::parse] from (new (pred <(node $f663)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f663), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f663)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f663)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f663))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f663)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f663)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f663))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f663)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f663))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f663), id33: (), [AppliedId(id18: ($f30 -> $f663, $f31 -> $f666))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f663, $1 -> $f666))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f663, $f232 -> $f666))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f663, $1 -> $f666))
[entry::chc::rewrite] define new id35: ($f233 -> $f663, $f234 -> $f666)
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f667, $f2 -> $f668), id16: ($f22 -> $f667, $f23 -> $f668, $f24 -> $f669, $f25 -> $f670, $f26 -> $f671, $f27 -> $f672), [AppliedId(id18: ($f30 -> $f670, $f31 -> $f674)), AppliedId(id18: ($f30 -> $f671, $f31 -> $f673)), AppliedId(id21: ($f35 -> $f674, $f36 -> $f673, $f37 -> $f672))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5))]), ($0 -> $f667, $1 -> $f668, $2 -> $f669, $3 -> $f670, $4 -> $f671, $5 -> $f672, $6 -> $f674, $7 -> $f673))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc::rewrite] subst = {
        "cond": id16: ($f22 -> $f667, $f23 -> $f668, $f24 -> $f669, $f25 -> $f670, $f26 -> $f671, $f27 -> $f672),
        "star_1_1": id18: ($f30 -> $f671, $f31 -> $f673),
        "star_1_0": id18: ($f30 -> $f670, $f31 -> $f674),
        "syntax": id1: ($f1 -> $f667, $f2 -> $f668),
        "star_1_2": id21: ($f35 -> $f674, $f36 -> $f673, $f37 -> $f672),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
[entry::chc::rewrite] appId.slots {$f670, $f674}
[entry::chc::rewrite] appId.slots {$f671, $f673}
[entry::chc::rewrite] appId.slots {$f672, $f673, $f674}
[entry::chc::rewrite] mergeVarTypes = {
        $f673: Int,
        $f671: Node,
        $f674: Int,
        $f670: Node,
        $f672: Int,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f674: [
            0,
            2,
        ],
        $f670: [
            0,
        ],
        $f671: [
            1,
        ],
        $f673: [
            1,
            2,
        ],
        $f672: [
            2,
        ],
    }
[entry::chc::rewrite] var = $f674
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f670
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f671
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f673
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f672
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f670)"
[slotted_egraphs::parse] from (new (pred <(node $f670)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f670), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f670)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f670)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f670))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f670)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f670)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f670))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f670)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f670))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f670), id33: (), [AppliedId(id18: ($f30 -> $f670, $f31 -> $f674))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f670, $1 -> $f674))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f670, $f232 -> $f674))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f670, $1 -> $f674))
[entry::chc::rewrite] define new id35: ($f233 -> $f670, $f234 -> $f674)
[entry::chc::rewrite] nonBasicVarStr "(node $f671)"
[slotted_egraphs::parse] from (new (pred <(node $f671)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f671), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f671)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f671)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f671))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f671)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f671)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f671))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f671)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f671))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f671), id33: (), [AppliedId(id18: ($f30 -> $f671, $f31 -> $f673))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f671, $1 -> $f673))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f671, $f232 -> $f673))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f671, $1 -> $f673))
[entry::chc::rewrite] define new id35: ($f233 -> $f671, $f234 -> $f673)
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f675, $f2 -> $f676), id16: ($f22 -> $f675, $f23 -> $f676, $f24 -> $f677, $f25 -> $f678, $f26 -> $f679, $f27 -> $f680), [AppliedId(id21: ($f35 -> $f681, $f36 -> $f682, $f37 -> $f680)), AppliedId(id18: ($f30 -> $f678, $f31 -> $f681)), AppliedId(id18: ($f30 -> $f679, $f31 -> $f682))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $3, $f31 -> $6)), AppliedId(id18: ($f30 -> $4, $f31 -> $7))]), ($0 -> $f675, $1 -> $f676, $2 -> $f677, $3 -> $f678, $4 -> $f679, $5 -> $f680, $6 -> $f681, $7 -> $f682))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc::rewrite] subst = {
        "cond": id16: ($f22 -> $f675, $f23 -> $f676, $f24 -> $f677, $f25 -> $f678, $f26 -> $f679, $f27 -> $f680),
        "star_1_1": id18: ($f30 -> $f678, $f31 -> $f681),
        "star_1_0": id21: ($f35 -> $f681, $f36 -> $f682, $f37 -> $f680),
        "syntax": id1: ($f1 -> $f675, $f2 -> $f676),
        "star_1_2": id18: ($f30 -> $f679, $f31 -> $f682),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
[entry::chc::rewrite] appId.slots {$f680, $f681, $f682}
[entry::chc::rewrite] appId.slots {$f678, $f681}
[entry::chc::rewrite] appId.slots {$f679, $f682}
[entry::chc::rewrite] mergeVarTypes = {
        $f680: Int,
        $f678: Node,
        $f679: Node,
        $f682: Int,
        $f681: Int,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f680: [
            0,
        ],
        $f682: [
            0,
            2,
        ],
        $f679: [
            2,
        ],
        $f678: [
            1,
        ],
        $f681: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f680
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f682
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f679
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f678
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f681
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f678)"
[slotted_egraphs::parse] from (new (pred <(node $f678)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f678), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f678)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f678)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f678))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f678)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f678)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f678))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f678)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f678))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f678), id33: (), [AppliedId(id18: ($f30 -> $f678, $f31 -> $f681))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f678, $1 -> $f681))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f678, $f232 -> $f681))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f678, $1 -> $f681))
[entry::chc::rewrite] define new id35: ($f233 -> $f678, $f234 -> $f681)
[entry::chc::rewrite] nonBasicVarStr "(node $f679)"
[slotted_egraphs::parse] from (new (pred <(node $f679)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f679), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f679)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f679)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f679))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f679)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f679)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f679))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f679)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f679))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f679), id33: (), [AppliedId(id18: ($f30 -> $f679, $f31 -> $f682))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f679, $1 -> $f682))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f679, $f232 -> $f682))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f679, $1 -> $f682))
[entry::chc::rewrite] define new id35: ($f233 -> $f679, $f234 -> $f682)
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f683, $f2 -> $f684), id16: ($f22 -> $f683, $f23 -> $f684, $f24 -> $f685, $f25 -> $f686, $f26 -> $f687, $f27 -> $f688), [AppliedId(id21: ($f35 -> $f690, $f36 -> $f689, $f37 -> $f688)), AppliedId(id18: ($f30 -> $f687, $f31 -> $f689)), AppliedId(id18: ($f30 -> $f686, $f31 -> $f690))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id21: ($f35 -> $6, $f36 -> $7, $f37 -> $5)), AppliedId(id18: ($f30 -> $4, $f31 -> $7)), AppliedId(id18: ($f30 -> $3, $f31 -> $6))]), ($0 -> $f683, $1 -> $f684, $2 -> $f685, $3 -> $f686, $4 -> $f687, $5 -> $f688, $6 -> $f690, $7 -> $f689))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc::rewrite] subst = {
        "cond": id16: ($f22 -> $f683, $f23 -> $f684, $f24 -> $f685, $f25 -> $f686, $f26 -> $f687, $f27 -> $f688),
        "star_1_1": id18: ($f30 -> $f687, $f31 -> $f689),
        "star_1_0": id21: ($f35 -> $f690, $f36 -> $f689, $f37 -> $f688),
        "syntax": id1: ($f1 -> $f683, $f2 -> $f684),
        "star_1_2": id18: ($f30 -> $f686, $f31 -> $f690),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
[entry::chc::rewrite] appId.slots {$f688, $f689, $f690}
[entry::chc::rewrite] appId.slots {$f687, $f689}
[entry::chc::rewrite] appId.slots {$f686, $f690}
[entry::chc::rewrite] mergeVarTypes = {
        $f688: Int,
        $f690: Int,
        $f687: Node,
        $f686: Node,
        $f689: Int,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f687: [
            1,
        ],
        $f690: [
            0,
            2,
        ],
        $f686: [
            2,
        ],
        $f688: [
            0,
        ],
        $f689: [
            0,
            1,
        ],
    }
[entry::chc::rewrite] var = $f687
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f690
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f686
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f688
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f689
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f686)"
[slotted_egraphs::parse] from (new (pred <(node $f686)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f686), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f686)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f686)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f686))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f686)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f686)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f686))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f686)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f686))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f686), id33: (), [AppliedId(id18: ($f30 -> $f686, $f31 -> $f690))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f686, $1 -> $f690))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f686, $f232 -> $f690))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f686, $1 -> $f690))
[entry::chc::rewrite] define new id35: ($f233 -> $f686, $f234 -> $f690)
[entry::chc::rewrite] nonBasicVarStr "(node $f687)"
[slotted_egraphs::parse] from (new (pred <(node $f687)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f687), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f687)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f687)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f687))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f687)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f687)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f687))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f687)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f687))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f687), id33: (), [AppliedId(id18: ($f30 -> $f687, $f31 -> $f689))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f687, $1 -> $f689))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f687, $f232 -> $f689))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f687, $1 -> $f689))
[entry::chc::rewrite] define new id35: ($f233 -> $f687, $f234 -> $f689)
[slotted_egraphs::egraph::add] shape_called_from_add input New(id1: ($f1 -> $f691, $f2 -> $f692), id16: ($f22 -> $f691, $f23 -> $f692, $f24 -> $f693, $f25 -> $f694, $f26 -> $f695, $f27 -> $f696), [AppliedId(id18: ($f30 -> $f695, $f31 -> $f698)), AppliedId(id18: ($f30 -> $f694, $f31 -> $f697)), AppliedId(id21: ($f35 -> $f697, $f36 -> $f698, $f37 -> $f696))])
[slotted_egraphs::egraph::add] ret (New(id1: ($f1 -> $0, $f2 -> $1), id16: ($f22 -> $0, $f23 -> $1, $f24 -> $2, $f25 -> $3, $f26 -> $4, $f27 -> $5), [AppliedId(id18: ($f30 -> $4, $f31 -> $6)), AppliedId(id18: ($f30 -> $3, $f31 -> $7)), AppliedId(id21: ($f35 -> $7, $f36 -> $6, $f37 -> $5))]), ($0 -> $f691, $1 -> $f692, $2 -> $f693, $3 -> $f694, $4 -> $f695, $5 -> $f696, $6 -> $f698, $7 -> $f697))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
    ($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
     - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])
    
[entry::chc::rewrite] subst = {
        "cond": id16: ($f22 -> $f691, $f23 -> $f692, $f24 -> $f693, $f25 -> $f694, $f26 -> $f695, $f27 -> $f696),
        "star_1_1": id18: ($f30 -> $f694, $f31 -> $f697),
        "star_1_0": id18: ($f30 -> $f695, $f31 -> $f698),
        "syntax": id1: ($f1 -> $f691, $f2 -> $f692),
        "star_1_2": id21: ($f35 -> $f697, $f36 -> $f698, $f37 -> $f696),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
[entry::chc::rewrite] appId.slots {$f695, $f698}
[entry::chc::rewrite] appId.slots {$f694, $f697}
[entry::chc::rewrite] appId.slots {$f696, $f697, $f698}
[entry::chc::rewrite] mergeVarTypes = {
        $f698: Int,
        $f696: Int,
        $f695: Node,
        $f697: Int,
        $f694: Node,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f698: [
            0,
            2,
        ],
        $f696: [
            2,
        ],
        $f695: [
            0,
        ],
        $f697: [
            1,
            2,
        ],
        $f694: [
            1,
        ],
    }
[entry::chc::rewrite] var = $f698
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f696
[entry::chc::rewrite] children eclass id21 Some(
    CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
    ($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
     - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
    )
[entry::chc::rewrite] var = $f695
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f697
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f694
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f695)"
[slotted_egraphs::parse] from (new (pred <(node $f695)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f695), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f695)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f695)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f695))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f695)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f695)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f695))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f695)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f695))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f695), id33: (), [AppliedId(id18: ($f30 -> $f695, $f31 -> $f698))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f695, $1 -> $f698))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f695, $f232 -> $f698))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f695, $1 -> $f698))
[entry::chc::rewrite] define new id35: ($f233 -> $f695, $f234 -> $f698)
[entry::chc::rewrite] nonBasicVarStr "(node $f694)"
[slotted_egraphs::parse] from (new (pred <(node $f694)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f694), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f694)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f694)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f694))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f694)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f694)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f694))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f694)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f694))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f694), id33: (), [AppliedId(id18: ($f30 -> $f694, $f31 -> $f697))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f694, $1 -> $f697))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f694, $f232 -> $f697))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f694, $1 -> $f697))
[entry::chc::rewrite] define new id35: ($f233 -> $f694, $f234 -> $f697)
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f699), id33: (), [AppliedId(id18: ($f30 -> $f699, $f31 -> $f700))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f699, $1 -> $f700))
[entry::chc::rewrite] root eclass 
    CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
    ($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
     - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
    
[entry::chc::rewrite] subst = {
        "syntax": id32: ($f230 -> $f699),
        "cond": id33: (),
        "star_1_0": id18: ($f30 -> $f699, $f31 -> $f700),
    }
[entry::chc::rewrite] rootData = CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
[entry::chc::rewrite] appId.slots {$f699, $f700}
[entry::chc::rewrite] mergeVarTypes = {
        $f700: Int,
        $f699: Node,
    }
[entry::chc::rewrite] varToStarIndex = {
        $f699: [
            0,
        ],
        $f700: [
            0,
        ],
    }
[entry::chc::rewrite] var = $f699
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] var = $f700
[entry::chc::rewrite] children eclass id18 Some(
    CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
    ($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
     - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
    )
[entry::chc::rewrite] nonBasicVarStr "(node $f699)"
[slotted_egraphs::parse] from (new (pred <(node $f699)>) (true) <*2>)
[slotted_egraphs::parse] to tokens [LParen, Ident("new"), LParen, Ident("pred"), LVecBracket, LParen, Ident("node"), Slot($f699), RParen, RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("node"), Slot($f699)]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (node $f699)
[slotted_egraphs::parse] left tokens [RVecBracket, RParen, LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("pred"), Vec([AppliedId(id0: ())])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (pred (node $f699))
[slotted_egraphs::parse] left tokens [LParen, Ident("true"), RParen, LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("true")]
[slotted_egraphs::parse] parse_pattern_nosubst return1 true
[slotted_egraphs::parse] left tokens [LVecBracket, Star(2), RVecBracket, RParen]
[slotted_egraphs::parse] syntax_elems_mock = [String("new"), AppliedId(id0: ()), AppliedId(id0: ()), Vec([Star(2)])]
[slotted_egraphs::parse] parse_pattern_nosubst return1 (new (pred (node $f699)) true *2)
[slotted_egraphs::parse] left tokens []
[slotted_egraphs::egraph::add] shape_called_from_add input Node($f699)
[slotted_egraphs::egraph::add] ret (Node($0), ($0 -> $f699))
[slotted_egraphs::egraph::add] shape_called_from_add input PredSyntax([id11: ($f11 -> $f699)])
[slotted_egraphs::egraph::add] ret (PredSyntax([id11: ($f11 -> $0)]), ($0 -> $f699))
[slotted_egraphs::egraph::add] shape_called_from_add input True
[slotted_egraphs::egraph::add] ret (True, ())
[slotted_egraphs::egraph::add] shape_called_from_add input New(id32: ($f230 -> $f699), id33: (), [AppliedId(id18: ($f30 -> $f699, $f31 -> $f700))])
[slotted_egraphs::egraph::add] ret (New(id32: ($f230 -> $0), id33: (), [AppliedId(id18: ($f30 -> $0, $f31 -> $1))]), ($0 -> $f699, $1 -> $f700))
[slotted_egraphs::egraph::add] shape_called_from_add input Compose([AppliedId(id34: ($f231 -> $f699, $f232 -> $f700))])
[slotted_egraphs::egraph::add] ret (Compose([AppliedId(id34: ($f231 -> $0, $f232 -> $1))]), ($0 -> $f699, $1 -> $f700))
[entry::chc::rewrite] define new id35: ($f233 -> $f699, $f234 -> $f700)
[entry::chc::tst] egraph after run

 == Egraph ==
CHCData { predNames: {}, varTypes: {$f0: Int} }
id0($f0):>> Int($f0)
 - Int($f0)

CHCData { predNames: {}, varTypes: {$f2: Int, $f1: Int} }
id1($f1, $f2):>> PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])
 - PredSyntax([id0: ($f0 -> $f1), id0: ($f0 -> $f2)])

CHCData { predNames: {}, varTypes: {} }
id2():>> Number(0)
 - Number(0)

CHCData { predNames: {}, varTypes: {$f3: Int} }
id3($f3):>> Eq(id0: ($f0 -> $f3), id2: ())
 - Eq(id0: ($f0 -> $f3), id2: ())

CHCData { predNames: {}, varTypes: {} }
id4():>> Leaf
 - Leaf

CHCData { predNames: {}, varTypes: {$f4: Int} }
id5($f4):>> Eq(id0: ($f0 -> $f4), id4: ())
 - Eq(id0: ($f0 -> $f4), id4: ())

CHCData { predNames: {}, varTypes: {$f6: Int, $f5: Int} }
id6($f5, $f6):>> And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])
 - And([id3: ($f3 -> $f6), id5: ($f4 -> $f5)])

CHCData { predNames: {}, varTypes: {} }
id8():>> PredName("minLeaf")
 - PredName("minLeaf")

CHCData { predNames: {}, varTypes: {} }
id9():>> Number(1)
 - Number(1)

CHCData { predNames: {"minLeaf"}, varTypes: {$f9: Int, $f10: Int} }
id10($f9, $f10):>> Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())
 - New(id1: ($f1 -> $f9, $f2 -> $f10), id6: ($f5 -> $f9, $f6 -> $f10), [])
 - Interface(id8: (), id1: ($f1 -> $f9, $f2 -> $f10), id9: ())

CHCData { predNames: {}, varTypes: {$f11: Node} }
id11($f11):>> Node($f11)
 - Node($f11)

CHCData { predNames: {}, varTypes: {$f14: Node, $f12: Int, $f13: Node} }
id12($f12, $f13, $f14):>> BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))
 - BiNode(id0: ($f0 -> $f12), id11: ($f11 -> $f13), id11: ($f11 -> $f14))

CHCData { predNames: {}, varTypes: {$f15: Int, $f18: Node, $f17: Node, $f16: Int} }
id13($f15, $f16, $f17, $f18):>> Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))
 - Eq(id0: ($f0 -> $f15), id12: ($f12 -> $f16, $f13 -> $f17, $f14 -> $f18))

CHCData { predNames: {}, varTypes: {$f19: Int} }
id14($f19):>> Add(id0: ($f0 -> $f19), id9: ())
 - Add(id0: ($f0 -> $f19), id9: ())

CHCData { predNames: {}, varTypes: {$f20: Int, $f21: Int} }
id15($f20, $f21):>> Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))
 - Eq(id0: ($f0 -> $f20), id14: ($f19 -> $f21))

CHCData { predNames: {}, varTypes: {$f27: Int, $f22: Int, $f25: Node, $f24: Int, $f23: Int, $f26: Node} }
id16($f22, $f23, $f24, $f25, $f26, $f27):>> And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])
 - And([id13: ($f15 -> $f22, $f16 -> $f24, $f17 -> $f25, $f18 -> $f26), id15: ($f20 -> $f23, $f21 -> $f27)])

CHCData { predNames: {}, varTypes: {$f29: Int, $f28: Node} }
id17($f28, $f29):>> PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])
 - PredSyntax([id11: ($f11 -> $f28), id0: ($f0 -> $f29)])

CHCData { predNames: {"minLeaf"}, varTypes: {$f31: Int, $f30: Node} }
id18($f30, $f31):>> Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))
 - Init(id8: (), id17: ($f28 -> $f30, $f29 -> $f31))

CHCData { predNames: {}, varTypes: {} }
id19():>> PredName("min")
 - PredName("min")

CHCData { predNames: {}, varTypes: {$f32: Int, $f34: Int, $f33: Int} }
id20($f32, $f33, $f34):>> PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])
 - PredSyntax([id0: ($f0 -> $f32), id0: ($f0 -> $f33), id0: ($f0 -> $f34)])

CHCData { predNames: {"min"}, varTypes: {$f36: Int, $f37: Int, $f35: Int} }
id21($f35, $f36, $f37):>> Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))
 - Init(id19: (), id20: ($f32 -> $f35, $f33 -> $f36, $f34 -> $f37))

CHCData { predNames: {}, varTypes: {} }
id23():>> Number(2)
 - Number(2)

CHCData { predNames: {"minLeaf"}, varTypes: {$f202: Int, $f54: Int, $f184: Node, $f167: Int, $f186: Int, $f226: Int, $f145: Int, $f164: Node, $f204: Node, $f223: Node, $f46: Int, $f47: Int, $f165: Int, $f56: Node, $f57: Int, $f162: Int, $f144: Node, $f203: Node, $f182: Int, $f146: Int, $f224: Node, $f207: Int, $f163: Node, $f58: Int, $f206: Int, $f205: Int, $f187: Int, $f185: Int, $f225: Int, $f55: Node, $f183: Node, $f166: Int, $f142: Int, $f59: Int, $f227: Int, $f222: Int, $f143: Node, $f147: Int} }
id24($f46, $f47):>> Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f162, $f25 -> $f163, $f26 -> $f164, $f27 -> $f165), [AppliedId(id18: ($f30 -> $f164, $f31 -> $f166)), AppliedId(id21: ($f35 -> $f167, $f36 -> $f166, $f37 -> $f165)), AppliedId(id18: ($f30 -> $f163, $f31 -> $f167))])
 - Interface(id8: (), id1: ($f1 -> $f46, $f2 -> $f47), id23: ())
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f54, $f25 -> $f55, $f26 -> $f56, $f27 -> $f57), [AppliedId(id18: ($f30 -> $f55, $f31 -> $f58)), AppliedId(id18: ($f30 -> $f56, $f31 -> $f59)), AppliedId(id21: ($f35 -> $f58, $f36 -> $f59, $f37 -> $f57))])
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f202, $f25 -> $f203, $f26 -> $f204, $f27 -> $f205), [AppliedId(id21: ($f35 -> $f206, $f36 -> $f207, $f37 -> $f205)), AppliedId(id18: ($f30 -> $f203, $f31 -> $f206)), AppliedId(id18: ($f30 -> $f204, $f31 -> $f207))])
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f182, $f25 -> $f183, $f26 -> $f184, $f27 -> $f185), [AppliedId(id18: ($f30 -> $f183, $f31 -> $f186)), AppliedId(id21: ($f35 -> $f186, $f36 -> $f187, $f37 -> $f185)), AppliedId(id18: ($f30 -> $f184, $f31 -> $f187))])
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f222, $f25 -> $f223, $f26 -> $f224, $f27 -> $f225), [AppliedId(id21: ($f35 -> $f226, $f36 -> $f227, $f37 -> $f225)), AppliedId(id18: ($f30 -> $f224, $f31 -> $f227)), AppliedId(id18: ($f30 -> $f223, $f31 -> $f226))])
 - New(id1: ($f1 -> $f46, $f2 -> $f47), id16: ($f22 -> $f46, $f23 -> $f47, $f24 -> $f142, $f25 -> $f143, $f26 -> $f144, $f27 -> $f145), [AppliedId(id18: ($f30 -> $f144, $f31 -> $f146)), AppliedId(id18: ($f30 -> $f143, $f31 -> $f147)), AppliedId(id21: ($f35 -> $f147, $f36 -> $f146, $f37 -> $f145))])

CHCData { predNames: {}, varTypes: {$f229: Int, $f228: Int} }
id31($f228, $f229):>> Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
 - Compose([AppliedId(id24: ($f46 -> $f228, $f47 -> $f229)), AppliedId(id10: ($f9 -> $f228, $f10 -> $f229))])
 - Compose([AppliedId(id10: ($f9 -> $f228, $f10 -> $f229)), AppliedId(id24: ($f46 -> $f228, $f47 -> $f229))])

CHCData { predNames: {}, varTypes: {$f230: Node} }
id32($f230):>> PredSyntax([id11: ($f11 -> $f230)])
 - PredSyntax([id11: ($f11 -> $f230)])

CHCData { predNames: {}, varTypes: {} }
id33():>> True
 - True

CHCData { predNames: {}, varTypes: {$f231: Node, $f232: Int} }
id34($f231, $f232):>> New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])
 - New(id32: ($f230 -> $f231), id33: (), [AppliedId(id18: ($f30 -> $f231, $f31 -> $f232))])

CHCData { predNames: {}, varTypes: {$f233: Node, $f234: Int} }
id35($f233, $f234):>> Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
 - Compose([AppliedId(id34: ($f231 -> $f233, $f232 -> $f234))])
test chc::tst::tst3 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 73 filtered out; finished in 0.48s

